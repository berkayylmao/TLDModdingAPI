// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Microsoft::Win32 {
struct __RegistryKey_Il2CppStaticFields {
  ModdingAPI::Exposed::Microsoft::Win32::IRegistryApi* RegistryApi;
};

struct __RegistryKey_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_CreateObjRef;
  VirtualInvokeData _5_InitializeLifetimeService;
  VirtualInvokeData _6_Dispose;
};

struct __RegistryKey_Il2CppClass {
  Il2CppClass_1 _1;
  __RegistryKey_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __RegistryKey_Il2CppVtbl vtbl;
};

class RegistryKey {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C63B80;
  static inline    __RegistryKey_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __RegistryKey_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__RegistryKey_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __RegistryKey_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  Il2CppObject* MarshalByRefObject__identity;
  Il2CppObject* handle;
  ModdingAPI::Exposed::Microsoft::Win32::SafeHandles::SafeRegistryHandle* safe_handle;
  Il2CppObject* hive;
  System_String* qname;
  bool isRemoteRoot;
  bool isWritable;

  // Member methods:
  void ::ctor(int32_t hiveId) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAD1B0))(this, hiveId);
  }
  void ::ctor(int32_t hiveId, intptr_t keyHandle, bool remoteRoot) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*, int32_t, intptr_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAD1D0))(this, hiveId, keyHandle, remoteRoot);
  }
  void ::ctor(Il2CppObject* data, System_String* keyName, bool writable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*, Il2CppObject*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAD410))(this, data, keyName, writable);
  }
  void Dispose() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAD4B0))(this);
  }
  System_String* get_Name() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335370))(this);
  }
  void Flush() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAD6B0))(this);
  }
  void Close() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAD770))(this);
  }
  ModdingAPI::Exposed::Microsoft::Win32::SafeHandles::SafeRegistryHandle* get_Handle() {
    return reinterpret_cast<ModdingAPI::Exposed::Microsoft::Win32::SafeHandles::SafeRegistryHandle*(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAD8F0))(this);
  }
  ModdingAPI::Exposed::Microsoft::Win32::RegistryKey* OpenSubKey(System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDADB10))(this, name);
  }
  ModdingAPI::Exposed::Microsoft::Win32::RegistryKey* OpenSubKey(System_String* name, bool writable) {
    return reinterpret_cast<ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDADB20))(this, name, writable);
  }
  Il2CppObject* GetValue(System_String* name) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDADD50))(this, name);
  }
  Il2CppObject* GetValue(System_String* name, Il2CppObject* defaultValue) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*, System_String*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDADEB0))(this, name, defaultValue);
  }
  ModdingAPI::Exposed::System::String_array* GetSubKeyNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAE020))(this);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAE160))(this);
  }
  bool get_IsRoot() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x940CB0))(this);
  }
  int32_t get_Hive() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAE2A0))(this);
  }
  Il2CppObject* get_InternalHandle() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  void AssertKeyStillValid() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAE370))(this);
  }
  void AssertKeyNameLength(System_String* name) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAE420))(this, name);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::Microsoft::Win32::IRegistryApi*> RegistryApi = __CppStaticProperty<ModdingAPI::Exposed::Microsoft::Win32::IRegistryApi*>(
   []() { return &GetStaticClassInstance()->pStaticFields->RegistryApi; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xDACEE0))();
  }
  static inline bool IsEquals(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey* a, ModdingAPI::Exposed::Microsoft::Win32::RegistryKey* b) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*, ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAD420))(a, b);
  }
  static inline System_String* DecodeString(ModdingAPI::Exposed::System::Byte_array* data) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAE4E0))(data);
  }
  static inline ModdingAPI::Exposed::System::IO::IOException* CreateMarkedForDeletionException() {
    return reinterpret_cast<ModdingAPI::Exposed::System::IO::IOException*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAE5E0))();
  }
  static inline System_String* GetHiveName(int32_t hive) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAE640))(hive);
  }
};
}