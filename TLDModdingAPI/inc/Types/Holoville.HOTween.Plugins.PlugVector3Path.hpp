// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed::Holoville::HOTween::Plugins {
struct __PlugVector3Path_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Type_array* validPropTypes;
  ModdingAPI::Exposed::System::Type_array* validValueTypes;
};

struct __PlugVector3Path_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_startVal;
  VirtualInvokeData _5_set_startVal;
  VirtualInvokeData _6_set_endVal;
  VirtualInvokeData _7_get_pluginId;
  VirtualInvokeData _8_Init;
  VirtualInvokeData _9_ValidateTarget;
  VirtualInvokeData _10_DoUpdate;
  VirtualInvokeData _11_Rewind;
  VirtualInvokeData _12_Complete;
  VirtualInvokeData _13_GetSpeedBasedDuration;
  VirtualInvokeData _14_SetChangeVal;
  VirtualInvokeData _15_SetIncremental;
  VirtualInvokeData _16_SetIncrementalRestart;
  VirtualInvokeData _17_SetValue;
  VirtualInvokeData _18_SetValue;
  VirtualInvokeData _19_SetValue;
  VirtualInvokeData _20_SetValue;
  VirtualInvokeData _21_SetValue;
  VirtualInvokeData _22_SetValue;
  VirtualInvokeData _23_SetValue;
  VirtualInvokeData _24_GetValue;
};

struct __PlugVector3Path_Il2CppClass {
  Il2CppClass_1 _1;
  __PlugVector3Path_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __PlugVector3Path_Il2CppVtbl vtbl;
};

class PlugVector3Path {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C84718;
  static inline    __PlugVector3Path_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __PlugVector3Path_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__PlugVector3Path_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __PlugVector3Path_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  Il2CppObject* _startVal;
  Il2CppObject* _endVal;
  float _duration;
  bool ABSTweenPlugin__initialized;
  bool ABSTweenPlugin__easeReversed;
  System_String* _propName;
  ModdingAPI::Exposed::System::Type* targetType;
  ModdingAPI::Exposed::Holoville::HOTween::Core::TweenDelegate::EaseFunc* ease;
  bool isRelative;
  bool ignoreAccessor;
  int32_t ABSTweenPlugin_easeType;
  ModdingAPI::Exposed::Holoville::HOTween::Core::EaseInfo* ABSTweenPlugin_easeInfo;
  ModdingAPI::Exposed::Holoville::HOTween::Core::Easing::EaseCurve* ABSTweenPlugin_easeCurve;
  bool wasStarted;
  bool ABSTweenPlugin_speedBasedDurationWasSet;
  int32_t ABSTweenPlugin_prevCompletedLoops;
  bool ABSTweenPlugin__useSpeedTransformAccessors;
  ModdingAPI::Exposed::UnityEngine::Transform* ABSTweenPlugin__transformTarget;
  ModdingAPI::Exposed::Holoville::HOTween::Core::TweenDelegate::HOAction_T_* ABSTweenPlugin__setTransformVector3;
  ModdingAPI::Exposed::Holoville::HOTween::Core::TweenDelegate::HOFunc_T_* ABSTweenPlugin__getTransformVector3;
  ModdingAPI::Exposed::Holoville::HOTween::Core::TweenDelegate::HOAction_T_* ABSTweenPlugin__setTransformQuaternion;
  ModdingAPI::Exposed::Holoville::HOTween::Core::TweenDelegate::HOFunc_T_* ABSTweenPlugin__getTransformQuaternion;
  ModdingAPI::Exposed::System::Reflection::PropertyInfo* propInfo;
  ModdingAPI::Exposed::System::Reflection::FieldInfo* fieldInfo;
  ModdingAPI::Exposed::Holoville::HOTween::Tweener* tweenObj;
  ModdingAPI::Exposed::Holoville::HOTween::Core::Path* path;
  float pathPerc;
  bool hasAdditionalStartingP;
  ModdingAPI::Exposed::UnityEngine::Vector3 typedStartVal;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* points;
  ModdingAPI::Exposed::UnityEngine::Vector3 diffChangeVal;
  bool isClosedPath;
  bool is2D;
  bool is2DsideScroller;
  int32_t orientType;
  float lookAheadVal;
  int32_t lockPositionAxis;
  int32_t lockRotationAxis;
  bool isPartialPath;
  bool usesLocalPosition;
  float startPerc;
  float changePerc;
  ModdingAPI::Exposed::UnityEngine::Vector3 lookPos;
  ModdingAPI::Exposed::UnityEngine::Transform* lookTrans;
  ModdingAPI::Exposed::UnityEngine::Transform* orientTrans;
  float orZ;
  int32_t _pathType_k__BackingField;

  // Member methods:
  int32_t get_pathType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x400B90))(this);
  }
  void set_pathType(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xADB2E0))(this, value);
  }
  Il2CppObject* get_startVal() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  void set_startVal(Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1176860))(this, value);
  }
  void set_endVal(Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11769F0))(this, value);
  }
  void ::ctor(ModdingAPI::Exposed::UnityEngine::Vector3_array* p_path, bool p_isRelative, int32_t p_type) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*, ModdingAPI::Exposed::UnityEngine::Vector3_array*, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1176B70))(this, p_path, p_isRelative, p_type);
  }
  void Init(ModdingAPI::Exposed::Holoville::HOTween::Tweener* p_tweenObj, System_String* p_propertyName, int32_t p_easeType, ModdingAPI::Exposed::System::Type* p_targetType, ModdingAPI::Exposed::System::Reflection::PropertyInfo* p_propertyInfo, ModdingAPI::Exposed::System::Reflection::FieldInfo* p_fieldInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*, ModdingAPI::Exposed::Holoville::HOTween::Tweener*, System_String*, int32_t, ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Reflection::PropertyInfo*, ModdingAPI::Exposed::System::Reflection::FieldInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1176BA0))(this, p_tweenObj, p_propertyName, p_easeType, p_targetType, p_propertyInfo, p_fieldInfo);
  }
  ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path* ClosePath(bool p_close) {
    return reinterpret_cast<ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1176EB0))(this, p_close);
  }
  ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path* OrientToPath(float p_lookAhead, int32_t p_lockRotationAxis) {
    return reinterpret_cast<ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1176EC0))(this, p_lookAhead, p_lockRotationAxis);
  }
  ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path* OrientToPath(bool p_orient, float p_lookAhead, int32_t p_lockRotationAxis) {
    return reinterpret_cast<ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*, bool, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1176F10))(this, p_orient, p_lookAhead, p_lockRotationAxis);
  }
  ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path* LockPosition(int32_t p_lockAxis) {
    return reinterpret_cast<ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1176F60))(this, p_lockAxis);
  }
  ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path* Is2D(bool p_isSideScroller) {
    return reinterpret_cast<ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1176F70))(this, p_isSideScroller);
  }
  float GetSpeedBasedDuration(float p_speed) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1176F90))(this, p_speed);
  }
  void SetChangeVal() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1176FC0))(this);
  }
  void SetIncremental(int32_t p_diffIncr) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1177B20))(this, p_diffIncr);
  }
  void SetIncrementalRestart() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1177CE0))(this);
  }
  void DoUpdate(float p_totElapsed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1177F30))(this, p_totElapsed);
  }
  void Rewind() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1178F20))(this);
  }
  void Complete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1178F80))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetConstPointOnPath(float t) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1178FC0))(this, t);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetConstPointOnPath(float t, bool p_updatePathPerc, ModdingAPI::Exposed::Holoville::HOTween::Core::Path* p_path, int32_t out_waypointIndex) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*, float, bool, ModdingAPI::Exposed::Holoville::HOTween::Core::Path*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1179040))(this, t, p_updatePathPerc, p_path, out_waypointIndex);
  }
  float GetWaypointsLengthPercentage(int32_t p_pathWaypointId0, int32_t p_pathWaypointId1) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1179150))(this, p_pathWaypointId0, p_pathWaypointId1);
  }
  void SwitchToPartialPath(float p_duration, int32_t p_easeType, float p_partialStartPerc, float p_partialChangePerc) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Holoville::HOTween::Plugins::PlugVector3Path*, float, int32_t, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1179300))(this, p_duration, p_easeType, p_partialStartPerc, p_partialChangePerc);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Type_array*> validPropTypes = __CppStaticProperty<ModdingAPI::Exposed::System::Type_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->validPropTypes; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Type_array*> validValueTypes = __CppStaticProperty<ModdingAPI::Exposed::System::Type_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->validValueTypes; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1179350))();
  }
};
}