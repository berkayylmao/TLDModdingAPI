// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __NPCCondition_Il2CppStaticFields {
};

struct __NPCCondition_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __NPCCondition_Il2CppClass {
  Il2CppClass_1 _1;
  __NPCCondition_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __NPCCondition_Il2CppVtbl vtbl;
};

class NPCCondition {
public:
  // Il2Cpp fields:
  __NPCCondition_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_CurrentHP;
  float m_MaxHP;
  float m_CriticalHP;
  float m_HPIncreasePerDayWhileHealthy;
  float m_HPDecreasePerDayFromFreezing;
  float m_HPDecreasePerDayFromDehydration;
  float m_HPDecreasePerDayFromBloodLoss;
  System_String* m_NearDeathVoiceOver;
  System_String* m_WolfAttackVoiceOver;
  ModdingAPI::Exposed::NPC* m_NPC;
  int32_t m_LastDamageSource;
  int32_t m_LastVOLevel;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCCondition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E82450))(this);
  }
  void DoUpdate(float deltaTODHours) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCCondition*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E82490))(this, deltaTODHours);
  }
  void UpdateHealthForFreezing(float dayFraction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCCondition*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E82770))(this, dayFraction);
  }
  void UpdateHealthForDehydration(float dayFraction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCCondition*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E82790))(this, dayFraction);
  }
  void UpdateHealthForHealthy(float dayFraction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCCondition*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E827B0))(this, dayFraction);
  }
  void UpdateHeathForBloodLoss(float dayFraction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCCondition*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E82940))(this, dayFraction);
  }
  bool IsAlive() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NPCCondition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E829A0))(this);
  }
  float GetNormalizedCondition() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::NPCCondition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162A920))(this);
  }
  float GetAdjustedMaxHP() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::NPCCondition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E82A50))(this);
  }
  void Deserialize(System_String* serialized) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCCondition*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E82B80))(this, serialized);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::NPCCondition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E82C70))(this);
  }
  void AddHealth(float amount) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCCondition*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E82DE0))(this, amount);
  }
  void ApplyDamage(int32_t source, float damage) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCCondition*, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E830A0))(this, source, damage);
  }
  int32_t GetCurrentConditionLevel() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::NPCCondition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E83210))(this);
  }
  void HandleDeath() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCCondition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E83250))(this);
  }
  void MaybePlayVoiceOver() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCCondition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E833B0))(this);
  }
  void EndBloodLoss() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCCondition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCCondition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }
};
}