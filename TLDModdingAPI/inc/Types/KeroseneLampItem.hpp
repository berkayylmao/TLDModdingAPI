// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed {
struct __KeroseneLampItem_Il2CppStaticFields {
  bool m_InfiniteLampOn;
  ModdingAPI::Exposed::KeroseneLampItemSaveDataProxy* m_KeroseneLampItemSaveDataProxy;
};

struct __KeroseneLampItem_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __KeroseneLampItem_Il2CppClass {
  Il2CppClass_1 _1;
  __KeroseneLampItem_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __KeroseneLampItem_Il2CppVtbl vtbl;
};

class KeroseneLampItem {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C93CA8;
  static inline    __KeroseneLampItem_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __KeroseneLampItem_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__KeroseneLampItem_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __KeroseneLampItem_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_MaxFuelLiters;
  float m_FuelBurnLitersPerHour;
  float m_TurnOnEffectsDelay;
  float m_TurnOffDelay;
  System_String* m_TurnOnAudio;
  System_String* m_ExtinguishStartAudio;
  System_String* m_TurnOffAudio;
  System_String* m_LoopAudioWithDelay;
  System_String* m_LoopAudio;
  float m_RefuelTimeSeconds;
  System_String* m_RefuelAudio;
  float m_TurnOnEffectsTimer;
  float m_CurrentFuelLiters;
  ModdingAPI::Exposed::KeroseneLampIntensity* m_IntensityComponent;
  ModdingAPI::Exposed::UnityEngine::Color m_Color;
  uint32_t m_TurnOnAudioID;
  uint32_t m_ExtinguishStartAudioID;
  uint32_t m_LoopAudioID;
  bool m_On;
  bool m_TurnOnComplete;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FXGameObject;
  ModdingAPI::Exposed::UnityEngine::Light* m_LightIndoor;
  ModdingAPI::Exposed::UnityEngine::Light* m_LightIndoorCore;
  ModdingAPI::Exposed::UnityEngine::Light* m_LightOutdoor;
  float m_TurnOffTimer;
  bool m_TurningOff;
  ModdingAPI::Exposed::HeatSource* m_HeatSource;
  float m_TimeToBreak;
  ModdingAPI::Exposed::GearItem* m_GearItem;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x187E930))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x187EE60))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x187F2A0))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x187F430))(this, text);
  }
  bool IsOn() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x187F620))(this);
  }
  void TurnOnAfterDelay() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x187F630))(this);
  }
  void TurnOn(bool supressStartAudio) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x187F640))(this, supressStartAudio);
  }
  void TurnOff(bool playAudio) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x187F980))(this, playAudio);
  }
  void TurnOffDelayed() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x187FC80))(this);
  }
  void OnExtinguishCompleteCallback() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x187FF70))(this);
  }
  void Toggle() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x187FF80))(this);
  }
  void CancelAction() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1880430))(this);
  }
  float AddFuel(float fuelLiters) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1880670))(this, fuelLiters);
  }
  float GetMaxFuelToAdd() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1880760))(this);
  }
  float GetPercentFuelRemaining() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1880770))(this);
  }
  void DestroyHeatSource() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1880850))(this);
  }
  void HideEffects(bool hide) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1880920))(this, hide);
  }
  float GetModifiedFuelBurnLitersPerHour() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE2AB0))(this);
  }
  void OnDroppedInWater() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18809C0))(this);
  }
  void StopLoopingAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18809D0))(this);
  }
  void ReduceFuel(float hoursBurned) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1880AD0))(this, hoursBurned);
  }
  void UpdateLoopingAudioPosition() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1880BE0))(this);
  }
  void UpdateEffects() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1880D80))(this);
  }
  void OnIgniteComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18810D0))(this);
  }
  bool IsIgnitingOrExtinguishing() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18811E0))(this);
  }
  void PlayerSparkParticlesOnSpecific(ModdingAPI::Exposed::UnityEngine::GameObject* turningOnFX) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1881210))(this, turningOnFX);
  }
  void PlaySparkParticles() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1881550))(this);
  }
  void StopSparkParticles() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18818C0))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1881E10))(this);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1881F20))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1881F20))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<bool> m_InfiniteLampOn = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_InfiniteLampOn; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::KeroseneLampItemSaveDataProxy*> m_KeroseneLampItemSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::KeroseneLampItemSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_KeroseneLampItemSaveDataProxy; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1881F30))();
  }
};
}