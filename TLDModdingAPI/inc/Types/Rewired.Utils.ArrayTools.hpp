// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Rewired::Utils {
struct __ArrayTools_Il2CppStaticFields {
};

struct __ArrayTools_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ArrayTools_Il2CppClass {
  Il2CppClass_1 _1;
  __ArrayTools_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ArrayTools_Il2CppVtbl vtbl;
};

class ArrayTools {
public:
  // Il2Cpp fields:
  __ArrayTools_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline ModdingAPI::Exposed::System::Int32_array* ConvertToIntArray(ModdingAPI::Exposed::System::Array* array) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Int32_array*(__fastcall*)(ModdingAPI::Exposed::System::Array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB42BC0))(array);
  }
  static inline void ShallowCopy(ModdingAPI::Exposed::System::Int32_array* sourceArray, ModdingAPI::Exposed::System::Int32_array* targetArray) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Int32_array*, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB42EE0))(sourceArray, targetArray);
  }
  static inline void ShallowCopy(ModdingAPI::Exposed::System::Single_array* sourceArray, ModdingAPI::Exposed::System::Single_array* targetArray) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Single_array*, ModdingAPI::Exposed::System::Single_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB42FB0))(sourceArray, targetArray);
  }
  static inline void ShallowCopy(ModdingAPI::Exposed::System::Boolean_array* sourceArray, ModdingAPI::Exposed::System::Boolean_array* targetArray) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Boolean_array*, ModdingAPI::Exposed::System::Boolean_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB430A0))(sourceArray, targetArray);
  }
  static inline ModdingAPI::Exposed::System::Byte_array* CopyRange(ModdingAPI::Exposed::System::Byte_array* inArray, int32_t startPos, int32_t length) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB43190))(inArray, startPos, length);
  }
  static inline ModdingAPI::Exposed::System::Int32_array* CopyRange(ModdingAPI::Exposed::System::Int32_array* inArray, int32_t startPos, int32_t length) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Int32_array*(__fastcall*)(ModdingAPI::Exposed::System::Int32_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB432E0))(inArray, startPos, length);
  }
  static inline ModdingAPI::Exposed::System::Single_array* CopyRange(ModdingAPI::Exposed::System::Single_array* inArray, int32_t startPos, int32_t length) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Single_array*(__fastcall*)(ModdingAPI::Exposed::System::Single_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB43440))(inArray, startPos, length);
  }
  static inline ModdingAPI::Exposed::System::String_array* CopyRange(ModdingAPI::Exposed::System::String_array* inArray, int32_t startPos, int32_t length) {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::String_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB435B0))(inArray, startPos, length);
  }
  static inline ModdingAPI::Exposed::System::Byte_array* Combine(ModdingAPI::Exposed::System::Byte_array* inArray1, ModdingAPI::Exposed::System::Byte_array* inArray2) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB43780))(inArray1, inArray2);
  }
  static inline ModdingAPI::Exposed::System::Int32_array* Combine(ModdingAPI::Exposed::System::Int32_array* inArray1, ModdingAPI::Exposed::System::Int32_array* inArray2) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Int32_array*(__fastcall*)(ModdingAPI::Exposed::System::Int32_array*, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB43AA0))(inArray1, inArray2);
  }
  static inline ModdingAPI::Exposed::System::Single_array* Combine(ModdingAPI::Exposed::System::Single_array* inArray1, ModdingAPI::Exposed::System::Single_array* inArray2) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Single_array*(__fastcall*)(ModdingAPI::Exposed::System::Single_array*, ModdingAPI::Exposed::System::Single_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB43D50))(inArray1, inArray2);
  }
  static inline ModdingAPI::Exposed::System::String_array* Combine(ModdingAPI::Exposed::System::String_array* inArray1, ModdingAPI::Exposed::System::String_array* inArray2) {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::System::String_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB43FF0))(inArray1, inArray2);
  }
  static inline void Trim(ModdingAPI::Exposed::System::String_array* array) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::String_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB44350))(array);
  }
  static inline ModdingAPI::Exposed::UnityEngine::RaycastHit_array* SortNearToFar(ModdingAPI::Exposed::UnityEngine::RaycastHit_array* hits) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::RaycastHit_array*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::RaycastHit_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB44460))(hits);
  }
  static inline int32_t IndexOf(ModdingAPI::Exposed::System::Int32_array* array, int32_t value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Int32_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB44960))(array, value);
  }
  static inline int32_t IndexOf(ModdingAPI::Exposed::System::Single_array* array, float value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Single_array*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB449F0))(array, value);
  }
  static inline int32_t IndexOf(ModdingAPI::Exposed::System::Int16_array* array, int16_t value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Int16_array*, int16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB44AB0))(array, value);
  }
  static inline int32_t IndexOf(ModdingAPI::Exposed::System::UInt16_array* array, uint16_t value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::UInt16_array*, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB44B40))(array, value);
  }
  static inline int32_t IndexOf(ModdingAPI::Exposed::System::UInt32_array* array, uint32_t value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::UInt32_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB44C00))(array, value);
  }
  static inline int32_t IndexOf(ModdingAPI::Exposed::System::Double_array* array, double value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Double_array*, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB44C90))(array, value);
  }
  static inline int32_t IndexOf(ModdingAPI::Exposed::System::Boolean_array* array, bool value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Boolean_array*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB44D20))(array, value);
  }
  static inline int32_t IndexOf(ModdingAPI::Exposed::System::String_array* array, System_String* value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::String_array*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB44DA0))(array, value);
  }
  static inline int32_t IndexOf(ModdingAPI::Exposed::System::String_array* array, System_String* value, ModdingAPI::Exposed::System::StringComparison stringComparison) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::String_array*, System_String*, ModdingAPI::Exposed::System::StringComparison)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB44E50))(array, value, stringComparison);
  }
  static inline bool IsEqual(ModdingAPI::Exposed::System::Byte_array* a1, ModdingAPI::Exposed::System::Byte_array* a2) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB44F00))(a1, a2);
  }
  static inline bool Contains(ModdingAPI::Exposed::System::String_array* array, System_String* item, bool ignoreCase) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::String_array*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB44FD0))(array, item, ignoreCase);
  }
  static inline int32_t AddIfUnique(ModdingAPI::Exposed::System::String_array* array, System_String* item, bool ignoreCase) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::String_array*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB451E0))(array, item, ignoreCase);
  }
  static inline void RemoveDuplicates(ModdingAPI::Exposed::System::String_array* array, bool ignoreCase) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::String_array*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB45400))(array, ignoreCase);
  }
  static inline bool Remove(ModdingAPI::Exposed::System::String_array* array, System_String* item, bool ignoreCase) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::String_array*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB45520))(array, item, ignoreCase);
  }
  static inline ModdingAPI::Exposed::System::String_array* ToLowerStripSpaces(ModdingAPI::Exposed::System::String_array* array) {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::String_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB45950))(array);
  }
  static inline int32_t ToBitmask(ModdingAPI::Exposed::System::Boolean_array* array, int32_t startIndex, int32_t count) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Boolean_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB45BA0))(array, startIndex, count);
  }
};
}