// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"
#include "ModdingAPI::Exposed::Pathfinding::Int3.hpp"
#include "ModdingAPI::Exposed::Pathfinding::Int2.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Bounds.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Matrix4x4.hpp"


namespace ModdingAPI::Exposed::Pathfinding {
struct __VectorMath_Il2CppStaticFields {
};

struct __VectorMath_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __VectorMath_Il2CppClass {
  Il2CppClass_1 _1;
  __VectorMath_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __VectorMath_Il2CppVtbl vtbl;
};

class VectorMath {
public:
  // Il2Cpp fields:
  __VectorMath_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 ClosestPointOnLine(ModdingAPI::Exposed::UnityEngine::Vector3 lineStart, ModdingAPI::Exposed::UnityEngine::Vector3 lineEnd, ModdingAPI::Exposed::UnityEngine::Vector3 point) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2451090))(lineStart, lineEnd, point);
  }
  static inline float ClosestPointOnLineFactor(ModdingAPI::Exposed::UnityEngine::Vector3 lineStart, ModdingAPI::Exposed::UnityEngine::Vector3 lineEnd, ModdingAPI::Exposed::UnityEngine::Vector3 point) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2451280))(lineStart, lineEnd, point);
  }
  static inline float ClosestPointOnLineFactor(ModdingAPI::Exposed::Pathfinding::Int3 lineStart, ModdingAPI::Exposed::Pathfinding::Int3 lineEnd, ModdingAPI::Exposed::Pathfinding::Int3 point) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2451450))(lineStart, lineEnd, point);
  }
  static inline float ClosestPointOnLineFactor(ModdingAPI::Exposed::Pathfinding::Int2 lineStart, ModdingAPI::Exposed::Pathfinding::Int2 lineEnd, ModdingAPI::Exposed::Pathfinding::Int2 point) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int2, ModdingAPI::Exposed::Pathfinding::Int2, ModdingAPI::Exposed::Pathfinding::Int2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24515E0))(lineStart, lineEnd, point);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 ClosestPointOnSegment(ModdingAPI::Exposed::UnityEngine::Vector3 lineStart, ModdingAPI::Exposed::UnityEngine::Vector3 lineEnd, ModdingAPI::Exposed::UnityEngine::Vector3 point) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2451730))(lineStart, lineEnd, point);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 ClosestPointOnSegmentXZ(ModdingAPI::Exposed::UnityEngine::Vector3 lineStart, ModdingAPI::Exposed::UnityEngine::Vector3 lineEnd, ModdingAPI::Exposed::UnityEngine::Vector3 point) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24519A0))(lineStart, lineEnd, point);
  }
  static inline float SqrDistancePointSegmentApproximate(int32_t x, int32_t z, int32_t px, int32_t pz, int32_t qx, int32_t qz) {
    return reinterpret_cast<float(__fastcall*)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2451D70))(x, z, px, pz, qx, qz);
  }
  static inline float SqrDistancePointSegmentApproximate(ModdingAPI::Exposed::Pathfinding::Int3 a, ModdingAPI::Exposed::Pathfinding::Int3 b, ModdingAPI::Exposed::Pathfinding::Int3 p) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2451E50))(a, b, p);
  }
  static inline float SqrDistancePointSegment(ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b, ModdingAPI::Exposed::UnityEngine::Vector3 p) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2451F80))(a, b, p);
  }
  static inline float SqrDistanceSegmentSegment(ModdingAPI::Exposed::UnityEngine::Vector3 s1, ModdingAPI::Exposed::UnityEngine::Vector3 e1, ModdingAPI::Exposed::UnityEngine::Vector3 s2, ModdingAPI::Exposed::UnityEngine::Vector3 e2) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24520E0))(s1, e1, s2, e2);
  }
  static inline float SqrDistanceXZ(ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2452590))(a, b);
  }
  static inline int64_t SignedTriangleAreaTimes2XZ(ModdingAPI::Exposed::Pathfinding::Int3 a, ModdingAPI::Exposed::Pathfinding::Int3 b, ModdingAPI::Exposed::Pathfinding::Int3 c) {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2452680))(a, b, c);
  }
  static inline float SignedTriangleAreaTimes2XZ(ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b, ModdingAPI::Exposed::UnityEngine::Vector3 c) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2452700))(a, b, c);
  }
  static inline bool RightXZ(ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b, ModdingAPI::Exposed::UnityEngine::Vector3 p) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2452780))(a, b, p);
  }
  static inline bool RightXZ(ModdingAPI::Exposed::Pathfinding::Int3 a, ModdingAPI::Exposed::Pathfinding::Int3 b, ModdingAPI::Exposed::Pathfinding::Int3 p) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2452810))(a, b, p);
  }
  static inline bool RightOrColinear(ModdingAPI::Exposed::UnityEngine::Vector2 a, ModdingAPI::Exposed::UnityEngine::Vector2 b, ModdingAPI::Exposed::UnityEngine::Vector2 p) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24528A0))(a, b, p);
  }
  static inline bool RightOrColinear(ModdingAPI::Exposed::Pathfinding::Int2 a, ModdingAPI::Exposed::Pathfinding::Int2 b, ModdingAPI::Exposed::Pathfinding::Int2 p) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int2, ModdingAPI::Exposed::Pathfinding::Int2, ModdingAPI::Exposed::Pathfinding::Int2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2452900))(a, b, p);
  }
  static inline bool RightOrColinearXZ(ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b, ModdingAPI::Exposed::UnityEngine::Vector3 p) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2452940))(a, b, p);
  }
  static inline bool RightOrColinearXZ(ModdingAPI::Exposed::Pathfinding::Int3 a, ModdingAPI::Exposed::Pathfinding::Int3 b, ModdingAPI::Exposed::Pathfinding::Int3 p) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24529D0))(a, b, p);
  }
  static inline bool IsClockwiseMarginXZ(ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b, ModdingAPI::Exposed::UnityEngine::Vector3 c) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2452A60))(a, b, c);
  }
  static inline bool IsClockwiseXZ(ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b, ModdingAPI::Exposed::UnityEngine::Vector3 c) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2452AF0))(a, b, c);
  }
  static inline bool IsClockwiseXZ(ModdingAPI::Exposed::Pathfinding::Int3 a, ModdingAPI::Exposed::Pathfinding::Int3 b, ModdingAPI::Exposed::Pathfinding::Int3 c) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2452810))(a, b, c);
  }
  static inline bool IsClockwiseOrColinearXZ(ModdingAPI::Exposed::Pathfinding::Int3 a, ModdingAPI::Exposed::Pathfinding::Int3 b, ModdingAPI::Exposed::Pathfinding::Int3 c) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24529D0))(a, b, c);
  }
  static inline bool IsClockwiseOrColinear(ModdingAPI::Exposed::Pathfinding::Int2 a, ModdingAPI::Exposed::Pathfinding::Int2 b, ModdingAPI::Exposed::Pathfinding::Int2 c) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int2, ModdingAPI::Exposed::Pathfinding::Int2, ModdingAPI::Exposed::Pathfinding::Int2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2452900))(a, b, c);
  }
  static inline bool IsColinearXZ(ModdingAPI::Exposed::Pathfinding::Int3 a, ModdingAPI::Exposed::Pathfinding::Int3 b, ModdingAPI::Exposed::Pathfinding::Int3 c) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2452B80))(a, b, c);
  }
  static inline bool IsColinearXZ(ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b, ModdingAPI::Exposed::UnityEngine::Vector3 c) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2452C10))(a, b, c);
  }
  static inline bool IsColinearAlmostXZ(ModdingAPI::Exposed::Pathfinding::Int3 a, ModdingAPI::Exposed::Pathfinding::Int3 b, ModdingAPI::Exposed::Pathfinding::Int3 c) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2452CB0))(a, b, c);
  }
  static inline bool SegmentsIntersect(ModdingAPI::Exposed::Pathfinding::Int2 start1, ModdingAPI::Exposed::Pathfinding::Int2 end1, ModdingAPI::Exposed::Pathfinding::Int2 start2, ModdingAPI::Exposed::Pathfinding::Int2 end2) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int2, ModdingAPI::Exposed::Pathfinding::Int2, ModdingAPI::Exposed::Pathfinding::Int2, ModdingAPI::Exposed::Pathfinding::Int2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2452D40))(start1, end1, start2, end2);
  }
  static inline bool SegmentsIntersectXZ(ModdingAPI::Exposed::Pathfinding::Int3 start1, ModdingAPI::Exposed::Pathfinding::Int3 end1, ModdingAPI::Exposed::Pathfinding::Int3 start2, ModdingAPI::Exposed::Pathfinding::Int3 end2) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2452E40))(start1, end1, start2, end2);
  }
  static inline bool SegmentsIntersectXZ(ModdingAPI::Exposed::UnityEngine::Vector3 start1, ModdingAPI::Exposed::UnityEngine::Vector3 end1, ModdingAPI::Exposed::UnityEngine::Vector3 start2, ModdingAPI::Exposed::UnityEngine::Vector3 end2) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2453040))(start1, end1, start2, end2);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 LineDirIntersectionPointXZ(ModdingAPI::Exposed::UnityEngine::Vector3 start1, ModdingAPI::Exposed::UnityEngine::Vector3 dir1, ModdingAPI::Exposed::UnityEngine::Vector3 start2, ModdingAPI::Exposed::UnityEngine::Vector3 dir2) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2453240))(start1, dir1, start2, dir2);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 LineDirIntersectionPointXZ(ModdingAPI::Exposed::UnityEngine::Vector3 start1, ModdingAPI::Exposed::UnityEngine::Vector3 dir1, ModdingAPI::Exposed::UnityEngine::Vector3 start2, ModdingAPI::Exposed::UnityEngine::Vector3 dir2, bool intersects) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2453410))(start1, dir1, start2, dir2, intersects);
  }
  static inline bool RaySegmentIntersectXZ(ModdingAPI::Exposed::Pathfinding::Int3 start1, ModdingAPI::Exposed::Pathfinding::Int3 end1, ModdingAPI::Exposed::Pathfinding::Int3 start2, ModdingAPI::Exposed::Pathfinding::Int3 end2) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24535F0))(start1, end1, start2, end2);
  }
  static inline bool LineIntersectionFactorXZ(ModdingAPI::Exposed::Pathfinding::Int3 start1, ModdingAPI::Exposed::Pathfinding::Int3 end1, ModdingAPI::Exposed::Pathfinding::Int3 start2, ModdingAPI::Exposed::Pathfinding::Int3 end2, float factor1, float factor2) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24537C0))(start1, end1, start2, end2, factor1, factor2);
  }
  static inline bool LineIntersectionFactorXZ(ModdingAPI::Exposed::UnityEngine::Vector3 start1, ModdingAPI::Exposed::UnityEngine::Vector3 end1, ModdingAPI::Exposed::UnityEngine::Vector3 start2, ModdingAPI::Exposed::UnityEngine::Vector3 end2, float factor1, float factor2) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24539B0))(start1, end1, start2, end2, factor1, factor2);
  }
  static inline float LineRayIntersectionFactorXZ(ModdingAPI::Exposed::Pathfinding::Int3 start1, ModdingAPI::Exposed::Pathfinding::Int3 end1, ModdingAPI::Exposed::Pathfinding::Int3 start2, ModdingAPI::Exposed::Pathfinding::Int3 end2) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2453BB0))(start1, end1, start2, end2);
  }
  static inline float LineIntersectionFactorXZ(ModdingAPI::Exposed::UnityEngine::Vector3 start1, ModdingAPI::Exposed::UnityEngine::Vector3 end1, ModdingAPI::Exposed::UnityEngine::Vector3 start2, ModdingAPI::Exposed::UnityEngine::Vector3 end2) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2453D80))(start1, end1, start2, end2);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 LineIntersectionPointXZ(ModdingAPI::Exposed::UnityEngine::Vector3 start1, ModdingAPI::Exposed::UnityEngine::Vector3 end1, ModdingAPI::Exposed::UnityEngine::Vector3 start2, ModdingAPI::Exposed::UnityEngine::Vector3 end2) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2453EF0))(start1, end1, start2, end2);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 LineIntersectionPointXZ(ModdingAPI::Exposed::UnityEngine::Vector3 start1, ModdingAPI::Exposed::UnityEngine::Vector3 end1, ModdingAPI::Exposed::UnityEngine::Vector3 start2, ModdingAPI::Exposed::UnityEngine::Vector3 end2, bool intersects) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2453FA0))(start1, end1, start2, end2, intersects);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 LineIntersectionPoint(ModdingAPI::Exposed::UnityEngine::Vector2 start1, ModdingAPI::Exposed::UnityEngine::Vector2 end1, ModdingAPI::Exposed::UnityEngine::Vector2 start2, ModdingAPI::Exposed::UnityEngine::Vector2 end2) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24541D0))(start1, end1, start2, end2);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 LineIntersectionPoint(ModdingAPI::Exposed::UnityEngine::Vector2 start1, ModdingAPI::Exposed::UnityEngine::Vector2 end1, ModdingAPI::Exposed::UnityEngine::Vector2 start2, ModdingAPI::Exposed::UnityEngine::Vector2 end2, bool intersects) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2454200))(start1, end1, start2, end2, intersects);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 SegmentIntersectionPointXZ(ModdingAPI::Exposed::UnityEngine::Vector3 start1, ModdingAPI::Exposed::UnityEngine::Vector3 end1, ModdingAPI::Exposed::UnityEngine::Vector3 start2, ModdingAPI::Exposed::UnityEngine::Vector3 end2, bool intersects) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24543C0))(start1, end1, start2, end2, intersects);
  }
  static inline bool SegmentIntersectsBounds(ModdingAPI::Exposed::UnityEngine::Bounds bounds, ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Bounds, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2454680))(bounds, a, b);
  }
  static inline bool ReversesFaceOrientations(ModdingAPI::Exposed::UnityEngine::Matrix4x4 matrix) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Matrix4x4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2454A80))(matrix);
  }
};
}