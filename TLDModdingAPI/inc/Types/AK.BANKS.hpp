// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::AK {
struct __BANKS_Il2CppStaticFields {
  uint32_t INIT;
  uint32_t ACTIONS;
  uint32_t AMBIENT;
  uint32_t ANIMAL;
  uint32_t CONVOLUTION;
  uint32_t FOOTSTEPS;
  uint32_t GUI;
  uint32_t INTERACTIVEOBJECTS;
  uint32_t INVENTORY;
  uint32_t MIXEREVENTS;
  uint32_t MUSIC;
  uint32_t NPC;
  uint32_t PHYSICS;
  uint32_t SCRIPTED;
  uint32_t SKILLS;
  uint32_t STORYMODEEP01EP02;
  uint32_t STORYMODEEP03;
  uint32_t STORYMODEREDUX;
  uint32_t VOPLAYER;
  uint32_t WEAPONS;
};

struct __BANKS_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __BANKS_Il2CppClass {
  Il2CppClass_1 _1;
  __BANKS_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __BANKS_Il2CppVtbl vtbl;
};

class BANKS {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C66C28;
  static inline    __BANKS_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __BANKS_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__BANKS_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __BANKS_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AK::BANKS*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<uint32_t> INIT = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->INIT; }
  );
  static inline __CppStaticProperty<uint32_t> ACTIONS = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ACTIONS; }
  );
  static inline __CppStaticProperty<uint32_t> AMBIENT = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->AMBIENT; }
  );
  static inline __CppStaticProperty<uint32_t> ANIMAL = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ANIMAL; }
  );
  static inline __CppStaticProperty<uint32_t> CONVOLUTION = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->CONVOLUTION; }
  );
  static inline __CppStaticProperty<uint32_t> FOOTSTEPS = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->FOOTSTEPS; }
  );
  static inline __CppStaticProperty<uint32_t> GUI = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->GUI; }
  );
  static inline __CppStaticProperty<uint32_t> INTERACTIVEOBJECTS = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->INTERACTIVEOBJECTS; }
  );
  static inline __CppStaticProperty<uint32_t> INVENTORY = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->INVENTORY; }
  );
  static inline __CppStaticProperty<uint32_t> MIXEREVENTS = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->MIXEREVENTS; }
  );
  static inline __CppStaticProperty<uint32_t> MUSIC = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->MUSIC; }
  );
  static inline __CppStaticProperty<uint32_t> NPC = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->NPC; }
  );
  static inline __CppStaticProperty<uint32_t> PHYSICS = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->PHYSICS; }
  );
  static inline __CppStaticProperty<uint32_t> SCRIPTED = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->SCRIPTED; }
  );
  static inline __CppStaticProperty<uint32_t> SKILLS = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->SKILLS; }
  );
  static inline __CppStaticProperty<uint32_t> STORYMODEEP01EP02 = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->STORYMODEEP01EP02; }
  );
  static inline __CppStaticProperty<uint32_t> STORYMODEEP03 = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->STORYMODEEP03; }
  );
  static inline __CppStaticProperty<uint32_t> STORYMODEREDUX = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->STORYMODEREDUX; }
  );
  static inline __CppStaticProperty<uint32_t> VOPLAYER = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->VOPLAYER; }
  );
  static inline __CppStaticProperty<uint32_t> WEAPONS = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->WEAPONS; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EED760))();
  }
};
}