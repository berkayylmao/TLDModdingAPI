// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Xml::Schema {
struct __SchemaInfo_Il2CppStaticFields {
};

struct __SchemaInfo_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_System_Xml_IDtdInfo_get_Name;
  VirtualInvokeData _5_System_Xml_IDtdInfo_get_InternalDtdSubset;
  VirtualInvokeData _6_System_Xml_IDtdInfo_get_HasDefaultAttributes;
  VirtualInvokeData _7_System_Xml_IDtdInfo_get_HasNonCDataAttributes;
  VirtualInvokeData _8_System_Xml_IDtdInfo_LookupAttributeList;
  VirtualInvokeData _9_System_Xml_IDtdInfo_LookupEntity;
};

struct __SchemaInfo_Il2CppClass {
  Il2CppClass_1 _1;
  __SchemaInfo_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SchemaInfo_Il2CppVtbl vtbl;
};

class SchemaInfo {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C3EC88;
  static inline    __SchemaInfo_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __SchemaInfo_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__SchemaInfo_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __SchemaInfo_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* elementDecls;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* undeclaredElementDecls;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* generalEntities;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* parameterEntities;
  ModdingAPI::Exposed::System::Xml::XmlQualifiedName* docTypeName;
  System_String* internalDtdSubset;
  bool hasNonCDataAttributes;
  bool hasDefaultAttributes;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* targetNamespaces;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* attributeDecls;
  int32_t errorCount;
  int32_t schemaType;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* elementDeclsByType;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* notations;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C2A50))(this);
  }
  ModdingAPI::Exposed::System::Xml::XmlQualifiedName* get_DocTypeName() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlQualifiedName*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335370))(this);
  }
  void set_DocTypeName(ModdingAPI::Exposed::System::Xml::XmlQualifiedName* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A410))(this, value);
  }
  void set_InternalDtdSubset(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A420))(this, value);
  }
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* get_ElementDecls() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* get_UndeclaredElementDecls() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* get_GeneralEntities() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C2FE0))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* get_ParameterEntities() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C3160))(this);
  }
  int32_t get_SchemaType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5F11E0))(this);
  }
  void set_SchemaType(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5F11F0))(this, value);
  }
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* get_TargetNamespaces() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319980))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* get_ElementDeclsByType() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3199C0))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* get_AttributeDecls() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A440))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* get_Notations() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C32E0))(this);
  }
  int32_t get_ErrorCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E8B70))(this);
  }
  void set_ErrorCount(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E8B80))(this, value);
  }
  ModdingAPI::Exposed::System::Xml::Schema::SchemaElementDecl* GetElementDecl(ModdingAPI::Exposed::System::Xml::XmlQualifiedName* qname) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::SchemaElementDecl*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C3460))(this, qname);
  }
  ModdingAPI::Exposed::System::Xml::Schema::SchemaElementDecl* GetTypeDecl(ModdingAPI::Exposed::System::Xml::XmlQualifiedName* qname) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::SchemaElementDecl*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C3560))(this, qname);
  }
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaElement* GetElement(ModdingAPI::Exposed::System::Xml::XmlQualifiedName* qname) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaElement*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C3660))(this, qname);
  }
  bool HasSchema(System_String* ns) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C3690))(this, ns);
  }
  bool Contains(System_String* ns) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C3750))(this, ns);
  }
  ModdingAPI::Exposed::System::Xml::Schema::SchemaAttDef* GetAttributeXdr(ModdingAPI::Exposed::System::Xml::Schema::SchemaElementDecl* ed, ModdingAPI::Exposed::System::Xml::XmlQualifiedName* qname) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::SchemaAttDef*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*, ModdingAPI::Exposed::System::Xml::Schema::SchemaElementDecl*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C3810))(this, ed, qname);
  }
  ModdingAPI::Exposed::System::Xml::Schema::SchemaAttDef* GetAttributeXsd(ModdingAPI::Exposed::System::Xml::Schema::SchemaElementDecl* ed, ModdingAPI::Exposed::System::Xml::XmlQualifiedName* qname, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaObject* partialValidationType, int32_t attributeMatchState) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::SchemaAttDef*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*, ModdingAPI::Exposed::System::Xml::Schema::SchemaElementDecl*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaObject*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C3A70))(this, ed, qname, partialValidationType, attributeMatchState);
  }
  ModdingAPI::Exposed::System::Xml::Schema::SchemaAttDef* GetAttributeXsd(ModdingAPI::Exposed::System::Xml::Schema::SchemaElementDecl* ed, ModdingAPI::Exposed::System::Xml::XmlQualifiedName* qname, bool skip) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::SchemaAttDef*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*, ModdingAPI::Exposed::System::Xml::Schema::SchemaElementDecl*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C3E00))(this, ed, qname, skip);
  }
  void Add(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo* sinfo, ModdingAPI::Exposed::System::Xml::Schema::ValidationEventHandler* eventhandler) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*, ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*, ModdingAPI::Exposed::System::Xml::Schema::ValidationEventHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C3FA0))(this, sinfo, eventhandler);
  }
  void Finish() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C4A50))(this);
  }
  bool System::Xml::IDtdInfo::get_HasDefaultAttributes() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE430))(this);
  }
  bool System::Xml::IDtdInfo::get_HasNonCDataAttributes() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE420))(this);
  }
  ModdingAPI::Exposed::System::Xml::IDtdAttributeListInfo* System::Xml::IDtdInfo::LookupAttributeList(System_String* prefix, System_String* localName) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::IDtdAttributeListInfo*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C4C30))(this, prefix, localName);
  }
  ModdingAPI::Exposed::System::Xml::IDtdEntityInfo* System::Xml::IDtdInfo::LookupEntity(System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::IDtdEntityInfo*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C4E60))(this, name);
  }
  ModdingAPI::Exposed::System::Xml::XmlQualifiedName* System::Xml::IDtdInfo::get_Name() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlQualifiedName*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335370))(this);
  }
  System_String* System::Xml::IDtdInfo::get_InternalDtdSubset() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319970))(this);
  }
};
}