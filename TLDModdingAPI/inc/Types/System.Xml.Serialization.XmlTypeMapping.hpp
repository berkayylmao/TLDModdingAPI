// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Xml::Serialization {
struct __XmlTypeMapping_Il2CppStaticFields {
};

struct __XmlTypeMapping_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __XmlTypeMapping_Il2CppClass {
  Il2CppClass_1 _1;
  __XmlTypeMapping_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __XmlTypeMapping_Il2CppVtbl vtbl;
};

class XmlTypeMapping {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C2A2F0;
  static inline    __XmlTypeMapping_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __XmlTypeMapping_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__XmlTypeMapping_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __XmlTypeMapping_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Xml::Serialization::ObjectMap* XmlMapping_map;
  ModdingAPI::Exposed::System::Collections::ArrayList* XmlMapping_relatedMaps;
  int32_t XmlMapping_format;
  System_String* _elementName;
  System_String* _namespace;
  System_String* XmlMapping_key;
  System_String* xmlType;
  System_String* xmlTypeNamespace;
  ModdingAPI::Exposed::System::Xml::Serialization::TypeData* type;
  ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping* baseMap;
  bool multiReferenceType;
  bool includeInSchema;
  bool isNullable;
  bool isAny;
  ModdingAPI::Exposed::System::Collections::ArrayList* _derivedTypes;

  // Member methods:
  void ::ctor(System_String* elementName, System_String* ns, ModdingAPI::Exposed::System::Xml::Serialization::TypeData* typeData, System_String* xmlType, System_String* xmlTypeNamespace) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*, System_String*, System_String*, ModdingAPI::Exposed::System::Xml::Serialization::TypeData*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B3800))(this, elementName, ns, typeData, xmlType, xmlTypeNamespace);
  }
  System_String* get_TypeFullName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B3990))(this);
  }
  ModdingAPI::Exposed::System::Xml::Serialization::TypeData* get_TypeData() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Serialization::TypeData*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A440))(this);
  }
  System_String* get_XmlType() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319960))(this);
  }
  void set_XmlType(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x31F420))(this, value);
  }
  System_String* get_XmlTypeNamespace() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B39B0))(this);
  }
  void set_XmlTypeNamespace(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A430))(this, value);
  }
  bool get_HasXmlTypeNamespace() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B3A40))(this);
  }
  ModdingAPI::Exposed::System::Collections::ArrayList* get_DerivedTypes() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::ArrayList*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319930))(this);
  }
  bool get_MultiReferenceType() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x58F760))(this);
  }
  ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping* get_BaseMap() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383960))(this);
  }
  void set_BaseMap(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*, ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383970))(this, value);
  }
  void set_IncludeInSchema(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6A0AE0))(this, value);
  }
  void set_IsNullable(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B3A50))(this, value);
  }
  bool get_IsAny() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B3A60))(this);
  }
  void set_IsAny(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B3A70))(this, value);
  }
  ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping* GetRealTypeMap(ModdingAPI::Exposed::System::Type* objectType) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B3A80))(this, objectType);
  }
  void UpdateRoot(ModdingAPI::Exposed::System::Xml::XmlQualifiedName* qname) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B3C40))(this, qname);
  }
};
}