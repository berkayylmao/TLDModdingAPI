// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed {
struct __SplineMesh_Il2CppStaticFields {
};

struct __SplineMesh_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SplineMesh_Il2CppClass {
  Il2CppClass_1 _1;
  __SplineMesh_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SplineMesh_Il2CppVtbl vtbl;
};

class SplineMesh {
public:
  // Il2Cpp fields:
  __SplineMesh_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::Spline* spline;
  ModdingAPI::Exposed::SplineUtilities::AutomaticUpdater* autoUpdater;
  ModdingAPI::Exposed::UnityEngine::Mesh* baseMesh;
  int32_t segmentCount;
  int32_t uvMode;
  ModdingAPI::Exposed::UnityEngine::Vector2 uvScale;
  ModdingAPI::Exposed::UnityEngine::Vector2 xyScale;
  int32_t splineSegment;
  ModdingAPI::Exposed::UnityEngine::Mesh* bentMesh;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SplineMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1553450))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Mesh* get_BentMesh() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Mesh*(__fastcall*)(ModdingAPI::Exposed::SplineMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A440))(this);
  }
  bool get_IsSubSegment() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::SplineMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1553550))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SplineMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1553560))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SplineMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1553630))(this);
  }
  void LateUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SplineMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1553700))(this);
  }
  void UpdateMesh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SplineMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1553740))(this);
  }
  void GenerateBentMensh(int32_t segmentIdx, float param0, float param1, ModdingAPI::Exposed::SplineMesh::MeshData* meshDataBase, ModdingAPI::Exposed::SplineMesh::MeshData* meshDataNew) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SplineMesh*, int32_t, float, float, ModdingAPI::Exposed::SplineMesh::MeshData*, ModdingAPI::Exposed::SplineMesh::MeshData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1553CC0))(this, segmentIdx, param0, param1, meshDataBase, meshDataNew);
  }
  void SetupMeshFilter() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SplineMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1554B30))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Mesh* ReturnMeshReference() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Mesh*(__fastcall*)(ModdingAPI::Exposed::SplineMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A440))(this);
  }
};
}