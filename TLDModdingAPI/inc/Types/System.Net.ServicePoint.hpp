// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.DateTime.hpp"


namespace ModdingAPI::Exposed::System::Net {
struct __ServicePoint_Il2CppStaticFields {
};

struct __ServicePoint_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_ProtocolVersion;
};

struct __ServicePoint_Il2CppClass {
  Il2CppClass_1 _1;
  __ServicePoint_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ServicePoint_Il2CppVtbl vtbl;
};

class ServicePoint {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C3ED08;
  static inline    __ServicePoint_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ServicePoint_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ServicePoint_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ServicePoint_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Uri* uri;
  int32_t connectionLimit;
  int32_t maxIdleTime;
  int32_t currentConnections;
  ModdingAPI::Exposed::System::DateTime idleSince;
  ModdingAPI::Exposed::System::DateTime lastDnsResolve;
  ModdingAPI::Exposed::System::Version* protocolVersion;
  ModdingAPI::Exposed::System::Net::IPHostEntry* host;
  bool usesProxy;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* groups;
  bool sendContinue;
  bool useConnect;
  Il2CppObject* hostE;
  bool useNagle;
  ModdingAPI::Exposed::System::Net::BindIPEndPoint* endPointCallback;
  bool tcp_keepalive;
  int32_t tcp_keepalive_time;
  int32_t tcp_keepalive_interval;
  ModdingAPI::Exposed::System::Threading::Timer* idleTimer;
  Il2CppObject* m_ServerCertificateOrBytes;
  Il2CppObject* m_ClientCertificateOrBytes;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Uri* uri, int32_t connectionLimit, int32_t maxIdleTime) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*, ModdingAPI::Exposed::System::Uri*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB22EA0))(this, uri, connectionLimit, maxIdleTime);
  }
  ModdingAPI::Exposed::System::Uri* get_Address() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Uri*(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  int32_t get_ConnectionLimit() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FED20))(this);
  }
  ModdingAPI::Exposed::System::Version* get_ProtocolVersion() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Version*(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319970))(this);
  }
  void set_Expect100Continue(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A460))(this, value);
  }
  bool get_UseNagleAlgorithm() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7DA960))(this);
  }
  void set_UseNagleAlgorithm(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3740))(this, value);
  }
  bool get_SendContinue() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB23040))(this);
  }
  void set_SendContinue(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A460))(this, value);
  }
  void SetTcpKeepAlive(bool enabled, int32_t keepAliveTime, int32_t keepAliveInterval) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*, bool, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB23170))(this, enabled, keepAliveTime, keepAliveInterval);
  }
  void KeepAliveSetup(ModdingAPI::Exposed::System::Net::Sockets::Socket* socket) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*, ModdingAPI::Exposed::System::Net::Sockets::Socket*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB23290))(this, socket);
  }
  bool get_UsesProxy() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EFF30))(this);
  }
  void set_UsesProxy(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EFF40))(this, value);
  }
  bool get_UseConnect() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A470))(this);
  }
  void set_UseConnect(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A480))(this, value);
  }
  ModdingAPI::Exposed::System::Net::WebConnectionGroup* GetConnectionGroup(System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Net::WebConnectionGroup*(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB23700))(this, name);
  }
  void RemoveConnectionGroup(ModdingAPI::Exposed::System::Net::WebConnectionGroup* group) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*, ModdingAPI::Exposed::System::Net::WebConnectionGroup*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB23BA0))(this, group);
  }
  bool CheckAvailableForRecycling(ModdingAPI::Exposed::System::DateTime outIdleSince) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB23C80))(this, outIdleSince);
  }
  void IdleTimerCallback(Il2CppObject* obj) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB24410))(this, obj);
  }
  bool get_HasTimedOut() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB24430))(this);
  }
  ModdingAPI::Exposed::System::Net::IPHostEntry* get_HostEntry() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Net::IPHostEntry*(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB245F0))(this);
  }
  void SetVersion(ModdingAPI::Exposed::System::Version* version) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*, ModdingAPI::Exposed::System::Version*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A420))(this, version);
  }
  ModdingAPI::Exposed::System::EventHandler* SendRequest(ModdingAPI::Exposed::System::Net::HttpWebRequest* request, System_String* groupName) {
    return reinterpret_cast<ModdingAPI::Exposed::System::EventHandler*(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*, ModdingAPI::Exposed::System::Net::HttpWebRequest*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB24A80))(this, request, groupName);
  }
  void UpdateServerCertificate(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate* certificate) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*, ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB24E00))(this, certificate);
  }
  void UpdateClientCertificate(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate* certificate) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*, ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB24E40))(this, certificate);
  }
  bool CallEndPointDelegate(ModdingAPI::Exposed::System::Net::Sockets::Socket* sock, ModdingAPI::Exposed::System::Net::IPEndPoint* remote) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*, ModdingAPI::Exposed::System::Net::Sockets::Socket*, ModdingAPI::Exposed::System::Net::IPEndPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB24E80))(this, sock, remote);
  }
  void _GetConnectionGroup_b__66_0(Il2CppObject* s, ModdingAPI::Exposed::System::EventArgs* e) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::ServicePoint*, Il2CppObject*, ModdingAPI::Exposed::System::EventArgs*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB24FD0))(this, s, e);
  }

  // Static methods:
  static inline void PutBytes(ModdingAPI::Exposed::System::Byte_array* bytes, uint32_t v, int32_t offset) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, uint32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB234F0))(bytes, v, offset);
  }
};
}