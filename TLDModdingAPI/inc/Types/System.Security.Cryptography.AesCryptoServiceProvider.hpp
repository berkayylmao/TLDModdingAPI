// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Security::Cryptography {
struct __AesCryptoServiceProvider_Il2CppStaticFields {
};

struct __AesCryptoServiceProvider_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Dispose;
  VirtualInvokeData _5_Dispose;
  VirtualInvokeData _6_get_BlockSize;
  VirtualInvokeData _7_set_BlockSize;
  VirtualInvokeData _8_get_FeedbackSize;
  VirtualInvokeData _9_get_IV;
  VirtualInvokeData _10_set_IV;
  VirtualInvokeData _11_get_Key;
  VirtualInvokeData _12_set_Key;
  VirtualInvokeData _13_get_LegalKeySizes;
  VirtualInvokeData _14_get_KeySize;
  VirtualInvokeData _15_set_KeySize;
  VirtualInvokeData _16_get_Mode;
  VirtualInvokeData _17_set_Mode;
  VirtualInvokeData _18_get_Padding;
  VirtualInvokeData _19_set_Padding;
  VirtualInvokeData _20_CreateEncryptor;
  VirtualInvokeData _21_CreateEncryptor;
  VirtualInvokeData _22_CreateDecryptor;
  VirtualInvokeData _23_CreateDecryptor;
  VirtualInvokeData _24_GenerateKey;
  VirtualInvokeData _25_GenerateIV;
};

struct __AesCryptoServiceProvider_Il2CppClass {
  Il2CppClass_1 _1;
  __AesCryptoServiceProvider_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AesCryptoServiceProvider_Il2CppVtbl vtbl;
};

class AesCryptoServiceProvider {
public:
  // Il2Cpp fields:
  __AesCryptoServiceProvider_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t BlockSizeValue;
  int32_t FeedbackSizeValue;
  ModdingAPI::Exposed::System::Byte_array* IVValue;
  ModdingAPI::Exposed::System::Byte_array* KeyValue;
  ModdingAPI::Exposed::System::Security::Cryptography::KeySizes_array* LegalBlockSizesValue;
  ModdingAPI::Exposed::System::Security::Cryptography::KeySizes_array* LegalKeySizesValue;
  int32_t KeySizeValue;
  int32_t ModeValue;
  int32_t PaddingValue;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x151C1F0))(this);
  }
  void GenerateIV() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x151C290))(this);
  }
  void GenerateKey() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE72940))(this);
  }
  ModdingAPI::Exposed::System::Security::Cryptography::ICryptoTransform* CreateDecryptor(ModdingAPI::Exposed::System::Byte_array* key, ModdingAPI::Exposed::System::Byte_array* iv) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::Cryptography::ICryptoTransform*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*, ModdingAPI::Exposed::System::Byte_array*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x151C2B0))(this, key, iv);
  }
  ModdingAPI::Exposed::System::Security::Cryptography::ICryptoTransform* CreateEncryptor(ModdingAPI::Exposed::System::Byte_array* key, ModdingAPI::Exposed::System::Byte_array* iv) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::Cryptography::ICryptoTransform*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*, ModdingAPI::Exposed::System::Byte_array*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x151C490))(this, key, iv);
  }
  ModdingAPI::Exposed::System::Byte_array* get_IV() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x151C670))(this);
  }
  void set_IV(ModdingAPI::Exposed::System::Byte_array* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x151C680))(this, value);
  }
  ModdingAPI::Exposed::System::Byte_array* get_Key() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x151C690))(this);
  }
  void set_Key(ModdingAPI::Exposed::System::Byte_array* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x151C6A0))(this, value);
  }
  int32_t get_KeySize() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8A0))(this);
  }
  void set_KeySize(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x151C6B0))(this, value);
  }
  int32_t get_FeedbackSize() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311080))(this);
  }
  int32_t get_Mode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8C0))(this);
  }
  void set_Mode(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x151C6C0))(this, value);
  }
  int32_t get_Padding() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8E0))(this);
  }
  void set_Padding(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x940680))(this, value);
  }
  ModdingAPI::Exposed::System::Security::Cryptography::ICryptoTransform* CreateDecryptor() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::Cryptography::ICryptoTransform*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x940990))(this);
  }
  ModdingAPI::Exposed::System::Security::Cryptography::ICryptoTransform* CreateEncryptor() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::Cryptography::ICryptoTransform*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x940930))(this);
  }
  void Dispose(bool disposing) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::AesCryptoServiceProvider*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x93FB30))(this, disposing);
  }
};
}