// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __SmokeTrail_Il2CppStaticFields {
};

struct __SmokeTrail_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SmokeTrail_Il2CppClass {
  Il2CppClass_1 _1;
  __SmokeTrail_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SmokeTrail_Il2CppVtbl vtbl;
};

class SmokeTrail {
public:
  // Il2Cpp fields:
  __SmokeTrail_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  int32_t numberOfPoints;
  float updateSpeed;
  float riseSpeed;
  float spread;
  bool applySpeedAndDir;
  float windForceDivider;
  bool affectRiseSpeed;
  float riseRateDivider;
  bool affectSpread;
  float spreadDivider;
  bool useFadeout;
  float duration;
  float fadeDuration;
  bool playOnAwake;
  bool autoDestroy;
  ModdingAPI::Exposed::Fire* m_SourceFire;
  float m_SourceFireFadeStart;
  int32_t m_ParentLevels;
  ModdingAPI::Exposed::UnityEngine::LineRenderer* line;
  ModdingAPI::Exposed::UnityEngine::Transform* tr;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* positions;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* directions;
  int32_t i;
  float timeSinceUpdate;
  ModdingAPI::Exposed::UnityEngine::Material* lineMaterial;
  float lineSegment;
  int32_t currentNumberOfPoints;
  bool allPointsAdded;
  ModdingAPI::Exposed::UnityEngine::Color startColour;
  ModdingAPI::Exposed::UnityEngine::Vector3 tempVec;
  float windSpeed;
  ModdingAPI::Exposed::UnityEngine::Vector3 windDir;
  bool isSmoking;
  float smokeTimer;
  float smokeFadeStep;
  bool m_ForceFadeOut;
  float m_ForceFadeOutSeconds;
  bool m_Warmed;
  ModdingAPI::Exposed::UnityEngine::Color m_currentColor;
  bool m_IsReset;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SmokeTrail*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C53A70))(this);
  }
  void SetAlpha(float fadePercent) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SmokeTrail*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C53AF0))(this, fadePercent);
  }
  void FixedUpdateInternal(float deltaTime) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SmokeTrail*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C53BB0))(this, deltaTime);
  }
  void FixedUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SmokeTrail*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C541F0))(this);
  }
  void InitEffect(bool resetEffect) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SmokeTrail*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C54250))(this, resetEffect);
  }
  void UpdateInternal(float deltaTime) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SmokeTrail*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C54930))(this, deltaTime);
  }
  void UpdateMaterial() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SmokeTrail*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C55320))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 getSmokeVec() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::SmokeTrail*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C55460))(this);
  }
  void StartSmoke() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SmokeTrail*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C556D0))(this);
  }
  void Reset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SmokeTrail*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C556F0))(this);
  }
  bool GetSmokeStatus() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::SmokeTrail*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x86FCD0))(this);
  }
  void ForceOff(bool force) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SmokeTrail*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C55710))(this, force);
  }
  void WarmUpEffect() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SmokeTrail*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C55720))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SmokeTrail*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C55780))(this);
  }
};
}