// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.TimeSpan.hpp"
#include "ModdingAPI.Exposed.System.Xml.Schema.XsdDuration.hpp"

namespace ModdingAPI::Exposed::System::Xml::Schema {
struct __XsdDuration_Il2CppObject {
  int32_t years;
  int32_t months;
  int32_t days;
  int32_t hours;
  int32_t minutes;
  int32_t seconds;
  uint32_t nanoseconds;
};
struct __XsdDuration_Il2CppStaticFields {
};

struct __XsdDuration_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __XsdDuration_Il2CppClass {
  Il2CppClass_1 _1;
  __XsdDuration_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __XsdDuration_Il2CppVtbl vtbl;
};

class XsdDuration {
public:
  // Member fields:
  int32_t years;
  int32_t months;
  int32_t days;
  int32_t hours;
  int32_t minutes;
  int32_t seconds;
  uint32_t nanoseconds;

  // Member methods:
  void ::ctor(bool isNegative, int32_t years, int32_t months, int32_t days, int32_t hours, int32_t minutes, int32_t seconds, int32_t nanoseconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdDuration*, bool, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2E610))(this, isNegative, years, months, days, hours, minutes, seconds, nanoseconds);
  }
  void ::ctor(ModdingAPI::Exposed::System::TimeSpan timeSpan) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdDuration*, ModdingAPI::Exposed::System::TimeSpan)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2E620))(this, timeSpan);
  }
  void ::ctor(ModdingAPI::Exposed::System::TimeSpan timeSpan, int32_t durationType) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdDuration*, ModdingAPI::Exposed::System::TimeSpan, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2E630))(this, timeSpan, durationType);
  }
  void ::ctor(System_String* s, int32_t durationType) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdDuration*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2E640))(this, s, durationType);
  }
  bool get_IsNegative() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdDuration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2E650))(this);
  }
  int32_t get_Years() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdDuration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3030))(this);
  }
  int32_t get_Months() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdDuration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5A20))(this);
  }
  int32_t get_Days() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdDuration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5020))(this);
  }
  int32_t get_Hours() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdDuration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5A30))(this);
  }
  int32_t get_Minutes() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdDuration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3380))(this);
  }
  int32_t get_Seconds() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdDuration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A680))(this);
  }
  int32_t get_Nanoseconds() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdDuration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2E660))(this);
  }
  ModdingAPI::Exposed::System::TimeSpan ToTimeSpan(int32_t durationType) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdDuration*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2E670))(this, durationType);
  }
  ModdingAPI::Exposed::System::Exception* TryToTimeSpan(ModdingAPI::Exposed::System::TimeSpan result) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdDuration*, ModdingAPI::Exposed::System::TimeSpan)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2E680))(this, result);
  }
  ModdingAPI::Exposed::System::Exception* TryToTimeSpan(int32_t durationType, ModdingAPI::Exposed::System::TimeSpan result) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdDuration*, int32_t, ModdingAPI::Exposed::System::TimeSpan)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2E690))(this, durationType, result);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdDuration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2E6A0))(this);
  }
  System_String* ToString(int32_t durationType) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdDuration*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2E6B0))(this, durationType);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::System::Exception* TryParse(System_String* s, ModdingAPI::Exposed::System::Xml::Schema::XsdDuration result) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Xml::Schema::XsdDuration)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC94C30))(s, result);
  }
  static inline ModdingAPI::Exposed::System::Exception* TryParse(System_String* s, int32_t durationType, ModdingAPI::Exposed::System::Xml::Schema::XsdDuration result) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Xml::Schema::XsdDuration)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC94C40))(s, durationType, result);
  }
  static inline System_String* TryParseDigits(System_String* s, int32_t offset, bool eatDigits, int32_t result, int32_t numDigits) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, int32_t, bool, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC95B00))(s, offset, eatDigits, result, numDigits);
  }

};
}