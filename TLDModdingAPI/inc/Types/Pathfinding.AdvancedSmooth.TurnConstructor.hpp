// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed::Pathfinding::AdvancedSmooth {
struct __TurnConstructor_Il2CppStaticFields {
  float turningRadius;
  ModdingAPI::Exposed::UnityEngine::Vector3 prev;
  ModdingAPI::Exposed::UnityEngine::Vector3 current;
  ModdingAPI::Exposed::UnityEngine::Vector3 next;
  ModdingAPI::Exposed::UnityEngine::Vector3 t1;
  ModdingAPI::Exposed::UnityEngine::Vector3 t2;
  ModdingAPI::Exposed::UnityEngine::Vector3 normal;
  ModdingAPI::Exposed::UnityEngine::Vector3 prevNormal;
  bool changedPreviousTangent;
};

struct __TurnConstructor_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _5_OnTangentUpdate;
  VirtualInvokeData _6_PointToTangent;
  VirtualInvokeData _7_TangentToPoint;
  VirtualInvokeData _8_TangentToTangent;
  VirtualInvokeData _65535__ctor;
};

struct __TurnConstructor_Il2CppClass {
  Il2CppClass_1 _1;
  __TurnConstructor_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TurnConstructor_Il2CppVtbl vtbl;
};

class TurnConstructor {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C62480;
  static inline    __TurnConstructor_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __TurnConstructor_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__TurnConstructor_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __TurnConstructor_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  float constantBias;
  float factorBias;

  // Member methods:
  void OnTangentUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::AdvancedSmooth::TurnConstructor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void PointToTangent(ModdingAPI::Exposed::System::Collections::Generic::List_T_* turnList) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::AdvancedSmooth::TurnConstructor*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, turnList);
  }
  void TangentToPoint(ModdingAPI::Exposed::System::Collections::Generic::List_T_* turnList) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::AdvancedSmooth::TurnConstructor*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, turnList);
  }
  void TangentToTangent(ModdingAPI::Exposed::System::Collections::Generic::List_T_* turnList) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::AdvancedSmooth::TurnConstructor*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, turnList);
  }
  void AddCircleSegment(double startAngle, double endAngle, bool clockwise, ModdingAPI::Exposed::UnityEngine::Vector3 center, ModdingAPI::Exposed::System::Collections::Generic::List_T_* output, float radius) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::AdvancedSmooth::TurnConstructor*, double, double, bool, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20A28E0))(this, startAngle, endAngle, clockwise, center, output, radius);
  }
  void DebugCircleSegment(ModdingAPI::Exposed::UnityEngine::Vector3 center, double startAngle, double endAngle, double radius, ModdingAPI::Exposed::UnityEngine::Color color) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::AdvancedSmooth::TurnConstructor*, ModdingAPI::Exposed::UnityEngine::Vector3, double, double, double, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20A2E80))(this, center, startAngle, endAngle, radius, color);
  }
  void DebugCircle(ModdingAPI::Exposed::UnityEngine::Vector3 center, double radius, ModdingAPI::Exposed::UnityEngine::Color color) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::AdvancedSmooth::TurnConstructor*, ModdingAPI::Exposed::UnityEngine::Vector3, double, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20A3400))(this, center, radius, color);
  }
  double GetLengthFromAngle(double angle, double radius) {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::Pathfinding::AdvancedSmooth::TurnConstructor*, double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20A36E0))(this, angle, radius);
  }
  double ClockwiseAngle(double from, double to) {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::Pathfinding::AdvancedSmooth::TurnConstructor*, double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20A36F0))(this, from, to);
  }
  double CounterClockwiseAngle(double from, double to) {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::Pathfinding::AdvancedSmooth::TurnConstructor*, double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20A3730))(this, from, to);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 AngleToVector(double a) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Pathfinding::AdvancedSmooth::TurnConstructor*, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20A3770))(this, a);
  }
  double ToDegrees(double rad) {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::Pathfinding::AdvancedSmooth::TurnConstructor*, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20A3850))(this, rad);
  }
  double ClampAngle(double a) {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::Pathfinding::AdvancedSmooth::TurnConstructor*, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20A3860))(this, a);
  }
  double Atan2(ModdingAPI::Exposed::UnityEngine::Vector3 v) {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::Pathfinding::AdvancedSmooth::TurnConstructor*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20A38A0))(this, v);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::AdvancedSmooth::TurnConstructor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20A3960))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<float> turningRadius = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->turningRadius; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector3> prev = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector3>(
   []() { return &GetStaticClassInstance()->pStaticFields->prev; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector3> current = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector3>(
   []() { return &GetStaticClassInstance()->pStaticFields->current; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector3> next = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector3>(
   []() { return &GetStaticClassInstance()->pStaticFields->next; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector3> t1 = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector3>(
   []() { return &GetStaticClassInstance()->pStaticFields->t1; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector3> t2 = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector3>(
   []() { return &GetStaticClassInstance()->pStaticFields->t2; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector3> normal = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector3>(
   []() { return &GetStaticClassInstance()->pStaticFields->normal; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector3> prevNormal = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector3>(
   []() { return &GetStaticClassInstance()->pStaticFields->prevNormal; }
  );
  static inline __CppStaticProperty<bool> changedPreviousTangent = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->changedPreviousTangent; }
  );

  // Static methods:
  static inline void Setup(int32_t i, ModdingAPI::Exposed::UnityEngine::Vector3_array* vectorPath) {
    reinterpret_cast<void(__fastcall*)(int32_t, ModdingAPI::Exposed::UnityEngine::Vector3_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20A22D0))(i, vectorPath);
  }
  static inline void PostPrepare() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x20A2840))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x20A3970))();
  }
};
}