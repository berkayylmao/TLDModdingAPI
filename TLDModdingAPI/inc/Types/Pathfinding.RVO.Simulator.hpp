// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Matrix4x4.hpp"


namespace ModdingAPI::Exposed::Pathfinding::RVO {
struct __Simulator_Il2CppStaticFields {
};

struct __Simulator_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Simulator_Il2CppClass {
  Il2CppClass_1 _1;
  __Simulator_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Simulator_Il2CppVtbl vtbl;
};

class Simulator {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C26BB8;
  static inline    __Simulator_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Simulator_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Simulator_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Simulator_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  bool doubleBuffering;
  float desiredDeltaTime;
  bool interpolation;
  ModdingAPI::Exposed::Pathfinding::RVO::Simulator::Worker_array* workers;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* agents;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* obstacles;
  int32_t algorithm;
  ModdingAPI::Exposed::Pathfinding::RVO::RVOQuadtree* quadtree;
  float qualityCutoff;
  float stepScale;
  float deltaTime;
  float prevDeltaTime;
  float lastStep;
  float lastStepInterpolationReference;
  bool doUpdateObstacles;
  bool doCleanObstacles;
  bool oversampling;
  float wallThickness;
  ModdingAPI::Exposed::Pathfinding::RVO::Simulator::WorkerContext* coroutineWorkerContext;

  // Member methods:
  ModdingAPI::Exposed::Pathfinding::RVO::RVOQuadtree* get_Quadtree() {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::RVO::RVOQuadtree*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319960))(this);
  }
  float get_DeltaTime() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56EF50))(this);
  }
  float get_PrevDeltaTime() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56EF90))(this);
  }
  bool get_Multithreading() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2185420))(this);
  }
  float get_DesiredDeltaTime() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x580F50))(this);
  }
  void set_DesiredDeltaTime(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2185440))(this, value);
  }
  float get_WallThickness() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56F0B0))(this);
  }
  void set_WallThickness(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2185510))(this, value);
  }
  bool get_Interpolation() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x318510))(this);
  }
  void set_Interpolation(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5161B0))(this, value);
  }
  bool get_Oversampling() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21855E0))(this);
  }
  void set_Oversampling(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B3A50))(this, value);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* GetAgents() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110B0))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* GetObstacles() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335370))(this);
  }
  void ::ctor(int32_t workers, bool doubleBuffering) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21855F0))(this, workers, doubleBuffering);
  }
  void ClearAgents() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2185D20))(this);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2185EF0))(this);
  }
  void Finalize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2185F70))(this);
  }
  ModdingAPI::Exposed::Pathfinding::RVO::IAgent* AddAgent(ModdingAPI::Exposed::Pathfinding::RVO::IAgent* agent) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::RVO::IAgent*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*, ModdingAPI::Exposed::Pathfinding::RVO::IAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2186000))(this, agent);
  }
  ModdingAPI::Exposed::Pathfinding::RVO::IAgent* AddAgent(ModdingAPI::Exposed::UnityEngine::Vector3 position) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::RVO::IAgent*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21862A0))(this, position);
  }
  void RemoveAgent(ModdingAPI::Exposed::Pathfinding::RVO::IAgent* agent) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*, ModdingAPI::Exposed::Pathfinding::RVO::IAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21864E0))(this, agent);
  }
  ModdingAPI::Exposed::Pathfinding::RVO::ObstacleVertex* AddObstacle(ModdingAPI::Exposed::Pathfinding::RVO::ObstacleVertex* v) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::RVO::ObstacleVertex*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*, ModdingAPI::Exposed::Pathfinding::RVO::ObstacleVertex*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2186780))(this, v);
  }
  ModdingAPI::Exposed::Pathfinding::RVO::ObstacleVertex* AddObstacle(ModdingAPI::Exposed::UnityEngine::Vector3_array* vertices, float height) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::RVO::ObstacleVertex*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*, ModdingAPI::Exposed::UnityEngine::Vector3_array*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2186900))(this, vertices, height);
  }
  ModdingAPI::Exposed::Pathfinding::RVO::ObstacleVertex* AddObstacle(ModdingAPI::Exposed::UnityEngine::Vector3_array* vertices, float height, ModdingAPI::Exposed::UnityEngine::Matrix4x4 matrix, int32_t layer) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::RVO::ObstacleVertex*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*, ModdingAPI::Exposed::UnityEngine::Vector3_array*, float, ModdingAPI::Exposed::UnityEngine::Matrix4x4, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2186A10))(this, vertices, height, matrix, layer);
  }
  ModdingAPI::Exposed::Pathfinding::RVO::ObstacleVertex* AddObstacle(ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b, float height) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::RVO::ObstacleVertex*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2186FE0))(this, a, b, height);
  }
  void UpdateObstacle(ModdingAPI::Exposed::Pathfinding::RVO::ObstacleVertex* obstacle, ModdingAPI::Exposed::UnityEngine::Vector3_array* vertices, ModdingAPI::Exposed::UnityEngine::Matrix4x4 matrix) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*, ModdingAPI::Exposed::Pathfinding::RVO::ObstacleVertex*, ModdingAPI::Exposed::UnityEngine::Vector3_array*, ModdingAPI::Exposed::UnityEngine::Matrix4x4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21873D0))(this, obstacle, vertices, matrix);
  }
  void ScheduleCleanObstacles() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2187900))(this);
  }
  void CleanObstacles() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2187910))(this);
  }
  void RemoveObstacle(ModdingAPI::Exposed::Pathfinding::RVO::ObstacleVertex* v) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*, ModdingAPI::Exposed::Pathfinding::RVO::ObstacleVertex*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2187A40))(this, v);
  }
  void UpdateObstacles() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6B16C0))(this);
  }
  void BuildQuadtree() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2187C00))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RVO::Simulator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2187F60))(this);
  }
};
}