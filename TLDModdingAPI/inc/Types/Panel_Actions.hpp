// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed {
struct __Panel_Actions_Il2CppStaticFields {
};

struct __Panel_Actions_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Panel_Actions_Il2CppClass {
  Il2CppClass_1 _1;
  __Panel_Actions_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Panel_Actions_Il2CppVtbl vtbl;
};

class Panel_Actions {
public:
  // Il2Cpp fields:
  __Panel_Actions_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TimeWidgetPos;
  ModdingAPI::Exposed::UILabel* m_TimeSurvivedLabel;
  ModdingAPI::Exposed::UILabel* m_ConditionsLabel;
  ModdingAPI::Exposed::UILabel* m_AirTempLabel;
  ModdingAPI::Exposed::UILabel* m_AirTempHeaderLabel;
  ModdingAPI::Exposed::UILabel* m_WindChillLabel;
  ModdingAPI::Exposed::UILabel* m_WindChillHeaderLabel;
  ModdingAPI::Exposed::UILabel* m_ClothingWarmthLabel;
  ModdingAPI::Exposed::UILabel* m_ClothingWarmthHeaderLabel;
  ModdingAPI::Exposed::UILabel* m_ClothingWindproofLabel;
  ModdingAPI::Exposed::UILabel* m_ClothingWindproofHeaderLabel;
  ModdingAPI::Exposed::UILabel* m_CalorieBurnLabel;
  ModdingAPI::Exposed::UILabel* m_FeelsLikeLabel;
  ModdingAPI::Exposed::UnityEngine::Color m_FreezingTempLabelColor;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_MissionObjectivePanel;
  ModdingAPI::Exposed::UILabel* m_ObjectiveStatus;
  ModdingAPI::Exposed::UILabel* m_SubObjectiveStatus;
  ModdingAPI::Exposed::MissionsProgressBar* m_MissionsProgressBar;
  ModdingAPI::Exposed::UISprite* m_SpriteBody;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_RightPageHealthyObject;
  ModdingAPI::Exposed::ScrollList* m_ScrollListEffects;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ButtonScrollUp;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ButtonScrollDown;
  ModdingAPI::Exposed::UISprite_array* m_BodyIconList;
  ModdingAPI::Exposed::UISprite* m_StatusLineSprite;
  float m_FadeTime;
  float m_FadeTimeMissionStart;
  ModdingAPI::Exposed::UILabel* m_MissionObjectiveLabel;
  ModdingAPI::Exposed::UILabel* m_MissionObjectiveWithTimerLabel;
  ModdingAPI::Exposed::UILabel* m_MissionTimerLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_MissionObjectWithTimer;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_MissionObjectNoTimer;
  bool m_IgnoreEscape;
  bool m_IgnoreInput;
  bool m_DoFadeOut;
  float m_FadeTimer;
  ModdingAPI::Exposed::UIPanel* m_Panel;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A1F730))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A1F8E0))(this);
  }
  float GetPanelAlpha() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A20210))(this);
  }
  void ConfigureForMissionStart() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A20240))(this);
  }
  void Enable(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A20300))(this, enable);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x165DF10))(this);
  }
  void OnInventory() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A20930))(this);
  }
  void OnLog() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A20A00))(this);
  }
  void OnFirstAid() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A20AD0))(this);
  }
  void OnBedRoll() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A20BC0))(this);
  }
  void OnSnowShelter() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A21240))(this);
  }
  void OnStartFire() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A215C0))(this);
  }
  void OnRepair() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A21670))(this);
  }
  void OnHarvest() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A21790))(this);
  }
  void OnBack() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A218B0))(this);
  }
  void DoScrollUp() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A218C0))(this);
  }
  void DoScrollDown() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A21950))(this);
  }
  void UpdateAirTemperature() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A219E0))(this);
  }
  void UpdateWindchill() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A21AF0))(this);
  }
  void UpdateWeatherConditions() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A21C00))(this);
  }
  bool IsFadingOut() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A21D40))(this);
  }
  void SetFirstAidElements() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A21D80))(this);
  }
  void RefreshScrollList() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A21ED0))(this);
  }
  void UpdateMissionInfo() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A23C60))(this);
  }
  void UpdateFeelsLike() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A23FA0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Actions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }
};
}