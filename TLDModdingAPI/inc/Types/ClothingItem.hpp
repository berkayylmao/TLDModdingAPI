// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __ClothingItem_Il2CppStaticFields {
  ModdingAPI::Exposed::ClothingItemSaveDataProxy* m_ClothingItemSaveDataProxy;
};

struct __ClothingItem_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ClothingItem_Il2CppClass {
  Il2CppClass_1 _1;
  __ClothingItem_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ClothingItem_Il2CppVtbl vtbl;
};

class ClothingItem {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C6CBB0;
  static inline    __ClothingItem_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ClothingItem_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ClothingItem_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ClothingItem_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  int32_t m_Region;
  int32_t m_MinLayer;
  int32_t m_MaxLayer;
  int32_t m_WornMovementSoundCategory;
  int32_t m_FootwearType;
  float m_DailyHPDecayWhenWornOutside;
  float m_DailyHPDecayWhenWornInside;
  float m_Warmth;
  float m_WarmthWhenWet;
  float m_Windproof;
  float m_Toughness;
  float m_SprintBarReductionPercent;
  float m_Waterproofness;
  float m_DryPercentPerHour;
  float m_DryPercentPerHourNoFire;
  float m_FreezePercentPerHour;
  float m_DryBonusWhenNotWorn;
  System_String* m_PaperDollTextureName;
  System_String* m_PaperDollBlendmapName;
  uint32_t m_ClothingMaterialSwitch;
  float m_PercentWet;
  float m_PercentFrozen;
  float m_CurrentTemp;
  bool m_DroppedIndoors;
  int32_t m_EquippedLayer;
  ModdingAPI::Exposed::GearItem* m_GearItem;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B96390))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B96430))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B965B0))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B969D0))(this, text);
  }
  bool IsWearing() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B96BE0))(this);
  }
  void PutOn(int32_t layerToPutOn) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B96CA0))(this, layerToPutOn);
  }
  void TakeOff() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B96D70))(this);
  }
  bool IsDry() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B96E30))(this);
  }
  bool IsGettingWet() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B96E60))(this);
  }
  bool IsFrozen() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B97080))(this);
  }
  void SetFullyWet() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B97090))(this);
  }
  void SetFullyUnfrozen() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B970A0))(this);
  }
  void MaybeGetWetOnGround(float deltaTODHours) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B970B0))(this, deltaTODHours);
  }
  void IncreaseWetnessPercent(float wetnessPercentIncrease) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B97190))(this, wetnessPercentIncrease);
  }
  void Dry(float amountToDry) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B97290))(this, amountToDry);
  }
  void Freeze(float amountToFreeze) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B973D0))(this, amountToFreeze);
  }
  System_String* GetWetnessString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B974B0))(this);
  }
  System_String* GetWetnessOnlyString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B97730))(this);
  }
  System_String* GetFrozenOnlyString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B978C0))(this);
  }
  float GetWeightModifier() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B97A50))(this);
  }
  float GetWeightModifierNoWornBonus() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B97B70))(this);
  }
  float GetWetnessDebuffNormalized() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B97BD0))(this);
  }
  float GetWetnessNormalized() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B97C00))(this);
  }
  float GetFrozenNormalized() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B97C10))(this);
  }
  float GetWarmthWhenWet() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B97C20))(this);
  }
  float GetWarmth() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B97D10))(this);
  }
  float GetWindproof() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B97EA0))(this);
  }
  void Dropped() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B97FE0))(this);
  }
  void PickedUp() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B980A0))(this);
  }
  void OnFirstInspect() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B981F0))(this);
  }
  System_String* GetWarmthAndWindchillBonusString(float normalizedCondition) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::ClothingItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B982C0))(this, normalizedCondition);
  }
  System_String* GetWindchillBonusString(float normalizedCondition) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::ClothingItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B98ED0))(this, normalizedCondition);
  }
  int32_t GetEquippedLayer() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x307630))(this);
  }
  void SetEquippedLayer(int32_t layer) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383A50))(this, layer);
  }
  bool IsOutermostItemInClothingRegion() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B99150))(this);
  }
  void DoDryOrFreeze(float numHoursDelta, bool nearFireOverride) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B99240))(this, numHoursDelta, nearFireOverride);
  }
  bool IsNearFire() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B99430))(this);
  }
  void CacheClothingSoundSwitch() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B995E0))(this);
  }
  float GetDailyHPDecay() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B99A00))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B99B50))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::ClothingItemSaveDataProxy*> m_ClothingItemSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::ClothingItemSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_ClothingItemSaveDataProxy; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B99B80))();
  }
};
}