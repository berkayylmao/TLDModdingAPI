// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.TimeSpan.hpp"


namespace ModdingAPI::Exposed::System::Text::RegularExpressions {
struct __RegexRunner_Il2CppStaticFields {
};

struct __RegexRunner_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _65535__ctor;
};

struct __RegexRunner_Il2CppClass {
  Il2CppClass_1 _1;
  __RegexRunner_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __RegexRunner_Il2CppVtbl vtbl;
};

class RegexRunner {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C5A7B8;
  static inline    __RegexRunner_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __RegexRunner_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__RegexRunner_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __RegexRunner_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t runtextbeg;
  int32_t runtextend;
  int32_t runtextstart;
  System_String* runtext;
  int32_t runtextpos;
  ModdingAPI::Exposed::System::Int32_array* runtrack;
  int32_t runtrackpos;
  ModdingAPI::Exposed::System::Int32_array* runstack;
  int32_t runstackpos;
  ModdingAPI::Exposed::System::Int32_array* runcrawl;
  int32_t runcrawlpos;
  int32_t runtrackcount;
  ModdingAPI::Exposed::System::Text::RegularExpressions::Match* runmatch;
  ModdingAPI::Exposed::System::Text::RegularExpressions::Regex* runregex;
  int32_t timeout;
  bool ignoreTimeout;
  int32_t timeoutOccursAt;
  int32_t timeoutChecksToSkip;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  ModdingAPI::Exposed::System::Text::RegularExpressions::Match* Scan(ModdingAPI::Exposed::System::Text::RegularExpressions::Regex* regex, System_String* text, int32_t textbeg, int32_t textend, int32_t textstart, int32_t prevlen, bool quick, ModdingAPI::Exposed::System::TimeSpan timeout) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::RegularExpressions::Match*(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*, ModdingAPI::Exposed::System::Text::RegularExpressions::Regex*, System_String*, int32_t, int32_t, int32_t, int32_t, bool, ModdingAPI::Exposed::System::TimeSpan)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1217150))(this, regex, text, textbeg, textend, textstart, prevlen, quick, timeout);
  }
  void StartTimeoutWatch() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1217510))(this);
  }
  void CheckTimeout() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1217570))(this);
  }
  void DoCheckTimeout() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x12176E0))(this);
  }
  void InitMatch() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1217830))(this);
  }
  ModdingAPI::Exposed::System::Text::RegularExpressions::Match* TidyMatch(bool quick) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::RegularExpressions::Match*(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1217C90))(this, quick);
  }
  void EnsureStorage() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1217CE0))(this);
  }
  bool IsBoundary(int32_t index, int32_t startpos, int32_t endpos) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1217EB0))(this, index, startpos, endpos);
  }
  bool IsECMABoundary(int32_t index, int32_t startpos, int32_t endpos) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1217FF0))(this, index, startpos, endpos);
  }
  void DoubleTrack() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1218130))(this);
  }
  void DoubleStack() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1218220))(this);
  }
  void DoubleCrawl() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1218310))(this);
  }
  void Crawl(int32_t i) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1218400))(this, i);
  }
  int32_t Popcrawl() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1218540))(this);
  }
  int32_t Crawlpos() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1218580))(this);
  }
  void Capture(int32_t capnum, int32_t start, int32_t end) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x12185A0))(this, capnum, start, end);
  }
  void TransferCapture(int32_t capnum, int32_t uncapnum, int32_t start, int32_t end) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1218630))(this, capnum, uncapnum, start, end);
  }
  void Uncapture() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1218760))(this);
  }
  bool IsMatched(int32_t cap) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x12187C0))(this, cap);
  }
  int32_t MatchIndex(int32_t cap) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x12187F0))(this, cap);
  }
  int32_t MatchLength(int32_t cap) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexRunner*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1218820))(this, cap);
  }
};
}