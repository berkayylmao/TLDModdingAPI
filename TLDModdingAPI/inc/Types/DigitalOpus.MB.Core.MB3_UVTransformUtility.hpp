// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect.hpp"
#include "ModdingAPI.Exposed.DigitalOpus.MB.Core.DRect.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Rect.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Rect.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector2.hpp"
#include "ModdingAPI.Exposed.DigitalOpus.MB.Core.DVector2.hpp"
#include "ModdingAPI::Exposed::DigitalOpus::MB::Core::DVector2.hpp"


namespace ModdingAPI::Exposed::DigitalOpus::MB::Core {
struct __MB3_UVTransformUtility_Il2CppStaticFields {
};

struct __MB3_UVTransformUtility_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __MB3_UVTransformUtility_Il2CppClass {
  Il2CppClass_1 _1;
  __MB3_UVTransformUtility_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MB3_UVTransformUtility_Il2CppVtbl vtbl;
};

class MB3_UVTransformUtility {
public:
  // Il2Cpp fields:
  __MB3_UVTransformUtility_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_UVTransformUtility*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static methods:
  static inline void Test() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCDF90))();
  }
  static inline float TransformX(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect r, double x) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCE240))(r, x);
  }
  static inline ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect CombineTransforms(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect r1, ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect r2) {
    return reinterpret_cast<ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect, ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCE260))(r1, r2);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Rect CombineTransforms(ModdingAPI::Exposed::UnityEngine::Rect r1, ModdingAPI::Exposed::UnityEngine::Rect r2) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect, ModdingAPI::Exposed::UnityEngine::Rect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCE2B0))(r1, r2);
  }
  static inline ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect InverseTransform(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect t) {
    return reinterpret_cast<ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCE300))(t);
  }
  static inline ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect GetShiftTransformToFitBinA(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect A, ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect B) {
    return reinterpret_cast<ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect, ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCE360))(A, B);
  }
  static inline ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect GetEncapsulatingRectShifted(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect uvRect1, ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect willBeIn) {
    return reinterpret_cast<ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect, ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCE4F0))(uvRect1, willBeIn);
  }
  static inline ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect GetEncapsulatingRect(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect uvRect1, ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect uvRect2) {
    return reinterpret_cast<ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect, ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCE6F0))(uvRect1, uvRect2);
  }
  static inline bool RectContainsShifted(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect bucket, ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect tryFit) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect, ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCE780))(bucket, tryFit);
  }
  static inline bool RectContainsShifted(ModdingAPI::Exposed::UnityEngine::Rect bucket, ModdingAPI::Exposed::UnityEngine::Rect tryFit) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect, ModdingAPI::Exposed::UnityEngine::Rect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCE960))(bucket, tryFit);
  }
  static inline bool LineSegmentContainsShifted(float bucketOffset, float bucketLength, float tryFitOffset, float tryFitLength) {
    return reinterpret_cast<bool(__fastcall*)(float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCEB50))(bucketOffset, bucketLength, tryFitOffset, tryFitLength);
  }
  static inline bool RectContains(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect bigRect, ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect smallToTestIfFits) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect, ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCECA0))(bigRect, smallToTestIfFits);
  }
  static inline bool RectContains(ModdingAPI::Exposed::UnityEngine::Rect bigRect, ModdingAPI::Exposed::UnityEngine::Rect smallToTestIfFits) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect, ModdingAPI::Exposed::UnityEngine::Rect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCED50))(bigRect, smallToTestIfFits);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 TransformPoint(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect r, ModdingAPI::Exposed::UnityEngine::Vector2 p) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCEDF0))(r, p);
  }
  static inline ModdingAPI::Exposed::DigitalOpus::MB::Core::DVector2 TransformPoint(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect r, ModdingAPI::Exposed::DigitalOpus::MB::Core::DVector2 p) {
    return reinterpret_cast<ModdingAPI::Exposed::DigitalOpus::MB::Core::DVector2(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect, ModdingAPI::Exposed::DigitalOpus::MB::Core::DVector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCEE30))(r, p);
  }
};
}