// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::System::IO::MonoIOStat.hpp"


namespace ModdingAPI::Exposed::System::IO {
struct __MonoIO_Il2CppStaticFields {
  intptr_t InvalidHandle;
  bool dump_handles;
};

struct __MonoIO_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __MonoIO_Il2CppClass {
  Il2CppClass_1 _1;
  __MonoIO_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MonoIO_Il2CppVtbl vtbl;
};

class MonoIO {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C8C778;
  static inline    __MonoIO_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __MonoIO_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__MonoIO_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __MonoIO_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<intptr_t> InvalidHandle = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->InvalidHandle; }
  );
  static inline __CppStaticProperty<bool> dump_handles = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->dump_handles; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::System::Exception* GetException(int32_t error) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC98B50))(error);
  }
  static inline ModdingAPI::Exposed::System::Exception* GetException(System_String* path, int32_t error) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC98DE0))(path, error);
  }
  static inline bool CreateDirectory(wchar_t* path, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC99EC0))(path, error);
  }
  static inline bool CreateDirectory(System_String* path, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC99F40))(path, error);
  }
  static inline bool RemoveDirectory(wchar_t* path, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9A060))(path, error);
  }
  static inline bool RemoveDirectory(System_String* path, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9A0E0))(path, error);
  }
  static inline System_String* GetCurrentDirectory(int32_t error) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9A200))(error);
  }
  static inline bool CopyFile(wchar_t* path, wchar_t* dest, bool overwrite, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t*, wchar_t*, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9A290))(path, dest, overwrite, error);
  }
  static inline bool CopyFile(System_String* path, System_String* dest, bool overwrite, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, System_String*, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9A3A0))(path, dest, overwrite, error);
  }
  static inline bool DeleteFile(wchar_t* path, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9A550))(path, error);
  }
  static inline bool DeleteFile(System_String* path, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9A5D0))(path, error);
  }
  static inline int32_t GetFileAttributes(wchar_t* path, int32_t error) {
    return reinterpret_cast<int32_t(__fastcall*)(wchar_t*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9A6F0))(path, error);
  }
  static inline int32_t GetFileAttributes(System_String* path, int32_t error) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9A770))(path, error);
  }
  static inline bool SetFileAttributes(wchar_t* path, int32_t attrs, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9A890))(path, attrs, error);
  }
  static inline bool SetFileAttributes(System_String* path, int32_t attrs, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9A920))(path, attrs, error);
  }
  static inline int32_t GetFileType(intptr_t handle, int32_t error) {
    return reinterpret_cast<int32_t(__fastcall*)(intptr_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9AA50))(handle, error);
  }
  static inline int32_t GetFileType(ModdingAPI::Exposed::System::Runtime::InteropServices::SafeHandle* safeHandle, int32_t error) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Runtime::InteropServices::SafeHandle*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9AA60))(safeHandle, error);
  }
  static inline intptr_t FindFirstFile(wchar_t* pathWithPattern, System_String* fileName, int32_t fileAttr, int32_t error) {
    return reinterpret_cast<intptr_t(__fastcall*)(wchar_t*, System_String*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9ABD0))(pathWithPattern, fileName, fileAttr, error);
  }
  static inline intptr_t FindFirstFile(System_String* pathWithPattern, System_String* fileName, int32_t fileAttr, int32_t error) {
    return reinterpret_cast<intptr_t(__fastcall*)(System_String*, System_String*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9ABE0))(pathWithPattern, fileName, fileAttr, error);
  }
  static inline bool FindNextFile(intptr_t hnd, System_String* fileName, int32_t fileAttr, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(intptr_t, System_String*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9ACC0))(hnd, fileName, fileAttr, error);
  }
  static inline bool FindCloseFile(intptr_t hnd) {
    return reinterpret_cast<bool(__fastcall*)(intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9ACD0))(hnd);
  }
  static inline bool Exists(System_String* path, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9ACF0))(path, error);
  }
  static inline bool ExistsFile(System_String* path, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9ADB0))(path, error);
  }
  static inline bool ExistsDirectory(System_String* path, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9AE80))(path, error);
  }
  static inline bool ExistsSymlink(System_String* path, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9AF50))(path, error);
  }
  static inline bool GetFileStat(wchar_t* path, ModdingAPI::Exposed::System::IO::MonoIOStat stat, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t*, ModdingAPI::Exposed::System::IO::MonoIOStat, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9B020))(path, stat, error);
  }
  static inline bool GetFileStat(System_String* path, ModdingAPI::Exposed::System::IO::MonoIOStat stat, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, ModdingAPI::Exposed::System::IO::MonoIOStat, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9B120))(path, stat, error);
  }
  static inline intptr_t Open(wchar_t* filename, int32_t mode, int32_t access, int32_t share, int32_t options, int32_t error) {
    return reinterpret_cast<intptr_t(__fastcall*)(wchar_t*, int32_t, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9B2C0))(filename, mode, access, share, options, error);
  }
  static inline intptr_t Open(System_String* filename, int32_t mode, int32_t access, int32_t share, int32_t options, int32_t error) {
    return reinterpret_cast<intptr_t(__fastcall*)(System_String*, int32_t, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9B380))(filename, mode, access, share, options, error);
  }
  static inline bool Close(intptr_t handle, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(intptr_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9B4D0))(handle, error);
  }
  static inline int32_t Read(intptr_t handle, ModdingAPI::Exposed::System::Byte_array* dest, int32_t dest_offset, int32_t count, int32_t error) {
    return reinterpret_cast<int32_t(__fastcall*)(intptr_t, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9B510))(handle, dest, dest_offset, count, error);
  }
  static inline int32_t Read(ModdingAPI::Exposed::System::Runtime::InteropServices::SafeHandle* safeHandle, ModdingAPI::Exposed::System::Byte_array* dest, int32_t dest_offset, int32_t count, int32_t error) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Runtime::InteropServices::SafeHandle*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9B5A0))(safeHandle, dest, dest_offset, count, error);
  }
  static inline int32_t Write(intptr_t handle, ModdingAPI::Exposed::System::Byte_array* src, int32_t src_offset, int32_t count, int32_t error) {
    return reinterpret_cast<int32_t(__fastcall*)(intptr_t, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9B790))(handle, src, src_offset, count, error);
  }
  static inline int32_t Write(ModdingAPI::Exposed::System::Runtime::InteropServices::SafeHandle* safeHandle, ModdingAPI::Exposed::System::Byte_array* src, int32_t src_offset, int32_t count, int32_t error) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Runtime::InteropServices::SafeHandle*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9B7C0))(safeHandle, src, src_offset, count, error);
  }
  static inline int64_t Seek(intptr_t handle, int64_t offset, int32_t origin, int32_t error) {
    return reinterpret_cast<int64_t(__fastcall*)(intptr_t, int64_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9B980))(handle, offset, origin, error);
  }
  static inline int64_t Seek(ModdingAPI::Exposed::System::Runtime::InteropServices::SafeHandle* safeHandle, int64_t offset, int32_t origin, int32_t error) {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::Runtime::InteropServices::SafeHandle*, int64_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9B9C0))(safeHandle, offset, origin, error);
  }
  static inline int64_t GetLength(intptr_t handle, int32_t error) {
    return reinterpret_cast<int64_t(__fastcall*)(intptr_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9BB70))(handle, error);
  }
  static inline int64_t GetLength(ModdingAPI::Exposed::System::Runtime::InteropServices::SafeHandle* safeHandle, int32_t error) {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::Runtime::InteropServices::SafeHandle*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9BBB0))(safeHandle, error);
  }
  static inline intptr_t get_ConsoleOutput() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9BD40))();
  }
  static inline intptr_t get_ConsoleInput() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9BD50))();
  }
  static inline intptr_t get_ConsoleError() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9BD60))();
  }
  static inline bool CreatePipe(intptr_t read_handle, intptr_t write_handle, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(intptr_t, intptr_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9BD70))(read_handle, write_handle, error);
  }
  static inline bool DuplicateHandle(intptr_t source_process_handle, intptr_t source_handle, intptr_t target_process_handle, intptr_t target_handle, int32_t access, int32_t inherit, int32_t options, int32_t error) {
    return reinterpret_cast<bool(__fastcall*)(intptr_t, intptr_t, intptr_t, intptr_t, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9BDC0))(source_process_handle, source_handle, target_process_handle, target_handle, access, inherit, options, error);
  }
  static inline wchar_t get_VolumeSeparatorChar() {
    return reinterpret_cast<wchar_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9BE10))();
  }
  static inline wchar_t get_DirectorySeparatorChar() {
    return reinterpret_cast<wchar_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9BE20))();
  }
  static inline wchar_t get_AltDirectorySeparatorChar() {
    return reinterpret_cast<wchar_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9BE30))();
  }
  static inline wchar_t get_PathSeparator() {
    return reinterpret_cast<wchar_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9BE40))();
  }
  static inline void DumpHandles() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x6DF1D0))();
  }
  static inline bool RemapPath(System_String* path, System_String* newPath) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9BE50))(path, newPath);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9BE60))();
  }
};
}