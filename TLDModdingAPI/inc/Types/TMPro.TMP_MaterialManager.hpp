// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::TMPro {
struct __TMP_MaterialManager_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_materialList;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_fallbackMaterials;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_fallbackMaterialLookup;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_fallbackCleanupList;
  bool isFallbackListDirty;
};

struct __TMP_MaterialManager_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __TMP_MaterialManager_Il2CppClass {
  Il2CppClass_1 _1;
  __TMP_MaterialManager_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TMP_MaterialManager_Il2CppVtbl vtbl;
};

class TMP_MaterialManager {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C58180;
  static inline    __TMP_MaterialManager_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __TMP_MaterialManager_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__TMP_MaterialManager_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __TMP_MaterialManager_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> m_materialList = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_materialList; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> m_fallbackMaterials = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_fallbackMaterials; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> m_fallbackMaterialLookup = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_fallbackMaterialLookup; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> m_fallbackCleanupList = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_fallbackCleanupList; }
  );
  static inline __CppStaticProperty<bool> isFallbackListDirty = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->isFallbackListDirty; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E0430))();
  }
  static inline void OnPreRender(ModdingAPI::Exposed::UnityEngine::Camera* cam) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Camera*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E0A70))(cam);
  }
  static inline void OnPreRenderCanvas() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E0B40))();
  }
  static inline ModdingAPI::Exposed::UnityEngine::Material* GetStencilMaterial(ModdingAPI::Exposed::UnityEngine::Material* baseMaterial, int32_t stencilID) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Material*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E0C10))(baseMaterial, stencilID);
  }
  static inline void ReleaseStencilMaterial(ModdingAPI::Exposed::UnityEngine::Material* stencilMaterial) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E1250))(stencilMaterial);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Material* GetBaseMaterial(ModdingAPI::Exposed::UnityEngine::Material* stencilMaterial) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E1560))(stencilMaterial);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Material* SetStencil(ModdingAPI::Exposed::UnityEngine::Material* material, int32_t stencilID) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Material*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E1870))(material, stencilID);
  }
  static inline void AddMaskingMaterial(ModdingAPI::Exposed::UnityEngine::Material* baseMaterial, ModdingAPI::Exposed::UnityEngine::Material* stencilMaterial, int32_t stencilID) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Material*, ModdingAPI::Exposed::UnityEngine::Material*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E1AA0))(baseMaterial, stencilMaterial, stencilID);
  }
  static inline void RemoveStencilMaterial(ModdingAPI::Exposed::UnityEngine::Material* stencilMaterial) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E1F50))(stencilMaterial);
  }
  static inline void ReleaseBaseMaterial(ModdingAPI::Exposed::UnityEngine::Material* baseMaterial) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E2230))(baseMaterial);
  }
  static inline void ClearMaterials() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E2BF0))();
  }
  static inline int32_t GetStencilID(ModdingAPI::Exposed::UnityEngine::GameObject* obj) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E2E00))(obj);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Material* GetMaterialForRendering(ModdingAPI::Exposed::UnityEngine::UI::MaskableGraphic* graphic, ModdingAPI::Exposed::UnityEngine::Material* baseMaterial) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::MaskableGraphic*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E31C0))(graphic, baseMaterial);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Transform* FindRootSortOverrideCanvas(ModdingAPI::Exposed::UnityEngine::Transform* start) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Transform*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E33E0))(start);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Material* GetFallbackMaterial(ModdingAPI::Exposed::UnityEngine::Material* sourceMaterial, ModdingAPI::Exposed::UnityEngine::Material* targetMaterial) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Material*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E3610))(sourceMaterial, targetMaterial);
  }
  static inline void AddFallbackMaterialReference(ModdingAPI::Exposed::UnityEngine::Material* targetMaterial) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E3D90))(targetMaterial);
  }
  static inline void RemoveFallbackMaterialReference(ModdingAPI::Exposed::UnityEngine::Material* targetMaterial) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E3FB0))(targetMaterial);
  }
  static inline void CleanupFallbackMaterials() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E4230))();
  }
  static inline void ReleaseFallbackMaterial(ModdingAPI::Exposed::UnityEngine::Material* fallackMaterial) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E44F0))(fallackMaterial);
  }
  static inline void CopyMaterialPresetProperties(ModdingAPI::Exposed::UnityEngine::Material* source, ModdingAPI::Exposed::UnityEngine::Material* destination) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Material*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E47A0))(source, destination);
  }
};
}