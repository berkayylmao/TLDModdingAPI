// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color32.hpp"

namespace ModdingAPI::Exposed::UnityEngine::ParticleSystem {
struct __Particle_Il2CppObject {
  ModdingAPI::Exposed::UnityEngine::Vector3 m_Position;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_Velocity;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_AnimatedVelocity;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_InitialVelocity;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_AxisOfRotation;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_Rotation;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_AngularVelocity;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_StartSize;
  ModdingAPI::Exposed::UnityEngine::Color32 m_StartColor;
  uint32_t m_RandomSeed;
  float m_Lifetime;
  float m_StartLifetime;
  float m_EmitAccumulator0;
  float m_EmitAccumulator1;
  uint32_t m_Flags;
};
struct __Particle_Il2CppStaticFields {
};

struct __Particle_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Particle_Il2CppClass {
  Il2CppClass_1 _1;
  __Particle_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Particle_Il2CppVtbl vtbl;
};

class Particle {
public:
  // Member fields:
  ModdingAPI::Exposed::UnityEngine::Vector3 m_Position;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_Velocity;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_AnimatedVelocity;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_InitialVelocity;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_AxisOfRotation;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_Rotation;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_AngularVelocity;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_StartSize;
  ModdingAPI::Exposed::UnityEngine::Color32 m_StartColor;
  uint32_t m_RandomSeed;
  float m_Lifetime;
  float m_StartLifetime;
  float m_EmitAccumulator0;
  float m_EmitAccumulator1;
  uint32_t m_Flags;

  // Member methods:
  float get_lifetime() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C280))(this);
  }
  void set_lifetime(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C290))(this, value);
  }
  float get_randomValue() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2A0))(this);
  }
  float get_size() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C350))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Color32 get_color() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color32(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C360))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_position() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3B560))(this);
  }
  void set_position(ModdingAPI::Exposed::UnityEngine::Vector3 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE540))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_velocity() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3B5E0))(this);
  }
  void set_velocity(ModdingAPI::Exposed::UnityEngine::Vector3 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE570))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_animatedVelocity() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5B490))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_totalVelocity() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C370))(this);
  }
  float get_remainingLifetime() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C280))(this);
  }
  void set_remainingLifetime(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C290))(this, value);
  }
  float get_startLifetime() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C470))(this);
  }
  void set_startLifetime(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C480))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Color32 get_startColor() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color32(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C360))(this);
  }
  void set_startColor(ModdingAPI::Exposed::UnityEngine::Color32 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*, ModdingAPI::Exposed::UnityEngine::Color32)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C490))(this, value);
  }
  uint32_t get_randomSeed() {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C4A0))(this);
  }
  void set_randomSeed(uint32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C4B0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_axisOfRotation() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C4C0))(this);
  }
  float get_startSize() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C350))(this);
  }
  void set_startSize(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C4E0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_startSize3D() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C510))(this);
  }
  float get_rotation() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C530))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_rotation3D() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C540))(this);
  }
  void set_rotation3D(ModdingAPI::Exposed::UnityEngine::Vector3 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C630))(this, value);
  }
  float get_angularVelocity() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C660))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_angularVelocity3D() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C670))(this);
  }
  void set_angularVelocity3D(ModdingAPI::Exposed::UnityEngine::Vector3 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C760))(this, value);
  }

};
}