// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Microsoft::Win32 {
struct __KeyHandler_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Collections::Hashtable* key_to_handler;
  ModdingAPI::Exposed::System::Collections::Hashtable* dir_to_handler;
  System_String* user_store;
  System_String* machine_store;
};

struct __KeyHandler_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __KeyHandler_Il2CppClass {
  Il2CppClass_1 _1;
  __KeyHandler_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __KeyHandler_Il2CppVtbl vtbl;
};

class KeyHandler {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C62B80;
  static inline    KeyHandler* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C63CF8;
  static inline    __KeyHandler_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline KeyHandler* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (KeyHandler**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __KeyHandler_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__KeyHandler_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __KeyHandler_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  System_String* Dir;
  System_String* ActualDir;
  bool IsVolatile;
  ModdingAPI::Exposed::System::Collections::Hashtable* values;
  System_String* file;
  bool dirty;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey* rkey, System_String* basedir) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::KeyHandler*, ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA7490))(this, rkey, basedir);
  }
  void ::ctor(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey* rkey, System_String* basedir, bool is_volatile) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::KeyHandler*, ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA74B0))(this, rkey, basedir, is_volatile);
  }
  void Load() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::KeyHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA7650))(this);
  }
  void LoadKey(ModdingAPI::Exposed::System::Security::SecurityElement* se) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::KeyHandler*, ModdingAPI::Exposed::System::Security::SecurityElement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA7C30))(this, se);
  }
  ModdingAPI::Exposed::Microsoft::Win32::RegistryKey* Ensure(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey* rkey, System_String* extra, bool writable, bool is_volatile) {
    return reinterpret_cast<ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::KeyHandler*, ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*, System_String*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA8350))(this, rkey, extra, writable, is_volatile);
  }
  ModdingAPI::Exposed::Microsoft::Win32::RegistryKey* Probe(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey* rkey, System_String* extra, bool writable) {
    return reinterpret_cast<ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::KeyHandler*, ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA8810))(this, rkey, extra, writable);
  }
  Il2CppObject* GetValue(System_String* name, int32_t options) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::KeyHandler*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAAB90))(this, name, options);
  }
  ModdingAPI::Exposed::System::String_array* GetSubKeyNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::KeyHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAADD0))(this);
  }
  void Flush() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::KeyHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAB520))(this);
  }
  bool ValueExists(System_String* name) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::KeyHandler*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAB6A0))(this, name);
  }
  bool get_IsMarkedForDeletion() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::KeyHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAB830))(this);
  }
  void Finalize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::KeyHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAB900))(this);
  }
  void Save() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::KeyHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAB990))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Hashtable*> key_to_handler = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Hashtable*>(
   []() { return &GetStaticClassInstance()->pStaticFields->key_to_handler; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Hashtable*> dir_to_handler = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Hashtable*>(
   []() { return &GetStaticClassInstance()->pStaticFields->dir_to_handler; }
  );
  static inline __CppStaticProperty<System_String*> user_store = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->user_store; }
  );
  static inline __CppStaticProperty<System_String*> machine_store = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->machine_store; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA6E90))();
  }
  static inline System_String* CombineName(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey* rkey, System_String* extra) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA8E40))(rkey, extra);
  }
  static inline int64_t GetSystemBootTime() {
    return reinterpret_cast<int64_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA8F30))();
  }
  static inline int64_t GetRegisteredBootTime(System_String* path) {
    return reinterpret_cast<int64_t(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA9270))(path);
  }
  static inline void SaveRegisteredBootTime(System_String* path, int64_t btime) {
    reinterpret_cast<void(__fastcall*)(System_String*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA9550))(path, btime);
  }
  static inline void CleanVolatileKeys() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA9790))();
  }
  static inline bool VolatileKeyExists(System_String* dir) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA9A30))(dir);
  }
  static inline System_String* GetVolatileDir(System_String* dir) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA9CE0))(dir);
  }
  static inline ModdingAPI::Exposed::Microsoft::Win32::KeyHandler* Lookup(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey* rkey, bool createNonExisting) {
    return reinterpret_cast<ModdingAPI::Exposed::Microsoft::Win32::KeyHandler*(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA9DE0))(rkey, createNonExisting);
  }
  static inline System_String* GetRootFromDir(System_String* dir) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAA520))(dir);
  }
  static inline void Drop(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey* rkey) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAA6D0))(rkey);
  }
  static inline System_String* get_UserStore() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAC4B0))();
  }
  static inline System_String* get_MachineStore() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xDAC610))();
  }
};
}