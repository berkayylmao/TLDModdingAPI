// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Mono::Globalization::Unicode {
struct __SortKeyBuffer_Il2CppStaticFields {
};

struct __SortKeyBuffer_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SortKeyBuffer_Il2CppClass {
  Il2CppClass_1 _1;
  __SortKeyBuffer_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SortKeyBuffer_Il2CppVtbl vtbl;
};

class SortKeyBuffer {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C63D60;
  static inline    __SortKeyBuffer_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __SortKeyBuffer_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__SortKeyBuffer_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __SortKeyBuffer_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Byte_array* l1b;
  ModdingAPI::Exposed::System::Byte_array* l2b;
  ModdingAPI::Exposed::System::Byte_array* l3b;
  ModdingAPI::Exposed::System::Byte_array* l4sb;
  ModdingAPI::Exposed::System::Byte_array* l4tb;
  ModdingAPI::Exposed::System::Byte_array* l4kb;
  ModdingAPI::Exposed::System::Byte_array* l4wb;
  ModdingAPI::Exposed::System::Byte_array* l5b;
  System_String* source;
  int32_t l1;
  int32_t l2;
  int32_t l3;
  int32_t l4s;
  int32_t l4t;
  int32_t l4k;
  int32_t l4w;
  int32_t l5;
  int32_t lcid;
  int32_t options;
  bool processLevel2;
  bool frenchSort;
  bool frenchSorted;

  // Member methods:
  void ::ctor(int32_t lcid) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Globalization::Unicode::SortKeyBuffer*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, lcid);
  }
  void Reset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Globalization::Unicode::SortKeyBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDBCB10))(this);
  }
  void Initialize(int32_t options, int32_t lcid, System_String* s, bool frenchSort) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Globalization::Unicode::SortKeyBuffer*, int32_t, int32_t, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDBCB30))(this, options, lcid, s, frenchSort);
  }
  void AppendCJKExtension(uint8_t lv1msb, uint8_t lv1lsb) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Globalization::Unicode::SortKeyBuffer*, uint8_t, uint8_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDBCD00))(this, lv1msb, lv1lsb);
  }
  void AppendKana(uint8_t category, uint8_t lv1, uint8_t lv2, uint8_t lv3, bool isSmallKana, uint8_t markType, bool isKatakana, bool isHalfWidth) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Globalization::Unicode::SortKeyBuffer*, uint8_t, uint8_t, uint8_t, uint8_t, bool, uint8_t, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDBCDE0))(this, category, lv1, lv2, lv3, isSmallKana, markType, isKatakana, isHalfWidth);
  }
  void AppendNormal(uint8_t category, uint8_t lv1, uint8_t lv2, uint8_t lv3) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Globalization::Unicode::SortKeyBuffer*, uint8_t, uint8_t, uint8_t, uint8_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDBCEB0))(this, category, lv1, lv2, lv3);
  }
  void AppendLevel5(uint8_t category, uint8_t lv1) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Globalization::Unicode::SortKeyBuffer*, uint8_t, uint8_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDBD0E0))(this, category, lv1);
  }
  void AppendBufferPrimitive(uint8_t value, ModdingAPI::Exposed::System::Byte_array* buf, int32_t bidx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Globalization::Unicode::SortKeyBuffer*, uint8_t, ModdingAPI::Exposed::System::Byte_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDBD1C0))(this, value, buf, bidx);
  }
  ModdingAPI::Exposed::System::Globalization::SortKey* GetResultAndReset() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::SortKey*(__fastcall*)(ModdingAPI::Exposed::Mono::Globalization::Unicode::SortKeyBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDBD2C0))(this);
  }
  int32_t GetOptimizedLength(ModdingAPI::Exposed::System::Byte_array* data, int32_t len, uint8_t defaultValue) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Mono::Globalization::Unicode::SortKeyBuffer*, ModdingAPI::Exposed::System::Byte_array*, int32_t, uint8_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDBD2F0))(this, data, len, defaultValue);
  }
  ModdingAPI::Exposed::System::Globalization::SortKey* GetResult() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::SortKey*(__fastcall*)(ModdingAPI::Exposed::Mono::Globalization::Unicode::SortKeyBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDBD350))(this);
  }
};
}