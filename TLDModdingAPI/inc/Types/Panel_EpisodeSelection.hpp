// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __Panel_EpisodeSelection_Il2CppStaticFields {
};

struct __Panel_EpisodeSelection_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Panel_EpisodeSelection_Il2CppClass {
  Il2CppClass_1 _1;
  __Panel_EpisodeSelection_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Panel_EpisodeSelection_Il2CppVtbl vtbl;
};

class Panel_EpisodeSelection {
public:
  // Il2Cpp fields:
  __Panel_EpisodeSelection_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::Panel_EpisodeSelection::EpisodeDetails* m_EpisodeDetails;
  ModdingAPI::Exposed::ButtonLegendContainer* m_ButtonLegendContainer;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_MenuItems;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_LockedEpisodeDisplayObject;
  ModdingAPI::Exposed::AnimationStateRef* m_PlayOnSelectLocked;
  ModdingAPI::Exposed::AnimationStateRef* m_PlayOnDeselectLocked;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BasicMenuPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BasicMenuRoot;
  ModdingAPI::Exposed::BasicMenu* m_BasicMenu;
  ModdingAPI::Exposed::UnityEngine::Animator* m_EpisodeAnimator;
  int32_t m_LastItemIndexSelected;
  int32_t m_FurthestUnlockedEpisode;
  ModdingAPI::Exposed::Panel_EpisodeSelection::EpisodeMenuItem* m_PreviousEpisodeMenuItemSelected;
  int32_t m_CurrentEpisodeAnimationState;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C177B0))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C17850))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C179A0))(this);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x165DF10))(this);
  }
  void Enable(bool enabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C17C80))(this, enabled);
  }
  void RefreshFurthestUnlockedEpisode() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C17FB0))(this);
  }
  void OnClickBack() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C180A0))(this);
  }
  System_String* GetEpisodeStartMission(int32_t episode) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C18190))(this, episode);
  }
  ModdingAPI::Exposed::Panel_EpisodeSelection::EpisodeMenuItem* GetEpisodeMenuItem(int32_t episode) {
    return reinterpret_cast<ModdingAPI::Exposed::Panel_EpisodeSelection::EpisodeMenuItem*(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C181B0))(this, episode);
  }
  int32_t GetIndexFromType(int32_t type, ModdingAPI::Exposed::System::Collections::Generic::List_T_* menuItems) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*, int32_t, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C18340))(this, type, menuItems);
  }
  int32_t GetSelectedIndex() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C18430))(this);
  }
  ModdingAPI::Exposed::Panel_EpisodeSelection::EpisodeMenuItem* GetSelectedEpisodeMenuItem() {
    return reinterpret_cast<ModdingAPI::Exposed::Panel_EpisodeSelection::EpisodeMenuItem*(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C18450))(this);
  }
  void ProcessMenu() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C18520))(this);
  }
  void UpdateSelection() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C18870))(this);
  }
  bool CanPlayEpisode(int32_t episode) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C18C70))(this, episode);
  }
  bool CanPlayEpisodeSelected() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C18C80))(this);
  }
  void UpdateButtonLegend() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C18CB0))(this);
  }
  void OnlyEnableItem(ModdingAPI::Exposed::Panel_EpisodeSelection::EpisodeMenuItem* enabledItem) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*, ModdingAPI::Exposed::Panel_EpisodeSelection::EpisodeMenuItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C18DF0))(this, enabledItem);
  }
  void UpdateUnlockedItemDisplay() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C18FA0))(this);
  }
  void OnStartEpisodeSelected() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C19230))(this);
  }
  void PlaySelectedAnimation(ModdingAPI::Exposed::Panel_EpisodeSelection::EpisodeMenuItem* episodeMenuItem) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*, ModdingAPI::Exposed::Panel_EpisodeSelection::EpisodeMenuItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C19390))(this, episodeMenuItem);
  }
  void PlayDeselectedAnimation(ModdingAPI::Exposed::Panel_EpisodeSelection::EpisodeMenuItem* episodeMenuItem) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*, ModdingAPI::Exposed::Panel_EpisodeSelection::EpisodeMenuItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C194C0))(this, episodeMenuItem);
  }
  void RestoreSelection() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C195F0))(this);
  }
  void ConfigureMenu() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C19630))(this);
  }
  void OnSelectionUpdate(System_String* name, int32_t value, int32_t itemIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*, System_String*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C19A30))(this, name, value, itemIndex);
  }
  ModdingAPI::Exposed::SaveSlotInfo* GetLatestSave(int32_t episode) {
    return reinterpret_cast<ModdingAPI::Exposed::SaveSlotInfo*(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C19A40))(this, episode);
  }
  void GatherLatestSaves() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C19B00))(this);
  }
  void AddMenuItem(int32_t itemIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C19CF0))(this, itemIndex);
  }
  bool IsPlayingAnySelectionAnimation() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C1A1E0))(this);
  }
  bool IsPlayingAnyDeselectionAnimation() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C1A450))(this);
  }
  bool IsPlayingAnimation(int32_t stateHash) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C1A6C0))(this, stateHash);
  }
  void UpdateAnimation() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C1A800))(this);
  }
  void SelectionBegins() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C1AAF0))(this);
  }
  void HideAllAnimatedItems() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C1AB20))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_EpisodeSelection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C1ADA0))(this);
  }
};
}