// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityPlugin.SYSTEMTIME.hpp"
#include "ModdingAPI.Exposed.System.DateTime.hpp"

namespace ModdingAPI::Exposed::UnityPlugin {
struct __SYSTEMTIME_Il2CppObject {
  int16_t Year;
  int16_t Month;
  int16_t DayOfWeek;
  int16_t Day;
  int16_t Hour;
  int16_t Minute;
  int16_t Second;
  int16_t Milliseconds;
};
struct __SYSTEMTIME_Il2CppStaticFields {
  ModdingAPI::Exposed::UnityPlugin::SYSTEMTIME MinValue;
  ModdingAPI::Exposed::UnityPlugin::SYSTEMTIME MaxValue;
};

struct __SYSTEMTIME_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SYSTEMTIME_Il2CppClass {
  Il2CppClass_1 _1;
  __SYSTEMTIME_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SYSTEMTIME_Il2CppVtbl vtbl;
};

class SYSTEMTIME {
  static constexpr uint64_t _rvaClassInstance     = 0x3C32E58;
  static inline    __SYSTEMTIME_Il2CppClass* _pStaticClassInstance = nullptr;

public:
  // Static class getter:
  static inline __SYSTEMTIME_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__SYSTEMTIME_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Member fields:
  int16_t Year;
  int16_t Month;
  int16_t DayOfWeek;
  int16_t Day;
  int16_t Hour;
  int16_t Minute;
  int16_t Second;
  int16_t Milliseconds;

  // Member methods:
  void ::ctor(int16_t year, int16_t month, int16_t day, int16_t hour, int16_t minute, int16_t second, int16_t millisecond) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityPlugin::SYSTEMTIME*, int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, int16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFC50))(this, year, month, day, hour, minute, second, millisecond);
  }
  void ::ctor(ModdingAPI::Exposed::System::DateTime dt) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityPlugin::SYSTEMTIME*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFC90))(this, dt);
  }
  ModdingAPI::Exposed::System::DateTime ToDateTime() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::UnityPlugin::SYSTEMTIME*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFE40))(this);
  }
  bool Equals(Il2CppObject* obj) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityPlugin::SYSTEMTIME*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFE50))(this, obj);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityPlugin::SYSTEMTIME*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFE60))(this);
  }

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E21B10))();
  }

};
}