// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __IceCrackingManager_Il2CppStaticFields {
};

struct __IceCrackingManager_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __IceCrackingManager_Il2CppClass {
  Il2CppClass_1 _1;
  __IceCrackingManager_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __IceCrackingManager_Il2CppVtbl vtbl;
};

class IceCrackingManager {
public:
  // Il2Cpp fields:
  __IceCrackingManager_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_EnteredWarningPosition;
  float m_ConditionLossOnFallThrough;
  float m_FadeOutSeconds;
  float m_StayFadedOutSeconds;
  float m_FadeInSeconds;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_FarDecalScale;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_MediumDecalScale;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_CloseDecalScale;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_CritDecalScale;
  float m_FellInRecentlyTimer;
  ModdingAPI::Exposed::BreakableIce* m_BreakableIce;
  float m_FadeInTimeSeconds;
  float m_FadeOutTimeSeconds;
  float m_CurrentVolume;
  int32_t m_NumTriggersInside;
  int32_t m_NumFallTriggersInside;
  uint32_t m_IceCrackingSoundID;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_IceFallTriggers;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_LastSafeLocation;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_RespawnLocation;
  float m_TrackLocationTimer;
  bool m_ShowingWeakIceLabel;
  ModdingAPI::Exposed::UnityEngine::Collider_array* m_RespawnColliders;
  int32_t m_AnimParameter_ShowThinIceIndicator;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1755C50))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1755DA0))(this);
  }
  void EnterIceCrackingTrigger(System_String* audioID, ModdingAPI::Exposed::UnityEngine::GameObject* go, float fadeInSeconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*, System_String*, ModdingAPI::Exposed::UnityEngine::GameObject*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17561D0))(this, audioID, go, fadeInSeconds);
  }
  void ExitIceCrackingTrigger(float fadeOutSeconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17562C0))(this, fadeOutSeconds);
  }
  void EnterFallTrigger() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17562E0))(this);
  }
  void ExitFallTrigger() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17562F0))(this);
  }
  void ExitAllTriggers() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1756300))(this);
  }
  bool IsInsideTrigger() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1756310))(this);
  }
  bool IsInsideFallTrigger() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1756320))(this);
  }
  void Register(ModdingAPI::Exposed::IceCrackingTrigger* trigger) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*, ModdingAPI::Exposed::IceCrackingTrigger*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1756330))(this, trigger);
  }
  bool FellInRecently() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17563D0))(this);
  }
  ModdingAPI::Exposed::IceCrackingTrigger* FindNearestFallTrigger(ModdingAPI::Exposed::UnityEngine::Vector3 pos) {
    return reinterpret_cast<ModdingAPI::Exposed::IceCrackingTrigger*(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17563E0))(this, pos);
  }
  bool OverlapsFallTrigger(ModdingAPI::Exposed::UnityEngine::Collider* c, float ignoreDistance) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*, ModdingAPI::Exposed::UnityEngine::Collider*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1756650))(this, c, ignoreDistance);
  }
  float GetDistToClosestFallTrigger(ModdingAPI::Exposed::UnityEngine::Vector3 pos) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1756990))(this, pos);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetRespawnLocation() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1756D90))(this);
  }
  void SetBreakableIce(ModdingAPI::Exposed::BreakableIce* bi) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*, ModdingAPI::Exposed::BreakableIce*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A4C0))(this, bi);
  }
  bool DisableWeakIce() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this);
  }
  void UpdateHUDWarning() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1757120))(this);
  }
  void UpdateTrackLocation() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1757290))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceCrackingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17574E0))(this);
  }
};
}