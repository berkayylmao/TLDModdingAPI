// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Xml {
struct __XmlLoader_Il2CppStaticFields {
};

struct __XmlLoader_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __XmlLoader_Il2CppClass {
  Il2CppClass_1 _1;
  __XmlLoader_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __XmlLoader_Il2CppVtbl vtbl;
};

class XmlLoader {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C31A30;
  static inline    __XmlLoader_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __XmlLoader_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__XmlLoader_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __XmlLoader_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Xml::XmlDocument* doc;
  ModdingAPI::Exposed::System::Xml::XmlReader* reader;
  bool preserveWhitespace;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void Load(ModdingAPI::Exposed::System::Xml::XmlDocument* doc, ModdingAPI::Exposed::System::Xml::XmlReader* reader, bool preserveWhitespace) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*, ModdingAPI::Exposed::System::Xml::XmlDocument*, ModdingAPI::Exposed::System::Xml::XmlReader*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8D8320))(this, doc, reader, preserveWhitespace);
  }
  void LoadDocSequence(ModdingAPI::Exposed::System::Xml::XmlDocument* parentDoc) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*, ModdingAPI::Exposed::System::Xml::XmlDocument*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8D8630))(this, parentDoc);
  }
  ModdingAPI::Exposed::System::Xml::XmlNode* LoadNode(bool skipOverWhitespace) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlNode*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8D86B0))(this, skipOverWhitespace);
  }
  ModdingAPI::Exposed::System::Xml::XmlAttribute* LoadAttributeNode() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlAttribute*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8D8DF0))(this);
  }
  ModdingAPI::Exposed::System::Xml::XmlAttribute* LoadDefaultAttribute() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlAttribute*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8D91B0))(this);
  }
  void LoadAttributeValue(ModdingAPI::Exposed::System::Xml::XmlNode* parent, bool direct) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*, ModdingAPI::Exposed::System::Xml::XmlNode*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8D93D0))(this, parent, direct);
  }
  ModdingAPI::Exposed::System::Xml::XmlEntityReference* LoadEntityReferenceNode(bool direct) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlEntityReference*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8D9960))(this, direct);
  }
  ModdingAPI::Exposed::System::Xml::XmlDeclaration* LoadDeclarationNode() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlDeclaration*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8D9CB0))(this);
  }
  ModdingAPI::Exposed::System::Xml::XmlDocumentType* LoadDocumentTypeNode() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlDocumentType*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8D9FD0))(this);
  }
  ModdingAPI::Exposed::System::Xml::XmlNode* LoadNodeDirect() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlNode*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8DA300))(this);
  }
  ModdingAPI::Exposed::System::Xml::XmlAttribute* LoadAttributeNodeDirect() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlAttribute*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8DADA0))(this);
  }
  void ParseDocumentType(ModdingAPI::Exposed::System::Xml::XmlDocumentType* dtNode) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*, ModdingAPI::Exposed::System::Xml::XmlDocumentType*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8DB110))(this, dtNode);
  }
  void ParseDocumentType(ModdingAPI::Exposed::System::Xml::XmlDocumentType* dtNode, bool bUseResolver, ModdingAPI::Exposed::System::Xml::XmlResolver* resolver) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*, ModdingAPI::Exposed::System::Xml::XmlDocumentType*, bool, ModdingAPI::Exposed::System::Xml::XmlResolver*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8DB1A0))(this, dtNode, bUseResolver, resolver);
  }
  void LoadDocumentType(ModdingAPI::Exposed::System::Xml::IDtdInfo* dtdInfo, ModdingAPI::Exposed::System::Xml::XmlDocumentType* dtNode) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*, ModdingAPI::Exposed::System::Xml::IDtdInfo*, ModdingAPI::Exposed::System::Xml::XmlDocumentType*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8DB700))(this, dtdInfo, dtNode);
  }
  ModdingAPI::Exposed::System::Xml::XmlParserContext* GetContext(ModdingAPI::Exposed::System::Xml::XmlNode* node) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlParserContext*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*, ModdingAPI::Exposed::System::Xml::XmlNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8DC660))(this, node);
  }
  ModdingAPI::Exposed::System::Xml::XmlNamespaceManager* ParsePartialContent(ModdingAPI::Exposed::System::Xml::XmlNode* parentNode, System_String* innerxmltext, int32_t nt) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlNamespaceManager*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*, ModdingAPI::Exposed::System::Xml::XmlNode*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8DD1D0))(this, parentNode, innerxmltext, nt);
  }
  void LoadInnerXmlElement(ModdingAPI::Exposed::System::Xml::XmlElement* node, System_String* innerxmltext) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*, ModdingAPI::Exposed::System::Xml::XmlElement*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8DD400))(this, node, innerxmltext);
  }
  void LoadInnerXmlAttribute(ModdingAPI::Exposed::System::Xml::XmlAttribute* node, System_String* innerxmltext) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*, ModdingAPI::Exposed::System::Xml::XmlAttribute*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8DD4A0))(this, node, innerxmltext);
  }
  void RemoveDuplicateNamespace(ModdingAPI::Exposed::System::Xml::XmlElement* elem, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager* mgr, bool fCheckElemAttrs) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*, ModdingAPI::Exposed::System::Xml::XmlElement*, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8DD4C0))(this, elem, mgr, fCheckElemAttrs);
  }
  System_String* EntitizeName(System_String* name) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8DD970))(this, name);
  }
  void ExpandEntity(ModdingAPI::Exposed::System::Xml::XmlEntity* ent) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*, ModdingAPI::Exposed::System::Xml::XmlEntity*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8DDA00))(this, ent);
  }
  void ExpandEntityReference(ModdingAPI::Exposed::System::Xml::XmlEntityReference* eref) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*, ModdingAPI::Exposed::System::Xml::XmlEntityReference*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8DDA70))(this, eref);
  }
  ModdingAPI::Exposed::System::Xml::XmlReader* CreateInnerXmlReader(System_String* xmlFragment, int32_t nt, ModdingAPI::Exposed::System::Xml::XmlParserContext* context, ModdingAPI::Exposed::System::Xml::XmlDocument* doc) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlReader*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlLoader*, System_String*, int32_t, ModdingAPI::Exposed::System::Xml::XmlParserContext*, ModdingAPI::Exposed::System::Xml::XmlDocument*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8DE240))(this, xmlFragment, nt, context, doc);
  }

  // Static methods:
  static inline void ParseXmlDeclarationValue(System_String* strValue, System_String* version, System_String* encoding, System_String* standalone) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8DE610))(strValue, version, encoding, standalone);
  }
  static inline ModdingAPI::Exposed::System::Exception* UnexpectedNodeType(int32_t nodetype) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8DE8D0))(nodetype);
  }
};
}