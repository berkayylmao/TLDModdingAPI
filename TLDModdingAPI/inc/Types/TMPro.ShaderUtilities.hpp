// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector4.hpp"


namespace ModdingAPI::Exposed::TMPro {
struct __ShaderUtilities_Il2CppStaticFields {
  int32_t ID_MainTex;
  int32_t ID_FaceTex;
  int32_t ID_FaceColor;
  int32_t ID_FaceDilate;
  int32_t ID_Shininess;
  int32_t ID_UnderlayColor;
  int32_t ID_UnderlayOffsetX;
  int32_t ID_UnderlayOffsetY;
  int32_t ID_UnderlayDilate;
  int32_t ID_UnderlaySoftness;
  int32_t ID_WeightNormal;
  int32_t ID_WeightBold;
  int32_t ID_OutlineTex;
  int32_t ID_OutlineWidth;
  int32_t ID_OutlineSoftness;
  int32_t ID_OutlineColor;
  int32_t ID_Padding;
  int32_t ID_GradientScale;
  int32_t ID_ScaleX;
  int32_t ID_ScaleY;
  int32_t ID_PerspectiveFilter;
  int32_t ID_Sharpness;
  int32_t ID_TextureWidth;
  int32_t ID_TextureHeight;
  int32_t ID_BevelAmount;
  int32_t ID_GlowColor;
  int32_t ID_GlowOffset;
  int32_t ID_GlowPower;
  int32_t ID_GlowOuter;
  int32_t ID_LightAngle;
  int32_t ID_EnvMap;
  int32_t ID_EnvMatrix;
  int32_t ID_EnvMatrixRotation;
  int32_t ID_MaskCoord;
  int32_t ID_ClipRect;
  int32_t ID_MaskSoftnessX;
  int32_t ID_MaskSoftnessY;
  int32_t ID_VertexOffsetX;
  int32_t ID_VertexOffsetY;
  int32_t ID_UseClipRect;
  int32_t ID_StencilID;
  int32_t ID_StencilOp;
  int32_t ID_StencilComp;
  int32_t ID_StencilReadMask;
  int32_t ID_StencilWriteMask;
  int32_t ID_ShaderFlags;
  int32_t ID_ScaleRatio_A;
  int32_t ID_ScaleRatio_B;
  int32_t ID_ScaleRatio_C;
  System_String* Keyword_Bevel;
  System_String* Keyword_Glow;
  System_String* Keyword_Underlay;
  System_String* Keyword_Ratios;
  System_String* Keyword_MASK_SOFT;
  System_String* Keyword_MASK_HARD;
  System_String* Keyword_MASK_TEX;
  System_String* Keyword_Outline;
  System_String* ShaderTag_ZTestMode;
  System_String* ShaderTag_CullMode;
  float m_clamp;
  bool isInitialized;
  ModdingAPI::Exposed::UnityEngine::Shader* k_ShaderRef_MobileSDF;
  ModdingAPI::Exposed::UnityEngine::Shader* k_ShaderRef_MobileBitmap;
};

struct __ShaderUtilities_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ShaderUtilities_Il2CppClass {
  Il2CppClass_1 _1;
  __ShaderUtilities_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ShaderUtilities_Il2CppVtbl vtbl;
};

class ShaderUtilities {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C24860;
  static inline    __ShaderUtilities_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ShaderUtilities_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ShaderUtilities_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ShaderUtilities_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<int32_t> ID_MainTex = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_MainTex; }
  );
  static inline __CppStaticProperty<int32_t> ID_FaceTex = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_FaceTex; }
  );
  static inline __CppStaticProperty<int32_t> ID_FaceColor = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_FaceColor; }
  );
  static inline __CppStaticProperty<int32_t> ID_FaceDilate = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_FaceDilate; }
  );
  static inline __CppStaticProperty<int32_t> ID_Shininess = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_Shininess; }
  );
  static inline __CppStaticProperty<int32_t> ID_UnderlayColor = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_UnderlayColor; }
  );
  static inline __CppStaticProperty<int32_t> ID_UnderlayOffsetX = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_UnderlayOffsetX; }
  );
  static inline __CppStaticProperty<int32_t> ID_UnderlayOffsetY = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_UnderlayOffsetY; }
  );
  static inline __CppStaticProperty<int32_t> ID_UnderlayDilate = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_UnderlayDilate; }
  );
  static inline __CppStaticProperty<int32_t> ID_UnderlaySoftness = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_UnderlaySoftness; }
  );
  static inline __CppStaticProperty<int32_t> ID_WeightNormal = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_WeightNormal; }
  );
  static inline __CppStaticProperty<int32_t> ID_WeightBold = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_WeightBold; }
  );
  static inline __CppStaticProperty<int32_t> ID_OutlineTex = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_OutlineTex; }
  );
  static inline __CppStaticProperty<int32_t> ID_OutlineWidth = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_OutlineWidth; }
  );
  static inline __CppStaticProperty<int32_t> ID_OutlineSoftness = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_OutlineSoftness; }
  );
  static inline __CppStaticProperty<int32_t> ID_OutlineColor = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_OutlineColor; }
  );
  static inline __CppStaticProperty<int32_t> ID_Padding = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_Padding; }
  );
  static inline __CppStaticProperty<int32_t> ID_GradientScale = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_GradientScale; }
  );
  static inline __CppStaticProperty<int32_t> ID_ScaleX = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_ScaleX; }
  );
  static inline __CppStaticProperty<int32_t> ID_ScaleY = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_ScaleY; }
  );
  static inline __CppStaticProperty<int32_t> ID_PerspectiveFilter = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_PerspectiveFilter; }
  );
  static inline __CppStaticProperty<int32_t> ID_Sharpness = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_Sharpness; }
  );
  static inline __CppStaticProperty<int32_t> ID_TextureWidth = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_TextureWidth; }
  );
  static inline __CppStaticProperty<int32_t> ID_TextureHeight = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_TextureHeight; }
  );
  static inline __CppStaticProperty<int32_t> ID_BevelAmount = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_BevelAmount; }
  );
  static inline __CppStaticProperty<int32_t> ID_GlowColor = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_GlowColor; }
  );
  static inline __CppStaticProperty<int32_t> ID_GlowOffset = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_GlowOffset; }
  );
  static inline __CppStaticProperty<int32_t> ID_GlowPower = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_GlowPower; }
  );
  static inline __CppStaticProperty<int32_t> ID_GlowOuter = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_GlowOuter; }
  );
  static inline __CppStaticProperty<int32_t> ID_LightAngle = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_LightAngle; }
  );
  static inline __CppStaticProperty<int32_t> ID_EnvMap = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_EnvMap; }
  );
  static inline __CppStaticProperty<int32_t> ID_EnvMatrix = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_EnvMatrix; }
  );
  static inline __CppStaticProperty<int32_t> ID_EnvMatrixRotation = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_EnvMatrixRotation; }
  );
  static inline __CppStaticProperty<int32_t> ID_MaskCoord = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_MaskCoord; }
  );
  static inline __CppStaticProperty<int32_t> ID_ClipRect = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_ClipRect; }
  );
  static inline __CppStaticProperty<int32_t> ID_MaskSoftnessX = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_MaskSoftnessX; }
  );
  static inline __CppStaticProperty<int32_t> ID_MaskSoftnessY = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_MaskSoftnessY; }
  );
  static inline __CppStaticProperty<int32_t> ID_VertexOffsetX = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_VertexOffsetX; }
  );
  static inline __CppStaticProperty<int32_t> ID_VertexOffsetY = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_VertexOffsetY; }
  );
  static inline __CppStaticProperty<int32_t> ID_UseClipRect = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_UseClipRect; }
  );
  static inline __CppStaticProperty<int32_t> ID_StencilID = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_StencilID; }
  );
  static inline __CppStaticProperty<int32_t> ID_StencilOp = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_StencilOp; }
  );
  static inline __CppStaticProperty<int32_t> ID_StencilComp = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_StencilComp; }
  );
  static inline __CppStaticProperty<int32_t> ID_StencilReadMask = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_StencilReadMask; }
  );
  static inline __CppStaticProperty<int32_t> ID_StencilWriteMask = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_StencilWriteMask; }
  );
  static inline __CppStaticProperty<int32_t> ID_ShaderFlags = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_ShaderFlags; }
  );
  static inline __CppStaticProperty<int32_t> ID_ScaleRatio_A = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_ScaleRatio_A; }
  );
  static inline __CppStaticProperty<int32_t> ID_ScaleRatio_B = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_ScaleRatio_B; }
  );
  static inline __CppStaticProperty<int32_t> ID_ScaleRatio_C = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ID_ScaleRatio_C; }
  );
  static inline __CppStaticProperty<System_String*> Keyword_Bevel = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Keyword_Bevel; }
  );
  static inline __CppStaticProperty<System_String*> Keyword_Glow = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Keyword_Glow; }
  );
  static inline __CppStaticProperty<System_String*> Keyword_Underlay = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Keyword_Underlay; }
  );
  static inline __CppStaticProperty<System_String*> Keyword_Ratios = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Keyword_Ratios; }
  );
  static inline __CppStaticProperty<System_String*> Keyword_MASK_SOFT = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Keyword_MASK_SOFT; }
  );
  static inline __CppStaticProperty<System_String*> Keyword_MASK_HARD = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Keyword_MASK_HARD; }
  );
  static inline __CppStaticProperty<System_String*> Keyword_MASK_TEX = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Keyword_MASK_TEX; }
  );
  static inline __CppStaticProperty<System_String*> Keyword_Outline = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Keyword_Outline; }
  );
  static inline __CppStaticProperty<System_String*> ShaderTag_ZTestMode = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->ShaderTag_ZTestMode; }
  );
  static inline __CppStaticProperty<System_String*> ShaderTag_CullMode = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->ShaderTag_CullMode; }
  );
  static inline __CppStaticProperty<float> m_clamp = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_clamp; }
  );
  static inline __CppStaticProperty<bool> isInitialized = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->isInitialized; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Shader*> k_ShaderRef_MobileSDF = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Shader*>(
   []() { return &GetStaticClassInstance()->pStaticFields->k_ShaderRef_MobileSDF; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Shader*> k_ShaderRef_MobileBitmap = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Shader*>(
   []() { return &GetStaticClassInstance()->pStaticFields->k_ShaderRef_MobileBitmap; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::UnityEngine::Shader* get_ShaderRef_MobileSDF() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Shader*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x3E3E90))();
  }
  static inline ModdingAPI::Exposed::UnityEngine::Shader* get_ShaderRef_MobileBitmap() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Shader*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x3E4020))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x3E41B0))();
  }
  static inline void GetShaderPropertyIDs() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x3E4360))();
  }
  static inline void UpdateShaderRatios(ModdingAPI::Exposed::UnityEngine::Material* mat) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3E57E0))(mat);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector4 GetFontExtent(ModdingAPI::Exposed::UnityEngine::Material* material) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector4(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3E6240))(material);
  }
  static inline bool IsMaskingEnabled(ModdingAPI::Exposed::UnityEngine::Material* material) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3E62F0))(material);
  }
  static inline float GetPadding(ModdingAPI::Exposed::UnityEngine::Material* material, bool enableExtraPadding, bool isBold) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Material*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3E6580))(material, enableExtraPadding, isBold);
  }
  static inline float GetPadding(ModdingAPI::Exposed::UnityEngine::Material_array* materials, bool enableExtraPadding, bool isBold) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Material_array*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3E70A0))(materials, enableExtraPadding, isBold);
  }
};
}