// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Xml.XmlCharType.hpp"


namespace ModdingAPI::Exposed::System::Xml {
struct __XmlTextWriter_Il2CppStaticFields {
  ModdingAPI::Exposed::System::String_array* stateName;
  ModdingAPI::Exposed::System::String_array* tokenName;
  ModdingAPI::Exposed::System::Xml::XmlTextWriter::State_array* stateTableDefault;
  ModdingAPI::Exposed::System::Xml::XmlTextWriter::State_array* stateTableDocument;
};

struct __XmlTextWriter_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Dispose;
  VirtualInvokeData _5_WriteStartDocument;
  VirtualInvokeData _6_WriteStartDocument;
  VirtualInvokeData _7_WriteEndDocument;
  VirtualInvokeData _8_WriteDocType;
  VirtualInvokeData _9_WriteStartElement;
  VirtualInvokeData _10_WriteEndElement;
  VirtualInvokeData _11_WriteFullEndElement;
  VirtualInvokeData _12_WriteStartAttribute;
  VirtualInvokeData _13_WriteEndAttribute;
  VirtualInvokeData _14_WriteCData;
  VirtualInvokeData _15_WriteComment;
  VirtualInvokeData _16_WriteProcessingInstruction;
  VirtualInvokeData _17_WriteEntityRef;
  VirtualInvokeData _18_WriteCharEntity;
  VirtualInvokeData _19_WriteWhitespace;
  VirtualInvokeData _20_WriteString;
  VirtualInvokeData _21_WriteSurrogateCharEntity;
  VirtualInvokeData _22_WriteChars;
  VirtualInvokeData _23_WriteRaw;
  VirtualInvokeData _24_WriteRaw;
  VirtualInvokeData _25_WriteBase64;
  VirtualInvokeData _26_WriteBinHex;
  VirtualInvokeData _27_get_WriteState;
  VirtualInvokeData _28_Close;
  VirtualInvokeData _29_Flush;
  VirtualInvokeData _30_LookupPrefix;
  VirtualInvokeData _31_WriteValue;
  VirtualInvokeData _32_WriteValue;
  VirtualInvokeData _33_WriteValue;
  VirtualInvokeData _34_WriteValue;
  VirtualInvokeData _35_WriteValue;
  VirtualInvokeData _36_WriteValue;
  VirtualInvokeData _37_WriteValue;
  VirtualInvokeData _38_WriteValue;
  VirtualInvokeData _39_WriteValue;
  VirtualInvokeData _40_Dispose;
};

struct __XmlTextWriter_Il2CppClass {
  Il2CppClass_1 _1;
  __XmlTextWriter_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __XmlTextWriter_Il2CppVtbl vtbl;
};

class XmlTextWriter {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C7F628;
  static inline    __XmlTextWriter_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __XmlTextWriter_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__XmlTextWriter_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __XmlTextWriter_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::IO::TextWriter* textWriter;
  ModdingAPI::Exposed::System::Xml::XmlTextEncoder* xmlEncoder;
  ModdingAPI::Exposed::System::Text::Encoding* encoding;
  int32_t formatting;
  bool indented;
  int32_t indentation;
  wchar_t indentChar;
  ModdingAPI::Exposed::System::Xml::XmlTextWriter::TagInfo_array* stack;
  int32_t top;
  ModdingAPI::Exposed::System::Xml::XmlTextWriter::State_array* stateTable;
  int32_t currentState;
  int32_t lastToken;
  ModdingAPI::Exposed::System::Xml::XmlTextWriterBase64Encoder* base64Encoder;
  wchar_t quoteChar;
  wchar_t curQuoteChar;
  bool namespaces;
  int32_t specialAttr;
  System_String* prefixForXmlNs;
  bool flush;
  ModdingAPI::Exposed::System::Xml::XmlTextWriter::Namespace_array* nsStack;
  int32_t nsTop;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* nsHashtable;
  bool useNsHashtable;
  ModdingAPI::Exposed::System::Xml::XmlCharType xmlCharType;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C48A0))(this);
  }
  void ::ctor(ModdingAPI::Exposed::System::IO::TextWriter* w) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, ModdingAPI::Exposed::System::IO::TextWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C4A00))(this, w);
  }
  void set_Formatting(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C4CD0))(this, value);
  }
  void WriteStartDocument() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C4CE0))(this);
  }
  void WriteStartDocument(bool standalone) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C4CF0))(this, standalone);
  }
  void WriteEndDocument() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C4D10))(this);
  }
  void WriteDocType(System_String* name, System_String* pubid, System_String* sysid, System_String* subset) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*, System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C4ED0))(this, name, pubid, sysid, subset);
  }
  void WriteStartElement(System_String* prefix, System_String* localName, System_String* ns) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C5250))(this, prefix, localName, ns);
  }
  void WriteEndElement() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C5820))(this);
  }
  void WriteFullEndElement() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C5830))(this);
  }
  void WriteStartAttribute(System_String* prefix, System_String* localName, System_String* ns) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C5840))(this, prefix, localName, ns);
  }
  void WriteEndAttribute() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C6010))(this);
  }
  void WriteCData(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C60D0))(this, text);
  }
  void WriteComment(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C6280))(this, text);
  }
  void WriteProcessingInstruction(System_String* name, System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C6450))(this, name, text);
  }
  void WriteEntityRef(System_String* name) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C66F0))(this, name);
  }
  void WriteCharEntity(wchar_t ch) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C6840))(this, ch);
  }
  void WriteWhitespace(System_String* ws) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C6A50))(this, ws);
  }
  void WriteString(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C6BA0))(this, text);
  }
  void WriteSurrogateCharEntity(wchar_t lowChar, wchar_t highChar) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, wchar_t, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C6C90))(this, lowChar, highChar);
  }
  void WriteChars(ModdingAPI::Exposed::System::Char_array* buffer, int32_t index, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, ModdingAPI::Exposed::System::Char_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C6D80))(this, buffer, index, count);
  }
  void WriteRaw(ModdingAPI::Exposed::System::Char_array* buffer, int32_t index, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, ModdingAPI::Exposed::System::Char_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C6E80))(this, buffer, index, count);
  }
  void WriteRaw(System_String* data) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C6F80))(this, data);
  }
  void WriteBase64(ModdingAPI::Exposed::System::Byte_array* buffer, int32_t index, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C7060))(this, buffer, index, count);
  }
  void WriteBinHex(ModdingAPI::Exposed::System::Byte_array* buffer, int32_t index, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C7270))(this, buffer, index, count);
  }
  int32_t get_WriteState() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C7370))(this);
  }
  void Close() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C73E0))(this);
  }
  void Flush() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C7550))(this);
  }
  System_String* LookupPrefix(System_String* ns) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C7580))(this, ns);
  }
  void StartDocument(int32_t standalone) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C76E0))(this, standalone);
  }
  void AutoComplete(int32_t token) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C7A30))(this, token);
  }
  void AutoCompleteAll() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C8050))(this);
  }
  void InternalWriteEndElement(bool longFormat) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C80A0))(this, longFormat);
  }
  void WriteEndStartTag(bool empty) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C84C0))(this, empty);
  }
  void WriteEndAttributeQuote() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C8AE0))(this);
  }
  void Indent(bool beforeEndElement) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C8B60))(this, beforeEndElement);
  }
  void PushNamespace(System_String* prefix, System_String* ns, bool declared) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C8C60))(this, prefix, ns, declared);
  }
  void AddNamespace(System_String* prefix, System_String* ns, bool declared) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C9000))(this, prefix, ns, declared);
  }
  void AddToNamespaceHashtable(int32_t namespaceIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C9370))(this, namespaceIndex);
  }
  void PopNamespaces(int32_t indexFrom, int32_t indexTo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C9540))(this, indexFrom, indexTo);
  }
  System_String* GeneratePrefix() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C9670))(this);
  }
  void InternalWriteProcessingInstruction(System_String* name, System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C97D0))(this, name, text);
  }
  int32_t LookupNamespace(System_String* prefix) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C9920))(this, prefix);
  }
  int32_t LookupNamespaceInCurrentScope(System_String* prefix) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C9AB0))(this, prefix);
  }
  System_String* FindPrefix(System_String* ns) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C9CE0))(this, ns);
  }
  void ValidateName(System_String* name, bool isNCName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C9E20))(this, name, isNCName);
  }
  void HandleSpecialAttribute() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5CA0E0))(this);
  }
  void VerifyPrefixXml(System_String* prefix, System_String* ns) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5CA440))(this, prefix, ns);
  }
  void PushStack() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5CA5C0))(this);
  }
  void FlushEncoders() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5CA6E0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::String_array*> stateName = __CppStaticProperty<ModdingAPI::Exposed::System::String_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->stateName; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::String_array*> tokenName = __CppStaticProperty<ModdingAPI::Exposed::System::String_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->tokenName; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XmlTextWriter::State_array*> stateTableDefault = __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XmlTextWriter::State_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->stateTableDefault; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XmlTextWriter::State_array*> stateTableDocument = __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XmlTextWriter::State_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->stateTableDocument; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x5CA710))();
  }
};
}