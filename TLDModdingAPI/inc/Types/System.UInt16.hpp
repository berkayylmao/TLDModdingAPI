// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Decimal.hpp"
#include "ModdingAPI.Exposed.System.DateTime.hpp"

namespace ModdingAPI::Exposed::System {
struct __UInt16_Il2CppObject {
  uint16_t m_value;
};
struct __UInt16_Il2CppStaticFields {
};

struct __UInt16_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_CompareTo;
  VirtualInvokeData _5_ToString;
  VirtualInvokeData _6_GetTypeCode;
  VirtualInvokeData _7_System_IConvertible_ToBoolean;
  VirtualInvokeData _8_System_IConvertible_ToChar;
  VirtualInvokeData _9_System_IConvertible_ToSByte;
  VirtualInvokeData _10_System_IConvertible_ToByte;
  VirtualInvokeData _11_System_IConvertible_ToInt16;
  VirtualInvokeData _12_System_IConvertible_ToUInt16;
  VirtualInvokeData _13_System_IConvertible_ToInt32;
  VirtualInvokeData _14_System_IConvertible_ToUInt32;
  VirtualInvokeData _15_System_IConvertible_ToInt64;
  VirtualInvokeData _16_System_IConvertible_ToUInt64;
  VirtualInvokeData _17_System_IConvertible_ToSingle;
  VirtualInvokeData _18_System_IConvertible_ToDouble;
  VirtualInvokeData _19_System_IConvertible_ToDecimal;
  VirtualInvokeData _20_System_IConvertible_ToDateTime;
  VirtualInvokeData _21_ToString;
  VirtualInvokeData _22_System_IConvertible_ToType;
  VirtualInvokeData _23_CompareTo;
  VirtualInvokeData _24_Equals;
};

struct __UInt16_Il2CppClass {
  Il2CppClass_1 _1;
  __UInt16_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __UInt16_Il2CppVtbl vtbl;
};

class UInt16 {
  static constexpr uint64_t _rvaObjectInstance     = 0x3C25978;
  static inline    UInt16* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t _rvaClassInstance     = 0x3C82F98;
  static inline    __UInt16_Il2CppClass* _pStaticClassInstance = nullptr;

public:
  // Singleton object getter:
  static inline UInt16* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (UInt16**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

  // Static class getter:
  static inline __UInt16_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__UInt16_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Member fields:
  uint16_t m_value;

  // Member methods:
  int32_t CompareTo(Il2CppObject* value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3FB30))(this, value);
  }
  int32_t CompareTo(uint16_t value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x37130))(this, value);
  }
  bool Equals(Il2CppObject* obj) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3FB40))(this, obj);
  }
  bool Equals(uint16_t obj) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2E780))(this, obj);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::UInt16*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3500))(this);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::UInt16*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3FB50))(this);
  }
  System_String* ToString(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3FB80))(this, provider);
  }
  System_String* ToString(System_String* format) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3FBB0))(this, format);
  }
  System_String* ToString(System_String* format, ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, System_String*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3FBF0))(this, format, provider);
  }
  int32_t GetTypeCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::UInt16*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3FC30))(this);
  }
  bool System::IConvertible::ToBoolean(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3FC40))(this, provider);
  }
  wchar_t System::IConvertible::ToChar(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<wchar_t(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3FCE0))(this, provider);
  }
  char System::IConvertible::ToSByte(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<char(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3FD80))(this, provider);
  }
  uint8_t System::IConvertible::ToByte(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<uint8_t(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3FEC0))(this, provider);
  }
  int16_t System::IConvertible::ToInt16(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<int16_t(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x40000))(this, provider);
  }
  uint16_t System::IConvertible::ToUInt16(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<uint16_t(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3500))(this, provider);
  }
  int32_t System::IConvertible::ToInt32(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x40140))(this, provider);
  }
  uint32_t System::IConvertible::ToUInt32(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x401E0))(this, provider);
  }
  int64_t System::IConvertible::ToInt64(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x40280))(this, provider);
  }
  uint64_t System::IConvertible::ToUInt64(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<uint64_t(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x40320))(this, provider);
  }
  float System::IConvertible::ToSingle(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x403C0))(this, provider);
  }
  double System::IConvertible::ToDouble(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x40460))(this, provider);
  }
  ModdingAPI::Exposed::System::Decimal System::IConvertible::ToDecimal(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Decimal(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x40500))(this, provider);
  }
  ModdingAPI::Exposed::System::DateTime System::IConvertible::ToDateTime(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x40640))(this, provider);
  }
  Il2CppObject* System::IConvertible::ToType(ModdingAPI::Exposed::System::Type* type, ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::UInt16*, ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x40650))(this, type, provider);
  }

  // Static methods:
  static inline uint16_t Parse(System_String* s, int32_t style) {
    return reinterpret_cast<uint16_t(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1055500))(s, style);
  }
  static inline uint16_t Parse(System_String* s, ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<uint16_t(__fastcall*)(System_String*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1055540))(s, provider);
  }
  static inline uint16_t Parse(System_String* s, int32_t style, ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<uint16_t(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1055570))(s, style, provider);
  }
  static inline uint16_t Parse(System_String* s, int32_t style, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* info) {
    return reinterpret_cast<uint16_t(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10555C0))(s, style, info);
  }
  static inline bool TryParse(System_String* s, uint16_t result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1055700))(s, result);
  }
  static inline bool TryParse(System_String* s, int32_t style, ModdingAPI::Exposed::System::IFormatProvider* provider, uint16_t result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::IFormatProvider*, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1055770))(s, style, provider, result);
  }
  static inline bool TryParse(System_String* s, int32_t style, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* info, uint16_t result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1055800))(s, style, info, result);
  }

};
}