// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer {
struct __fsData_Il2CppStaticFields {
  ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData* True;
  ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData* False;
  ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData* Null;
};

struct __fsData_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __fsData_Il2CppClass {
  Il2CppClass_1 _1;
  __fsData_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __fsData_Il2CppVtbl vtbl;
};

class fsData {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C3ABA0;
  static inline    __fsData_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __fsData_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__fsData_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __fsData_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  Il2CppObject* _value;

  // Member methods:
  int32_t get_Type() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2424EF0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x663840))(this);
  }
  void ::ctor(bool boolean) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2425090))(this, boolean);
  }
  void ::ctor(double f) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2425130))(this, f);
  }
  void ::ctor(int64_t i) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24251D0))(this, i);
  }
  void ::ctor(System_String* str) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, str);
  }
  void ::ctor(ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* dict) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*, ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, dict);
  }
  void ::ctor(ModdingAPI::Exposed::System::Collections::Generic::List_T_* list) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, list);
  }
  void BecomeDictionary() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2425940))(this);
  }
  ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData* Clone() {
    return reinterpret_cast<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2425AE0))(this);
  }
  bool get_IsNull() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF56F50))(this);
  }
  bool get_IsDouble() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2425C30))(this);
  }
  bool get_IsInt64() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2425CD0))(this);
  }
  bool get_IsBool() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2425D70))(this);
  }
  bool get_IsString() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2425E10))(this);
  }
  bool get_IsDictionary() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2425EB0))(this);
  }
  bool get_IsList() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2425F70))(this);
  }
  double get_AsDouble() {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2426030))(this);
  }
  int64_t get_AsInt64() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24260B0))(this);
  }
  bool get_AsBool() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2426130))(this);
  }
  System_String* get_AsString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24261B0))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* get_AsDictionary() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2426230))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* get_AsList() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24262B0))(this);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2426330))(this);
  }
  bool Equals(Il2CppObject* obj) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2426340))(this, obj);
  }
  bool Equals(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData* other) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*, ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24263F0))(this, other);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA42660))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*> True = __CppStaticProperty<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*>(
   []() { return &GetStaticClassInstance()->pStaticFields->True; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*> False = __CppStaticProperty<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*>(
   []() { return &GetStaticClassInstance()->pStaticFields->False; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*> Null = __CppStaticProperty<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Null; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData* CreateDictionary() {
    return reinterpret_cast<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2425270))();
  }
  static inline ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData* CreateList() {
    return reinterpret_cast<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2425520))();
  }
  static inline ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData* CreateList(int32_t capacity) {
    return reinterpret_cast<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2425730))(capacity);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2426B20))();
  }
};
}