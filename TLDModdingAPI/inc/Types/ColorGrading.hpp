// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector4.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed {
struct __ColorGrading_Il2CppStaticFields {
};

struct __ColorGrading_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_CheckResources;
};

struct __ColorGrading_Il2CppClass {
  Il2CppClass_1 _1;
  __ColorGrading_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ColorGrading_Il2CppVtbl vtbl;
};

class ColorGrading {
public:
  // Il2Cpp fields:
  __ColorGrading_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool supportHDRTextures;
  bool supportDX11;
  bool isSupported;
  ModdingAPI::Exposed::UnityEngine::Shader* m_ImageShader;
  ModdingAPI::Exposed::UnityEngine::Material* m_LutBlendMaterial;
  ModdingAPI::Exposed::UnityEngine::Texture2D* m_DefaultLUT;
  ModdingAPI::Exposed::UnityEngine::Texture2D* m_PainEffectLUT;
  ModdingAPI::Exposed::UnityEngine::Texture2D* m_NoiseTexture;
  ModdingAPI::Exposed::UnityEngine::Vector4 m_NoiseParams;
  bool m_NoiseRandomize;
  float m_HdrScalar;
  float m_Saturation;
  float m_Gamma;
  float m_Contrast;
  bool m_DebugColorScalar;
  float m_ColorScalar;
  ModdingAPI::Exposed::UnityEngine::Texture2D* m_AuxiliaryLUT;
  float m_AuxiliaryBlend;
  bool m_ShowWarmingEffect;
  bool m_DebugFreezing;
  bool m_DebugWarming;
  ModdingAPI::Exposed::ColorGrading::PosBlendInfo* m_FreezingEffect;
  ModdingAPI::Exposed::ColorGrading::PosBlendInfo* m_WarmingEffect;
  float m_ShowFreezingEdgeArrowCount;
  float m_ShowFreezingTintArrowCount;
  float m_FreezingTintColdStart;
  float m_FreezingTintColdMax;
  float m_GammaLimitLow;
  float m_GammaLimitHigh;
  float m_PainEffectIntensity;
  float m_PainEffectIntensityTarget;
  ModdingAPI::Exposed::UnityEngine::Material* m_ImageEffectMaterial;
  ModdingAPI::Exposed::UnityEngine::Material* m_CustomLUTBlendMaterial;
  int32_t m_Tex1AId;
  int32_t m_Tex1BId;
  int32_t m_Tex2AId;
  int32_t m_Tex2BId;
  int32_t m_TexAuxId;
  int32_t m_TexExtraId;
  int32_t m_BlendAmountsId;
  int32_t m_AdjustmentsId;
  int32_t m_LUTTexId;
  int32_t m_NoiseTexId;
  int32_t m_NoiseParamsId;
  int32_t m_HDRScalarId;
  ModdingAPI::Exposed::System::Int32_array* m_LUTPosBlendIds;
  ModdingAPI::Exposed::System::Int32_array* m_PosBlendPosIds;
  ModdingAPI::Exposed::System::Int32_array* m_PosBlendInfoIds;
  ModdingAPI::Exposed::UnityEngine::Vector4 m_BlendRecord;
  ModdingAPI::Exposed::UnityEngine::Vector4 m_AdjustmentRecord;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_WarmingNoise;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_WarmingNoiseStep;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_FreezingNoise;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_FreezingNoiseStep;
  int32_t m_LUTBlendMainShaderPass;
  ModdingAPI::Exposed::UnityEngine::Texture2D* m_Lut1A;
  ModdingAPI::Exposed::UnityEngine::Texture2D* m_Lut1B;
  ModdingAPI::Exposed::UnityEngine::Texture2D* m_Lut2A;
  ModdingAPI::Exposed::UnityEngine::Texture2D* m_Lut2B;
  float m_BrightnessSetting;
  ModdingAPI::Exposed::UnityEngine::RenderTexture_array* m_RenderTextures;
  int32_t m_ScreenTintLastClient;
  int32_t m_ScreenTintTransitionClient;
  float m_ScreenTintTransitionTimer;
  float m_ScreenTintTransitionDuration;

  // Member methods:
  bool CheckResources() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ColorGrading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16219F0))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ColorGrading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1621A40))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ColorGrading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16223C0))(this);
  }
  void Configure() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ColorGrading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1622520))(this);
  }
  float GetDefaultGamma() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::ColorGrading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1622810))(this);
  }
  void ConfigureForInterior() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ColorGrading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1622820))(this);
  }
  void ConfigureForExterior() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ColorGrading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1622980))(this);
  }
  void UpdateLUTMaterialForTOD(ModdingAPI::Exposed::UnityEngine::Texture2D* lut1A, ModdingAPI::Exposed::UnityEngine::Texture2D* lut1B, ModdingAPI::Exposed::UnityEngine::Texture2D* lut2A, ModdingAPI::Exposed::UnityEngine::Texture2D* lut2B, float blend1, float blend2, float blendCombine) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ColorGrading*, ModdingAPI::Exposed::UnityEngine::Texture2D*, ModdingAPI::Exposed::UnityEngine::Texture2D*, ModdingAPI::Exposed::UnityEngine::Texture2D*, ModdingAPI::Exposed::UnityEngine::Texture2D*, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1622AE0))(this, lut1A, lut1B, lut2A, lut2B, blend1, blend2, blendCombine);
  }
  void ConfigureLUTMaterialForInterior(ModdingAPI::Exposed::UnityEngine::Texture2D* customLUT) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ColorGrading*, ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1622E10))(this, customLUT);
  }
  void UpdateMaterialForAuxiliaryBlend(ModdingAPI::Exposed::UnityEngine::Texture2D* lut, float blend) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ColorGrading*, ModdingAPI::Exposed::UnityEngine::Texture2D*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1622F00))(this, lut, blend);
  }
  void PrepareForPositionalBlend(ModdingAPI::Exposed::ColorGrading::PosBlendInfo* pb, ModdingAPI::Exposed::UnityEngine::RenderTexture* rt, int32_t i, float noise, ModdingAPI::Exposed::UnityEngine::RenderTexture* screen) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ColorGrading*, ModdingAPI::Exposed::ColorGrading::PosBlendInfo*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, int32_t, float, ModdingAPI::Exposed::UnityEngine::RenderTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16230B0))(this, pb, rt, i, noise, screen);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ColorGrading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1623680))(this);
  }
  void OnRenderImage(ModdingAPI::Exposed::UnityEngine::RenderTexture* source, ModdingAPI::Exposed::UnityEngine::RenderTexture* destination) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ColorGrading*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16237B0))(this, source, destination);
  }
  void GetLUTAndBlendForClient(int32_t client, ModdingAPI::Exposed::UnityEngine::Texture2D* lut, float blend) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ColorGrading*, int32_t, ModdingAPI::Exposed::UnityEngine::Texture2D*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1624330))(this, client, lut, blend);
  }
  ModdingAPI::Exposed::UnityEngine::RenderTexture* HandleScreenTint(ModdingAPI::Exposed::UnityEngine::RenderTexture* screen) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::RenderTexture*(__fastcall*)(ModdingAPI::Exposed::ColorGrading*, ModdingAPI::Exposed::UnityEngine::RenderTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16243E0))(this, screen);
  }
  float GetBrightnessSetting() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::ColorGrading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x79CEB0))(this);
  }
  void SetBrightnessSetting(float val) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ColorGrading*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1624B90))(this, val);
  }
  float GetModifiedGamma() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::ColorGrading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1624BA0))(this);
  }
  void OnCopyFrom(ModdingAPI::Exposed::ColorGrading* src) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ColorGrading*, ModdingAPI::Exposed::ColorGrading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1624CA0))(this, src);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ColorGrading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1625020))(this);
  }
};
}