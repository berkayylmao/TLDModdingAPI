// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.TimeSpan.hpp"
#include "ModdingAPI.Exposed.System.DateTime.hpp"
#include "ModdingAPI.Exposed.System.Runtime.Serialization.StreamingContext.hpp"
#include "ModdingAPI::Exposed::System::TimeSpan.hpp"
#include "ModdingAPI::Exposed::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION.hpp"
#include "ModdingAPI::Exposed::System::TimeZoneInfo::TIME_ZONE_INFORMATION.hpp"
#include "ModdingAPI::Exposed::System::DateTime.hpp"
#include "ModdingAPI::Exposed::System::TimeZoneInfo::TransitionTime.hpp"


namespace ModdingAPI::Exposed::System {
struct __TimeZoneInfo_Il2CppStaticFields {
  ModdingAPI::Exposed::System::TimeZoneInfo* local;
  bool readlinkNotFound;
  ModdingAPI::Exposed::System::TimeZoneInfo* utc;
  System_String* timeZoneDirectory;
  ModdingAPI::Exposed::Microsoft::Win32::RegistryKey* timeZoneKey;
  ModdingAPI::Exposed::Microsoft::Win32::RegistryKey* localZoneKey;
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* systemTimeZones;
};

struct __TimeZoneInfo_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Equals;
  VirtualInvokeData _5_System_Runtime_Serialization_ISerializable_GetObjectData;
  VirtualInvokeData _6_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization;
};

struct __TimeZoneInfo_Il2CppClass {
  Il2CppClass_1 _1;
  __TimeZoneInfo_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TimeZoneInfo_Il2CppVtbl vtbl;
};

class TimeZoneInfo {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C2FD08;
  static inline    __TimeZoneInfo_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __TimeZoneInfo_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__TimeZoneInfo_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __TimeZoneInfo_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::TimeSpan baseUtcOffset;
  System_String* daylightDisplayName;
  System_String* displayName;
  System_String* id;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* transitions;
  System_String* standardDisplayName;
  bool supportsDaylightSavingTime;
  ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule_array* adjustmentRules;

  // Member methods:
  ModdingAPI::Exposed::System::TimeSpan get_BaseUtcOffset() {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  System_String* get_DisplayName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110A0))(this);
  }
  System_String* get_Id() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110B0))(this);
  }
  bool get_SupportsDaylightSavingTime() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE420))(this);
  }
  ModdingAPI::Exposed::System::DateTime ConvertTimeFromUtc(ModdingAPI::Exposed::System::DateTime dateTime) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1043BB0))(this, dateTime);
  }
  bool Equals(Il2CppObject* obj) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1044340))(this, obj);
  }
  bool Equals(ModdingAPI::Exposed::System::TimeZoneInfo* other) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, ModdingAPI::Exposed::System::TimeZoneInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1044430))(this, other);
  }
  ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule_array* GetAdjustmentRules() {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule_array*(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1045140))(this);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10452A0))(this);
  }
  void System::Runtime::Serialization::ISerializable::GetObjectData(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo* info, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1045490))(this, info, context);
  }
  ModdingAPI::Exposed::System::TimeSpan GetUtcOffset(ModdingAPI::Exposed::System::DateTime dateTime) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1045870))(this, dateTime);
  }
  ModdingAPI::Exposed::System::TimeSpan GetUtcOffset(ModdingAPI::Exposed::System::DateTime dateTime, bool isDST) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, ModdingAPI::Exposed::System::DateTime, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1045890))(this, dateTime, isDST);
  }
  bool HasSameRules(ModdingAPI::Exposed::System::TimeZoneInfo* other) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, ModdingAPI::Exposed::System::TimeZoneInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1045C90))(this, other);
  }
  bool IsAmbiguousTime(ModdingAPI::Exposed::System::DateTime dateTime) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1046060))(this, dateTime);
  }
  bool IsInDST(ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule* rule, ModdingAPI::Exposed::System::DateTime dateTime) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10462A0))(this, rule, dateTime);
  }
  bool IsInDSTForYear(ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule* rule, ModdingAPI::Exposed::System::DateTime dateTime, int32_t year) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule*, ModdingAPI::Exposed::System::DateTime, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1046360))(this, rule, dateTime, year);
  }
  bool IsDaylightSavingTime(ModdingAPI::Exposed::System::DateTime dateTime) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1046590))(this, dateTime);
  }
  bool IsDaylightSavingTime(ModdingAPI::Exposed::System::DateTime dateTime, int32_t flags) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, ModdingAPI::Exposed::System::DateTime, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1046590))(this, dateTime, flags);
  }
  bool IsInvalidTime(ModdingAPI::Exposed::System::DateTime dateTime) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10466B0))(this, dateTime);
  }
  void System::Runtime::Serialization::IDeserializationCallback::OnDeserialization(Il2CppObject* sender) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1046860))(this, sender);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110A0))(this);
  }
  void ::ctor(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo* info, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1046E80))(this, info, context);
  }
  void ::ctor(System_String* id, ModdingAPI::Exposed::System::TimeSpan baseUtcOffset, System_String* displayName, System_String* standardDisplayName, System_String* daylightDisplayName, ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule_array* adjustmentRules, bool disableDaylightSavingTime) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, System_String*, ModdingAPI::Exposed::System::TimeSpan, System_String*, System_String*, System_String*, ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule_array*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10471C0))(this, id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime);
  }
  ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule* GetApplicableRule(ModdingAPI::Exposed::System::DateTime dateTime) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule*(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10477A0))(this, dateTime);
  }
  bool TryGetTransitionOffset(ModdingAPI::Exposed::System::DateTime dateTime, ModdingAPI::Exposed::System::TimeSpan offset, bool isDst) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, ModdingAPI::Exposed::System::DateTime, ModdingAPI::Exposed::System::TimeSpan, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10479D0))(this, dateTime, offset, isDst);
  }
  ModdingAPI::Exposed::System::TimeSpan GetUtcOffset(ModdingAPI::Exposed::System::DateTime dateTime, int32_t flags) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*, ModdingAPI::Exposed::System::DateTime, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1045870))(this, dateTime, flags);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1049F80))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::TimeZoneInfo*> local = __CppStaticProperty<ModdingAPI::Exposed::System::TimeZoneInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->local; }
  );
  static inline __CppStaticProperty<bool> readlinkNotFound = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->readlinkNotFound; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::TimeZoneInfo*> utc = __CppStaticProperty<ModdingAPI::Exposed::System::TimeZoneInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->utc; }
  );
  static inline __CppStaticProperty<System_String*> timeZoneDirectory = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->timeZoneDirectory; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*> timeZoneKey = __CppStaticProperty<ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*>(
   []() { return &GetStaticClassInstance()->pStaticFields->timeZoneKey; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*> localZoneKey = __CppStaticProperty<ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*>(
   []() { return &GetStaticClassInstance()->pStaticFields->localZoneKey; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_*> systemTimeZones = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->systemTimeZones; }
  );

  // Static methods:
  static inline bool UtcOffsetOutOfRange(ModdingAPI::Exposed::System::TimeSpan offset) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan)>(Helpers::Memory::GetInstance().MakeAbsolute(0x103F170))(offset);
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::List_T_* CreateAdjustmentRule(int32_t year, ModdingAPI::Exposed::System::Int64_array* data, ModdingAPI::Exposed::System::String_array* names, System_String* standardNameCurrentYear, System_String* daylightNameCurrentYear) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(int32_t, ModdingAPI::Exposed::System::Int64_array*, ModdingAPI::Exposed::System::String_array*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x103F1A0))(year, data, names, standardNameCurrentYear, daylightNameCurrentYear);
  }
  static inline ModdingAPI::Exposed::System::TimeZoneInfo* CreateLocalUnity() {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x103F6D0))();
  }
  static inline uint32_t EnumDynamicTimeZoneInformation(uint32_t dwIndex, ModdingAPI::Exposed::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation) {
    return reinterpret_cast<uint32_t(__fastcall*)(uint32_t, ModdingAPI::Exposed::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION)>(Helpers::Memory::GetInstance().MakeAbsolute(0x103F830))(dwIndex, lpTimeZoneInformation);
  }
  static inline uint32_t GetDynamicTimeZoneInformation(ModdingAPI::Exposed::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION)>(Helpers::Memory::GetInstance().MakeAbsolute(0x103F960))(pTimeZoneInformation);
  }
  static inline uint32_t GetDynamicTimeZoneInformationWin32(ModdingAPI::Exposed::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION)>(Helpers::Memory::GetInstance().MakeAbsolute(0x103FA80))(pTimeZoneInformation);
  }
  static inline uint32_t GetDynamicTimeZoneInformationEffectiveYears(ModdingAPI::Exposed::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation, uint32_t FirstYear, uint32_t LastYear) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION, uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x103FBA0))(lpTimeZoneInformation, FirstYear, LastYear);
  }
  static inline bool GetTimeZoneInformationForYear(uint16_t wYear, ModdingAPI::Exposed::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION pdtzi, ModdingAPI::Exposed::System::TimeZoneInfo::TIME_ZONE_INFORMATION ptzi) {
    return reinterpret_cast<bool(__fastcall*)(uint16_t, ModdingAPI::Exposed::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION, ModdingAPI::Exposed::System::TimeZoneInfo::TIME_ZONE_INFORMATION)>(Helpers::Memory::GetInstance().MakeAbsolute(0x103FCF0))(wYear, pdtzi, ptzi);
  }
  static inline ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule* CreateAdjustmentRuleFromTimeZoneInformation(ModdingAPI::Exposed::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, ModdingAPI::Exposed::System::DateTime startDate, ModdingAPI::Exposed::System::DateTime endDate, int32_t defaultBaseUtcOffset) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule*(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION, ModdingAPI::Exposed::System::DateTime, ModdingAPI::Exposed::System::DateTime, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x103FED0))(timeZoneInformation, startDate, endDate, defaultBaseUtcOffset);
  }
  static inline bool TransitionTimeFromTimeZoneInformation(ModdingAPI::Exposed::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, ModdingAPI::Exposed::System::TimeZoneInfo::TransitionTime transitionTime, bool readStartDate) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION, ModdingAPI::Exposed::System::TimeZoneInfo::TransitionTime, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1040460))(timeZoneInformation, transitionTime, readStartDate);
  }
  static inline ModdingAPI::Exposed::System::TimeZoneInfo* TryCreateTimeZone(ModdingAPI::Exposed::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo*(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo::DYNAMIC_TIME_ZONE_INFORMATION)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1040650))(timeZoneInformation);
  }
  static inline ModdingAPI::Exposed::System::TimeZoneInfo* GetLocalTimeZoneInfoWinRTFallback() {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1040E60))();
  }
  static inline System_String* GetLocalTimeZoneKeyNameWin32Fallback() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1041030))();
  }
  static inline ModdingAPI::Exposed::System::TimeZoneInfo* FindSystemTimeZoneByIdWinRTFallback(System_String* id) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10411C0))(id);
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::List_T_* GetSystemTimeZonesWinRTFallback() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10414D0))();
  }
  static inline ModdingAPI::Exposed::System::TimeZoneInfo* get_Local() {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10417E0))();
  }
  static inline int32_t readlink(System_String* path, ModdingAPI::Exposed::System::Byte_array* buffer, int32_t buflen) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Byte_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10418D0))(path, buffer, buflen);
  }
  static inline System_String* readlink(System_String* path) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1041A70))(path);
  }
  static inline bool TryGetNameFromPath(System_String* path, System_String* name) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1041D20))(path, name);
  }
  static inline ModdingAPI::Exposed::System::TimeZoneInfo* CreateLocal() {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1041FC0))();
  }
  static inline ModdingAPI::Exposed::System::TimeZoneInfo* FindSystemTimeZoneByIdCore(System_String* id) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1042540))(id);
  }
  static inline void GetSystemTimeZonesCore(ModdingAPI::Exposed::System::Collections::Generic::List_T_* systemTimeZones) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1042600))(systemTimeZones);
  }
  static inline ModdingAPI::Exposed::System::TimeZoneInfo* get_Utc() {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1043150))();
  }
  static inline System_String* get_TimeZoneDirectory() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1043220))();
  }
  static inline bool get_IsWindows() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10432D0))();
  }
  static inline System_String* TrimSpecial(System_String* str) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1043310))(str);
  }
  static inline ModdingAPI::Exposed::Microsoft::Win32::RegistryKey* get_TimeZoneKey() {
    return reinterpret_cast<ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1043470))();
  }
  static inline ModdingAPI::Exposed::Microsoft::Win32::RegistryKey* get_LocalZoneKey() {
    return reinterpret_cast<ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10435B0))();
  }
  static inline bool TryAddTicks(ModdingAPI::Exposed::System::DateTime date, int64_t ticks, ModdingAPI::Exposed::System::DateTime result, ModdingAPI::Exposed::System::DateTimeKind kind) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTime, int64_t, ModdingAPI::Exposed::System::DateTime, ModdingAPI::Exposed::System::DateTimeKind)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10436F0))(date, ticks, result, kind);
  }
  static inline ModdingAPI::Exposed::System::DateTime ConvertTime(ModdingAPI::Exposed::System::DateTime dateTime, ModdingAPI::Exposed::System::TimeZoneInfo* sourceTimeZone, ModdingAPI::Exposed::System::TimeZoneInfo* destinationTimeZone) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime, ModdingAPI::Exposed::System::TimeZoneInfo*, ModdingAPI::Exposed::System::TimeZoneInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10438B0))(dateTime, sourceTimeZone, destinationTimeZone);
  }
  static inline ModdingAPI::Exposed::System::DateTime ConvertTimeFromUtc(ModdingAPI::Exposed::System::DateTime dateTime, ModdingAPI::Exposed::System::TimeZoneInfo* destinationTimeZone) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime, ModdingAPI::Exposed::System::TimeZoneInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1043D90))(dateTime, destinationTimeZone);
  }
  static inline ModdingAPI::Exposed::System::DateTime ConvertTimeToUtc(ModdingAPI::Exposed::System::DateTime dateTime, int32_t flags) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1043E50))(dateTime, flags);
  }
  static inline ModdingAPI::Exposed::System::DateTime ConvertTimeToUtc(ModdingAPI::Exposed::System::DateTime dateTime, ModdingAPI::Exposed::System::TimeZoneInfo* sourceTimeZone) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime, ModdingAPI::Exposed::System::TimeZoneInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1043E90))(dateTime, sourceTimeZone);
  }
  static inline ModdingAPI::Exposed::System::DateTime ConvertTimeToUtc(ModdingAPI::Exposed::System::DateTime dateTime, ModdingAPI::Exposed::System::TimeZoneInfo* sourceTimeZone, int32_t flags) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime, ModdingAPI::Exposed::System::TimeZoneInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1043EA0))(dateTime, sourceTimeZone, flags);
  }
  static inline ModdingAPI::Exposed::System::TimeSpan GetDateTimeNowUtcOffsetFromUtc(ModdingAPI::Exposed::System::DateTime time, bool isAmbiguousLocalDst) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(ModdingAPI::Exposed::System::DateTime, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10440D0))(time, isAmbiguousLocalDst);
  }
  static inline ModdingAPI::Exposed::System::TimeZoneInfo* CreateCustomTimeZone(System_String* id, ModdingAPI::Exposed::System::TimeSpan baseUtcOffset, System_String* displayName, System_String* standardDisplayName) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo*(__fastcall*)(System_String*, ModdingAPI::Exposed::System::TimeSpan, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1044140))(id, baseUtcOffset, displayName, standardDisplayName);
  }
  static inline ModdingAPI::Exposed::System::TimeZoneInfo* CreateCustomTimeZone(System_String* id, ModdingAPI::Exposed::System::TimeSpan baseUtcOffset, System_String* displayName, System_String* standardDisplayName, System_String* daylightDisplayName, ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule_array* adjustmentRules) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo*(__fastcall*)(System_String*, ModdingAPI::Exposed::System::TimeSpan, System_String*, System_String*, System_String*, ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1044170))(id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules);
  }
  static inline ModdingAPI::Exposed::System::TimeZoneInfo* CreateCustomTimeZone(System_String* id, ModdingAPI::Exposed::System::TimeSpan baseUtcOffset, System_String* displayName, System_String* standardDisplayName, System_String* daylightDisplayName, ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule_array* adjustmentRules, bool disableDaylightSavingTime) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo*(__fastcall*)(System_String*, ModdingAPI::Exposed::System::TimeSpan, System_String*, System_String*, System_String*, ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule_array*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10441A0))(id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime);
  }
  static inline ModdingAPI::Exposed::System::TimeZoneInfo* FindSystemTimeZoneById(System_String* id) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10444A0))(id);
  }
  static inline ModdingAPI::Exposed::System::TimeZoneInfo* FindSystemTimeZoneByFileName(System_String* id, System_String* filepath) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo*(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1044720))(id, filepath);
  }
  static inline ModdingAPI::Exposed::System::TimeZoneInfo* FromRegistryKey(System_String* id, ModdingAPI::Exposed::Microsoft::Win32::RegistryKey* key) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo*(__fastcall*)(System_String*, ModdingAPI::Exposed::Microsoft::Win32::RegistryKey*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10448B0))(id, key);
  }
  static inline void ParseRegTzi(ModdingAPI::Exposed::System::Collections::Generic::List_T_* adjustmentRules, int32_t start_year, int32_t end_year, ModdingAPI::Exposed::System::Byte_array* buffer) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t, int32_t, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1044D70))(adjustmentRules, start_year, end_year, buffer);
  }
  static inline ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* GetSystemTimeZones() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1045600))();
  }
  static inline ModdingAPI::Exposed::System::TimeSpan GetUtcOffsetHelper(ModdingAPI::Exposed::System::DateTime dateTime, ModdingAPI::Exposed::System::TimeZoneInfo* tz, bool isDST) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(ModdingAPI::Exposed::System::DateTime, ModdingAPI::Exposed::System::TimeZoneInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1045990))(dateTime, tz, isDST);
  }
  static inline void Validate(System_String* id, ModdingAPI::Exposed::System::TimeSpan baseUtcOffset, ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule_array* adjustmentRules) {
    reinterpret_cast<void(__fastcall*)(System_String*, ModdingAPI::Exposed::System::TimeSpan, ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1046930))(id, baseUtcOffset, adjustmentRules);
  }
  static inline ModdingAPI::Exposed::System::DateTime TransitionPoint(ModdingAPI::Exposed::System::TimeZoneInfo::TransitionTime transition, int32_t year) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::TimeZoneInfo::TransitionTime, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1047CA0))(transition, year);
  }
  static inline ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule_array* ValidateRules(ModdingAPI::Exposed::System::Collections::Generic::List_T_* adjustmentRules) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo::AdjustmentRule_array*(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1047EA0))(adjustmentRules);
  }
  static inline ModdingAPI::Exposed::System::TimeZoneInfo* BuildFromStream(System_String* id, ModdingAPI::Exposed::System::IO::Stream* stream) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo*(__fastcall*)(System_String*, ModdingAPI::Exposed::System::IO::Stream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1048030))(id, stream);
  }
  static inline bool ValidTZFile(ModdingAPI::Exposed::System::Byte_array* buffer, int32_t length) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10481B0))(buffer, length);
  }
  static inline int32_t SwapInt32(int32_t i) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1048530))(i);
  }
  static inline int32_t ReadBigEndianInt32(ModdingAPI::Exposed::System::Byte_array* buffer, int32_t start) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1048560))(buffer, start);
  }
  static inline ModdingAPI::Exposed::System::TimeZoneInfo* ParseTZBuffer(System_String* id, ModdingAPI::Exposed::System::Byte_array* buffer, int32_t length) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeZoneInfo*(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Byte_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1048650))(id, buffer, length);
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* ParseAbbreviations(ModdingAPI::Exposed::System::Byte_array* buffer, int32_t index, int32_t count) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1049210))(buffer, index, count);
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* ParseTimesTypes(ModdingAPI::Exposed::System::Byte_array* buffer, int32_t index, int32_t count, ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* abbreviations) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1049620))(buffer, index, count, abbreviations);
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::List_T_* ParseTransitions(ModdingAPI::Exposed::System::Byte_array* buffer, int32_t index, int32_t count, ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* time_types) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10499D0))(buffer, index, count, time_types);
  }
  static inline ModdingAPI::Exposed::System::DateTime DateTimeFromUnixTime(int64_t unix_time) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1049E00))(unix_time);
  }
  static inline ModdingAPI::Exposed::System::TimeSpan GetLocalUtcOffset(ModdingAPI::Exposed::System::DateTime dateTime, int32_t flags) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(ModdingAPI::Exposed::System::DateTime, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1049ED0))(dateTime, flags);
  }
  static inline ModdingAPI::Exposed::System::TimeSpan GetUtcOffsetFromUtc(ModdingAPI::Exposed::System::DateTime time, ModdingAPI::Exposed::System::TimeZoneInfo* zone, bool isDaylightSavings, bool isAmbiguousLocalDst) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(ModdingAPI::Exposed::System::DateTime, ModdingAPI::Exposed::System::TimeZoneInfo*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1049F10))(time, zone, isDaylightSavings, isAmbiguousLocalDst);
  }
};
}