// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::Steamworks::AppId_t.hpp"
#include "ModdingAPI.Exposed.Steamworks.SteamAPICall_t.hpp"
#include "ModdingAPI::Exposed::Steamworks::CSteamID.hpp"
#include "ModdingAPI.Exposed.Steamworks.CSteamID.hpp"


namespace ModdingAPI::Exposed::Steamworks {
struct __SteamMatchmaking_Il2CppStaticFields {
};

struct __SteamMatchmaking_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SteamMatchmaking_Il2CppClass {
  Il2CppClass_1 _1;
  __SteamMatchmaking_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SteamMatchmaking_Il2CppVtbl vtbl;
};

class SteamMatchmaking {
public:
  // Il2Cpp fields:
  __SteamMatchmaking_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline int32_t GetFavoriteGameCount() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x280C450))();
  }
  static inline bool GetFavoriteGame(int32_t iGame, ModdingAPI::Exposed::Steamworks::AppId_t pnAppID, uint32_t pnIP, uint16_t pnConnPort, uint16_t pnQueryPort, uint32_t punFlags, uint32_t pRTime32LastPlayedOnServer) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, ModdingAPI::Exposed::Steamworks::AppId_t, uint32_t, uint16_t, uint16_t, uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280C500))(iGame, pnAppID, pnIP, pnConnPort, pnQueryPort, punFlags, pRTime32LastPlayedOnServer);
  }
  static inline int32_t AddFavoriteGame(ModdingAPI::Exposed::Steamworks::AppId_t nAppID, uint32_t nIP, uint16_t nConnPort, uint16_t nQueryPort, uint32_t unFlags, uint32_t rTime32LastPlayedOnServer) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::AppId_t, uint32_t, uint16_t, uint16_t, uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280C620))(nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
  }
  static inline bool RemoveFavoriteGame(ModdingAPI::Exposed::Steamworks::AppId_t nAppID, uint32_t nIP, uint16_t nConnPort, uint16_t nQueryPort, uint32_t unFlags) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::AppId_t, uint32_t, uint16_t, uint16_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280C730))(nAppID, nIP, nConnPort, nQueryPort, unFlags);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t RequestLobbyList() {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x280C830))();
  }
  static inline void AddRequestLobbyListStringFilter(System_String* pchKeyToMatch, System_String* pchValueToMatch, int32_t eComparisonType) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280C960))(pchKeyToMatch, pchValueToMatch, eComparisonType);
  }
  static inline void AddRequestLobbyListNumericalFilter(System_String* pchKeyToMatch, int32_t nValueToMatch, int32_t eComparisonType) {
    reinterpret_cast<void(__fastcall*)(System_String*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280CDB0))(pchKeyToMatch, nValueToMatch, eComparisonType);
  }
  static inline void AddRequestLobbyListNearValueFilter(System_String* pchKeyToMatch, int32_t nValueToBeCloseTo) {
    reinterpret_cast<void(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280D090))(pchKeyToMatch, nValueToBeCloseTo);
  }
  static inline void AddRequestLobbyListFilterSlotsAvailable(int32_t nSlotsAvailable) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280D370))(nSlotsAvailable);
  }
  static inline void AddRequestLobbyListDistanceFilter(int32_t eLobbyDistanceFilter) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280D420))(eLobbyDistanceFilter);
  }
  static inline void AddRequestLobbyListResultCountFilter(int32_t cMaxResults) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280D4D0))(cMaxResults);
  }
  static inline void AddRequestLobbyListCompatibleMembersFilter(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280D580))(steamIDLobby);
  }
  static inline ModdingAPI::Exposed::Steamworks::CSteamID GetLobbyByIndex(int32_t iLobby) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::CSteamID(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280D640))(iLobby);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t CreateLobby(int32_t eLobbyType, int32_t cMaxMembers) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280D780))(eLobbyType, cMaxMembers);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t JoinLobby(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280D8D0))(steamIDLobby);
  }
  static inline void LeaveLobby(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280DA10))(steamIDLobby);
  }
  static inline bool InviteUserToLobby(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby, ModdingAPI::Exposed::Steamworks::CSteamID steamIDInvitee) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280DAD0))(steamIDLobby, steamIDInvitee);
  }
  static inline int32_t GetNumLobbyMembers(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280DBA0))(steamIDLobby);
  }
  static inline ModdingAPI::Exposed::Steamworks::CSteamID GetLobbyMemberByIndex(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby, int32_t iMember) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::CSteamID(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280DC60))(steamIDLobby, iMember);
  }
  static inline System_String* GetLobbyData(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby, System_String* pchKey) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280DDB0))(steamIDLobby, pchKey);
  }
  static inline bool SetLobbyData(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby, System_String* pchKey, System_String* pchValue) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280E0A0))(steamIDLobby, pchKey, pchValue);
  }
  static inline int32_t GetLobbyDataCount(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280E500))(steamIDLobby);
  }
  static inline bool GetLobbyDataByIndex(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby, int32_t iLobbyData, System_String* pchKey, int32_t cchKeyBufferSize, System_String* pchValue, int32_t cchValueBufferSize) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, int32_t, System_String*, int32_t, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280E5C0))(steamIDLobby, iLobbyData, pchKey, cchKeyBufferSize, pchValue, cchValueBufferSize);
  }
  static inline bool DeleteLobbyData(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby, System_String* pchKey) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280E7F0))(steamIDLobby, pchKey);
  }
  static inline System_String* GetLobbyMemberData(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby, ModdingAPI::Exposed::Steamworks::CSteamID steamIDUser, System_String* pchKey) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, ModdingAPI::Exposed::Steamworks::CSteamID, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280EAE0))(steamIDLobby, steamIDUser, pchKey);
  }
  static inline void SetLobbyMemberData(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby, System_String* pchKey, System_String* pchValue) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280EDF0))(steamIDLobby, pchKey, pchValue);
  }
  static inline bool SendLobbyChatMsg(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby, ModdingAPI::Exposed::System::Byte_array* pvMsgBody, int32_t cubMsgBody) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, ModdingAPI::Exposed::System::Byte_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280F240))(steamIDLobby, pvMsgBody, cubMsgBody);
  }
  static inline int32_t GetLobbyChatEntry(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby, int32_t iChatID, ModdingAPI::Exposed::Steamworks::CSteamID pSteamIDUser, ModdingAPI::Exposed::System::Byte_array* pvData, int32_t cubData, int32_t peChatEntryType) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, int32_t, ModdingAPI::Exposed::Steamworks::CSteamID, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280F330))(steamIDLobby, iChatID, pSteamIDUser, pvData, cubData, peChatEntryType);
  }
  static inline bool RequestLobbyData(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280F450))(steamIDLobby);
  }
  static inline void SetLobbyGameServer(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby, uint32_t unGameServerIP, uint16_t unGameServerPort, ModdingAPI::Exposed::Steamworks::CSteamID steamIDGameServer) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, uint32_t, uint16_t, ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280F510))(steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
  }
  static inline bool GetLobbyGameServer(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby, uint32_t punGameServerIP, uint16_t punGameServerPort, ModdingAPI::Exposed::Steamworks::CSteamID psteamIDGameServer) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, uint32_t, uint16_t, ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280F600))(steamIDLobby, punGameServerIP, punGameServerPort, psteamIDGameServer);
  }
  static inline bool SetLobbyMemberLimit(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby, int32_t cMaxMembers) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280F6F0))(steamIDLobby, cMaxMembers);
  }
  static inline int32_t GetLobbyMemberLimit(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280F7C0))(steamIDLobby);
  }
  static inline bool SetLobbyType(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby, int32_t eLobbyType) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280F880))(steamIDLobby, eLobbyType);
  }
  static inline bool SetLobbyJoinable(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby, bool bLobbyJoinable) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280F950))(steamIDLobby, bLobbyJoinable);
  }
  static inline ModdingAPI::Exposed::Steamworks::CSteamID GetLobbyOwner(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::CSteamID(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280FA20))(steamIDLobby);
  }
  static inline bool SetLobbyOwner(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby, ModdingAPI::Exposed::Steamworks::CSteamID steamIDNewOwner) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280FB60))(steamIDLobby, steamIDNewOwner);
  }
  static inline bool SetLinkedLobby(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby, ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobbyDependent) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x280FC30))(steamIDLobby, steamIDLobbyDependent);
  }
};
}