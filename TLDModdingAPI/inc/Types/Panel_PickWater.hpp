// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __Panel_PickWater_Il2CppStaticFields {
};

struct __Panel_PickWater_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Panel_PickWater_Il2CppClass {
  Il2CppClass_1 _1;
  __Panel_PickWater_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Panel_PickWater_Il2CppVtbl vtbl;
};

class Panel_PickWater {
public:
  // Il2Cpp fields:
  __Panel_PickWater_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::ButtonLegendContainer* m_ButtonLegendContainer;
  ModdingAPI::Exposed::UILabel* m_Label_Description;
  ModdingAPI::Exposed::UILabel* m_Label_Title;
  ModdingAPI::Exposed::UILabel* m_Label_NumUnits;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Execute_Button;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ExecuteAll_Button;
  ModdingAPI::Exposed::LocalizedString* m_LocalizedProgressBarMessage;
  float m_ProgressBarDurationSecondsBase;
  float m_ProgressBarDurationSecondsPerLiter;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_WaterBottle_1000ml;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_WaterBottle_500ml;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_WaterSupply_Potable;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_WaterSupply_NonPotable;
  float m_numLiters;
  float m_maxLiters;
  int32_t m_EnablePanelOnExit;
  bool m_CameFromDrag;
  ModdingAPI::Exposed::WaterSupply* m_WaterSupplyInventory;
  ModdingAPI::Exposed::WaterSupply* m_WaterSupplyContainer;
  ModdingAPI::Exposed::WaterSource* m_WaterSource;
  ModdingAPI::Exposed::Container* m_Container;
  int32_t m_ExecuteAction;
  bool m_IsTakingWater;
  ModdingAPI::Exposed::UITexture* m_GearIcon;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ButtonIncrease;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ButtonDecrease;

  // Member methods:
  System_String* get_m_ProgressBarMessage() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1891380))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18913A0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1891560))(this);
  }
  void Enable(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1891A70))(this, enable);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x165DF10))(this);
  }
  void ExitInterface() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1891CD0))(this);
  }
  void OnCancel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1891E70))(this);
  }
  void OnAll() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1891F10))(this);
  }
  void OnExecute() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1891FC0))(this);
  }
  void OnExecuteAll() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1892300))(this);
  }
  void OnIncrease() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1892330))(this);
  }
  void OnDecrease() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18924B0))(this);
  }
  float ReduceToNearestDeltaMultiple(float numLiters) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1892630))(this, numLiters);
  }
  float GetDeltaLiters() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1821B50))(this);
  }
  void SetWaterSupplyForDrop(ModdingAPI::Exposed::WaterSupply* ws) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*, ModdingAPI::Exposed::WaterSupply*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1892720))(this, ws);
  }
  void SetWaterSourceForTaking(ModdingAPI::Exposed::WaterSource* source, ModdingAPI::Exposed::WaterSupply* ws) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*, ModdingAPI::Exposed::WaterSource*, ModdingAPI::Exposed::WaterSupply*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1892760))(this, source, ws);
  }
  void SetWaterSupplyForTransferFromInventoryToContainer(ModdingAPI::Exposed::WaterSupply* ws, ModdingAPI::Exposed::Container* c) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*, ModdingAPI::Exposed::WaterSupply*, ModdingAPI::Exposed::Container*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18927A0))(this, ws, c);
  }
  void SetWaterSupplyForTransferFromContainerToInventory(ModdingAPI::Exposed::WaterSupply* ws, ModdingAPI::Exposed::Container* c) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*, ModdingAPI::Exposed::WaterSupply*, ModdingAPI::Exposed::Container*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1892830))(this, ws, c);
  }
  bool IsTakingWater() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1892960))(this);
  }
  void Refresh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1892970))(this);
  }
  void InstantiateAndDropWaterBottle(ModdingAPI::Exposed::UnityEngine::GameObject* prefab, float volume, int32_t quality) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*, ModdingAPI::Exposed::UnityEngine::GameObject*, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1893480))(this, prefab, volume, quality);
  }
  ModdingAPI::Exposed::GearItem* InstantiateWaterSupply(ModdingAPI::Exposed::UnityEngine::GameObject* prefab) {
    return reinterpret_cast<ModdingAPI::Exposed::GearItem*(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18935B0))(this, prefab);
  }
  void DropWater() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1893770))(this);
  }
  void TakeWater() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18939A0))(this);
  }
  void TransferWaterContainerToInventory() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1893BE0))(this);
  }
  void TransferWaterInventoryToContainer() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1893EC0))(this);
  }
  void OnTakeWaterComplete(bool success, bool playerCancel, float progress) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*, bool, bool, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1894230))(this, success, playerCancel, progress);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_PickWater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1894650))(this);
  }
};
}