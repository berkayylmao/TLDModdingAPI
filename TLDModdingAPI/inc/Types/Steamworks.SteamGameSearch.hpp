// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::Steamworks::CSteamID.hpp"


namespace ModdingAPI::Exposed::Steamworks {
struct __SteamGameSearch_Il2CppStaticFields {
};

struct __SteamGameSearch_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SteamGameSearch_Il2CppClass {
  Il2CppClass_1 _1;
  __SteamGameSearch_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SteamGameSearch_Il2CppVtbl vtbl;
};

class SteamGameSearch {
public:
  // Il2Cpp fields:
  __SteamGameSearch_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline int32_t AddGameSearchParams(System_String* pchKeyToFind, System_String* pchValuesToFind) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DDD00))(pchKeyToFind, pchValuesToFind);
  }
  static inline int32_t SearchForGameWithLobby(ModdingAPI::Exposed::Steamworks::CSteamID steamIDLobby, int32_t nPlayerMin, int32_t nPlayerMax) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DE150))(steamIDLobby, nPlayerMin, nPlayerMax);
  }
  static inline int32_t SearchForGameSolo(int32_t nPlayerMin, int32_t nPlayerMax) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DE230))(nPlayerMin, nPlayerMax);
  }
  static inline int32_t AcceptGame() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DE2F0))();
  }
  static inline int32_t DeclineGame() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DE3A0))();
  }
  static inline int32_t RetrieveConnectionDetails(ModdingAPI::Exposed::Steamworks::CSteamID steamIDHost, System_String* pchConnectionDetails, int32_t cubConnectionDetails) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DE450))(steamIDHost, pchConnectionDetails, cubConnectionDetails);
  }
  static inline int32_t EndGameSearch() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DE5F0))();
  }
  static inline int32_t SetGameHostParams(System_String* pchKey, System_String* pchValue) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DE6A0))(pchKey, pchValue);
  }
  static inline int32_t SetConnectionDetails(System_String* pchConnectionDetails, int32_t cubConnectionDetails) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DEAF0))(pchConnectionDetails, cubConnectionDetails);
  }
  static inline int32_t RequestPlayersForGame(int32_t nPlayerMin, int32_t nPlayerMax, int32_t nMaxTeamSize) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DEDE0))(nPlayerMin, nPlayerMax, nMaxTeamSize);
  }
  static inline int32_t HostConfirmGameStart(uint64_t ullUniqueGameID) {
    return reinterpret_cast<int32_t(__fastcall*)(uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DEEB0))(ullUniqueGameID);
  }
  static inline int32_t CancelRequestPlayersForGame() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DEF70))();
  }
  static inline int32_t SubmitPlayerResult(uint64_t ullUniqueGameID, ModdingAPI::Exposed::Steamworks::CSteamID steamIDPlayer, int32_t EPlayerResult) {
    return reinterpret_cast<int32_t(__fastcall*)(uint64_t, ModdingAPI::Exposed::Steamworks::CSteamID, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DF020))(ullUniqueGameID, steamIDPlayer, EPlayerResult);
  }
  static inline int32_t EndGame(uint64_t ullUniqueGameID) {
    return reinterpret_cast<int32_t(__fastcall*)(uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DF100))(ullUniqueGameID);
  }
};
}