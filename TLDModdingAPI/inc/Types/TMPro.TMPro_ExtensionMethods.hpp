// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::UnityEngine::Color32.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color32.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Quaternion.hpp"


namespace ModdingAPI::Exposed::TMPro {
struct __TMPro_ExtensionMethods_Il2CppStaticFields {
};

struct __TMPro_ExtensionMethods_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __TMPro_ExtensionMethods_Il2CppClass {
  Il2CppClass_1 _1;
  __TMPro_ExtensionMethods_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TMPro_ExtensionMethods_Il2CppVtbl vtbl;
};

class TMPro_ExtensionMethods {
public:
  // Il2Cpp fields:
  __TMPro_ExtensionMethods_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline System_String* ArrayToString(ModdingAPI::Exposed::System::Char_array* chars) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Char_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB2F40))(chars);
  }
  static inline System_String* IntToString(ModdingAPI::Exposed::System::Int32_array* unicodes) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB3030))(unicodes);
  }
  static inline System_String* IntToString(ModdingAPI::Exposed::System::Int32_array* unicodes, int32_t start, int32_t length) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Int32_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB3120))(unicodes, start, length);
  }
  static inline bool Compare(ModdingAPI::Exposed::UnityEngine::Color32 a, ModdingAPI::Exposed::UnityEngine::Color32 b) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Color32, ModdingAPI::Exposed::UnityEngine::Color32)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB3290))(a, b);
  }
  static inline bool CompareRGB(ModdingAPI::Exposed::UnityEngine::Color32 a, ModdingAPI::Exposed::UnityEngine::Color32 b) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Color32, ModdingAPI::Exposed::UnityEngine::Color32)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB32D0))(a, b);
  }
  static inline bool Compare(ModdingAPI::Exposed::UnityEngine::Color a, ModdingAPI::Exposed::UnityEngine::Color b) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Color, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB3300))(a, b);
  }
  static inline bool CompareRGB(ModdingAPI::Exposed::UnityEngine::Color a, ModdingAPI::Exposed::UnityEngine::Color b) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Color, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB3340))(a, b);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Color32 Multiply(ModdingAPI::Exposed::UnityEngine::Color32 c1, ModdingAPI::Exposed::UnityEngine::Color32 c2) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color32(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Color32, ModdingAPI::Exposed::UnityEngine::Color32)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB3370))(c1, c2);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Color32 Tint(ModdingAPI::Exposed::UnityEngine::Color32 c1, ModdingAPI::Exposed::UnityEngine::Color32 c2) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color32(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Color32, ModdingAPI::Exposed::UnityEngine::Color32)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB3370))(c1, c2);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Color32 Tint(ModdingAPI::Exposed::UnityEngine::Color32 c1, float tint) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color32(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Color32, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB3450))(c1, tint);
  }
  static inline bool Compare(ModdingAPI::Exposed::UnityEngine::Vector3 v1, ModdingAPI::Exposed::UnityEngine::Vector3 v2, int32_t accuracy) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB35D0))(v1, v2, accuracy);
  }
  static inline bool Compare(ModdingAPI::Exposed::UnityEngine::Quaternion q1, ModdingAPI::Exposed::UnityEngine::Quaternion q2, int32_t accuracy) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Quaternion, ModdingAPI::Exposed::UnityEngine::Quaternion, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB3670))(q1, q2, accuracy);
  }
};
}