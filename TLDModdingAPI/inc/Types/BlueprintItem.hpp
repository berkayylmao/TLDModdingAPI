// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __BlueprintItem_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_UnlockedBlueprints;
};

struct __BlueprintItem_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __BlueprintItem_Il2CppClass {
  Il2CppClass_1 _1;
  __BlueprintItem_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __BlueprintItem_Il2CppVtbl vtbl;
};

class BlueprintItem {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C71818;
  static inline    __BlueprintItem_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __BlueprintItem_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__BlueprintItem_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __BlueprintItem_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::GearItem_array* m_RequiredGear;
  ModdingAPI::Exposed::System::Int32_array* m_RequiredGearUnits;
  ModdingAPI::Exposed::ToolsItem* m_RequiredTool;
  ModdingAPI::Exposed::ToolsItem_array* m_OptionalTools;
  ModdingAPI::Exposed::GearItem* m_CraftedResult;
  int32_t m_CraftedResultCount;
  int32_t m_DurationMinutes;
  System_String* m_CraftingAudio;
  float m_KeroseneLitersRequired;
  float m_GunpowderKGRequired;
  bool m_RequiresLight;
  bool m_Locked;
  bool m_AppearsInStoryOnly;
  int32_t m_AppliedSkill;
  int32_t m_ImprovedSkill;
  int32_t m_RequiredCraftingLocation;
  bool m_RequiresLitFire;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BlueprintItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BEEEB0))(this);
  }
  System_String* GetDisplayedNameWithCount() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::BlueprintItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BEF320))(this);
  }
  bool CanCraftAtLocation(int32_t craftingLocation) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BlueprintItem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BEF440))(this, craftingLocation);
  }
  bool HasRequiredTool() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BlueprintItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BEF450))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* GetToolsAvailableToCraft() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::BlueprintItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BEF650))(this);
  }
  bool CanCraftBlueprint(ModdingAPI::Exposed::CraftingLocationInterface* cli) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BlueprintItem*, ModdingAPI::Exposed::CraftingLocationInterface*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BEFA10))(this, cli);
  }
  bool HasRequiredMaterials() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BlueprintItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BEFB10))(this);
  }
  int32_t NumNeedsConsuming(int32_t requiredGearIndex, ModdingAPI::Exposed::InProgressCraftItem* wip) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BlueprintItem*, int32_t, ModdingAPI::Exposed::InProgressCraftItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BEFE90))(this, requiredGearIndex, wip);
  }
  int32_t NumToConsumeNow(int32_t requiredGearIndex, ModdingAPI::Exposed::InProgressCraftItem* wip, float newTotalPercent) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BlueprintItem*, int32_t, ModdingAPI::Exposed::InProgressCraftItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF0010))(this, requiredGearIndex, wip, newTotalPercent);
  }
  void MaybeRemoveStoryTools() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BlueprintItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF01D0))(this);
  }
  void UnlockSilent() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BlueprintItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF0500))(this);
  }
  void UnlockWithNotification() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BlueprintItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF0660))(this);
  }
  ModdingAPI::Exposed::InProgressCraftItem* GetInProgressItem(ModdingAPI::Exposed::BlueprintItem* bpi) {
    return reinterpret_cast<ModdingAPI::Exposed::InProgressCraftItem*(__fastcall*)(ModdingAPI::Exposed::BlueprintItem*, ModdingAPI::Exposed::BlueprintItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF0850))(this, bpi);
  }
  void AddAlternateTools() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BlueprintItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF0AC0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BlueprintItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF1240))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> m_UnlockedBlueprints = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_UnlockedBlueprints; }
  );

  // Static methods:
  static inline System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BEEEC0))();
  }
  static inline void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BEEF90))(text);
  }
  static inline void ClearUnlockedBlueprints() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BEF150))();
  }
  static inline bool IsBlueprintUnlocked(System_String* name) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BEF230))(name);
  }
  static inline void MarkBlueprintUnlocked(System_String* craftedResultName) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF1060))(craftedResultName);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF1250))();
  }
};
}