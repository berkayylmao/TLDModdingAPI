// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Net {
struct __IPAddress_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Net::IPAddress* Any;
  ModdingAPI::Exposed::System::Net::IPAddress* Loopback;
  ModdingAPI::Exposed::System::Net::IPAddress* Broadcast;
  ModdingAPI::Exposed::System::Net::IPAddress* None;
  ModdingAPI::Exposed::System::Net::IPAddress* IPv6Any;
  ModdingAPI::Exposed::System::Net::IPAddress* IPv6Loopback;
  ModdingAPI::Exposed::System::Net::IPAddress* IPv6None;
};

struct __IPAddress_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __IPAddress_Il2CppClass {
  Il2CppClass_1 _1;
  __IPAddress_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __IPAddress_Il2CppVtbl vtbl;
};

class IPAddress {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C3F170;
  static inline    IPAddress* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C3E088;
  static inline    __IPAddress_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline IPAddress* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (IPAddress**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __IPAddress_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__IPAddress_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __IPAddress_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int64_t m_Address;
  System_String* m_ToString;
  int32_t m_Family;
  ModdingAPI::Exposed::System::UInt16_array* m_Numbers;
  int64_t m_ScopeId;
  int32_t m_HashCode;

  // Member methods:
  void ::ctor(int64_t newAddress) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::IPAddress*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB18950))(this, newAddress);
  }
  void ::ctor(ModdingAPI::Exposed::System::Byte_array* address, int64_t scopeid) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::IPAddress*, ModdingAPI::Exposed::System::Byte_array*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB18A30))(this, address, scopeid);
  }
  void ::ctor(ModdingAPI::Exposed::System::UInt16_array* address, uint32_t scopeid) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::IPAddress*, ModdingAPI::Exposed::System::UInt16_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB18C60))(this, address, scopeid);
  }
  void ::ctor(int32_t newAddress) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::IPAddress*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB18D10))(this, newAddress);
  }
  ModdingAPI::Exposed::System::Byte_array* GetAddressBytes() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Net::IPAddress*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB194F0))(this);
  }
  int32_t get_AddressFamily() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Net::IPAddress*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x37AAE0))(this);
  }
  int64_t get_ScopeId() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::Net::IPAddress*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB19710))(this);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Net::IPAddress*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB197C0))(this);
  }
  bool Equals(Il2CppObject* comparandObj, bool compareScopeId) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::IPAddress*, Il2CppObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB19B30))(this, comparandObj, compareScopeId);
  }
  bool Equals(Il2CppObject* comparand) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::IPAddress*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB19CA0))(this, comparand);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Net::IPAddress*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB19CB0))(this);
  }
  ModdingAPI::Exposed::System::Net::IPAddress* MapToIPv6() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Net::IPAddress*(__fastcall*)(ModdingAPI::Exposed::System::Net::IPAddress*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB19DB0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Net::IPAddress*> Any = __CppStaticProperty<ModdingAPI::Exposed::System::Net::IPAddress*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Any; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Net::IPAddress*> Loopback = __CppStaticProperty<ModdingAPI::Exposed::System::Net::IPAddress*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Loopback; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Net::IPAddress*> Broadcast = __CppStaticProperty<ModdingAPI::Exposed::System::Net::IPAddress*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Broadcast; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Net::IPAddress*> None = __CppStaticProperty<ModdingAPI::Exposed::System::Net::IPAddress*>(
   []() { return &GetStaticClassInstance()->pStaticFields->None; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Net::IPAddress*> IPv6Any = __CppStaticProperty<ModdingAPI::Exposed::System::Net::IPAddress*>(
   []() { return &GetStaticClassInstance()->pStaticFields->IPv6Any; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Net::IPAddress*> IPv6Loopback = __CppStaticProperty<ModdingAPI::Exposed::System::Net::IPAddress*>(
   []() { return &GetStaticClassInstance()->pStaticFields->IPv6Loopback; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Net::IPAddress*> IPv6None = __CppStaticProperty<ModdingAPI::Exposed::System::Net::IPAddress*>(
   []() { return &GetStaticClassInstance()->pStaticFields->IPv6None; }
  );

  // Static methods:
  static inline bool TryParse(System_String* ipString, ModdingAPI::Exposed::System::Net::IPAddress* address) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Net::IPAddress*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB18DB0))(ipString, address);
  }
  static inline ModdingAPI::Exposed::System::Net::IPAddress* Parse(System_String* ipString) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Net::IPAddress*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB18E70))(ipString);
  }
  static inline ModdingAPI::Exposed::System::Net::IPAddress* InternalParse(System_String* ipString, bool tryParse) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Net::IPAddress*(__fastcall*)(System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB18F10))(ipString, tryParse);
  }
  static inline bool IsLoopback(ModdingAPI::Exposed::System::Net::IPAddress* address) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::IPAddress*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB199E0))(address);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xB19FE0))();
  }
};
}