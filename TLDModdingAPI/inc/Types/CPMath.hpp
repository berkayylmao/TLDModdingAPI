// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Quaternion.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Quaternion.hpp"


namespace ModdingAPI::Exposed {
struct __CPMath_Il2CppStaticFields {
};

struct __CPMath_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __CPMath_Il2CppClass {
  Il2CppClass_1 _1;
  __CPMath_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CPMath_Il2CppVtbl vtbl;
};

class CPMath {
public:
  // Il2Cpp fields:
  __CPMath_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CPMath*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 CalculateBezier(float t, ModdingAPI::Exposed::UnityEngine::Vector3 p, ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b, ModdingAPI::Exposed::UnityEngine::Vector3 q) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(float, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x182E470))(t, p, a, b, q);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 CalculateHermite(ModdingAPI::Exposed::UnityEngine::Vector3 p, ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b, ModdingAPI::Exposed::UnityEngine::Vector3 q, float t, float tension, float bias) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x182E6A0))(p, a, b, q, t, tension, bias);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 CalculateCatmullRom(ModdingAPI::Exposed::UnityEngine::Vector3 p, ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b, ModdingAPI::Exposed::UnityEngine::Vector3 q, float t) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x182EAE0))(p, a, b, q, t);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 CalculateBezier(float t, ModdingAPI::Exposed::UnityEngine::Vector2 p, ModdingAPI::Exposed::UnityEngine::Vector2 a, ModdingAPI::Exposed::UnityEngine::Vector2 b, ModdingAPI::Exposed::UnityEngine::Vector2 q) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(float, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x182EF00))(t, p, a, b, q);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 CalculateHermite(ModdingAPI::Exposed::UnityEngine::Vector2 p, ModdingAPI::Exposed::UnityEngine::Vector2 a, ModdingAPI::Exposed::UnityEngine::Vector2 b, ModdingAPI::Exposed::UnityEngine::Vector2 q, float t, float tension, float bias) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x182F0A0))(p, a, b, q, t, tension, bias);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 CalculateCatmullRom(ModdingAPI::Exposed::UnityEngine::Vector2 p, ModdingAPI::Exposed::UnityEngine::Vector2 a, ModdingAPI::Exposed::UnityEngine::Vector2 b, ModdingAPI::Exposed::UnityEngine::Vector2 q, float t) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x182F3B0))(p, a, b, q, t);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Quaternion CalculateCubic(ModdingAPI::Exposed::UnityEngine::Quaternion p, ModdingAPI::Exposed::UnityEngine::Quaternion a, ModdingAPI::Exposed::UnityEngine::Quaternion b, ModdingAPI::Exposed::UnityEngine::Quaternion q, float t) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Quaternion(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Quaternion, ModdingAPI::Exposed::UnityEngine::Quaternion, ModdingAPI::Exposed::UnityEngine::Quaternion, ModdingAPI::Exposed::UnityEngine::Quaternion, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x182F650))(p, a, b, q, t);
  }
  static inline float CalculateCubic(float p, float a, float b, float q, float t) {
    return reinterpret_cast<float(__fastcall*)(float, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x182FA10))(p, a, b, q, t);
  }
  static inline float CalculateHermite(float p, float a, float b, float q, float t, float tension, float bias) {
    return reinterpret_cast<float(__fastcall*)(float, float, float, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x182FAB0))(p, a, b, q, t, tension, bias);
  }
  static inline float CalculateCatmullRom(float p, float a, float b, float q, float t) {
    return reinterpret_cast<float(__fastcall*)(float, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x182FC50))(p, a, b, q, t);
  }
  static inline float SmoothStep(float val) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x182FD30))(val);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Quaternion SquadTangent(ModdingAPI::Exposed::UnityEngine::Quaternion before, ModdingAPI::Exposed::UnityEngine::Quaternion center, ModdingAPI::Exposed::UnityEngine::Quaternion after) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Quaternion(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Quaternion, ModdingAPI::Exposed::UnityEngine::Quaternion, ModdingAPI::Exposed::UnityEngine::Quaternion)>(Helpers::Memory::GetInstance().MakeAbsolute(0x182FD50))(before, center, after);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Quaternion LnDif(ModdingAPI::Exposed::UnityEngine::Quaternion a, ModdingAPI::Exposed::UnityEngine::Quaternion b) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Quaternion(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Quaternion, ModdingAPI::Exposed::UnityEngine::Quaternion)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1830050))(a, b);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Quaternion Normalize(ModdingAPI::Exposed::UnityEngine::Quaternion q) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Quaternion(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Quaternion)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18302B0))(q);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Quaternion Exp(ModdingAPI::Exposed::UnityEngine::Quaternion q) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Quaternion(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Quaternion)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1830410))(q);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Quaternion Log(ModdingAPI::Exposed::UnityEngine::Quaternion q) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Quaternion(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Quaternion)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18308B0))(q);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Quaternion Slerp(ModdingAPI::Exposed::UnityEngine::Quaternion p, ModdingAPI::Exposed::UnityEngine::Quaternion q, float t) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Quaternion(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Quaternion, ModdingAPI::Exposed::UnityEngine::Quaternion, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1830DB0))(p, q, t);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Quaternion Nlerp(ModdingAPI::Exposed::UnityEngine::Quaternion p, ModdingAPI::Exposed::UnityEngine::Quaternion q, float t) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Quaternion(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Quaternion, ModdingAPI::Exposed::UnityEngine::Quaternion, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18310D0))(p, q, t);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Quaternion GetQuatConjugate(ModdingAPI::Exposed::UnityEngine::Quaternion q) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Quaternion(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Quaternion)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18311B0))(q);
  }
  static inline float SignedAngle(ModdingAPI::Exposed::UnityEngine::Vector3 from, ModdingAPI::Exposed::UnityEngine::Vector3 to, ModdingAPI::Exposed::UnityEngine::Vector3 up) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18311F0))(from, to, up);
  }
  static inline float ClampAngle(float angle, float min, float max) {
    return reinterpret_cast<float(__fastcall*)(float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18314E0))(angle, min, max);
  }
};
}