// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed {
struct __RadialMenuArm_Il2CppStaticFields {
};

struct __RadialMenuArm_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __RadialMenuArm_Il2CppClass {
  Il2CppClass_1 _1;
  __RadialMenuArm_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __RadialMenuArm_Il2CppVtbl vtbl;
};

class RadialMenuArm {
public:
  // Il2Cpp fields:
  __RadialMenuArm_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UISprite* m_BG;
  ModdingAPI::Exposed::UISprite* m_Sprite;
  ModdingAPI::Exposed::UISprite* m_GlowSprite;
  ModdingAPI::Exposed::UITexture* m_Texture;
  ModdingAPI::Exposed::UnityEngine::Animator* m_NewItemHighlightAnim;
  bool m_IsCenterButton;
  ModdingAPI::Exposed::UILabel* m_CenterLabel;
  ModdingAPI::Exposed::UILabel* m_StackLabel;
  ModdingAPI::Exposed::UnityEngine::Color m_CenterLabelColorNormal;
  ModdingAPI::Exposed::UnityEngine::Color m_CenterLabelColorHover;
  bool m_RadialArmEnabled;
  ModdingAPI::Exposed::System::Action* m_Callback;
  ModdingAPI::Exposed::Panel_ActionsRadial::RadialGearDelegate* m_GearCallback;
  ModdingAPI::Exposed::Panel_ActionsRadial::RadialInfo* m_RadialInfo;
  ModdingAPI::Exposed::GearItem* m_GearItem;
  System_String* m_NameWhenHoveredOver;
  bool m_ShowCraftingUI;
  bool m_IsGreyedOut;
  System_String* m_Audio;
  bool m_IsHoveredOver;

  // Member methods:
  ModdingAPI::Exposed::Panel_ActionsRadial::RadialInfo* GetRadialInfo() {
    return reinterpret_cast<ModdingAPI::Exposed::Panel_ActionsRadial::RadialInfo*(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3BC530))(this);
  }
  void SetEnabled(bool shouldEnable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4D190))(this, shouldEnable);
  }
  void SetHoverColor(bool isHovering) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4D660))(this, isHovering);
  }
  void SetRadialInfo(ModdingAPI::Exposed::Panel_ActionsRadial::RadialInfo* radialInfo, ModdingAPI::Exposed::System::Action* callback, bool greyOut, bool showHighlight) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*, ModdingAPI::Exposed::Panel_ActionsRadial::RadialInfo*, ModdingAPI::Exposed::System::Action*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4DE60))(this, radialInfo, callback, greyOut, showHighlight);
  }
  void SetRadialInfoGear(System_String* textureName, ModdingAPI::Exposed::Panel_ActionsRadial::RadialGearDelegate* callback, ModdingAPI::Exposed::GearItem* gi, bool greyOut, bool showCrafting, int32_t numItems) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*, System_String*, ModdingAPI::Exposed::Panel_ActionsRadial::RadialGearDelegate*, ModdingAPI::Exposed::GearItem*, bool, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4E5E0))(this, textureName, callback, gi, greyOut, showCrafting, numItems);
  }
  void OverrideSpriteWithGearIcon(System_String* textureName, bool greyOut, System_String* hoverNameID) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*, System_String*, bool, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4ED00))(this, textureName, greyOut, hoverNameID);
  }
  void OverrideSpriteWithGearIcon(ModdingAPI::Exposed::GearItem* gi, ModdingAPI::Exposed::Panel_ActionsRadial::RadialGearDelegate* callback, bool greyOut, System_String* hoverNameID) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*, ModdingAPI::Exposed::GearItem*, ModdingAPI::Exposed::Panel_ActionsRadial::RadialGearDelegate*, bool, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4F0C0))(this, gi, callback, greyOut, hoverNameID);
  }
  void OverrideHoverText(System_String* overrideID) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4F1E0))(this, overrideID);
  }
  bool IsHoveredOver() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4F290))(this);
  }
  System_String* GetHoverText() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3BC850))(this);
  }
  ModdingAPI::Exposed::GearItem* GetGearItem() {
    return reinterpret_cast<ModdingAPI::Exposed::GearItem*(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319850))(this);
  }
  bool ShouldShowCraftingUI() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4F2A0))(this);
  }
  bool IsEmpty() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4F2B0))(this);
  }
  bool IsBackButton() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4F360))(this);
  }
  void DoCallbackAction(bool ignoreConfirmPopup) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4F520))(this, ignoreConfirmPopup);
  }
  void DoAltClickAction() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4F980))(this);
  }
  ModdingAPI::Exposed::UnityEngine::GameObject* CreateWaterPlacement() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4FD20))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Color GetRadialIconColor(ModdingAPI::Exposed::Panel_ActionsRadial::RadialInfo* radialInfo) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*, ModdingAPI::Exposed::Panel_ActionsRadial::RadialInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4FF30))(this, radialInfo);
  }
  void UpdateStackLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B50040))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialMenuArm*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }
};
}