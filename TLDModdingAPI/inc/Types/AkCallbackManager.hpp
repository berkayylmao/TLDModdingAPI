// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __AkCallbackManager_Il2CppStaticFields {
  bool _IsLoggingEnabled_k__BackingField;
  ModdingAPI::Exposed::AkEventCallbackInfo* AkEventCallbackInfo;
  ModdingAPI::Exposed::AkDynamicSequenceItemCallbackInfo* AkDynamicSequenceItemCallbackInfo;
  ModdingAPI::Exposed::AkMIDIEventCallbackInfo* AkMIDIEventCallbackInfo;
  ModdingAPI::Exposed::AkMarkerCallbackInfo* AkMarkerCallbackInfo;
  ModdingAPI::Exposed::AkDurationCallbackInfo* AkDurationCallbackInfo;
  ModdingAPI::Exposed::AkMusicSyncCallbackInfo* AkMusicSyncCallbackInfo;
  ModdingAPI::Exposed::AkMusicPlaylistCallbackInfo* AkMusicPlaylistCallbackInfo;
  ModdingAPI::Exposed::AkAudioSourceChangeCallbackInfo* AkAudioSourceChangeCallbackInfo;
  ModdingAPI::Exposed::AkMonitoringCallbackInfo* AkMonitoringCallbackInfo;
  ModdingAPI::Exposed::AkBankCallbackInfo* AkBankCallbackInfo;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_mapEventCallbacks;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_mapBankCallbacks;
  ModdingAPI::Exposed::AkCallbackManager::EventCallbackPackage* m_LastAddedEventPackage;
  intptr_t m_pNotifMem;
  ModdingAPI::Exposed::AkCallbackManager::MonitoringCallback* m_MonitoringCB;
  ModdingAPI::Exposed::AkCallbackManager::BGMCallbackPackage* ms_sourceChangeCallbackPkg;
};

struct __AkCallbackManager_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __AkCallbackManager_Il2CppClass {
  Il2CppClass_1 _1;
  __AkCallbackManager_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AkCallbackManager_Il2CppVtbl vtbl;
};

class AkCallbackManager {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C843B0;
  static inline    __AkCallbackManager_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __AkCallbackManager_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__AkCallbackManager_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __AkCallbackManager_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<bool> _IsLoggingEnabled_k__BackingField = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->_IsLoggingEnabled_k__BackingField; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::AkEventCallbackInfo*> AkEventCallbackInfo = __CppStaticProperty<ModdingAPI::Exposed::AkEventCallbackInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->AkEventCallbackInfo; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::AkDynamicSequenceItemCallbackInfo*> AkDynamicSequenceItemCallbackInfo = __CppStaticProperty<ModdingAPI::Exposed::AkDynamicSequenceItemCallbackInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->AkDynamicSequenceItemCallbackInfo; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::AkMIDIEventCallbackInfo*> AkMIDIEventCallbackInfo = __CppStaticProperty<ModdingAPI::Exposed::AkMIDIEventCallbackInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->AkMIDIEventCallbackInfo; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::AkMarkerCallbackInfo*> AkMarkerCallbackInfo = __CppStaticProperty<ModdingAPI::Exposed::AkMarkerCallbackInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->AkMarkerCallbackInfo; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::AkDurationCallbackInfo*> AkDurationCallbackInfo = __CppStaticProperty<ModdingAPI::Exposed::AkDurationCallbackInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->AkDurationCallbackInfo; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::AkMusicSyncCallbackInfo*> AkMusicSyncCallbackInfo = __CppStaticProperty<ModdingAPI::Exposed::AkMusicSyncCallbackInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->AkMusicSyncCallbackInfo; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::AkMusicPlaylistCallbackInfo*> AkMusicPlaylistCallbackInfo = __CppStaticProperty<ModdingAPI::Exposed::AkMusicPlaylistCallbackInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->AkMusicPlaylistCallbackInfo; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::AkAudioSourceChangeCallbackInfo*> AkAudioSourceChangeCallbackInfo = __CppStaticProperty<ModdingAPI::Exposed::AkAudioSourceChangeCallbackInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->AkAudioSourceChangeCallbackInfo; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::AkMonitoringCallbackInfo*> AkMonitoringCallbackInfo = __CppStaticProperty<ModdingAPI::Exposed::AkMonitoringCallbackInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->AkMonitoringCallbackInfo; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::AkBankCallbackInfo*> AkBankCallbackInfo = __CppStaticProperty<ModdingAPI::Exposed::AkBankCallbackInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->AkBankCallbackInfo; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> m_mapEventCallbacks = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_mapEventCallbacks; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> m_mapBankCallbacks = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_mapBankCallbacks; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::AkCallbackManager::EventCallbackPackage*> m_LastAddedEventPackage = __CppStaticProperty<ModdingAPI::Exposed::AkCallbackManager::EventCallbackPackage*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_LastAddedEventPackage; }
  );
  static inline __CppStaticProperty<intptr_t> m_pNotifMem = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pNotifMem; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::AkCallbackManager::MonitoringCallback*> m_MonitoringCB = __CppStaticProperty<ModdingAPI::Exposed::AkCallbackManager::MonitoringCallback*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_MonitoringCB; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::AkCallbackManager::BGMCallbackPackage*> ms_sourceChangeCallbackPkg = __CppStaticProperty<ModdingAPI::Exposed::AkCallbackManager::BGMCallbackPackage*>(
   []() { return &GetStaticClassInstance()->pStaticFields->ms_sourceChangeCallbackPkg; }
  );

  // Static methods:
  static inline bool get_IsLoggingEnabled() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x25101F0))();
  }
  static inline void set_IsLoggingEnabled(bool value) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2510290))(value);
  }
  static inline void RemoveEventCallback(uint32_t in_playingID) {
    reinterpret_cast<void(__fastcall*)(uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2510340))(in_playingID);
  }
  static inline void RemoveEventCallbackCookie(Il2CppObject* in_cookie) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2510860))(in_cookie);
  }
  static inline void RemoveBankCallback(Il2CppObject* in_cookie) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2510D00))(in_cookie);
  }
  static inline void SetLastAddedPlayingID(uint32_t in_playingID) {
    reinterpret_cast<void(__fastcall*)(uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25111A0))(in_playingID);
  }
  static inline int32_t Init(ModdingAPI::Exposed::AkCallbackManager::InitializationSettings* settings) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::AkCallbackManager::InitializationSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25112C0))(settings);
  }
  static inline void Term() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2511580))();
  }
  static inline void SetMonitoringCallback(int32_t in_Level, ModdingAPI::Exposed::AkCallbackManager::MonitoringCallback* in_CB) {
    reinterpret_cast<void(__fastcall*)(int32_t, ModdingAPI::Exposed::AkCallbackManager::MonitoringCallback*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2511790))(in_Level, in_CB);
  }
  static inline void SetBGMCallback(ModdingAPI::Exposed::AkCallbackManager::BGMCallback* in_CB, Il2CppObject* in_cookie) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AkCallbackManager::BGMCallback*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2511940))(in_CB, in_cookie);
  }
  static inline int32_t PostCallbacks() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2511AD0))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2512AC0))();
  }
};
}