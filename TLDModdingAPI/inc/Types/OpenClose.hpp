// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __OpenClose_Il2CppStaticFields {
  ModdingAPI::Exposed::OpenCloseSaveDataProxy* m_OpenCloseSaveDataProxy;
};

struct __OpenClose_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __OpenClose_Il2CppClass {
  Il2CppClass_1 _1;
  __OpenClose_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __OpenClose_Il2CppVtbl vtbl;
};

class OpenClose {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C90598;
  static inline    __OpenClose_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __OpenClose_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__OpenClose_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __OpenClose_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::LocalizedString* m_LocalizedDisplayName;
  System_String* m_OpenAudio;
  System_String* m_CloseAudio;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ReverseAnimLocator;
  bool m_AllowInteractionWhileCarrying;
  bool m_DisableOnClose;
  bool m_DisableOnOpen;
  bool m_DisableCollisionDuringAnimation;
  bool m_SendInteractionCompleteEvent;
  System_String* m_AnimParameter_IsOpen;
  System_String* m_AnimParameter_SpeedMultiplier;
  ModdingAPI::Exposed::OpenClose_array* m_LinkedObjects;
  float m_NavmeshObstaclePadding;
  bool m_IsOpen;
  ModdingAPI::Exposed::ObjectAnim* m_ObjectAnim;
  ModdingAPI::Exposed::Lock* m_Lock;
  bool m_AnimsReversed;
  bool m_StartHasBeenCalled;
  bool m_Animating;
  ModdingAPI::Exposed::UnityEngine::Animator* m_Animator;
  int32_t m_AnimParameterHash_IsOpen;
  int32_t m_AnimParameterHash_SpeedMultiplier;
  float m_DefaultOpenCloseSpeedMultiplierValue;
  ModdingAPI::Exposed::UnityEngine::AI::NavMeshObstacle* m_NavmeshObstacle;
  bool m_IsBeingInteractedWith;
  float m_InteractTimer;
  int32_t m_RestoreControlMode;
  bool m_ForceOpenOnUpdate;
  ModdingAPI::Exposed::SafeCracking* m_Safe;

  // Member methods:
  System_String* get_m_DisplayName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E35A0))(this);
  }
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D2E940))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D2EB40))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D2ED80))(this);
  }
  void UpdateOpenClose() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D2EE40))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D2F000))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D2F2D0))(this, text);
  }
  bool CanInteract() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D2F470))(this);
  }
  bool IsOpen() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCAF2D0))(this);
  }
  void Open(bool isImmediate) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D2F4F0))(this, isImmediate);
  }
  void Open(bool isImmediate, bool fromLink) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D2F500))(this, isImmediate, fromLink);
  }
  void Close(bool isImmediate) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D2F7E0))(this, isImmediate);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D2F7F0))(this);
  }
  void Close(bool isImmediate, bool fromLink) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D2F810))(this, isImmediate, fromLink);
  }
  void AnimateOpen(bool isOpen) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D2FA80))(this, isOpen);
  }
  System_String* GetHoverText() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D2FB80))(this);
  }
  void ForceLock() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D2FCD0))(this);
  }
  bool IsLocked() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D300D0))(this);
  }
  void StartSafeCrackingInterface() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D30200))(this);
  }
  void StartInteract() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D302D0))(this);
  }
  void Cancel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D30710))(this);
  }
  void ProgressBarStarted() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnStateDone() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D308B0))(this);
  }
  bool PlayAnimInReverse() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D308D0))(this);
  }
  void OnLockBroken() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D30AA0))(this);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D30C00))(this);
  }
  void SetCollisionEnabled(bool enabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D30DA0))(this, enabled);
  }
  void SetAnimationSpeed(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D30F30))(this, value);
  }
  void MaybeCreateNavMeshObstacle() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D31010))(this);
  }
  void MaybeUpdateNavmeshObstacleState() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D31840))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::OpenClose*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D319E0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::OpenCloseSaveDataProxy*> m_OpenCloseSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::OpenCloseSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_OpenCloseSaveDataProxy; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D31A70))();
  }
};
}