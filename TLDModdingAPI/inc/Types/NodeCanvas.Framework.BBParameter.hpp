// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::NodeCanvas::Framework {
struct __BBParameter_Il2CppStaticFields {
};

struct __BBParameter_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _65535__ctor;
};

struct __BBParameter_Il2CppClass {
  Il2CppClass_1 _1;
  __BBParameter_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __BBParameter_Il2CppVtbl vtbl;
};

class BBParameter {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C59868;
  static inline    BBParameter* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C51AD0;
  static inline    __BBParameter_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline BBParameter* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (BBParameter**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __BBParameter_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__BBParameter_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __BBParameter_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  System_String* _name;
  System_String* _targetVariableID;
  ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* _bb;
  ModdingAPI::Exposed::NodeCanvas::Framework::Variable* _varRef;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  System_String* get_targetVariableID() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  void set_targetVariableID(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3E0))(this, value);
  }
  ModdingAPI::Exposed::NodeCanvas::Framework::Variable* get_varRef() {
    return reinterpret_cast<ModdingAPI::Exposed::NodeCanvas::Framework::Variable*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110B0))(this);
  }
  void set_varRef(ModdingAPI::Exposed::NodeCanvas::Framework::Variable* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*, ModdingAPI::Exposed::NodeCanvas::Framework::Variable*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x229B020))(this, value);
  }
  ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* get_bb() {
    return reinterpret_cast<ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110A0))(this);
  }
  void set_bb(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x229B040))(this, value);
  }
  System_String* get_name() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  void set_name(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x229B090))(this, value);
  }
  bool get_useBlackboard() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF59E70))(this);
  }
  void set_useBlackboard(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x229B120))(this, value);
  }
  bool get_isNone() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x229B210))(this);
  }
  bool get_isDefined() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1901590))(this);
  }
  bool get_isNull() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x229B2D0))(this);
  }
  ModdingAPI::Exposed::System::Type* get_refType() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x229B420))(this);
  }
  Il2CppObject* get_value() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF16D0))(this);
  }
  void set_value(Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1555B30))(this, value);
  }
  ModdingAPI::Exposed::NodeCanvas::Framework::Variable* ResolveReference(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* targetBlackboard, bool useID) {
    return reinterpret_cast<ModdingAPI::Exposed::NodeCanvas::Framework::Variable*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x229B440))(this, targetBlackboard, useID);
  }
  ModdingAPI::Exposed::NodeCanvas::Framework::Variable* PromoteToVariable(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* targetBB) {
    return reinterpret_cast<ModdingAPI::Exposed::NodeCanvas::Framework::Variable*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x229B650))(this, targetBB);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x229BA30))(this);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter* CreateInstance(ModdingAPI::Exposed::System::Type* t, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* bb) {
    return reinterpret_cast<ModdingAPI::Exposed::NodeCanvas::Framework::BBParameter*(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x229A4D0))(t, bb);
  }
  static inline void SetBBFields(Il2CppObject* o, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* bb) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x229A730))(o, bb);
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::List_T_* GetObjectBBParameters(Il2CppObject* o) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x229A810))(o);
  }
};
}