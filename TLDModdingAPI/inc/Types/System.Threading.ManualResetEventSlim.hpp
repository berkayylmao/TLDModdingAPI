// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Threading.CancellationToken.hpp"


namespace ModdingAPI::Exposed::System::Threading {
struct __ManualResetEventSlim_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Action_T_* s_cancellationTokenCallback;
};

struct __ManualResetEventSlim_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Dispose;
  VirtualInvokeData _5_Dispose;
};

struct __ManualResetEventSlim_Il2CppClass {
  Il2CppClass_1 _1;
  __ManualResetEventSlim_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ManualResetEventSlim_Il2CppVtbl vtbl;
};

class ManualResetEventSlim {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C5C620;
  static inline    __ManualResetEventSlim_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ManualResetEventSlim_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ManualResetEventSlim_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ManualResetEventSlim_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  Il2CppObject* m_lock;
  ModdingAPI::Exposed::System::Threading::ManualResetEvent* m_eventObj;
  int32_t m_combinedState;

  // Member methods:
  ModdingAPI::Exposed::System::Threading::WaitHandle* get_WaitHandle() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::WaitHandle*(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1094310))(this);
  }
  bool get_IsSet() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1094350))(this);
  }
  void set_IsSet(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10943F0))(this, value);
  }
  int32_t get_SpinCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1094420))(this);
  }
  void set_SpinCount(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10944D0))(this, value);
  }
  int32_t get_Waiters() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10944F0))(this);
  }
  void set_Waiters(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1094590))(this, value);
  }
  void ::ctor(bool initialState) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1094690))(this, initialState);
  }
  void ::ctor(bool initialState, int32_t spinCount) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10946F0))(this, initialState, spinCount);
  }
  void Initialize(bool initialState, int32_t spinCount) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1094840))(this, initialState, spinCount);
  }
  void EnsureLockObjectCreated() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10948B0))(this);
  }
  bool LazyInitializeEvent() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1094A10))(this);
  }
  void Set() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD94430))(this);
  }
  void Set(bool duringCancellation) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1094CA0))(this, duringCancellation);
  }
  bool Wait(int32_t millisecondsTimeout, ModdingAPI::Exposed::System::Threading::CancellationToken cancellationToken) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*, int32_t, ModdingAPI::Exposed::System::Threading::CancellationToken)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1094EC0))(this, millisecondsTimeout, cancellationToken);
  }
  void Dispose() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1095610))(this);
  }
  void Dispose(bool disposing) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10956C0))(this, disposing);
  }
  void ThrowIfDisposed() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10957D0))(this);
  }
  void UpdateStateAtomically(int32_t newBits, int32_t updateBitsMask) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1095A30))(this, newBits, updateBitsMask);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Action_T_*> s_cancellationTokenCallback = __CppStaticProperty<ModdingAPI::Exposed::System::Action_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_cancellationTokenCallback; }
  );

  // Static methods:
  static inline void CancellationTokenCallback(Il2CppObject* obj) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10958A0))(obj);
  }
  static inline int32_t ExtractStatePortionAndShiftRight(int32_t state, int32_t mask, int32_t rightBitShiftCount) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1095B30))(state, mask, rightBitShiftCount);
  }
  static inline int32_t ExtractStatePortion(int32_t state, int32_t mask) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1095B40))(state, mask);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1095B50))();
  }
};
}