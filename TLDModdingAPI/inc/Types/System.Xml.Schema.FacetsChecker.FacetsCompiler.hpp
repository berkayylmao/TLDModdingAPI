// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"

namespace ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker {
struct __FacetsCompiler_Il2CppObject {
  ModdingAPI::Exposed::System::Xml::Schema::DatatypeImplementation* datatype;
  ModdingAPI::Exposed::System::Xml::Schema::RestrictionFacets* derivedRestriction;
  int32_t baseFlags;
  int32_t baseFixedFlags;
  int32_t validRestrictionFlags;
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* nonNegativeInt;
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* builtInType;
  int32_t builtInEnum;
  bool firstPattern;
  ModdingAPI::Exposed::System::Text::StringBuilder* regStr;
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaPatternFacet* pattern_facet;
};
struct __FacetsCompiler_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler::Map_array* c_map;
};

struct __FacetsCompiler_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __FacetsCompiler_Il2CppClass {
  Il2CppClass_1 _1;
  __FacetsCompiler_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __FacetsCompiler_Il2CppVtbl vtbl;
};

class FacetsCompiler {
  static constexpr uint64_t _rvaClassInstance     = 0x3C51CC8;
  static inline    __FacetsCompiler_Il2CppClass* _pStaticClassInstance = nullptr;

public:
  // Static class getter:
  static inline __FacetsCompiler_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__FacetsCompiler_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Member fields:
  ModdingAPI::Exposed::System::Xml::Schema::DatatypeImplementation* datatype;
  ModdingAPI::Exposed::System::Xml::Schema::RestrictionFacets* derivedRestriction;
  int32_t baseFlags;
  int32_t baseFixedFlags;
  int32_t validRestrictionFlags;
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* nonNegativeInt;
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* builtInType;
  int32_t builtInEnum;
  bool firstPattern;
  ModdingAPI::Exposed::System::Text::StringBuilder* regStr;
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaPatternFacet* pattern_facet;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Xml::Schema::DatatypeImplementation* baseDatatype, ModdingAPI::Exposed::System::Xml::Schema::RestrictionFacets* restriction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, ModdingAPI::Exposed::System::Xml::Schema::DatatypeImplementation*, ModdingAPI::Exposed::System::Xml::Schema::RestrictionFacets*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33FD0))(this, baseDatatype, restriction);
  }
  void CompileLengthFacet(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet* facet) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33FE0))(this, facet);
  }
  void CompileMinLengthFacet(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet* facet) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33FF0))(this, facet);
  }
  void CompileMaxLengthFacet(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet* facet) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34000))(this, facet);
  }
  void CompilePatternFacet(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaPatternFacet* facet) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaPatternFacet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34010))(this, facet);
  }
  void CompileEnumerationFacet(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet* facet, ModdingAPI::Exposed::System::Xml::IXmlNamespaceResolver* nsmgr, ModdingAPI::Exposed::System::Xml::XmlNameTable* nameTable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet*, ModdingAPI::Exposed::System::Xml::IXmlNamespaceResolver*, ModdingAPI::Exposed::System::Xml::XmlNameTable*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34020))(this, facet, nsmgr, nameTable);
  }
  void CompileWhitespaceFacet(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet* facet) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34030))(this, facet);
  }
  void CompileMaxInclusiveFacet(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet* facet) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34040))(this, facet);
  }
  void CompileMaxExclusiveFacet(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet* facet) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34050))(this, facet);
  }
  void CompileMinInclusiveFacet(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet* facet) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34060))(this, facet);
  }
  void CompileMinExclusiveFacet(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet* facet) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34070))(this, facet);
  }
  void CompileTotalDigitsFacet(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet* facet) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34080))(this, facet);
  }
  void CompileFractionDigitsFacet(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet* facet) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34090))(this, facet);
  }
  void FinishFacetCompile() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x340A0))(this);
  }
  void CheckValue(Il2CppObject* value, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet* facet) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, Il2CppObject*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x340B0))(this, value, facet);
  }
  void CompileFacetCombinations() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x340C0))(this);
  }
  void CopyFacetsFromBaseType() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x340D0))(this);
  }
  Il2CppObject* ParseFacetValue(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* datatype, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet* facet, System_String* code, ModdingAPI::Exposed::System::Xml::IXmlNamespaceResolver* nsmgr, ModdingAPI::Exposed::System::Xml::XmlNameTable* nameTable) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet*, System_String*, ModdingAPI::Exposed::System::Xml::IXmlNamespaceResolver*, ModdingAPI::Exposed::System::Xml::XmlNameTable*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x340E0))(this, datatype, facet, code, nsmgr, nameTable);
  }
  void CheckProhibitedFlag(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet* facet, int32_t flag, System_String* errorCode) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet*, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x340F0))(this, facet, flag, errorCode);
  }
  void CheckDupFlag(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet* facet, int32_t flag, System_String* errorCode) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet*, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34100))(this, facet, flag, errorCode);
  }
  void SetFlag(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet* facet, int32_t flag) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaFacet*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34110))(this, facet, flag);
  }
  void SetFlag(int32_t flag) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker::FacetsCompiler*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34180))(this, flag);
  }

  // Static methods:
  static inline System_String* Preprocess(System_String* pattern) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD82BF0))(pattern);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD831B0))();
  }

};
}