// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Color.hpp"


namespace ModdingAPI::Exposed {
struct __BearSpearItem_Il2CppStaticFields {
};

struct __BearSpearItem_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __BearSpearItem_Il2CppClass {
  Il2CppClass_1 _1;
  __BearSpearItem_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __BearSpearItem_Il2CppVtbl vtbl;
};

class BearSpearItem {
public:
  // Il2Cpp fields:
  __BearSpearItem_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_SetSpearDurationSeconds;
  float m_RecoverSpearDurationSeconds;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_PitchLimitDegrees;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_YawLimitDegrees;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BrokenSpearPrefab;
  float m_StaminaCost;
  float m_DamageDealt;
  float m_BleedOutMinutes;
  float m_DistanceForDamageMeters;
  float m_AngleForDamageDegrees;
  float m_AnimationSetBaseDuration;
  float m_AnimationRecoverBaseDuration;
  ModdingAPI::Exposed::GearItem* m_GearItem;
  float m_ActionElapsedSeconds;
  int32_t m_CurrentSpearState;
  int32_t _m_ControlModeToRestore_k__BackingField;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_StartPitchLimit;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_StartYawLimit;
  ModdingAPI::Exposed::BaseAi* m_HitAi;
  ModdingAPI::Exposed::LocalizedDamage* m_LocalizedDamage;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_HitPosition;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_HitSourcePosition;
  float m_HitDamage;
  float m_HitBleedOutMinutes;
  int32_t m_PendingSpearState;
  bool m_HasDisabledHipAndShoulderOffsetLayer;
  bool m_HasTriggeredGenericAim;
  float m_PreviousTimeScale;
  int32_t m_PreviousAnimatorUpdateMode;
  ModdingAPI::Exposed::BearSpearHead* m_BearSpearHead;

  // Member methods:
  int32_t get_m_ControlModeToRestore() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3839C0))(this);
  }
  void set_m_ControlModeToRestore(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3839D0))(this, value);
  }
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BDE970))(this);
  }
  float GetDamageDealt(ModdingAPI::Exposed::BaseAi* bai) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*, ModdingAPI::Exposed::BaseAi*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BDEA00))(this, bai);
  }
  float GetBleedOutMinutes(ModdingAPI::Exposed::BaseAi* bai) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*, ModdingAPI::Exposed::BaseAi*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BDEB20))(this, bai);
  }
  bool IsDamageFatal(ModdingAPI::Exposed::BaseAi* bai, float damageDealt) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*, ModdingAPI::Exposed::BaseAi*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BDEBF0))(this, bai, damageDealt);
  }
  void OnAiCollidedWithSpear(ModdingAPI::Exposed::BaseAi* bai, ModdingAPI::Exposed::UnityEngine::Vector3 spearForward, ModdingAPI::Exposed::LocalizedDamage* localizedDamage) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*, ModdingAPI::Exposed::BaseAi*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::LocalizedDamage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BDED00))(this, bai, spearForward, localizedDamage);
  }
  void OnStruggleHitEnd() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BDF4D0))(this);
  }
  void Break() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BDF710))(this);
  }
  bool IsSpearHitLethal() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this);
  }
  float DistanceToNearestSpearable() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BDFCF0))(this);
  }
  void UpdateCollision(ModdingAPI::Exposed::BaseAi* bai) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*, ModdingAPI::Exposed::BaseAi*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE05F0))(this, bai);
  }
  void Update_SpearRaised() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE0AF0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE0C70))(this);
  }
  void LateUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE1090))(this);
  }
  bool IsRaised() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B7A750))(this);
  }
  bool IsRaisedOrRaisingOrLowering() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE1120))(this);
  }
  float GetActionElapsedInSeconds() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56F070))(this);
  }
  bool CanStartZoom() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE1130))(this);
  }
  bool CheckStaminaForRaising() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE1140))(this);
  }
  bool CanEndZoom() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE1260))(this);
  }
  void ZoomStart() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE1280))(this);
  }
  int32_t GetCurrentSpearState() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3839A0))(this);
  }
  float GetAngleBetweenSpearAndBearHeadings(ModdingAPI::Exposed::BaseAi* bai, ModdingAPI::Exposed::UnityEngine::Vector3 spearForward) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*, ModdingAPI::Exposed::BaseAi*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE13F0))(this, bai, spearForward);
  }
  void RestoreYawPitchLimits() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE15A0))(this);
  }
  void ZoomEnd() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE16B0))(this);
  }
  void CancelAction() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE1780))(this);
  }
  void HitAction() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE18F0))(this);
  }
  System_String* GetStateDebugString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE1A60))(this);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE1F60))(this);
  }
  void SetCurrentState(int32_t state) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE1F70))(this, state);
  }
  void OnRaised() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnRaisedCancelled() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnEnter_None() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE1FE0))(this);
  }
  void OnEnter_Setting() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE2250))(this);
  }
  void OnEnter_Raised() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE2700))(this);
  }
  void OnEnter_Recovering() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE29A0))(this);
  }
  void OnExit_None() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnExit_Setting() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnExit_Raised() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnExit_Recovering() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void MaybeDisableStaminaRecharge() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE2C00))(this);
  }
  void MaybeEnableStaminaRecharge() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE2D20))(this);
  }
  bool IsEquipped() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE2E40))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BearSpearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE2FF0))(this);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 UpdateHudBearSpearSprite(ModdingAPI::Exposed::UnityEngine::GameObject* hudObject, ModdingAPI::Exposed::UISprite* sprite, ModdingAPI::Exposed::UnityEngine::Vector3 viewportSpearLocation, float size, bool isSpearInsideTarget, ModdingAPI::Exposed::UnityEngine::Color insideColor, ModdingAPI::Exposed::UnityEngine::Color outsideColor) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*, ModdingAPI::Exposed::UISprite*, ModdingAPI::Exposed::UnityEngine::Vector3, float, bool, ModdingAPI::Exposed::UnityEngine::Color, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BDFFA0))(hudObject, sprite, viewportSpearLocation, size, isSpearInsideTarget, insideColor, outsideColor);
  }
};
}