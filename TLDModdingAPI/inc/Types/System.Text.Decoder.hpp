// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Text {
struct __Decoder_Il2CppStaticFields {
};

struct __Decoder_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Reset;
  VirtualInvokeData _6_GetCharCount;
  VirtualInvokeData _7_GetCharCount;
  VirtualInvokeData _9_GetChars;
  VirtualInvokeData _10_GetChars;
  VirtualInvokeData _11_Convert;
  VirtualInvokeData _12_Convert;
  VirtualInvokeData _65535__ctor;
};

struct __Decoder_Il2CppClass {
  Il2CppClass_1 _1;
  __Decoder_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Decoder_Il2CppVtbl vtbl;
};

class Decoder {
public:
  // Il2Cpp fields:
  __Decoder_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Text::DecoderFallback* m_fallback;
  ModdingAPI::Exposed::System::Text::DecoderFallbackBuffer* m_fallbackBuffer;

  // Member methods:
  void SerializeDecoder(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo* info) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::Decoder*, ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA0680))(this, info);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::Decoder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  ModdingAPI::Exposed::System::Text::DecoderFallback* get_Fallback() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::DecoderFallback*(__fastcall*)(ModdingAPI::Exposed::System::Text::Decoder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  ModdingAPI::Exposed::System::Text::DecoderFallbackBuffer* get_FallbackBuffer() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::DecoderFallbackBuffer*(__fastcall*)(ModdingAPI::Exposed::System::Text::Decoder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA0720))(this);
  }
  bool get_InternalHasFallbackBuffer() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::Decoder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9451E0))(this);
  }
  void Reset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::Decoder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA0790))(this);
  }
  int32_t GetCharCount(ModdingAPI::Exposed::System::Byte_array* bytes, int32_t index, int32_t count, bool flush) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Text::Decoder*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA08A0))(this, bytes, index, count, flush);
  }
  int32_t GetCharCount(uint8_t* bytes, int32_t count, bool flush) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Text::Decoder*, uint8_t*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA08C0))(this, bytes, count, flush);
  }
  int32_t GetChars(ModdingAPI::Exposed::System::Byte_array* bytes, int32_t byteIndex, int32_t byteCount, ModdingAPI::Exposed::System::Char_array* chars, int32_t charIndex, bool flush) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Text::Decoder*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, ModdingAPI::Exposed::System::Char_array*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA0A60))(this, bytes, byteIndex, byteCount, chars, charIndex, flush);
  }
  int32_t GetChars(uint8_t* bytes, int32_t byteCount, wchar_t* chars, int32_t charCount, bool flush) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Text::Decoder*, uint8_t*, int32_t, wchar_t*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA0A80))(this, bytes, byteCount, chars, charCount, flush);
  }
  void Convert(ModdingAPI::Exposed::System::Byte_array* bytes, int32_t byteIndex, int32_t byteCount, ModdingAPI::Exposed::System::Char_array* chars, int32_t charIndex, int32_t charCount, bool flush, int32_t bytesUsed, int32_t charsUsed, bool completed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::Decoder*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, ModdingAPI::Exposed::System::Char_array*, int32_t, int32_t, bool, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA0CF0))(this, bytes, byteIndex, byteCount, chars, charIndex, charCount, flush, bytesUsed, charsUsed, completed);
  }
  void Convert(uint8_t* bytes, int32_t byteCount, wchar_t* chars, int32_t charCount, bool flush, int32_t bytesUsed, int32_t charsUsed, bool completed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::Decoder*, uint8_t*, int32_t, wchar_t*, int32_t, bool, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA1080))(this, bytes, byteCount, chars, charCount, flush, bytesUsed, charsUsed, completed);
  }
};
}