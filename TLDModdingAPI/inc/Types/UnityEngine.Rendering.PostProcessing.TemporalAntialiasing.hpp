// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Matrix4x4.hpp"


namespace ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing {
struct __TemporalAntialiasing_Il2CppStaticFields {
};

struct __TemporalAntialiasing_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __TemporalAntialiasing_Il2CppClass {
  Il2CppClass_1 _1;
  __TemporalAntialiasing_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TemporalAntialiasing_Il2CppVtbl vtbl;
};

class TemporalAntialiasing {
public:
  // Il2Cpp fields:
  __TemporalAntialiasing_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  float jitterSpread;
  float sharpness;
  float stationaryBlending;
  float motionBlending;
  ModdingAPI::Exposed::System::Func_T1__T2__TResult_* jitteredMatrixFunc;
  ModdingAPI::Exposed::UnityEngine::Vector2 _jitter_k__BackingField;
  ModdingAPI::Exposed::UnityEngine::Rendering::RenderTargetIdentifier_array* m_Mrt;
  bool m_ResetHistory;
  int32_t _sampleIndex_k__BackingField;
  ModdingAPI::Exposed::UnityEngine::RenderTexture_array_array* m_HistoryTextures;
  ModdingAPI::Exposed::System::Int32_array* m_HistoryPingPong;

  // Member methods:
  ModdingAPI::Exposed::UnityEngine::Vector2 get_jitter() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TemporalAntialiasing*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD20A0))(this);
  }
  void set_jitter(ModdingAPI::Exposed::UnityEngine::Vector2 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TemporalAntialiasing*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD20C0))(this, value);
  }
  int32_t get_sampleIndex() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TemporalAntialiasing*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8C0))(this);
  }
  void set_sampleIndex(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TemporalAntialiasing*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8D0))(this, value);
  }
  bool IsSupported() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TemporalAntialiasing*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x22F1E90))(this);
  }
  int32_t GetCameraFlags() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TemporalAntialiasing*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3029E0))(this);
  }
  void ResetHistory() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TemporalAntialiasing*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x968AD0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 GenerateRandomOffset() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TemporalAntialiasing*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x22F1F70))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Matrix4x4 GetJitteredProjectionMatrix(ModdingAPI::Exposed::UnityEngine::Camera* camera) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Matrix4x4(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TemporalAntialiasing*, ModdingAPI::Exposed::UnityEngine::Camera*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x22F2050))(this, camera);
  }
  void ConfigureJitteredProjectionMatrix(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext* context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TemporalAntialiasing*, ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x22F23A0))(this, context);
  }
  void ConfigureStereoJitteredProjectionMatrices(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext* context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TemporalAntialiasing*, ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x22F2530))(this, context);
  }
  void GenerateHistoryName(ModdingAPI::Exposed::UnityEngine::RenderTexture* rt, int32_t id, ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext* context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TemporalAntialiasing*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, int32_t, ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x22F28E0))(this, rt, id, context);
  }
  ModdingAPI::Exposed::UnityEngine::RenderTexture* CheckHistory(int32_t id, ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext* context) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::RenderTexture*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TemporalAntialiasing*, int32_t, ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x22F2A10))(this, id, context);
  }
  void Render(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext* context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TemporalAntialiasing*, ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x22F3170))(this, context);
  }
  void Release() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TemporalAntialiasing*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x22F3890))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TemporalAntialiasing*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x22F3AC0))(this);
  }
};
}