// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.RaycastHit.hpp"


namespace ModdingAPI::Exposed {
struct __GearItem_Il2CppStaticFields {
  ModdingAPI::Exposed::GearItemSaveDataProxy* m_GearItemSaveDataProxy;
};

struct __GearItem_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __GearItem_Il2CppClass {
  Il2CppClass_1 _1;
  __GearItem_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __GearItem_Il2CppVtbl vtbl;
};

class GearItem {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C30240;
  static inline    GearItem* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C4FB00;
  static inline    __GearItem_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline GearItem* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (GearItem**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __GearItem_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__GearItem_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __GearItem_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  int32_t m_InstanceID;
  bool m_BeenInPlayerInventory;
  bool m_HasBeenOwnedByPlayer;
  bool m_BeenInContainer;
  bool m_BeenInspected;
  bool m_InPlayerInventory;
  bool m_ItemLooted;
  bool m_InitialDecayApplied;
  bool m_IsInSatchel;
  int32_t m_SatchelIndex;
  bool m_InsideContainer;
  float m_NormalizedRevealTimeInContainer;
  bool m_LockedInContainer;
  bool m_IsHidden;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_localScaleAtAwake;
  ModdingAPI::Exposed::AmmoItem* m_AmmoItem;
  ModdingAPI::Exposed::AmmoCasingItem* m_AmmoCasingItem;
  ModdingAPI::Exposed::ArrowItem* m_ArrowItem;
  ModdingAPI::Exposed::BearSpearItem* m_BearSpearItem;
  ModdingAPI::Exposed::Bed* m_Bed;
  ModdingAPI::Exposed::BodyHarvestItem* m_BodyHarvestItem;
  ModdingAPI::Exposed::BodyHarvest* m_BodyHarvest;
  ModdingAPI::Exposed::BowItem* m_BowItem;
  ModdingAPI::Exposed::BreakDownItem* m_BreakDownItem;
  ModdingAPI::Exposed::CanOpeningItem* m_CanOpeningItem;
  ModdingAPI::Exposed::CarryableBody* m_CarryableBody;
  ModdingAPI::Exposed::CarryingCapacityBuff* m_CarryingCapacityBuff;
  ModdingAPI::Exposed::CharcoalItem* m_CharcoalItem;
  ModdingAPI::Exposed::Cleanable* m_Cleanable;
  ModdingAPI::Exposed::ClothingItem* m_ClothingItem;
  ModdingAPI::Exposed::ConditionOverTimeBuff* m_ConditionOverTimeBuff;
  ModdingAPI::Exposed::ConditionRestBuff* m_ConditionRestBuff;
  ModdingAPI::Exposed::Cookable* m_Cookable;
  ModdingAPI::Exposed::CookingPotItem* m_CookingPotItem;
  ModdingAPI::Exposed::DegradeOnUse* m_DegradeOnUse;
  ModdingAPI::Exposed::EmergencyStimItem* m_EmergencyStim;
  ModdingAPI::Exposed::EnergyBoostItem* m_EnergyBoost;
  ModdingAPI::Exposed::EvolveItem* m_EvolveItem;
  ModdingAPI::Exposed::FatigueBuff* m_FatigueBuff;
  ModdingAPI::Exposed::FireStarterItem* m_FireStarterItem;
  ModdingAPI::Exposed::FirstAidItem* m_FirstAidItem;
  ModdingAPI::Exposed::FirstPersonItem* m_FirstPersonItem;
  ModdingAPI::Exposed::FishingItem* m_FishingItem;
  ModdingAPI::Exposed::FlareItem* m_FlareItem;
  ModdingAPI::Exposed::FlashlightItem* m_FlashlightItem;
  ModdingAPI::Exposed::FoodItem* m_FoodItem;
  ModdingAPI::Exposed::FoodWeight* m_FoodWeight;
  ModdingAPI::Exposed::ForageItem* m_ForageItem;
  ModdingAPI::Exposed::ForceLockItem* m_ForceLockItem;
  ModdingAPI::Exposed::FreezingBuff* m_FreezingBuff;
  ModdingAPI::Exposed::FuelSourceItem* m_FuelSourceItem;
  ModdingAPI::Exposed::HandheldShortwaveItem* m_HandheldShortwaveItem;
  ModdingAPI::Exposed::GunItem* m_GunItem;
  ModdingAPI::Exposed::Harvest* m_Harvest;
  ModdingAPI::Exposed::IceFishingHoleClearItem* m_IceFishingHoleClearItem;
  ModdingAPI::Exposed::InProgressCraftItem* m_InProgressCraftItem;
  ModdingAPI::Exposed::Inspect* m_Inspect;
  ModdingAPI::Exposed::KeroseneLampItem* m_KeroseneLampItem;
  ModdingAPI::Exposed::Knowledge* m_Knowledge;
  ModdingAPI::Exposed::LiquidItem* m_LiquidItem;
  ModdingAPI::Exposed::MatchesItem* m_MatchesItem;
  ModdingAPI::Exposed::Millable* m_Millable;
  ModdingAPI::Exposed::NarrativeCollectibleItem* m_NarrativeCollectibleItem;
  ModdingAPI::Exposed::ShowOnMapItem* m_ShowOnMapItem;
  ModdingAPI::Exposed::OwnershipOverride* m_OwnershipOverrideItem;
  ModdingAPI::Exposed::PlaceableItem* m_PlaceableItem;
  ModdingAPI::Exposed::PowderItem* m_PowderItem;
  ModdingAPI::Exposed::PurifyWater* m_PurifyWater;
  ModdingAPI::Exposed::Repairable* m_Repairable;
  ModdingAPI::Exposed::ResearchItem* m_ResearchItem;
  ModdingAPI::Exposed::RopeItem* m_RopeItem;
  ModdingAPI::Exposed::Scent* m_Scent;
  ModdingAPI::Exposed::Sharpenable* m_Sharpenable;
  ModdingAPI::Exposed::SmashableItem* m_SmashableItem;
  ModdingAPI::Exposed::SnareItem* m_SnareItem;
  ModdingAPI::Exposed::StackableItem* m_StackableItem;
  ModdingAPI::Exposed::StoneItem* m_StoneItem;
  ModdingAPI::Exposed::StruggleBonus* m_StruggleBonus;
  ModdingAPI::Exposed::ToolsItem* m_ToolsItem;
  ModdingAPI::Exposed::TorchItem* m_TorchItem;
  ModdingAPI::Exposed::WaterSupply* m_WaterSupply;
  ModdingAPI::Exposed::WildlifeItem* m_WildlifeItem;
  ModdingAPI::Exposed::WolfIntimidationBuff* m_WolfIntimidationBuff;
  ModdingAPI::Exposed::UnityEngine::MeshRenderer_array* m_MeshRenderers;
  ModdingAPI::Exposed::UnityEngine::SkinnedMeshRenderer_array* m_SkinnedMeshRenderers;
  ModdingAPI::Exposed::ObjectGuid* m_ObjectGuid;
  ModdingAPI::Exposed::MissionObjectIdentifier* m_MissionObject;
  ModdingAPI::Exposed::OnDroppedInWaterDelegate* m_OnDroppedInWater;
  ModdingAPI::Exposed::RadialObjectSpawner* m_RadialObjectSpawnerParent;
  ModdingAPI::Exposed::Container* m_LastContainer;
  System_String* m_PlacePointGuid;
  System_String* m_PlacePointName;
  bool m_PhysicsEnabled;
  ModdingAPI::Exposed::UnityEngine::Rigidbody* m_RigidBody;
  int32_t m_Type;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_AdditionalTypesInventoryFilter;
  bool m_ShouldUseProjectilePhysics;
  bool m_RemainInInventoryOnDrop;
  ModdingAPI::Exposed::LocalizedString* m_LocalizedDisplayName;
  ModdingAPI::Exposed::LocalizedString* m_LocalizedDescription;
  int32_t m_Scarcity;
  float m_WeightKG;
  float m_CurrentHP;
  float m_MaxHP;
  float m_DailyHPDecay;
  float m_ScentIntensity;
  int32_t m_StartCondition;
  int32_t m_MovementSoundCategory;
  System_String* m_PickUpAudio;
  System_String* m_StowAudio;
  System_String* m_PutBackAudio;
  System_String* m_WornOutAudio;
  System_String* m_CookingSlotPlacementAudio;
  float m_SpawnChance;
  float m_GearBreakConditionThreshold;
  bool m_NonInteractive;
  int32_t m_ConditionTableType;
  bool m_DisableFavoriting;
  bool m_DisableSerialization;
  bool m_AlwaysHarvestedByPlayer;
  bool m_PromptsPersistUntilUsed;
  bool m_AutoEquipOnInteract;
  bool m_RequiredForMission;
  System_String* m_CoverflowMainTextureResourcePath;
  System_String* m_CoverflowDamageTextureResourcePath;
  System_String* m_CoverflowBlendTextureResourcePath;
  System_String* m_CoverflowOpenedTextureResourcePath;
  int32_t m_DummyGearType;
  System_String* m_GearName;
  bool m_RolledSpawnChance;
  bool m_WornOut;
  bool m_HaltDecay;
  bool m_HarvestedByPlayer;
  float m_LastUpdateDamageShaderCondition;
  bool m_MarkedForNextUpdateDestroy;
  bool m_StartHasBeenCalled;
  float m_DecayScalar;
  float m_LastUpdatedTODHours;
  bool m_LastUpdatedTODHoursInitialized;
  bool m_HasBeenEquippedAndUsed;

  // Member methods:
  System_String* get_m_DisplayName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DF5BA0))(this);
  }
  System_String* get_m_Description() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DF5C80))(this);
  }
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DF5CB0))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void MaybeDestroyBodyHarvest() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DF6840))(this);
  }
  void AddGearToContainer(ModdingAPI::Exposed::GearItem* containedGearItem, ModdingAPI::Exposed::GearItem* newItem) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, ModdingAPI::Exposed::GearItem*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DF6A10))(this, containedGearItem, newItem);
  }
  void RemoveGearFromContainer(ModdingAPI::Exposed::GearItem* gi) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DF6C80))(this, gi);
  }
  void ManualUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DF6F10))(this);
  }
  System_String* SerializeRigidBody() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DF7510))(this);
  }
  void DeserializeRigidBody(System_String* rigidBodySerialized) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DF79F0))(this, rigidBodySerialized);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DF7D60))(this);
  }
  void Deserialize(System_String* text, bool applyPositioningFix) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DF9220))(this, text, applyPositioningFix);
  }
  void RefreshName() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFABA0))(this);
  }
  bool IsAttachedToPlacePoint() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFACE0))(this);
  }
  void AssumeMissionObjectResponsibility(System_String* missionObjectSerialized) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFAD00))(this, missionObjectSerialized);
  }
  void MaybeDestroyGearItemAfterMission() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFAE00))(this);
  }
  void WearOut() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFAFE0))(this);
  }
  void Degrade(float hp) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFB690))(this, hp);
  }
  void SetNormalizedHP(float condition) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFB7B0))(this, condition);
  }
  void DisplayDegradedHUDMessage() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFB8E0))(this);
  }
  void DegradeOnUse() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFBA70))(this);
  }
  bool CheckForBreakOnUse() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFBFD0))(this);
  }
  int32_t CheckForHoursToBreak(float decayPerHour, int32_t maxHours) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::GearItem*, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFC140))(this, decayPerHour, maxHours);
  }
  void BreakOnUse() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFC1E0))(this);
  }
  float GetMaxHPFromRepair() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFC610))(this);
  }
  void SetHasBeenEquippedAndUsed() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFC700))(this);
  }
  bool ShouldKeepButtonPromptsOnScreen() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFC710))(this);
  }
  void HideOrRevealBasedOnRequiredKnowledge() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  ModdingAPI::Exposed::UnityEngine::GameObject* InstantiateKnowledge() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this);
  }
  System_String* GetTitleToDisplayWhenSelected() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFC730))(this);
  }
  System_String* GetTextToDisplayWhenSelected() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFC7C0))(this);
  }
  System_String* GetDescriptionToDisplayOnInventoryScreen() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFD8D0))(this);
  }
  float GetItemWeightIgnoreClothingWornBonusKG() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFD990))(this);
  }
  float GetItemWeightKG() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFDEF0))(this);
  }
  float GetSingleItemWeightKG() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFE4A0))(this);
  }
  void PlayPickUpClip() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFE7C0))(this);
  }
  System_String* GetDisplayNameWithoutConditionForInventoryInterfaces() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFE9C0))(this);
  }
  System_String* GetDisplayNameForInventoryInterfaces() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFEA70))(this);
  }
  System_String* GetBasicDisplayNameForInventoryInterfaces() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFEAD0))(this);
  }
  ModdingAPI::Exposed::GearItem* Drop(int32_t numUnits, bool playSound, bool stickToFeet) {
    return reinterpret_cast<ModdingAPI::Exposed::GearItem*(__fastcall*)(ModdingAPI::Exposed::GearItem*, int32_t, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFEDA0))(this, numUnits, playSound, stickToFeet);
  }
  ModdingAPI::Exposed::UnityEngine::GameObject* InstantiateStackable(int32_t numUnits) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::GearItem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DFF960))(this, numUnits);
  }
  void ToggleColliders(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E00230))(this, enable);
  }
  float GetNormalizedCondition() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E003C0))(this);
  }
  bool PassesFilterType(int32_t filterType) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E00490))(this, filterType);
  }
  bool IsBigCarry() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E00550))(this);
  }
  bool IsLitFlare() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E00660))(this);
  }
  bool IsLitFlashlight() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E00740))(this);
  }
  bool IsLitLamp() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E00820))(this);
  }
  bool IsLitMatch() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E00900))(this);
  }
  bool IsLitTorch() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E009E0))(this);
  }
  bool IsLitLightsource() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E00AC0))(this);
  }
  bool IsWornOut() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E00B20))(this);
  }
  void ForceWornOut() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E00B30))(this);
  }
  void ForceNotWornOut() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E00B50))(this);
  }
  int32_t GetFPSMeshID() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E00B60))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Color GetColorBasedOnCondition() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E00C40))(this);
  }
  System_String* GetColorStringBasedOnCondition() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E00DE0))(this);
  }
  int32_t GetRoundedCondition() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E00EA0))(this);
  }
  int32_t GetRoundedCondition(float normalizedCondition) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::GearItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E00F70))(this, normalizedCondition);
  }
  void SetHaltDecay(bool haltDecay) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E01020))(this, haltDecay);
  }
  System_String* GetHoverText() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E01030))(this);
  }
  bool RollForFoodPoisoning(float startingCalories) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E01400))(this, startingCalories);
  }
  void ApplyBuffs(float normalizedValue) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E015A0))(this, normalizedValue);
  }
  System_String* GetItemPostFixForInventoryInterfaces() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E018C0))(this);
  }
  void MaybeAdjustTransformWithDropDummy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E020F0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 UpdateOrientationForCorpse(ModdingAPI::Exposed::UnityEngine::RaycastHit hit, ModdingAPI::Exposed::UnityEngine::Vector3 desiredNormal) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::GearItem*, ModdingAPI::Exposed::UnityEngine::RaycastHit, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E02620))(this, hit, desiredNormal);
  }
  bool StickToGroundAndOrientOnSlope(ModdingAPI::Exposed::UnityEngine::Vector3 desiredPosition, int32_t navMeshCheck, float verticalOffset) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*, ModdingAPI::Exposed::UnityEngine::Vector3, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E029F0))(this, desiredPosition, navMeshCheck, verticalOffset);
  }
  bool StickToGroundAtPlayerFeet(ModdingAPI::Exposed::UnityEngine::Vector3 pos) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E03340))(this, pos);
  }
  bool IsInsideContainer() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3F0))(this);
  }
  void SkipSpawnChanceRoll() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E03640))(this);
  }
  void SkipSpawnChanceRollInitialDecayAndAutoEvolve() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E03650))(this);
  }
  void DisablePhysics() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E03720))(this);
  }
  void MarkAsHarvested() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E03A70))(this);
  }
  bool WasHarvested() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E03A80))(this);
  }
  void CopyHarvestedState(ModdingAPI::Exposed::GearItem* gi) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E03AA0))(this, gi);
  }
  float GetDamageBlendValue() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E03B80))(this);
  }
  void SetDamageBlendValue(float blendVal) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E03C40))(this, blendVal);
  }
  void UpdateDamageShader() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E04000))(this);
  }
  void DropIntoWater(ModdingAPI::Exposed::UnityEngine::Collider* collider, float waterY) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, ModdingAPI::Exposed::UnityEngine::Collider*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E04100))(this, collider, waterY);
  }
  bool IsUndegradableAccelerant() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E043E0))(this);
  }
  void MarkForNextUpdateDestroy(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F6270))(this, value);
  }
  bool IsMarkedForNextUpdateDestroy() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F6260))(this);
  }
  void SetDecayScale(float scale) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E04510))(this, scale);
  }
  void MaybePlayCookingSlotPlacementAudio(ModdingAPI::Exposed::GearPlacePoint* placePoint) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, ModdingAPI::Exposed::GearPlacePoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E04520))(this, placePoint);
  }
  void OverrideOwnership(System_String* trustId) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E04690))(this, trustId);
  }
  void OverrideGearCondition(int32_t condition, bool pickedUp) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E04910))(this, condition, pickedUp);
  }
  void SetPlacePoint(ModdingAPI::Exposed::GearPlacePoint* placePoint) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, ModdingAPI::Exposed::GearPlacePoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E04930))(this, placePoint);
  }
  void RollGearCondition(bool pickedUp) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E04CC0))(this, pickedUp);
  }
  void MaybeRollRandomWeightAndCalories() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E05110))(this);
  }
  void MaybeFallIntoWater() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E05660))(this);
  }
  void RollSpawnChance() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E05A60))(this);
  }
  System_String* GetItemPrefixForInventoryInterfaces(bool condition) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::GearItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E05BB0))(this, condition);
  }
  void InitializeLastUpdatedTodHours() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E05C80))(this);
  }
  void ManualStart() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E05D60))(this);
  }
  void DecayOverTODHours(float deltaTODHours, float scale) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E05EE0))(this, deltaTODHours, scale);
  }
  bool MaybePlaceGear() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E064F0))(this);
  }
  void ApplyForce(ModdingAPI::Exposed::UnityEngine::Vector3 force, ModdingAPI::Exposed::UnityEngine::Vector3 torgue) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E066B0))(this, force, torgue);
  }
  void EnablePhysics() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E06980))(this);
  }
  bool IsWeapon() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E06B50))(this);
  }
  bool IsTwoHandedWeapon() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E06CB0))(this);
  }
  bool IsDummy() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E06DF0))(this);
  }
  bool Equals(ModdingAPI::Exposed::GearItem* other) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearItem*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E06EE0))(this, other);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E06FE0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::GearItemSaveDataProxy*> m_GearItemSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::GearItemSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_GearItemSaveDataProxy; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::UnityEngine::GameObject* InstantiateWater(ModdingAPI::Exposed::UnityEngine::GameObject* prefab, float volume, int32_t quality) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E00090))(prefab, volume, quality);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E07160))();
  }
};
}