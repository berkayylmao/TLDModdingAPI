// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.TMPro.TMP_RichTextTagStack_T_.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color32.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector4.hpp"
#include "ModdingAPI.Exposed.TMPro.VertexGradient.hpp"
#include "ModdingAPI.Exposed.TMPro.TMP_FontStyleStack.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Matrix4x4.hpp"
#include "ModdingAPI.Exposed.TMPro.WordWrapState.hpp"
#include "ModdingAPI.Exposed.TMPro.Extents.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Rect.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Bounds.hpp"


namespace ModdingAPI::Exposed::TMPro {
struct __TextMeshProUGUI_Il2CppStaticFields {
};

struct __TextMeshProUGUI_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Awake;
  VirtualInvokeData _5_OnEnable;
  VirtualInvokeData _6_Start;
  VirtualInvokeData _7_OnDisable;
  VirtualInvokeData _8_OnDestroy;
  VirtualInvokeData _9_IsActive;
  VirtualInvokeData _10_OnRectTransformDimensionsChange;
  VirtualInvokeData _11_OnBeforeTransformParentChanged;
  VirtualInvokeData _12_OnTransformParentChanged;
  VirtualInvokeData _13_OnDidApplyAnimationProperties;
  VirtualInvokeData _14_OnCanvasGroupChanged;
  VirtualInvokeData _15_OnCanvasHierarchyChanged;
  VirtualInvokeData _16_IsDestroyed;
  VirtualInvokeData _18_UnityEngine_UI_ICanvasElement_get_transform;
  VirtualInvokeData _22_get_color;
  VirtualInvokeData _23_set_color;
  VirtualInvokeData _24_get_raycastTarget;
  VirtualInvokeData _25_set_raycastTarget;
  VirtualInvokeData _26_SetAllDirty;
  VirtualInvokeData _27_SetLayoutDirty;
  VirtualInvokeData _28_SetVerticesDirty;
  VirtualInvokeData _29_SetMaterialDirty;
  VirtualInvokeData _30_get_rectTransform;
  VirtualInvokeData _31_get_defaultMaterial;
  VirtualInvokeData _32_get_material;
  VirtualInvokeData _33_set_material;
  VirtualInvokeData _34_get_materialForRendering;
  VirtualInvokeData _35_get_mainTexture;
  VirtualInvokeData _36_OnCullingChanged;
  VirtualInvokeData _37_Rebuild;
  VirtualInvokeData _38_LayoutComplete;
  VirtualInvokeData _39_GraphicUpdateComplete;
  VirtualInvokeData _40_UpdateMaterial;
  VirtualInvokeData _41_UpdateGeometry;
  VirtualInvokeData _42_OnFillVBO;
  VirtualInvokeData _43_OnPopulateMesh;
  VirtualInvokeData _44_OnPopulateMesh;
  VirtualInvokeData _45_SetNativeSize;
  VirtualInvokeData _46_Raycast;
  VirtualInvokeData _47_CrossFadeColor;
  VirtualInvokeData _48_CrossFadeColor;
  VirtualInvokeData _49_CrossFadeAlpha;
  VirtualInvokeData _50_UnityEngine_UI_IClippable_get_gameObject;
  VirtualInvokeData _57_GetModifiedMaterial;
  VirtualInvokeData _58_Cull;
  VirtualInvokeData _59_SetClipRect;
  VirtualInvokeData _60_ParentMaskStateChanged;
  VirtualInvokeData _61_RecalculateClipping;
  VirtualInvokeData _62_RecalculateMasking;
  VirtualInvokeData _63_get_fontSharedMaterial;
  VirtualInvokeData _64_set_fontSharedMaterial;
  VirtualInvokeData _65_get_fontSharedMaterials;
  VirtualInvokeData _66_set_fontSharedMaterials;
  VirtualInvokeData _67_get_fontMaterials;
  VirtualInvokeData _68_set_fontMaterials;
  VirtualInvokeData _69_get_margin;
  VirtualInvokeData _70_set_margin;
  VirtualInvokeData _71_get_autoSizeTextContainer;
  VirtualInvokeData _72_set_autoSizeTextContainer;
  VirtualInvokeData _73_get_mesh;
  VirtualInvokeData _74_get_flexibleHeight;
  VirtualInvokeData _75_get_flexibleWidth;
  VirtualInvokeData _76_get_minWidth;
  VirtualInvokeData _77_get_minHeight;
  VirtualInvokeData _78_get_preferredWidth;
  VirtualInvokeData _79_get_preferredHeight;
  VirtualInvokeData _80_get_renderedWidth;
  VirtualInvokeData _81_get_renderedHeight;
  VirtualInvokeData _82_get_layoutPriority;
  VirtualInvokeData _83_LoadFontAsset;
  VirtualInvokeData _84_SetSharedMaterial;
  VirtualInvokeData _85_GetMaterial;
  VirtualInvokeData _86_SetFontBaseMaterial;
  VirtualInvokeData _87_GetSharedMaterials;
  VirtualInvokeData _88_SetSharedMaterials;
  VirtualInvokeData _89_GetMaterials;
  VirtualInvokeData _90_CreateMaterialInstance;
  VirtualInvokeData _91_SetFaceColor;
  VirtualInvokeData _92_SetOutlineColor;
  VirtualInvokeData _93_SetOutlineThickness;
  VirtualInvokeData _94_SetShaderDepth;
  VirtualInvokeData _95_SetCulling;
  VirtualInvokeData _96_GetPaddingForMaterial;
  VirtualInvokeData _97_GetPaddingForMaterial;
  VirtualInvokeData _98_GetTextContainerLocalCorners;
  VirtualInvokeData _99_ForceMeshUpdate;
  VirtualInvokeData _100_ForceMeshUpdate;
  VirtualInvokeData _101_UpdateGeometry;
  VirtualInvokeData _102_UpdateVertexData;
  VirtualInvokeData _103_UpdateVertexData;
  VirtualInvokeData _104_SetVertices;
  VirtualInvokeData _105_UpdateMeshPadding;
  VirtualInvokeData _106_InternalCrossFadeColor;
  VirtualInvokeData _107_InternalCrossFadeAlpha;
  VirtualInvokeData _108_SetArraySizes;
  VirtualInvokeData _109_GenerateTextMesh;
  VirtualInvokeData _110_CalculatePreferredValues;
  VirtualInvokeData _111_GetCompoundBounds;
  VirtualInvokeData _112_AdjustLineOffset;
  VirtualInvokeData _113_GetTextInfo;
  VirtualInvokeData _114_ComputeMarginSize;
  VirtualInvokeData _115_SaveGlyphVertexInfo;
  VirtualInvokeData _116_SaveSpriteVertexInfo;
  VirtualInvokeData _117_FillCharacterVertexBuffers;
  VirtualInvokeData _118_FillCharacterVertexBuffers;
  VirtualInvokeData _119_FillSpriteVertexBuffers;
  VirtualInvokeData _120_DrawUnderlineMesh;
  VirtualInvokeData _121_DrawTextHighlight;
  VirtualInvokeData _122_SetActiveSubMeshes;
  VirtualInvokeData _123_ClearSubMeshObjects;
  VirtualInvokeData _124_ClearMesh;
  VirtualInvokeData _125_ClearMesh;
  VirtualInvokeData _126_GetParsedText;
  VirtualInvokeData _127_InternalUpdate;
  VirtualInvokeData _128_CalculateLayoutInputHorizontal;
  VirtualInvokeData _129_CalculateLayoutInputVertical;
};

struct __TextMeshProUGUI_Il2CppClass {
  Il2CppClass_1 _1;
  __TextMeshProUGUI_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TextMeshProUGUI_Il2CppVtbl vtbl;
};

class TextMeshProUGUI {
public:
  // Il2Cpp fields:
  __TextMeshProUGUI_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::Material* m_Material;
  ModdingAPI::Exposed::UnityEngine::Color Graphic_m_Color;
  bool Graphic_m_RaycastTarget;
  ModdingAPI::Exposed::UnityEngine::RectTransform* Graphic_m_RectTransform;
  ModdingAPI::Exposed::UnityEngine::CanvasRenderer* Graphic_m_CanvasRenderer;
  ModdingAPI::Exposed::UnityEngine::Canvas* Graphic_m_Canvas;
  bool Graphic_m_VertsDirty;
  bool Graphic_m_MaterialDirty;
  ModdingAPI::Exposed::UnityEngine::Events::UnityAction* m_OnDirtyLayoutCallback;
  ModdingAPI::Exposed::UnityEngine::Events::UnityAction* m_OnDirtyVertsCallback;
  ModdingAPI::Exposed::UnityEngine::Events::UnityAction* m_OnDirtyMaterialCallback;
  ModdingAPI::Exposed::UnityEngine::UI::CoroutineTween::TweenRunner_T_* Graphic_m_ColorTweenRunner;
  bool Graphic__useLegacyMeshGeneration_k__BackingField;
  bool m_ShouldRecalculateStencil;
  ModdingAPI::Exposed::UnityEngine::Material* m_MaskMaterial;
  ModdingAPI::Exposed::UnityEngine::UI::RectMask2D* MaskableGraphic_m_ParentMask;
  bool MaskableGraphic_m_Maskable;
  bool m_IncludeForMasking;
  ModdingAPI::Exposed::UnityEngine::UI::MaskableGraphic::CullStateChangedEvent* MaskableGraphic_m_OnCullStateChanged;
  bool m_ShouldRecalculate;
  int32_t m_StencilValue;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* MaskableGraphic_m_Corners;
  System_String* m_text;
  bool m_isRightToLeft;
  ModdingAPI::Exposed::TMPro::TMP_FontAsset* m_fontAsset;
  ModdingAPI::Exposed::TMPro::TMP_FontAsset* m_currentFontAsset;
  bool m_isSDFShader;
  ModdingAPI::Exposed::UnityEngine::Material* m_sharedMaterial;
  ModdingAPI::Exposed::UnityEngine::Material* m_currentMaterial;
  ModdingAPI::Exposed::TMPro::MaterialReference_array* m_materialReferences;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_materialReferenceIndexLookup;
  ModdingAPI::Exposed::TMPro::TMP_RichTextTagStack_T_ m_materialReferenceStack;
  int32_t m_currentMaterialIndex;
  ModdingAPI::Exposed::UnityEngine::Material_array* m_fontSharedMaterials;
  ModdingAPI::Exposed::UnityEngine::Material* m_fontMaterial;
  ModdingAPI::Exposed::UnityEngine::Material_array* m_fontMaterials;
  bool m_isMaterialDirty;
  ModdingAPI::Exposed::UnityEngine::Color32 m_fontColor32;
  ModdingAPI::Exposed::UnityEngine::Color m_fontColor;
  ModdingAPI::Exposed::UnityEngine::Color32 m_underlineColor;
  ModdingAPI::Exposed::UnityEngine::Color32 m_strikethroughColor;
  ModdingAPI::Exposed::UnityEngine::Color32 m_highlightColor;
  ModdingAPI::Exposed::UnityEngine::Vector4 m_highlightPadding;
  bool m_enableVertexGradient;
  int32_t m_colorMode;
  ModdingAPI::Exposed::TMPro::VertexGradient m_fontColorGradient;
  ModdingAPI::Exposed::TMPro::TMP_ColorGradient* m_fontColorGradientPreset;
  ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* m_spriteAsset;
  bool m_tintAllSprites;
  bool m_tintSprite;
  ModdingAPI::Exposed::UnityEngine::Color32 m_spriteColor;
  bool m_overrideHtmlColors;
  ModdingAPI::Exposed::UnityEngine::Color32 m_faceColor;
  ModdingAPI::Exposed::UnityEngine::Color32 m_outlineColor;
  float m_outlineWidth;
  float m_fontSize;
  float m_currentFontSize;
  float m_fontSizeBase;
  ModdingAPI::Exposed::TMPro::TMP_RichTextTagStack_T_ m_sizeStack;
  int32_t m_fontWeight;
  int32_t m_FontWeightInternal;
  ModdingAPI::Exposed::TMPro::TMP_RichTextTagStack_T_ m_FontWeightStack;
  bool m_enableAutoSizing;
  float m_maxFontSize;
  float m_minFontSize;
  float m_fontSizeMin;
  float m_fontSizeMax;
  int32_t m_fontStyle;
  int32_t m_FontStyleInternal;
  ModdingAPI::Exposed::TMPro::TMP_FontStyleStack m_fontStyleStack;
  bool m_isUsingBold;
  int32_t m_textAlignment;
  int32_t m_lineJustification;
  ModdingAPI::Exposed::TMPro::TMP_RichTextTagStack_T_ m_lineJustificationStack;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* m_textContainerLocalCorners;
  float m_characterSpacing;
  float m_cSpacing;
  float m_monoSpacing;
  float m_wordSpacing;
  float m_lineSpacing;
  float m_lineSpacingDelta;
  float m_lineHeight;
  float m_lineSpacingMax;
  float m_paragraphSpacing;
  float m_charWidthMaxAdj;
  float m_charWidthAdjDelta;
  bool m_enableWordWrapping;
  bool m_isCharacterWrappingEnabled;
  bool m_isNonBreakingSpace;
  bool m_isIgnoringAlignment;
  float m_wordWrappingRatios;
  int32_t m_overflowMode;
  int32_t m_firstOverflowCharacterIndex;
  ModdingAPI::Exposed::TMPro::TMP_Text* m_linkedTextComponent;
  bool m_isLinkedTextComponent;
  bool m_isTextTruncated;
  bool m_enableKerning;
  bool m_enableExtraPadding;
  bool checkPaddingRequired;
  bool m_isRichText;
  bool m_parseCtrlCharacters;
  bool m_isOverlay;
  bool m_isOrthographic;
  bool m_isCullingEnabled;
  bool m_ignoreRectMaskCulling;
  bool m_ignoreCulling;
  int32_t m_horizontalMapping;
  int32_t m_verticalMapping;
  float m_uvLineOffset;
  int32_t m_renderMode;
  int32_t m_geometrySortingOrder;
  bool m_VertexBufferAutoSizeReduction;
  int32_t m_firstVisibleCharacter;
  int32_t m_maxVisibleCharacters;
  int32_t m_maxVisibleWords;
  int32_t m_maxVisibleLines;
  bool m_useMaxVisibleDescender;
  int32_t m_pageToDisplay;
  bool m_isNewPage;
  ModdingAPI::Exposed::UnityEngine::Vector4 m_margin;
  float m_marginLeft;
  float m_marginRight;
  float m_marginWidth;
  float m_marginHeight;
  float m_width;
  ModdingAPI::Exposed::TMPro::TMP_TextInfo* m_textInfo;
  bool m_havePropertiesChanged;
  bool m_isUsingLegacyAnimationComponent;
  ModdingAPI::Exposed::UnityEngine::Transform* m_transform;
  ModdingAPI::Exposed::UnityEngine::RectTransform* m_rectTransform;
  bool TMP_Text__autoSizeTextContainer_k__BackingField;
  bool m_autoSizeTextContainer;
  ModdingAPI::Exposed::UnityEngine::Mesh* m_mesh;
  bool m_isVolumetricText;
  ModdingAPI::Exposed::TMPro::TMP_SpriteAnimator* m_spriteAnimator;
  float m_flexibleHeight;
  float m_flexibleWidth;
  float m_minWidth;
  float m_minHeight;
  float m_maxWidth;
  float m_maxHeight;
  ModdingAPI::Exposed::UnityEngine::UI::LayoutElement* m_LayoutElement;
  float m_preferredWidth;
  float m_renderedWidth;
  bool m_isPreferredWidthDirty;
  float m_preferredHeight;
  float m_renderedHeight;
  bool m_isPreferredHeightDirty;
  bool m_isCalculatingPreferredValues;
  int32_t TMP_Text_m_recursiveCount;
  int32_t m_layoutPriority;
  bool m_isCalculateSizeRequired;
  bool m_isLayoutDirty;
  bool m_verticesAlreadyDirty;
  bool m_layoutAlreadyDirty;
  bool m_isAwake;
  bool m_isWaitingOnResourceLoad;
  bool m_isInputParsingRequired;
  int32_t m_inputSource;
  System_String* old_text;
  float m_fontScale;
  float m_fontScaleMultiplier;
  ModdingAPI::Exposed::System::Char_array* m_htmlTag;
  ModdingAPI::Exposed::TMPro::RichTextTagAttribute_array* m_xmlAttribute;
  ModdingAPI::Exposed::System::Single_array* m_attributeParameterValues;
  float tag_LineIndent;
  float tag_Indent;
  ModdingAPI::Exposed::TMPro::TMP_RichTextTagStack_T_ m_indentStack;
  bool tag_NoParsing;
  bool m_isParsingText;
  ModdingAPI::Exposed::UnityEngine::Matrix4x4 m_FXMatrix;
  bool m_isFXMatrixSet;
  ModdingAPI::Exposed::TMPro::TMP_Text::UnicodeChar_array* m_TextParsingBuffer;
  ModdingAPI::Exposed::TMPro::TMP_CharacterInfo_array* TMP_Text_m_internalCharacterInfo;
  ModdingAPI::Exposed::System::Char_array* m_input_CharArray;
  int32_t TMP_Text_m_charArray_Length;
  int32_t m_totalCharacterCount;
  ModdingAPI::Exposed::TMPro::WordWrapState m_SavedWordWrapState;
  ModdingAPI::Exposed::TMPro::WordWrapState m_SavedLineState;
  int32_t m_characterCount;
  int32_t m_firstCharacterOfLine;
  int32_t m_firstVisibleCharacterOfLine;
  int32_t m_lastCharacterOfLine;
  int32_t m_lastVisibleCharacterOfLine;
  int32_t m_lineNumber;
  int32_t m_lineVisibleCharacterCount;
  int32_t m_pageNumber;
  float m_maxAscender;
  float m_maxCapHeight;
  float m_maxDescender;
  float m_maxLineAscender;
  float m_maxLineDescender;
  float m_startOfLineAscender;
  float m_lineOffset;
  ModdingAPI::Exposed::TMPro::Extents m_meshExtents;
  ModdingAPI::Exposed::UnityEngine::Color32 m_htmlColor;
  ModdingAPI::Exposed::TMPro::TMP_RichTextTagStack_T_ m_colorStack;
  ModdingAPI::Exposed::TMPro::TMP_RichTextTagStack_T_ m_underlineColorStack;
  ModdingAPI::Exposed::TMPro::TMP_RichTextTagStack_T_ m_strikethroughColorStack;
  ModdingAPI::Exposed::TMPro::TMP_RichTextTagStack_T_ m_highlightColorStack;
  ModdingAPI::Exposed::TMPro::TMP_ColorGradient* m_colorGradientPreset;
  ModdingAPI::Exposed::TMPro::TMP_RichTextTagStack_T_ m_colorGradientStack;
  float m_tabSpacing;
  float m_spacing;
  ModdingAPI::Exposed::TMPro::TMP_RichTextTagStack_T_ m_styleStack;
  ModdingAPI::Exposed::TMPro::TMP_RichTextTagStack_T_ m_actionStack;
  float m_padding;
  float m_baselineOffset;
  ModdingAPI::Exposed::TMPro::TMP_RichTextTagStack_T_ m_baselineOffsetStack;
  float m_xAdvance;
  int32_t m_textElementType;
  ModdingAPI::Exposed::TMPro::TMP_TextElement* m_cached_TextElement;
  ModdingAPI::Exposed::TMPro::TMP_Character* m_cached_Underline_Character;
  ModdingAPI::Exposed::TMPro::TMP_Character* m_cached_Ellipsis_Character;
  ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* m_defaultSpriteAsset;
  ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* m_currentSpriteAsset;
  int32_t m_spriteCount;
  int32_t m_spriteIndex;
  int32_t m_spriteAnimationID;
  bool m_ignoreActiveState;
  ModdingAPI::Exposed::System::Single_array* TMP_Text_k_Power;
  bool m_isRebuildingLayout;
  bool m_hasFontAssetChanged;
  ModdingAPI::Exposed::TMPro::TMP_SubMeshUI_array* m_subTextObjects;
  float m_previousLossyScaleY;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* m_RectTransformCorners;
  ModdingAPI::Exposed::UnityEngine::CanvasRenderer* m_canvasRenderer;
  ModdingAPI::Exposed::UnityEngine::Canvas* m_canvas;
  bool m_isFirstAllocation;
  int32_t m_max_characters;
  bool m_isMaskingEnabled;
  ModdingAPI::Exposed::UnityEngine::Material* m_baseMaterial;
  bool m_isScrollRegionSet;
  int32_t m_stencilID;
  ModdingAPI::Exposed::UnityEngine::Vector4 m_maskOffset;
  ModdingAPI::Exposed::UnityEngine::Matrix4x4 m_EnvMapMatrix;
  bool m_isRegisteredForEvents;
  int32_t m_recursiveCountA;
  int32_t loopCountA;

  // Member methods:
  ModdingAPI::Exposed::UnityEngine::Material* get_materialForRendering() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1195AF0))(this);
  }
  bool get_autoSizeTextContainer() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB53B0))(this);
  }
  void set_autoSizeTextContainer(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1195BA0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Mesh* get_mesh() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Mesh*(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F6280))(this);
  }
  ModdingAPI::Exposed::UnityEngine::CanvasRenderer* get_canvasRenderer() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::CanvasRenderer*(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1195C70))(this);
  }
  void CalculateLayoutInputHorizontal() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1195D40))(this);
  }
  void CalculateLayoutInputVertical() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1195E90))(this);
  }
  void SetVerticesDirty() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1195FF0))(this);
  }
  void SetLayoutDirty() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1196120))(this);
  }
  void SetMaterialDirty() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1196250))(this);
  }
  void SetAllDirty() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB5E60))(this);
  }
  void Rebuild(int32_t update) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1196370))(this, update);
  }
  void UpdateSubObjectPivot() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11964B0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Material* GetModifiedMaterial(ModdingAPI::Exposed::UnityEngine::Material* baseMaterial) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1196740))(this, baseMaterial);
  }
  void UpdateMaterial() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1196900))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector4 get_maskOffset() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector4(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1196B30))(this);
  }
  void set_maskOffset(ModdingAPI::Exposed::UnityEngine::Vector4 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, ModdingAPI::Exposed::UnityEngine::Vector4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1196B40))(this, value);
  }
  void RecalculateClipping() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F3AB0))(this);
  }
  void RecalculateMasking() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F3AC0))(this);
  }
  void Cull(ModdingAPI::Exposed::UnityEngine::Rect clipRect, bool validRect) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, ModdingAPI::Exposed::UnityEngine::Rect, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1196B70))(this, clipRect, validRect);
  }
  void UpdateMeshPadding() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1196C00))(this);
  }
  void InternalCrossFadeColor(ModdingAPI::Exposed::UnityEngine::Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, ModdingAPI::Exposed::UnityEngine::Color, float, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1196E40))(this, targetColor, duration, ignoreTimeScale, useAlpha);
  }
  void InternalCrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, float, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1196F40))(this, alpha, duration, ignoreTimeScale);
  }
  void ForceMeshUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1197010))(this);
  }
  void ForceMeshUpdate(bool ignoreInactive) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1197020))(this, ignoreInactive);
  }
  ModdingAPI::Exposed::TMPro::TMP_TextInfo* GetTextInfo(System_String* text) {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_TextInfo*(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1197040))(this, text);
  }
  void ClearMesh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1197180))(this);
  }
  void UpdateGeometry(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11973B0))(this, mesh, index);
  }
  void UpdateVertexData(int32_t flags) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1197470))(this, flags);
  }
  void UpdateVertexData() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1197730))(this);
  }
  void UpdateFontAsset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB6B10))(this);
  }
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11979F0))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1198120))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1198270))(this);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11984D0))(this);
  }
  void LoadFontAsset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1198680))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Canvas* GetCanvas() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Canvas*(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1198E90))(this);
  }
  void UpdateEnvMapMatrix() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11990A0))(this);
  }
  void EnableMasking() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1199610))(this);
  }
  void DisableMasking() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1199930))(this);
  }
  void UpdateMask() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1199AF0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Material* GetMaterial(ModdingAPI::Exposed::UnityEngine::Material* mat) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119A260))(this, mat);
  }
  ModdingAPI::Exposed::UnityEngine::Material_array* GetMaterials(ModdingAPI::Exposed::UnityEngine::Material_array* mats) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material_array*(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, ModdingAPI::Exposed::UnityEngine::Material_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119A400))(this, mats);
  }
  void SetSharedMaterial(ModdingAPI::Exposed::UnityEngine::Material* mat) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB9760))(this, mat);
  }
  ModdingAPI::Exposed::UnityEngine::Material_array* GetSharedMaterials() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material_array*(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119A610))(this);
  }
  void SetSharedMaterials(ModdingAPI::Exposed::UnityEngine::Material_array* materials) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, ModdingAPI::Exposed::UnityEngine::Material_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119A7F0))(this, materials);
  }
  void SetOutlineThickness(float thickness) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119ADE0))(this, thickness);
  }
  void SetFaceColor(ModdingAPI::Exposed::UnityEngine::Color32 color) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, ModdingAPI::Exposed::UnityEngine::Color32)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119B120))(this, color);
  }
  void SetOutlineColor(ModdingAPI::Exposed::UnityEngine::Color32 color) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, ModdingAPI::Exposed::UnityEngine::Color32)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119B320))(this, color);
  }
  void SetShaderDepth() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119B520))(this);
  }
  void SetCulling() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119B720))(this);
  }
  void SetPerspectiveCorrection() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119BB90))(this);
  }
  float GetPaddingForMaterial(ModdingAPI::Exposed::UnityEngine::Material* mat) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119BD40))(this, mat);
  }
  float GetPaddingForMaterial() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119BEA0))(this);
  }
  void SetMeshArrays(int32_t size) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119C000))(this, size);
  }
  int32_t SetArraySizes(ModdingAPI::Exposed::TMPro::TMP_Text::UnicodeChar_array* chars) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, ModdingAPI::Exposed::TMPro::TMP_Text::UnicodeChar_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119C100))(this, chars);
  }
  void ComputeMarginSize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119EEF0))(this);
  }
  void OnDidApplyAnimationProperties() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119F0E0))(this);
  }
  void OnCanvasHierarchyChanged() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119F120))(this);
  }
  void OnTransformParentChanged() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119F150))(this);
  }
  void OnRectTransformDimensionsChange() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119F2D0))(this);
  }
  void InternalUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119F3D0))(this);
  }
  void OnPreRenderCanvas() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119F560))(this);
  }
  void GenerateTextMesh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x119F7C0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3_array* GetTextContainerLocalCorners() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3_array*(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B1400))(this);
  }
  void SetActiveSubMeshes(bool state) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B14F0))(this, state);
  }
  ModdingAPI::Exposed::UnityEngine::Bounds GetCompoundBounds() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Bounds(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B1710))(this);
  }
  void UpdateSDFScale(float scaleDelta) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B1D30))(this, scaleDelta);
  }
  void AdjustLineOffset(int32_t startIndex, int32_t endIndex, float offset) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*, int32_t, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B2140))(this, startIndex, endIndex, offset);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B27D0))(this);
  }
};
}