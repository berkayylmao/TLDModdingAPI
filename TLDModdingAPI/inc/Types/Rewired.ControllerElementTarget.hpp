// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.Rewired.ControllerElementTarget.hpp"

namespace ModdingAPI::Exposed::Rewired {
struct __ControllerElementTarget_Il2CppObject {
  ModdingAPI::Exposed::Rewired::Controller::Element* HWGOpDZyympheheKOFuMBkhdVqNI;
  int32_t dHdbVWFfXobbpJwQnmBdUBIMAb;
};
struct __ControllerElementTarget_Il2CppStaticFields {
};

struct __ControllerElementTarget_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ControllerElementTarget_Il2CppClass {
  Il2CppClass_1 _1;
  __ControllerElementTarget_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ControllerElementTarget_Il2CppVtbl vtbl;
};

class ControllerElementTarget {
public:
  // Member fields:
  ModdingAPI::Exposed::Rewired::Controller::Element* HWGOpDZyympheheKOFuMBkhdVqNI;
  int32_t dHdbVWFfXobbpJwQnmBdUBIMAb;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::Rewired::ActionElementMap* actionElementMap) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementTarget*, ModdingAPI::Exposed::Rewired::ActionElementMap*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D650))(this, actionElementMap);
  }
  void ::ctor(ModdingAPI::Exposed::Rewired::ControllerElementTarget other) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementTarget*, ModdingAPI::Exposed::Rewired::ControllerElementTarget)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D660))(this, other);
  }
  void ::ctor(ModdingAPI::Exposed::Rewired::IControllerElementTarget* other) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementTarget*, ModdingAPI::Exposed::Rewired::IControllerElementTarget*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D680))(this, other);
  }
  int32_t get_elementIdentifierId() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementTarget*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D760))(this);
  }
  int32_t get_axisRange() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementTarget*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5020))(this);
  }
  void set_axisRange(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementTarget*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF170))(this, value);
  }
  bool get_hasTarget() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementTarget*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D780))(this);
  }
  int32_t get_elementType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementTarget*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D790))(this);
  }
  System_String* get_descriptiveName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementTarget*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D7A0))(this);
  }
  ModdingAPI::Exposed::Rewired::Controller* get_controller() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::Controller*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementTarget*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D860))(this);
  }
  ModdingAPI::Exposed::Rewired::Controller::Element* get_element() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::Controller::Element*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementTarget*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6590))(this);
  }
  void set_element(ModdingAPI::Exposed::Rewired::Controller::Element* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementTarget*, ModdingAPI::Exposed::Rewired::Controller::Element*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2C00))(this, value);
  }

};
}