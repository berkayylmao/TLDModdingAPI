// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::UnityEngine::Color.hpp"


namespace ModdingAPI::Exposed {
struct __GearMessage_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_GearMessageQueue;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_JournalMessageQueue;
  ModdingAPI::Exposed::GearMessage::JournalMessageInfo* m_JournalQuickKeyInfo;
  bool m_JournalQuickKeyActive;
  float m_MessageLabelDisplayTimeSeconds;
  float m_MessageLabelElapsedDisplayTimeSeconds;
  float m_MessageLabelAlpha;
  float m_MessageLabelFadeTimeSeconds;
  int32_t m_JournalMessageQueueFrameCounter;
};

struct __GearMessage_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __GearMessage_Il2CppClass {
  Il2CppClass_1 _1;
  __GearMessage_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __GearMessage_Il2CppVtbl vtbl;
};

class GearMessage {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C4A208;
  static inline    __GearMessage_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __GearMessage_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__GearMessage_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __GearMessage_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0C240))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0C490))(this);
  }
  bool ShouldUseOffsetLocation() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GearMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E10080))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> m_GearMessageQueue = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_GearMessageQueue; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> m_JournalMessageQueue = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_JournalMessageQueue; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::GearMessage::JournalMessageInfo*> m_JournalQuickKeyInfo = __CppStaticProperty<ModdingAPI::Exposed::GearMessage::JournalMessageInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_JournalQuickKeyInfo; }
  );
  static inline __CppStaticProperty<bool> m_JournalQuickKeyActive = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_JournalQuickKeyActive; }
  );
  static inline __CppStaticProperty<float> m_MessageLabelDisplayTimeSeconds = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_MessageLabelDisplayTimeSeconds; }
  );
  static inline __CppStaticProperty<float> m_MessageLabelElapsedDisplayTimeSeconds = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_MessageLabelElapsedDisplayTimeSeconds; }
  );
  static inline __CppStaticProperty<float> m_MessageLabelAlpha = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_MessageLabelAlpha; }
  );
  static inline __CppStaticProperty<float> m_MessageLabelFadeTimeSeconds = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_MessageLabelFadeTimeSeconds; }
  );
  static inline __CppStaticProperty<int32_t> m_JournalMessageQueueFrameCounter = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_JournalMessageQueueFrameCounter; }
  );

  // Static methods:
  static inline void AddJournalQueueMessage(System_String* categoryLocID) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0D180))(categoryLocID);
  }
  static inline void AddJournalQueueMessageWithQuickKey(System_String* categoryLocID, int32_t category, System_String* nameLocID) {
    reinterpret_cast<void(__fastcall*)(System_String*, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0D3F0))(categoryLocID, category, nameLocID);
  }
  static inline void AddMessage(ModdingAPI::Exposed::GearItem* gi, System_String* header, System_String* message, bool highPriority) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, System_String*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0D4D0))(gi, header, message, highPriority);
  }
  static inline void AddMessage(ModdingAPI::Exposed::GearItem* gi, System_String* header, System_String* message, float numSeconds, bool highPriority) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, System_String*, System_String*, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0D770))(gi, header, message, numSeconds, highPriority);
  }
  static inline void AddMessageFadeIn(ModdingAPI::Exposed::GearItem* gi, System_String* header, System_String* message, bool highPriority) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, System_String*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0DA10))(gi, header, message, highPriority);
  }
  static inline void AddMessageFadeIn(ModdingAPI::Exposed::GearItem* gi, System_String* header, System_String* message, float numSeconds, bool highPriority) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearItem*, System_String*, System_String*, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0DCB0))(gi, header, message, numSeconds, highPriority);
  }
  static inline void AddMessage(System_String* prefabName, System_String* header, System_String* message, bool highPriority) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0DF50))(prefabName, header, message, highPriority);
  }
  static inline void AddMessageWithQuickKey(System_String* prefabName, System_String* header, System_String* message, bool highPriority) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0E0F0))(prefabName, header, message, highPriority);
  }
  static inline void AddMessage(System_String* prefabName, System_String* header, System_String* message, ModdingAPI::Exposed::UnityEngine::Color color, bool highPriority) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*, System_String*, ModdingAPI::Exposed::UnityEngine::Color, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0E2A0))(prefabName, header, message, color, highPriority);
  }
  static inline void AddMessage(System_String* prefabName, System_String* header, System_String* message, float numSeconds, bool highPriority) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*, System_String*, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0E460))(prefabName, header, message, numSeconds, highPriority);
  }
  static inline void AddMessageFadeIn(System_String* prefabName, System_String* header, System_String* message, bool highPriority) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0E610))(prefabName, header, message, highPriority);
  }
  static inline void AddMessageFadeIn(System_String* prefabName, System_String* header, System_String* message, float numSeconds, bool highPriority) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*, System_String*, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0E7C0))(prefabName, header, message, numSeconds, highPriority);
  }
  static inline void SetJournalQuickKey(System_String* categoryLocID, int32_t category, System_String* nameLocID) {
    reinterpret_cast<void(__fastcall*)(System_String*, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0E980))(categoryLocID, category, nameLocID);
  }
  static inline void AddMessageToQueue(ModdingAPI::Exposed::GearMessage::GearMessageInfo* newGearMessage, bool highPriority) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GearMessage::GearMessageInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0EA90))(newGearMessage, highPriority);
  }
  static inline void ShowNextMessageInQueue() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0EEB0))();
  }
  static inline bool MessageExistsInQueue(System_String* message) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0F9B0))(message);
  }
  static inline bool ShortenMessageTimeDueToQueue() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0FB30))();
  }
  static inline void AddJournalMessage() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E0FCA0))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))();
  }
};
}