// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Steamworks {
struct __CSteamGameServerAPIContext_Il2CppStaticFields {
  intptr_t m_pSteamClient;
  intptr_t m_pSteamGameServer;
  intptr_t m_pSteamUtils;
  intptr_t m_pSteamNetworking;
  intptr_t m_pSteamGameServerStats;
  intptr_t m_pSteamHTTP;
  intptr_t m_pSteamInventory;
  intptr_t m_pSteamUGC;
  intptr_t m_pSteamApps;
};

struct __CSteamGameServerAPIContext_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __CSteamGameServerAPIContext_Il2CppClass {
  Il2CppClass_1 _1;
  __CSteamGameServerAPIContext_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CSteamGameServerAPIContext_Il2CppVtbl vtbl;
};

class CSteamGameServerAPIContext {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C4CB68;
  static inline    __CSteamGameServerAPIContext_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __CSteamGameServerAPIContext_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__CSteamGameServerAPIContext_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __CSteamGameServerAPIContext_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<intptr_t> m_pSteamClient = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamClient; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamGameServer = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamGameServer; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamUtils = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamUtils; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamNetworking = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamNetworking; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamGameServerStats = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamGameServerStats; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamHTTP = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamHTTP; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamInventory = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamInventory; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamUGC = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamUGC; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamApps = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamApps; }
  );

  // Static methods:
  static inline void Clear() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75E90))();
  }
  static inline bool Init() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75FA0))();
  }
  static inline intptr_t GetSteamClient() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C764B0))();
  }
  static inline intptr_t GetSteamGameServer() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C76530))();
  }
  static inline intptr_t GetSteamUtils() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C765B0))();
  }
  static inline intptr_t GetSteamNetworking() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C76630))();
  }
  static inline intptr_t GetSteamGameServerStats() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C766B0))();
  }
  static inline intptr_t GetSteamHTTP() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C76730))();
  }
  static inline intptr_t GetSteamInventory() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C767B0))();
  }
  static inline intptr_t GetSteamUGC() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C76830))();
  }
  static inline intptr_t GetSteamApps() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C768B0))();
  }
};
}