// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __SprainedAnkle_Il2CppStaticFields {
  ModdingAPI::Exposed::SprainedAnkleSaveDataProxy* m_SprainedAnkleSaveDataProxy;
};

struct __SprainedAnkle_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SprainedAnkle_Il2CppClass {
  Il2CppClass_1 _1;
  __SprainedAnkle_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SprainedAnkle_Il2CppVtbl vtbl;
};

class SprainedAnkle {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C3CBC0;
  static inline    __SprainedAnkle_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __SprainedAnkle_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__SprainedAnkle_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __SprainedAnkle_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::LocalizedString* m_LocalizedDisplayName;
  ModdingAPI::Exposed::LocalizedString* m_LocalizedDescription;
  float m_ChanceSprainAfterFall;
  float m_DurationHoursMin;
  float m_DurationHoursMax;
  float m_NumHoursRestForCure;
  float m_MinSecondsBetweenPainAudio;
  float m_MaxSecondsBetweenPainAudio;
  float m_LimpCameraTiltMin;
  float m_LimpCameraTiltMax;
  float m_StumbleCameraTiltMin;
  float m_StumbleCameraTiltMax;
  System_String* m_SprainedAnkleVO;
  System_String* m_StumblePainAudio;
  System_String* m_StumblePainMinorAudio;
  System_String* m_SprainedAnkleSFX;
  System_String* m_LimpAudio;
  float m_LimpAudioDelay;
  float m_NextLimpAudio;
  float m_SecondsSinceLastPainAudio;
  float m_SecondsUntilNextPainAudio;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_CausesLocIDs;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Locations;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_ElapsedHoursList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_DurationHoursList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_ElapsedRestList;

  // Member methods:
  System_String* get_m_DisplayName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E35A0))(this);
  }
  System_String* get_m_Description() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E35C0))(this);
  }
  void UpdateLimpAnimation() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C587F0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C58BD0))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C58D40))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C590D0))(this, text);
  }
  bool LocationAvailable() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C599D0))(this);
  }
  void SprainedAnkleStart(System_String* causeID, int32_t options) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C59A60))(this, causeID, options);
  }
  void SprainedAnkleEnd(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5A630))(this, index);
  }
  int32_t GetLocation(int32_t index) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5A9F0))(this, index);
  }
  bool HasSprainedAnkle() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5AAC0))(this);
  }
  bool HasSprainedLeftAnkle() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5AB50))(this);
  }
  ModdingAPI::Exposed::System::String_array* GetCauseLocIDList() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5AC20))(this);
  }
  int32_t GetAfflictionsCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5ACB0))(this);
  }
  System_String* GetAfflictionCauseLocalizationId(int32_t localAfflictionIndex) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5AD40))(this, localAfflictionIndex);
  }
  float GetRestAmountRemaining(int32_t index) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5AE10))(this, index);
  }
  bool HasSprainNeedingRest() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5AEF0))(this);
  }
  bool RequiresBandage() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5AEF0))(this);
  }
  void ApplyBandage(int32_t localAfflictionIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5AF00))(this, localAfflictionIndex);
  }
  void Cure() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5AFB0))(this);
  }
  void AddRest(float hours) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5B070))(this, hours);
  }
  void UpdateSprainedAnkle(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5B190))(this, index);
  }
  void DoLimpAnimation() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5B4D0))(this);
  }
  void MaybeDoLimpAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5B660))(this);
  }
  bool MaybeLimpOrStumbleWithFootStep(bool left) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5B760))(this, left);
  }
  void DoStumbleEffects(bool alreadyInjured) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5BA50))(this, alreadyInjured);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SprainedAnkle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5BC20))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::SprainedAnkleSaveDataProxy*> m_SprainedAnkleSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::SprainedAnkleSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_SprainedAnkleSaveDataProxy; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5C370))();
  }
};
}