// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __vp_FPSShooter_Il2CppStaticFields {
};

struct __vp_FPSShooter_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Init;
  VirtualInvokeData _5_AllowState;
  VirtualInvokeData _6_Refresh;
};

struct __vp_FPSShooter_Il2CppClass {
  Il2CppClass_1 _1;
  __vp_FPSShooter_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __vp_FPSShooter_Il2CppVtbl vtbl;
};

class vp_FPSShooter {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C38858;
  static inline    vp_FPSShooter* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C75EC0;
  static inline    __vp_FPSShooter_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline vp_FPSShooter* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (vp_FPSShooter**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __vp_FPSShooter_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__vp_FPSShooter_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __vp_FPSShooter_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool Persist;
  ModdingAPI::Exposed::vp_StateManager* m_StateManager;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* States;
  ModdingAPI::Exposed::vp_StateInfo* m_DefaultState;
  bool m_Initialized;
  ModdingAPI::Exposed::vp_FPSWeapon* m_Weapon;
  ModdingAPI::Exposed::vp_FPSCamera* m_Camera;
  ModdingAPI::Exposed::UnityEngine::Transform* BulletEmissionLocator;
  ModdingAPI::Exposed::UnityEngine::GameObject* ProjectilePrefab;
  bool ProjectileCustomPrefab;
  float ProjectileScale;
  int32_t ProjectileCount;
  float ProjectileSpread;
  float m_NextAllowedFireTime;
  ModdingAPI::Exposed::UnityEngine::Vector3 MotionPositionRecoil;
  ModdingAPI::Exposed::UnityEngine::Vector3 MotionRotationRecoil;
  float MotionPositionReset;
  float MotionRotationReset;
  float MotionPositionPause;
  float MotionRotationPause;
  float MotionDryFireRecoil;
  ModdingAPI::Exposed::UnityEngine::Vector3 MuzzleFlashPosition;
  ModdingAPI::Exposed::UnityEngine::Vector3 MuzzleFlashScale;
  float MuzzleFlashFadeSpeed;
  ModdingAPI::Exposed::UnityEngine::GameObject* MuzzleFlashPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_MuzzleFlash;
  ModdingAPI::Exposed::vp_MuzzleFlash* m_MuzzleFlashComponent;
  ModdingAPI::Exposed::UnityEngine::GameObject* ShellPrefab;
  float ShellScale;
  ModdingAPI::Exposed::UnityEngine::Vector3 ShellEjectDirection;
  ModdingAPI::Exposed::UnityEngine::Vector3 ShellEjectPosition;
  float ShellEjectVelocity;
  float ShellEjectDelay;
  float ShellEjectSpin;
  float JamConditionThreshold;
  float JamMinimumChance;
  float JamMaximumChance;
  float m_NextAllowedReloadTime;
  float m_LastFiredTime;
  bool m_WeaponRotatedForShot;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_MuzzleFlashTagObject;
  float m_SendGunShotAudioEventTimer;

  // Member methods:
  ModdingAPI::Exposed::UnityEngine::GameObject* get_MuzzleFlash() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::vp_FPSShooter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F4090))(this);
  }
  float get_NextAllowedReloadTime() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::vp_FPSShooter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF9C90))(this);
  }
  void set_NextAllowedReloadTime(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSShooter*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF9CA0))(this, value);
  }
  float get_NextAllowedFireTime() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::vp_FPSShooter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1947D90))(this);
  }
  void set_NextAllowedFireTime(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSShooter*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF9CB0))(this, value);
  }
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSShooter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF9CC0))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSShooter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF9F00))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSShooter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFA380))(this);
  }
  void Fire() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSShooter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFA780))(this);
  }
  void DryFire() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSShooter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFC5D0))(this);
  }
  bool Reload(int32_t ammoCount) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSShooter*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFC840))(this, ammoCount);
  }
  void PreventFiring(float seconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSShooter*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFCA80))(this, seconds);
  }
  void Refresh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSShooter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFCAF0))(this);
  }
  void OnBulletLoaded() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSShooter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFCF70))(this);
  }
  void OnClipLoaded() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSShooter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFD310))(this);
  }
  void ShowMuzzleFlash(bool hasMisfired) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSShooter*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFD690))(this, hasMisfired);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSShooter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFD800))(this);
  }
};
}