// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __ScrollList_Il2CppStaticFields {
};

struct __ScrollList_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ScrollList_Il2CppClass {
  Il2CppClass_1 _1;
  __ScrollList_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ScrollList_Il2CppVtbl vtbl;
};

class ScrollList {
public:
  // Il2Cpp fields:
  __ScrollList_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_PrefabObject;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_OffsetOneAway;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_OffsetOthers;
  int32_t m_NumVisibleBefore;
  int32_t m_NumVisibleAfter;
  float m_SizeBehindCenter;
  float m_SizeFadeAway;
  float m_AlphaScaleValue;
  int32_t m_AlphaScaleFactor;
  float m_TweenTime;
  int32_t m_TweenMethod;
  bool m_AddButtonsToObjects;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_CallbackObject;
  System_String* m_CallbackMessage;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_ButtonColliderOffset;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_ButtonColliderSize;
  bool m_IgnoreDepth;
  bool m_AddDoubleClick;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_OnDoubleClick;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_ScrollObjects;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_DepthList;
  int32_t m_SelectedIndex;
  int32_t m_TargetIndex;
  int32_t m_TweenStartIndex;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_OffsetOthers3D;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_OffsetOneAway3D;
  float m_TimeLeftOnTween;
  bool m_IsTweening;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3BC60))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3BCC0))(this);
  }
  void Next() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3BDD0))(this);
  }
  void Prev() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3BEE0))(this);
  }
  int32_t GetTweenTargetIndex() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::ScrollList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5F1040))(this);
  }
  void SetTargetIndex(int32_t index, bool animate) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3BFF0))(this, index, animate);
  }
  bool IsTweening() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ScrollList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x86FCD0))(this);
  }
  void CreateList(int32_t numObjects) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3C040))(this, numObjects);
  }
  void CreateFromList(ModdingAPI::Exposed::System::Collections::Generic::List_T_* list) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3CDB0))(this, list);
  }
  void RefreshAll() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3D8C0))(this);
  }
  void RefreshPositioning() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3D980))(this);
  }
  void RefreshAlpha() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3DC00))(this);
  }
  void RefreshScale() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3DDE0))(this);
  }
  void RefreshVisibility() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3E0B0))(this);
  }
  void DoTweens(bool increasedIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3E3F0))(this, increasedIndex);
  }
  void SetObjectDepth(int32_t objIndex, int32_t depth) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3ECD0))(this, objIndex, depth);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetPositionForIndex(int32_t index) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::ScrollList*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3EEC0))(this, index);
  }
  float GetAlphaForIndex(int32_t index) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::ScrollList*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3F0F0))(this, index);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetOffsetForIndex(int32_t index, bool increasingIndex) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::ScrollList*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3F210))(this, index, increasingIndex);
  }
  void DoScaleTween(int32_t index, ModdingAPI::Exposed::UnityEngine::Vector3 fromVal, ModdingAPI::Exposed::UnityEngine::Vector3 toVal, float tweenTime) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3F370))(this, index, fromVal, toVal, tweenTime);
  }
  void UpdateDurationAllTweens() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3F590))(this);
  }
  void CreateOffsetVectors() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3BC60))(this);
  }
  void CleanUp() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3F7E0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ScrollList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C3F940))(this);
  }
};
}