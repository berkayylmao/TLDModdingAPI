// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Matrix4x4.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed {
struct __MegaWire_Il2CppStaticFields {
  ModdingAPI::Exposed::UnityEngine::Vector3 windDir;
  float windFrc;
  bool DisableAll;
};

struct __MegaWire_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __MegaWire_Il2CppClass {
  Il2CppClass_1 _1;
  __MegaWire_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MegaWire_Il2CppVtbl vtbl;
};

class MegaWire {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C93E20;
  static inline    __MegaWire_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __MegaWire_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__MegaWire_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __MegaWire_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool Rebuild;
  float fudge;
  ModdingAPI::Exposed::MegaWireStrandedMesher* strandedMesher;
  float spring;
  float damp;
  float timeStep;
  float Mass;
  ModdingAPI::Exposed::UnityEngine::Vector3 gravity;
  float airdrag;
  float massRand;
  bool doCollisions;
  float floor;
  int32_t points;
  int32_t iters;
  int32_t frameWait;
  int32_t frameNum;
  bool stiffnessSprings;
  float stiffrate;
  float stiffdamp;
  bool lengthConstraints;
  ModdingAPI::Exposed::UnityEngine::Matrix4x4 wtm;
  ModdingAPI::Exposed::MegaWireSolver* verletsolver;
  bool showphysics;
  bool showconnections;
  bool showmeshparams;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* connections;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* spans;
  float windEffect;
  ModdingAPI::Exposed::MegaWireWind* wind;
  ModdingAPI::Exposed::UnityEngine::Material* material;
  bool uselod;
  float disableDist;
  bool disableOnNotVisible;
  float lodreducesides;
  float lodreducesegs;
  ModdingAPI::Exposed::UnityEngine::GameObject* startObj;
  float startAlpha;
  ModdingAPI::Exposed::UnityEngine::Vector3 startRot;
  ModdingAPI::Exposed::UnityEngine::Vector3 startOffset;
  ModdingAPI::Exposed::UnityEngine::GameObject* endObj;
  float endAlpha;
  ModdingAPI::Exposed::UnityEngine::Vector3 endRot;
  ModdingAPI::Exposed::UnityEngine::Vector3 endOffset;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* lods;
  bool hidespans;
  bool disableOnDistance;
  float distfromcamera;
  float rbodyforce;
  bool Enabled;
  bool ShowWire;
  float awakeTime;
  bool displayGizmo;
  ModdingAPI::Exposed::UnityEngine::Color gizmoColor;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* poles;
  float stretch;
  float warmPhysicsTime;
  bool builduvs;
  float startTime;
  bool showWindParams;
  bool showPhysicsAdv;
  bool showAttach;

  // Member methods:
  void Copy(ModdingAPI::Exposed::MegaWire* from, ModdingAPI::Exposed::MegaWireConnectionHelper* helper) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MegaWire*, ModdingAPI::Exposed::MegaWire*, ModdingAPI::Exposed::MegaWireConnectionHelper*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AE73D0))(this, from, helper);
  }
  void ChangeStretch(float stretch) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MegaWire*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AE8680))(this, stretch);
  }
  int32_t GetVertexCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MegaWire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AE8880))(this);
  }
  void SetHidden(bool hide) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MegaWire*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AE8950))(this, hide);
  }
  void SetSelection(ModdingAPI::Exposed::System::Collections::Generic::List_T_* objs, bool add) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MegaWire*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, objs, add);
  }
  void UpdateOffsets() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MegaWire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AE8AD0))(this);
  }
  void Init() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MegaWire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AE8E40))(this);
  }
  void WireUpdate(float t) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MegaWire*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AE91C0))(this, t);
  }
  void RunPhysics(float t) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MegaWire*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AEA150))(this, t);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 SetWeight(float alpha, int32_t strand, float weight, bool snap) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::MegaWire*, float, int32_t, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AEA720))(this, alpha, strand, weight, snap);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetPos(float alpha, int32_t strand, bool snap) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::MegaWire*, float, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AEADD0))(this, alpha, strand, snap);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MegaWire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void SetWireVisible(bool show) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MegaWire*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AEB360))(this, show);
  }
  void RebuildWire() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MegaWire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AEB520))(this);
  }
  void LateUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MegaWire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AEB6D0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MegaWire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AEBDF0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector3> windDir = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector3>(
   []() { return &GetStaticClassInstance()->pStaticFields->windDir; }
  );
  static inline __CppStaticProperty<float> windFrc = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->windFrc; }
  );
  static inline __CppStaticProperty<bool> DisableAll = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->DisableAll; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::MegaWire* Create(ModdingAPI::Exposed::MegaWire* wire, ModdingAPI::Exposed::System::Collections::Generic::List_T_* objs, ModdingAPI::Exposed::UnityEngine::Material* mat, System_String* name, ModdingAPI::Exposed::MegaWire* copyfrom, float wiresize, float str) {
    return reinterpret_cast<ModdingAPI::Exposed::MegaWire*(__fastcall*)(ModdingAPI::Exposed::MegaWire*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::UnityEngine::Material*, System_String*, ModdingAPI::Exposed::MegaWire*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AE79E0))(wire, objs, mat, name, copyfrom, wiresize, str);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AEC500))();
  }
};
}