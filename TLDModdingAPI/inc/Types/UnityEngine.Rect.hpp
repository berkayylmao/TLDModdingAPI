// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Rect.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"

namespace ModdingAPI::Exposed::UnityEngine {
struct __Rect_Il2CppObject {
  float m_XMin;
  float m_YMin;
  float m_Width;
  float m_Height;
};
struct __Rect_Il2CppStaticFields {
};

struct __Rect_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Equals;
};

struct __Rect_Il2CppClass {
  Il2CppClass_1 _1;
  __Rect_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Rect_Il2CppVtbl vtbl;
};

class Rect {
  static constexpr uint64_t _rvaObjectInstance     = 0x3C842A8;
  static inline    Rect* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t _rvaClassInstance     = 0x3C4DED8;
  static inline    __Rect_Il2CppClass* _pStaticClassInstance = nullptr;

public:
  // Singleton object getter:
  static inline Rect* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (Rect**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

  // Static class getter:
  static inline __Rect_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Rect_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Member fields:
  float m_XMin;
  float m_YMin;
  float m_Width;
  float m_Height;

  // Member methods:
  void ::ctor(float x, float y, float width, float height) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3B0))(this, x, y, width, height);
  }
  void ::ctor(ModdingAPI::Exposed::UnityEngine::Rect source) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*, ModdingAPI::Exposed::UnityEngine::Rect)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3D0))(this, source);
  }
  float get_x() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3B350))(this);
  }
  void set_x(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6DC0))(this, value);
  }
  float get_y() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3B360))(this);
  }
  void set_y(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6DE0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_position() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x29D80))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_center() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45C10))(this);
  }
  void set_center(ModdingAPI::Exposed::UnityEngine::Vector2 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45C40))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_min() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45C80))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_max() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45CA0))(this);
  }
  float get_width() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x27FA0))(this);
  }
  void set_width(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6E00))(this, value);
  }
  float get_height() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x27FB0))(this);
  }
  void set_height(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6E20))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_size() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45CC0))(this);
  }
  float get_xMin() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3B350))(this);
  }
  void set_xMin(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45CE0))(this, value);
  }
  float get_yMin() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3B360))(this);
  }
  void set_yMin(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45D00))(this, value);
  }
  float get_xMax() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45D20))(this);
  }
  void set_xMax(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2A8E0))(this, value);
  }
  float get_yMax() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45D30))(this);
  }
  void set_yMax(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2A900))(this, value);
  }
  bool Contains(ModdingAPI::Exposed::UnityEngine::Vector2 point) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45D40))(this, point);
  }
  bool Contains(ModdingAPI::Exposed::UnityEngine::Vector3 point) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45D80))(this, point);
  }
  bool Overlaps(ModdingAPI::Exposed::UnityEngine::Rect other) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*, ModdingAPI::Exposed::UnityEngine::Rect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45DD0))(this, other);
  }
  bool Overlaps(ModdingAPI::Exposed::UnityEngine::Rect other, bool allowInverse) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*, ModdingAPI::Exposed::UnityEngine::Rect, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45E30))(this, other, allowInverse);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45E50))(this);
  }
  bool Equals(Il2CppObject* other) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45E60))(this, other);
  }
  bool Equals(ModdingAPI::Exposed::UnityEngine::Rect other) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*, ModdingAPI::Exposed::UnityEngine::Rect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45E70))(this, other);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45E90))(this);
  }
  System_String* ToString(System_String* format) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45EA0))(this, format);
  }
  float get_left() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3B350))(this);
  }
  float get_right() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45D20))(this);
  }
  float get_top() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3B360))(this);
  }
  float get_bottom() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45D30))(this);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::UnityEngine::Rect get_zero() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xFD1660))();
  }
  static inline ModdingAPI::Exposed::UnityEngine::Rect MinMaxRect(float xmin, float ymin, float xmax, float ymax) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect(__fastcall*)(float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x109CDB0))(xmin, ymin, xmax, ymax);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Rect OrderMinMax(ModdingAPI::Exposed::UnityEngine::Rect rect) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x109CEE0))(rect);
  }

};
}