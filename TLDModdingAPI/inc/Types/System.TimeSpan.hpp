// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.TimeSpan.hpp"

namespace ModdingAPI::Exposed::System {
struct __TimeSpan_Il2CppObject {
  int64_t _ticks;
};
struct __TimeSpan_Il2CppStaticFields {
  ModdingAPI::Exposed::System::TimeSpan Zero;
  ModdingAPI::Exposed::System::TimeSpan MaxValue;
  ModdingAPI::Exposed::System::TimeSpan MinValue;
  bool _legacyConfigChecked;
  bool _legacyMode;
};

struct __TimeSpan_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_CompareTo;
  VirtualInvokeData _5_CompareTo;
  VirtualInvokeData _6_Equals;
  VirtualInvokeData _7_ToString;
};

struct __TimeSpan_Il2CppClass {
  Il2CppClass_1 _1;
  __TimeSpan_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TimeSpan_Il2CppVtbl vtbl;
};

class TimeSpan {
  static constexpr uint64_t _rvaObjectInstance     = 0x3C55328;
  static inline    TimeSpan* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t _rvaClassInstance     = 0x3C55C78;
  static inline    __TimeSpan_Il2CppClass* _pStaticClassInstance = nullptr;

public:
  // Singleton object getter:
  static inline TimeSpan* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (TimeSpan**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

  // Static class getter:
  static inline __TimeSpan_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__TimeSpan_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Member fields:
  int64_t _ticks;

  // Member methods:
  void ::ctor(int64_t ticks) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2C00))(this, ticks);
  }
  void ::ctor(int32_t hours, int32_t minutes, int32_t seconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x344F0))(this, hours, minutes, seconds);
  }
  void ::ctor(int32_t days, int32_t hours, int32_t minutes, int32_t seconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34500))(this, days, hours, minutes, seconds);
  }
  void ::ctor(int32_t days, int32_t hours, int32_t minutes, int32_t seconds, int32_t milliseconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*, int32_t, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34530))(this, days, hours, minutes, seconds, milliseconds);
  }
  int64_t get_Ticks() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6590))(this);
  }
  int32_t get_Days() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34540))(this);
  }
  int32_t get_Hours() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34560))(this);
  }
  int32_t get_Milliseconds() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x345A0))(this);
  }
  int32_t get_Minutes() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x345F0))(this);
  }
  int32_t get_Seconds() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34640))(this);
  }
  double get_TotalDays() {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34690))(this);
  }
  double get_TotalHours() {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x346B0))(this);
  }
  double get_TotalMilliseconds() {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x346D0))(this);
  }
  double get_TotalMinutes() {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34710))(this);
  }
  double get_TotalSeconds() {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34730))(this);
  }
  ModdingAPI::Exposed::System::TimeSpan Add(ModdingAPI::Exposed::System::TimeSpan ts) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*, ModdingAPI::Exposed::System::TimeSpan)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34750))(this, ts);
  }
  int32_t CompareTo(Il2CppObject* value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34760))(this, value);
  }
  int32_t CompareTo(ModdingAPI::Exposed::System::TimeSpan value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*, ModdingAPI::Exposed::System::TimeSpan)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34770))(this, value);
  }
  ModdingAPI::Exposed::System::TimeSpan Duration() {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34790))(this);
  }
  bool Equals(Il2CppObject* value) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x34890))(this, value);
  }
  bool Equals(ModdingAPI::Exposed::System::TimeSpan obj) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*, ModdingAPI::Exposed::System::TimeSpan)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30110))(this, obj);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15500))(this);
  }
  ModdingAPI::Exposed::System::TimeSpan Negate() {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x348A0))(this);
  }
  ModdingAPI::Exposed::System::TimeSpan Subtract(ModdingAPI::Exposed::System::TimeSpan ts) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*, ModdingAPI::Exposed::System::TimeSpan)>(Helpers::Memory::GetInstance().MakeAbsolute(0x348B0))(this, ts);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x348C0))(this);
  }
  System_String* ToString(System_String* format) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x348D0))(this, format);
  }
  System_String* ToString(System_String* format, ModdingAPI::Exposed::System::IFormatProvider* formatProvider) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan*, System_String*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x348E0))(this, format, formatProvider);
  }

  // Static methods:
  static inline int32_t Compare(ModdingAPI::Exposed::System::TimeSpan t1, ModdingAPI::Exposed::System::TimeSpan t2) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::TimeSpan, ModdingAPI::Exposed::System::TimeSpan)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA59C0))(t1, t2);
  }
  static inline ModdingAPI::Exposed::System::TimeSpan FromDays(double value) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA5B00))(value);
  }
  static inline ModdingAPI::Exposed::System::TimeSpan FromHours(double value) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA5C80))(value);
  }
  static inline ModdingAPI::Exposed::System::TimeSpan Interval(double value, int32_t scale) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(double, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA5D30))(value, scale);
  }
  static inline ModdingAPI::Exposed::System::TimeSpan FromMilliseconds(double value) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA5ED0))(value);
  }
  static inline ModdingAPI::Exposed::System::TimeSpan FromMinutes(double value) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA5F80))(value);
  }
  static inline ModdingAPI::Exposed::System::TimeSpan FromSeconds(double value) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA6130))(value);
  }
  static inline ModdingAPI::Exposed::System::TimeSpan FromTicks(int64_t value) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3201B0))(value);
  }
  static inline int64_t TimeToTicks(int32_t hour, int32_t minute, int32_t second) {
    return reinterpret_cast<int64_t(__fastcall*)(int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA62D0))(hour, minute, second);
  }
  static inline ModdingAPI::Exposed::System::TimeSpan Parse(System_String* s) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA63D0))(s);
  }
  static inline ModdingAPI::Exposed::System::TimeSpan Parse(System_String* input, ModdingAPI::Exposed::System::IFormatProvider* formatProvider) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(System_String*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA6470))(input, formatProvider);
  }
  static inline bool GetLegacyFormatMode() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA6700))();
  }
  static inline bool get_LegacyMode() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA67A0))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xDA6960))();
  }

};
}