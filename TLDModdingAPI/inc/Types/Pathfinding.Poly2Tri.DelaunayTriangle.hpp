// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.Pathfinding.Poly2Tri.FixedArray3_T_.hpp"
#include "ModdingAPI.Exposed.Pathfinding.Poly2Tri.FixedBitArray3.hpp"


namespace ModdingAPI::Exposed::Pathfinding::Poly2Tri {
struct __DelaunayTriangle_Il2CppStaticFields {
};

struct __DelaunayTriangle_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __DelaunayTriangle_Il2CppClass {
  Il2CppClass_1 _1;
  __DelaunayTriangle_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __DelaunayTriangle_Il2CppVtbl vtbl;
};

class DelaunayTriangle {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C771D8;
  static inline    __DelaunayTriangle_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __DelaunayTriangle_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__DelaunayTriangle_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __DelaunayTriangle_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::Pathfinding::Poly2Tri::FixedArray3_T_ Points;
  ModdingAPI::Exposed::Pathfinding::Poly2Tri::FixedArray3_T_ Neighbors;
  ModdingAPI::Exposed::Pathfinding::Poly2Tri::FixedBitArray3 EdgeIsConstrained;
  ModdingAPI::Exposed::Pathfinding::Poly2Tri::FixedBitArray3 EdgeIsDelaunay;
  bool _IsInterior_k__BackingField;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p1, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p2, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p3) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15136A0))(this, p1, p2, p3);
  }
  bool get_IsInterior() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1513810))(this);
  }
  void set_IsInterior(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1513820))(this, value);
  }
  int32_t IndexOf(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1513830))(this, p);
  }
  int32_t IndexCCWFrom(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1513900))(this, p);
  }
  bool Contains(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1513930))(this, p);
  }
  void MarkNeighbor(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p1, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p2, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle* t) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15139D0))(this, p1, p2, t);
  }
  void MarkNeighbor(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle* t) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1513AC0))(this, t);
  }
  ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* OppositePoint(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle* t, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1513F20))(this, t, p);
  }
  ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle* NeighborCWFrom(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* point) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1513F60))(this, point);
  }
  ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle* NeighborCCWFrom(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* point) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1514020))(this, point);
  }
  ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle* NeighborAcrossFrom(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* point) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15140E0))(this, point);
  }
  ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* PointCCWFrom(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* point) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1514190))(this, point);
  }
  ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* PointCWFrom(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* point) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1514250))(this, point);
  }
  void RotateCW() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1514310))(this);
  }
  void Legalize(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* oPoint, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* nPoint) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1514530))(this, oPoint, nPoint);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1514600))(this);
  }
  void MarkConstrainedEdge(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1514920))(this, index);
  }
  void MarkConstrainedEdge(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* q) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1514930))(this, p, q);
  }
  int32_t EdgeIndex(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p1, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p2) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1514960))(this, p1, p2);
  }
  bool GetConstrainedEdgeCCW(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1514A80))(this, p);
  }
  bool GetConstrainedEdgeCW(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1514AC0))(this, p);
  }
  void SetConstrainedEdgeCCW(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p, bool ce) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1514B00))(this, p, ce);
  }
  void SetConstrainedEdgeCW(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p, bool ce) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1514B50))(this, p, ce);
  }
  bool GetDelaunayEdgeCCW(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1514BA0))(this, p);
  }
  bool GetDelaunayEdgeCW(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1514BE0))(this, p);
  }
  void SetDelaunayEdgeCCW(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p, bool ce) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1514C20))(this, p, ce);
  }
  void SetDelaunayEdgeCW(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p, bool ce) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1514C70))(this, p, ce);
  }
};
}