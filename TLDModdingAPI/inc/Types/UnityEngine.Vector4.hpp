// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector4.hpp"

namespace ModdingAPI::Exposed::UnityEngine {
struct __Vector4_Il2CppObject {
  float x;
  float y;
  float z;
  float w;
};
struct __Vector4_Il2CppStaticFields {
  ModdingAPI::Exposed::UnityEngine::Vector4 zeroVector;
  ModdingAPI::Exposed::UnityEngine::Vector4 oneVector;
  ModdingAPI::Exposed::UnityEngine::Vector4 positiveInfinityVector;
  ModdingAPI::Exposed::UnityEngine::Vector4 negativeInfinityVector;
};

struct __Vector4_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Equals;
};

struct __Vector4_Il2CppClass {
  Il2CppClass_1 _1;
  __Vector4_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Vector4_Il2CppVtbl vtbl;
};

class Vector4 {
  static constexpr uint64_t _rvaObjectInstance     = 0x3C6DE88;
  static inline    Vector4* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t _rvaClassInstance     = 0x3C26360;
  static inline    __Vector4_Il2CppClass* _pStaticClassInstance = nullptr;

public:
  // Singleton object getter:
  static inline Vector4* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (Vector4**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

  // Static class getter:
  static inline __Vector4_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Vector4_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Member fields:
  float x;
  float y;
  float z;
  float w;

  // Member methods:
  void ::ctor(float x, float y, float z, float w) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector4*, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3B0))(this, x, y, z, w);
  }
  void ::ctor(float x, float y, float z) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector4*, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x50DD0))(this, x, y, z);
  }
  void ::ctor(float x, float y) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector4*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x50DF0))(this, x, y);
  }
  float get_Item(int32_t index) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector4*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x50E10))(this, index);
  }
  void set_Item(int32_t index, float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector4*, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x50E20))(this, index, value);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector4*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x45850))(this);
  }
  bool Equals(Il2CppObject* other) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector4*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x50E30))(this, other);
  }
  bool Equals(ModdingAPI::Exposed::UnityEngine::Vector4 other) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector4*, ModdingAPI::Exposed::UnityEngine::Vector4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3BBD0))(this, other);
  }
  float get_magnitude() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector4*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x50E40))(this);
  }
  float get_sqrMagnitude() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector4*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x50E50))(this);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector4*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x50E60))(this);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::UnityEngine::Vector4 Lerp(ModdingAPI::Exposed::UnityEngine::Vector4 a, ModdingAPI::Exposed::UnityEngine::Vector4 b, float t) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector4(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector4, ModdingAPI::Exposed::UnityEngine::Vector4, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DA8B0))(a, b, t);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector4 Normalize(ModdingAPI::Exposed::UnityEngine::Vector4 a) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector4(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DAAD0))(a);
  }
  static inline float Dot(ModdingAPI::Exposed::UnityEngine::Vector4 a, ModdingAPI::Exposed::UnityEngine::Vector4 b) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector4, ModdingAPI::Exposed::UnityEngine::Vector4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x109B1B0))(a, b);
  }
  static inline float Magnitude(ModdingAPI::Exposed::UnityEngine::Vector4 a) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DAD30))(a);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector4 get_zero() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector4(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DB030))();
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector4 get_one() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector4(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DB0E0))();
  }
  static inline float SqrMagnitude(ModdingAPI::Exposed::UnityEngine::Vector4 a) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DB7A0))(a);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DB880))();
  }

};
}