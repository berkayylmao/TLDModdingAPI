// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.Panel_Loading.HintQueueEntry.hpp"


namespace ModdingAPI::Exposed {
struct __Panel_Loading_Il2CppStaticFields {
  bool m_EnableCaptureScreenTransition;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_AsyncScenesRemoveList;
};

struct __Panel_Loading_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Panel_Loading_Il2CppClass {
  Il2CppClass_1 _1;
  __Panel_Loading_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Panel_Loading_Il2CppVtbl vtbl;
};

class Panel_Loading {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C941F8;
  static inline    __Panel_Loading_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Panel_Loading_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Panel_Loading_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Panel_Loading_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_HintsBackgroundParent;
  ModdingAPI::Exposed::UISprite* m_Background;
  ModdingAPI::Exposed::UISprite* m_Sprite_Animation_Loading;
  ModdingAPI::Exposed::UILabel* m_Label_Loading_Default;
  ModdingAPI::Exposed::UILabel* m_Label_Loading_LakeRegion;
  ModdingAPI::Exposed::UILabel* m_Label_Continue;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Quotes;
  float m_FadeDurationSeconds;
  System_String* m_Audio;
  ModdingAPI::Exposed::UITexture* m_BackgroundTexture;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_BackgroundTextureSpriteNames;
  ModdingAPI::Exposed::UILabel* m_CustomLoadScreenLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_NonCustomElements;
  float m_QuoteFadeFromBlackTime;
  float m_QuoteVisibleOnScreenAfterFadeInStarts;
  System_String* m_SceneNameLoadFromEmpty;
  int32_t m_LoadingScreenTextFromEmpty;
  ModdingAPI::Exposed::System::Action* m_CallbackAfterLoad;
  bool m_ShowQuote;
  System_String* m_CommandToRunAfterLoad;
  bool m_SaveAfterLoad;
  ModdingAPI::Exposed::UILabel* m_Label_Hint;
  ModdingAPI::Exposed::UILabel* m_Label_HintTitle;
  ModdingAPI::Exposed::TLDBehaviourTreeOwner* m_HintsBehaviourTree;
  int32_t m_HintQueueMaxSize;
  ModdingAPI::Exposed::UnityEngine::AsyncOperation_array* m_AsyncOperations;
  int32_t m_RestoreHudDisplayMode;
  bool m_HoldScreenUntilFadeOut;
  float m_LabelLoadingAlpha;
  float m_LabelContinueAlpha;
  float m_BackgroundTextureAlpha;
  bool m_ContinueToGame;
  uint32_t m_AudioID;
  ModdingAPI::Exposed::UILabel* m_ActiveQuoteLabel;
  float m_startLoadingTimeSeconds;
  float m_DelayHideUntilFrame;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_HintQueue;
  int32_t m_HintIndex;
  System_String* m_CustomLoadScreenLocID;
  ModdingAPI::Exposed::CaptureScreenTransition* m_captureTransition;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17177B0))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17178B0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17178C0))(this);
  }
  void Enable(bool enable, ModdingAPI::Exposed::UnityEngine::AsyncOperation_array* ao, int32_t lst) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*, bool, ModdingAPI::Exposed::UnityEngine::AsyncOperation_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1718580))(this, enable, ao, lst);
  }
  bool IsLoading() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1719A80))(this);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1719BF0))(this);
  }
  bool IsShowingQuote() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1719D10))(this);
  }
  void OnQuoteFinished() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1719DC0))(this);
  }
  void QueueHintLabel(System_String* textLocId, System_String* titleLocId) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1719DF0))(this, textLocId, titleLocId);
  }
  void ShowHintLabel(ModdingAPI::Exposed::Panel_Loading::HintQueueEntry hint) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*, ModdingAPI::Exposed::Panel_Loading::HintQueueEntry)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1719FA0))(this, hint);
  }
  void OnHintFinished() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x171A220))(this);
  }
  bool IsHintQueueFull() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x171A300))(this);
  }
  void ForceCustomLoadScreen(System_String* textLocId) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E130))(this, textLocId);
  }
  void OnScreenBackgroundTransitionFinished() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x171A390))(this);
  }
  void SetLoadingScreenText(int32_t lst) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x171A500))(this, lst);
  }
  void SetRandomQuoteActive() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x171A8E0))(this);
  }
  void MaybePlayAudio(int32_t lst) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x171AFF0))(this, lst);
  }
  bool AsyncLoadsComplete() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x171B0E0))(this);
  }
  void RefreshAsyncSceneLoadRecord() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x171B140))(this);
  }
  bool ShouldCaptureScreen() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x171B520))(this);
  }
  void StartCapture(ModdingAPI::Exposed::System::Action* OnCaptureFinish) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*, ModdingAPI::Exposed::System::Action*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x171B560))(this, OnCaptureFinish);
  }
  void UpdateCaptureForTransition() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x171B590))(this);
  }
  void DoCaptureScreen() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x171B5D0))(this);
  }
  void CaptureStarted() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x171B6F0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Loading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x171B710))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<bool> m_EnableCaptureScreenTransition = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_EnableCaptureScreenTransition; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> m_AsyncScenesRemoveList = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_AsyncScenesRemoveList; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::System::Collections::IEnumerator* CaptureScreenCoroutine() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1718440))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x171BA00))();
  }
};
}