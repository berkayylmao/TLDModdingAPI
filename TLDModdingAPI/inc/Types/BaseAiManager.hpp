// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.Unity.Jobs.JobHandle.hpp"
#include "ModdingAPI.Exposed.Unity.Collections.NativeArray_T_.hpp"
#include "ModdingAPI.Exposed.UnityEngine.RaycastHit.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __BaseAiManager_Il2CppStaticFields {
  bool m_AiDebug;
  bool m_DisableAi;
  bool m_AiNavMeshDebug;
  bool m_AiSpawnDebug;
  bool m_AiDebugLite;
  bool s_AiDebugClosestOnly;
  bool m_AiDebugStates;
  bool s_EnableBatchGroundRaycast;
  bool s_EnableContinuousCollision;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_BaseAis;
  ModdingAPI::Exposed::BaseAi* s_ClosestAiToPlayer;
  ModdingAPI::Exposed::UnityEngine::GameObject* s_Subsystems;
  ModdingAPI::Exposed::AiWolfHowls* s_WolfHowls;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* ms_CurrentWaypointIndexByGUID;
  ModdingAPI::Exposed::Unity::Jobs::JobHandle s_BatchGroundRaycastJob;
  ModdingAPI::Exposed::Unity::Collections::NativeArray_T_ s_BatchGroundRaycastResults;
  ModdingAPI::Exposed::Unity::Collections::NativeArray_T_ s_BatchGroundRaycastCommands;
  bool s_BatchGroundRaycastJobCompleted;
  ModdingAPI::Exposed::UnityEngine::RaycastHit s_InvalidHit;
  bool s_BatchGroundRaycastCommandsAllocated;
};

struct __BaseAiManager_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __BaseAiManager_Il2CppClass {
  Il2CppClass_1 _1;
  __BaseAiManager_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __BaseAiManager_Il2CppVtbl vtbl;
};

class BaseAiManager {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C5E9A8;
  static inline    __BaseAiManager_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __BaseAiManager_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__BaseAiManager_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __BaseAiManager_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BaseAiManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<bool> m_AiDebug = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_AiDebug; }
  );
  static inline __CppStaticProperty<bool> m_DisableAi = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_DisableAi; }
  );
  static inline __CppStaticProperty<bool> m_AiNavMeshDebug = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_AiNavMeshDebug; }
  );
  static inline __CppStaticProperty<bool> m_AiSpawnDebug = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_AiSpawnDebug; }
  );
  static inline __CppStaticProperty<bool> m_AiDebugLite = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_AiDebugLite; }
  );
  static inline __CppStaticProperty<bool> s_AiDebugClosestOnly = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_AiDebugClosestOnly; }
  );
  static inline __CppStaticProperty<bool> m_AiDebugStates = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_AiDebugStates; }
  );
  static inline __CppStaticProperty<bool> s_EnableBatchGroundRaycast = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_EnableBatchGroundRaycast; }
  );
  static inline __CppStaticProperty<bool> s_EnableContinuousCollision = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_EnableContinuousCollision; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> m_BaseAis = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_BaseAis; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::BaseAi*> s_ClosestAiToPlayer = __CppStaticProperty<ModdingAPI::Exposed::BaseAi*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_ClosestAiToPlayer; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::GameObject*> s_Subsystems = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::GameObject*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_Subsystems; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::AiWolfHowls*> s_WolfHowls = __CppStaticProperty<ModdingAPI::Exposed::AiWolfHowls*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_WolfHowls; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> ms_CurrentWaypointIndexByGUID = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->ms_CurrentWaypointIndexByGUID; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::Unity::Jobs::JobHandle> s_BatchGroundRaycastJob = __CppStaticProperty<ModdingAPI::Exposed::Unity::Jobs::JobHandle>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_BatchGroundRaycastJob; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::Unity::Collections::NativeArray_T_> s_BatchGroundRaycastResults = __CppStaticProperty<ModdingAPI::Exposed::Unity::Collections::NativeArray_T_>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_BatchGroundRaycastResults; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::Unity::Collections::NativeArray_T_> s_BatchGroundRaycastCommands = __CppStaticProperty<ModdingAPI::Exposed::Unity::Collections::NativeArray_T_>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_BatchGroundRaycastCommands; }
  );
  static inline __CppStaticProperty<bool> s_BatchGroundRaycastJobCompleted = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_BatchGroundRaycastJobCompleted; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::RaycastHit> s_InvalidHit = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::RaycastHit>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_InvalidHit; }
  );
  static inline __CppStaticProperty<bool> s_BatchGroundRaycastCommandsAllocated = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_BatchGroundRaycastCommandsAllocated; }
  );

  // Static methods:
  static inline System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCB690))();
  }
  static inline bool IsClosestToPlayer(ModdingAPI::Exposed::BaseAi* ai) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BaseAi*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCBE20))(ai);
  }
  static inline void RefreshClosestToPlayer() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCBF00))();
  }
  static inline bool BearHuntPart2Validate(ModdingAPI::Exposed::BaseAiDataProxy* proxy, ModdingAPI::Exposed::BaseAi* bai, ModdingAPI::Exposed::BaseAiData* bad) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BaseAiDataProxy*, ModdingAPI::Exposed::BaseAi*, ModdingAPI::Exposed::BaseAiData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCC250))(proxy, bai, bad);
  }
  static inline bool CreateMoveAgent(ModdingAPI::Exposed::UnityEngine::Transform* transform, ModdingAPI::Exposed::BaseAi* bai, ModdingAPI::Exposed::UnityEngine::Vector3 position) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Transform*, ModdingAPI::Exposed::BaseAi*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCC550))(transform, bai, position);
  }
  static inline void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCC630))(text);
  }
  static inline void DeserializeAi(ModdingAPI::Exposed::BaseAi* bai, ModdingAPI::Exposed::BaseAiData* bad, ModdingAPI::Exposed::BaseAiDataProxy* proxy) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BaseAi*, ModdingAPI::Exposed::BaseAiData*, ModdingAPI::Exposed::BaseAiDataProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCCD70))(bai, bad, proxy);
  }
  static inline void InstantiateSubsystems(ModdingAPI::Exposed::UnityEngine::GameObject* prefab, ModdingAPI::Exposed::UnityEngine::Transform* parent) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCD160))(prefab, parent);
  }
  static inline void Add(ModdingAPI::Exposed::BaseAi* bai) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BaseAi*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCD3C0))(bai);
  }
  static inline void Remove(ModdingAPI::Exposed::BaseAi* bai) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BaseAi*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCD640))(bai);
  }
  static inline void Reset() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCD840))();
  }
  static inline void ResetAudioLoops() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCDA20))();
  }
  static inline void Destroy(ModdingAPI::Exposed::BaseAi* bai) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BaseAi*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCDC20))(bai);
  }
  static inline ModdingAPI::Exposed::BaseAi* GetAIFromSerializedMissionId(System_String* missionId) {
    return reinterpret_cast<ModdingAPI::Exposed::BaseAi*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCDE90))(missionId);
  }
  static inline void RegisterAnyAIGuid() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCE0B0))();
  }
  static inline void Update() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCE370))();
  }
  static inline void UpdateCollisionMode(int32_t mode) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCE490))(mode);
  }
  static inline void DisplayDebugText() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))();
  }
  static inline bool CanUpdateAI(ModdingAPI::Exposed::BaseAi* bai) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BaseAi*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCE670))(bai);
  }
  static inline int32_t GetBatchGroundRaycastSize() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCE7F0))();
  }
  static inline void DoLateUpdate() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCE930))();
  }
  static inline void BatchGroundRaycast() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCEB00))();
  }
  static inline ModdingAPI::Exposed::UnityEngine::RaycastHit GetBatchGroundRaycastHit(int32_t id) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::RaycastHit(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCF070))(id);
  }
  static inline void DiposeBatchGroundRaycastHit() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCF1C0))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCF3A0))();
  }
};
}