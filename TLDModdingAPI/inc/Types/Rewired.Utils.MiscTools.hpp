// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Guid.hpp"


namespace ModdingAPI::Exposed::Rewired::Utils {
struct __MiscTools_Il2CppStaticFields {
  uint32_t JSInBBlTAVpdKqnpQcoaBTuKIvs;
  uint32_t GewgViadAZPTpGeUaRQQeFVdoDSf;
  uint32_t asrIxvJtduRwgPUfpTEXNsxQeZE;
  int32_t SqizlDpDQuTbQlWjjTpOkucrSYg;
  int32_t OJoIcbDmIlgkhBqRImALeEXFYYb;
  int32_t komCRahbjMCmXVAvmWquwlSknLCG;
};

struct __MiscTools_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __MiscTools_Il2CppClass {
  Il2CppClass_1 _1;
  __MiscTools_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MiscTools_Il2CppVtbl vtbl;
};

class MiscTools {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C779C8;
  static inline    __MiscTools_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __MiscTools_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__MiscTools_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __MiscTools_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<uint32_t> JSInBBlTAVpdKqnpQcoaBTuKIvs = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->JSInBBlTAVpdKqnpQcoaBTuKIvs; }
  );
  static inline __CppStaticProperty<uint32_t> GewgViadAZPTpGeUaRQQeFVdoDSf = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->GewgViadAZPTpGeUaRQQeFVdoDSf; }
  );
  static inline __CppStaticProperty<uint32_t> asrIxvJtduRwgPUfpTEXNsxQeZE = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->asrIxvJtduRwgPUfpTEXNsxQeZE; }
  );
  static inline __CppStaticProperty<int32_t> SqizlDpDQuTbQlWjjTpOkucrSYg = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->SqizlDpDQuTbQlWjjTpOkucrSYg; }
  );
  static inline __CppStaticProperty<int32_t> OJoIcbDmIlgkhBqRImALeEXFYYb = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->OJoIcbDmIlgkhBqRImALeEXFYYb; }
  );
  static inline __CppStaticProperty<int32_t> komCRahbjMCmXVAvmWquwlSknLCG = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->komCRahbjMCmXVAvmWquwlSknLCG; }
  );

  // Static methods:
  static inline Il2CppObject* Clone(Il2CppObject* obj) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD4CC0))(obj);
  }
  static inline ModdingAPI::Exposed::System::Guid CreateGuidHashSHA256(System_String* text) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Guid(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD4D90))(text);
  }
  static inline ModdingAPI::Exposed::System::Guid CreateGuidHashSHA1(System_String* text) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Guid(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD4FF0))(text);
  }
  static inline ModdingAPI::Exposed::System::Guid CreateHIDProductGuid(int32_t vendorId, int32_t productId) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Guid(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD5270))(vendorId, productId);
  }
  static inline uint32_t Tick(uint32_t counter) {
    return reinterpret_cast<uint32_t(__fastcall*)(uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD5370))(counter);
  }
  static inline int32_t Tick(int32_t counter) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD5460))(counter);
  }
  static inline uint32_t TickPrev(uint32_t counter) {
    return reinterpret_cast<uint32_t(__fastcall*)(uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD5560))(counter);
  }
  static inline int32_t TickPrev(int32_t counter) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD5660))(counter);
  }
  static inline bool IsTickValid(uint32_t tick) {
    return reinterpret_cast<bool(__fastcall*)(uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD57D0))(tick);
  }
  static inline bool IsTickValid(int32_t tick) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD5880))(tick);
  }
  static inline bool IsTickNewer(uint32_t tick1, uint32_t tick2) {
    return reinterpret_cast<bool(__fastcall*)(uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD5930))(tick1, tick2);
  }
  static inline bool IsTickNewer(int32_t tick1, int32_t tick2) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD5A60))(tick1, tick2);
  }
  static inline bool IsTickNewerOrEqualTo(uint32_t tick1, uint32_t tick2) {
    return reinterpret_cast<bool(__fastcall*)(uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD5B90))(tick1, tick2);
  }
  static inline bool IsTickNewerOrEqualTo(int32_t tick1, int32_t tick2) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD5CC0))(tick1, tick2);
  }
  static inline int64_t ToLongUnchecked(Il2CppObject* value) {
    return reinterpret_cast<int64_t(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD5E10))(value);
  }
  static inline bool IsValidGuid(System_String* guid) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD6250))(guid);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD62F0))();
  }
};
}