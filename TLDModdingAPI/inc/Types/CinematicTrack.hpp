// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Quaternion.hpp"


namespace ModdingAPI::Exposed {
struct __CinematicTrack_Il2CppStaticFields {
  float s_AudioDurationRealtimeSeconds;
};

struct __CinematicTrack_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __CinematicTrack_Il2CppClass {
  Il2CppClass_1 _1;
  __CinematicTrack_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CinematicTrack_Il2CppVtbl vtbl;
};

class CinematicTrack {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C58DA8;
  static inline    __CinematicTrack_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __CinematicTrack_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__CinematicTrack_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __CinematicTrack_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t m_MasterAnimatorType;
  ModdingAPI::Exposed::CinematicTrack::OnEnterPlaying* m_OnEnterPlaying;
  System_String* m_NPCID;
  ModdingAPI::Exposed::UnityEngine::TextAsset* m_SubtitlesAsset;
  System_String* m_LoadedAssetBundleFilename;
  System_String* m_LoadedPrefabPath;
  ModdingAPI::Exposed::AssetBundleRef* m_AssetBundle;
  ModdingAPI::Exposed::CinematicAssets* m_CinematicAssets;
  bool m_AnimationsLoadingComplete;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_AnimationsAsset;
  ModdingAPI::Exposed::UnityEngine::Animator* m_CurrentFPHAnimator;
  ModdingAPI::Exposed::UnityEngine::Animator* m_CurrentNPCAnimator;
  ModdingAPI::Exposed::UnityEngine::RuntimeAnimatorController* m_OriginalFPHRuntimeAnimatorController;
  ModdingAPI::Exposed::UnityEngine::RuntimeAnimatorController* m_OriginalNPCRuntimeAnimatorController;
  int32_t m_State;
  System_String* m_AudioEventStart;
  float m_CurrentAnimationTime;
  System_String* m_StateName;
  System_String* m_OnGoingAnimationStateKey;
  ModdingAPI::Exposed::Utils::Subtitle_array* m_Subtitles;
  uint32_t m_NumSubtitles;
  int32_t m_OnGoingAnimationState;
  int32_t m_FPBaseLayerIndex;
  int32_t m_NPCBaseLayerIndex;
  float m_OnGoingAnimationDuration;
  uint32_t m_AudioID;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_AudioEmitterNode;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_PermanentProps;
  ModdingAPI::Exposed::UnityEngine::Animator* m_LoadedNPCAnimator;
  ModdingAPI::Exposed::UnityEngine::Animator* m_LoadedFPHAnimator;
  ModdingAPI::Exposed::PlayEventMonitor* m_FPPlayEventMonitor;
  ModdingAPI::Exposed::PlayEventMonitor* m_NPCPlayEventMonitor;
  bool m_CurrentNPCAnimatorPlaying;
  bool m_CurrentFPHAnimatorPlaying;
  int32_t m_PendingIdleHash;
  int32_t m_PendingIdleLayer;
  bool m_IsIdlePending;
  bool m_ShouldLockPlayer;
  bool m_RestoreControllers;
  bool m_FadedOutOnExit;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_WorldSpaceViewPositionAtStart;
  ModdingAPI::Exposed::UnityEngine::Quaternion m_WorldSpaceViewRotationAtStart;

  // Member methods:
  void ::ctor(System_String* audioStart, ModdingAPI::Exposed::UnityEngine::TextAsset* subtitleAsset, System_String* npcID, ModdingAPI::Exposed::UnityEngine::GameObject* audioEmitterNode) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*, System_String*, ModdingAPI::Exposed::UnityEngine::TextAsset*, System_String*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B91390))(this, audioStart, subtitleAsset, npcID, audioEmitterNode);
  }
  void LateUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B91990))(this);
  }
  bool IsUnused() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD2C8A0))(this);
  }
  bool ShouldLockPlayer() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B919F0))(this);
  }
  void SetShouldLockPLayer(bool shouldLockPLayer) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B91A10))(this, shouldLockPLayer);
  }
  void SetFadedOutOnExit(bool fadedOutOnExit) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B91A20))(this, fadedOutOnExit);
  }
  bool IsPlaying() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B91A30))(this);
  }
  bool IsLoading() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B91A40))(this);
  }
  void Play() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B91A50))(this);
  }
  void LoadCinematicAsync(System_String* assetBundleFilemame, System_String* prefabPath, ModdingAPI::Exposed::UnityEngine::TextAsset* subtitleAsset) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*, System_String*, System_String*, ModdingAPI::Exposed::UnityEngine::TextAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B91CF0))(this, assetBundleFilemame, prefabPath, subtitleAsset);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B920C0))(this);
  }
  bool IsReady() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD2C8A0))(this);
  }
  bool IsWaitingForIdle() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B925C0))(this);
  }
  bool IsNPCStatePlaying(int32_t hashState, int32_t layer) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B92730))(this, hashState, layer);
  }
  bool IsFPStatePlaying(int32_t hashState, int32_t layer) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B927F0))(this, hashState, layer);
  }
  void UnloadCinematic() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B928B0))(this);
  }
  void EnterPlaying() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B92A10))(this);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* LoadAnimations(System_String* assetBundleFilename, System_String* prefabPath) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B92B00))(this, assetBundleFilename, prefabPath);
  }
  void RetrieveLoadedAnimators(System_String* errorPath) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B92C70))(this, errorPath);
  }
  void SwapNPCController(ModdingAPI::Exposed::UnityEngine::RuntimeAnimatorController* controller) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*, ModdingAPI::Exposed::UnityEngine::RuntimeAnimatorController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B92ED0))(this, controller);
  }
  void SaveOriginalControllers() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B92FC0))(this);
  }
  bool AreAssetsReady() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B93160))(this);
  }
  void AbortLoad() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B93240))(this);
  }
  float GetOnGoingStateDuration(int32_t masterAnimatorType) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B93260))(this, masterAnimatorType);
  }
  float GetCinematicDuration() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AA8460))(this);
  }
  void PlayAudio(System_String* audioEventStart) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B93440))(this, audioEventStart);
  }
  void LateSynchronizeAnimatorsNPC(float currentTime, int32_t stateHash) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B937B0))(this, currentTime, stateHash);
  }
  void LateSynchronizeAnimatorsFP(float currentTime, int32_t stateHash) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B93A30))(this, currentTime, stateHash);
  }
  void OnCurrentNPCAnimatorStoppedPlaying() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnCurrentFPHAnimatorStoppedPlaying() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void UpdateAudioAndMaybeAnimationTime() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B93D10))(this);
  }
  void ReturnToIdleAnimation() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B93E70))(this);
  }
  void StartMasterAnimation() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B941B0))(this);
  }
  void UpdatePlaying() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B945E0))(this);
  }
  void OnCinematicDone() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B94DD0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<float> s_AudioDurationRealtimeSeconds = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_AudioDurationRealtimeSeconds; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::CinematicTrack* CreateFPCinematicTrack(ModdingAPI::Exposed::FPAnimationState* fpAnimationState, System_String* audioStart, ModdingAPI::Exposed::UnityEngine::TextAsset* subtitleAsset, System_String* npcID, ModdingAPI::Exposed::UnityEngine::GameObject* audioEmitterNode, ModdingAPI::Exposed::CinematicTrack::OnEnterPlaying* onEnterPlaying) {
    return reinterpret_cast<ModdingAPI::Exposed::CinematicTrack*(__fastcall*)(ModdingAPI::Exposed::FPAnimationState*, System_String*, ModdingAPI::Exposed::UnityEngine::TextAsset*, System_String*, ModdingAPI::Exposed::UnityEngine::GameObject*, ModdingAPI::Exposed::CinematicTrack::OnEnterPlaying*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B91620))(fpAnimationState, audioStart, subtitleAsset, npcID, audioEmitterNode, onEnterPlaying);
  }
  static inline ModdingAPI::Exposed::CinematicTrack* CreateNPCCinematicTrack(ModdingAPI::Exposed::DialogueAnimationState* npcAnimationState, System_String* audioStart, ModdingAPI::Exposed::UnityEngine::TextAsset* subtitleAsset, System_String* npcID, ModdingAPI::Exposed::UnityEngine::GameObject* audioEmitterNode) {
    return reinterpret_cast<ModdingAPI::Exposed::CinematicTrack*(__fastcall*)(ModdingAPI::Exposed::DialogueAnimationState*, System_String*, ModdingAPI::Exposed::UnityEngine::TextAsset*, System_String*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B917E0))(npcAnimationState, audioStart, subtitleAsset, npcID, audioEmitterNode);
  }
  static inline void AudioCallback(Il2CppObject* in_cookie, int32_t in_type, Il2CppObject* in_info) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*, int32_t, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B93300))(in_cookie, in_type, in_info);
  }
};
}