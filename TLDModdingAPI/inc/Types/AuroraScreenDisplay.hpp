// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed {
struct __AuroraScreenDisplay_Il2CppStaticFields {
};

struct __AuroraScreenDisplay_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __AuroraScreenDisplay_Il2CppClass {
  Il2CppClass_1 _1;
  __AuroraScreenDisplay_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AuroraScreenDisplay_Il2CppVtbl vtbl;
};

class AuroraScreenDisplay {
public:
  // Il2Cpp fields:
  __AuroraScreenDisplay_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool m_IsDigital;
  ModdingAPI::Exposed::CustomCameraPosition* m_InspectComponent;
  ModdingAPI::Exposed::AuroraScreenPrefabPool* m_DisplayInterfacePrefabPool;
  int32_t m_RenderTextureWidth;
  int32_t m_RenderTextureHeight;
  float m_InspectionResolveSpeed;
  ModdingAPI::Exposed::MinMax* m_DistortionToggleRate;
  ModdingAPI::Exposed::MinMax* m_VSyncRate;
  ModdingAPI::Exposed::ObjectGuid* m_Guid;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_DisplayInterface;
  ModdingAPI::Exposed::UnityEngine::Camera* m_RenderTextureCamera;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* m_InterfaceRenderTexture;
  ModdingAPI::Exposed::InteractiveScrollText* m_InteractiveScrollText;
  ModdingAPI::Exposed::AuroraScreenAudio* m_DisplayAudio;
  int32_t m_State;
  ModdingAPI::Exposed::AuroraElectrolizer* m_LocalElectrolizer;
  float m_DistortionTime;
  float m_DistortionTimer;
  float m_VSyncTime;
  float m_VSyncTimer;
  float m_VSyncPrev;
  float m_VSyncNext;
  float m_DefaultDistortion;
  float m_InspectDistortion;
  float m_InspectDistortionTarget;
  ModdingAPI::Exposed::UnityEngine::Renderer* m_LocalDisplay;
  ModdingAPI::Exposed::UnityEngine::Color m_OriginalColor;
  ModdingAPI::Exposed::UnityEngine::Color m_NewColor;
  System_String* m_LanguageUsedForLocalize;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraScreenDisplay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16A33D0))(this);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraScreenDisplay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16A39E0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraScreenDisplay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16A3B90))(this);
  }
  void InitializeDisplayInterface() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraScreenDisplay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16A4090))(this);
  }
  void UpdateDigitalEffect() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraScreenDisplay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16A44C0))(this);
  }
  void UpdateAnalogEffect() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraScreenDisplay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16A47E0))(this);
  }
  void UpdateInteractiveScrolling() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraScreenDisplay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16A4AA0))(this);
  }
  void SetDisplayActive(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraScreenDisplay*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16A4BB0))(this, enable);
  }
  void SetState(int32_t state) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraScreenDisplay*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16A4ED0))(this, state);
  }
  System_String* GetPrefabName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::AuroraScreenDisplay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16A51F0))(this);
  }
  void OnCameraPositionStateChange(int32_t newCameraState) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraScreenDisplay*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16A52C0))(this, newCameraState);
  }
  void OnTextScrolled() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraScreenDisplay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16A5540))(this);
  }
  void RefreshLocalization() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraScreenDisplay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16A5600))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraScreenDisplay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16A57C0))(this);
  }
};
}