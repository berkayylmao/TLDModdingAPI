// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Matrix4x4.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector4.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Bounds.hpp"


namespace ModdingAPI::Exposed {
struct __UIPanel_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* list;
  ModdingAPI::Exposed::System::Single_array* mTemp;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* mCorners;
  int32_t mUpdateFrame;
};

struct __UIPanel_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_isAnchoredHorizontally;
  VirtualInvokeData _5_get_isAnchoredVertically;
  VirtualInvokeData _6_get_canBeAnchored;
  VirtualInvokeData _7_get_alpha;
  VirtualInvokeData _8_set_alpha;
  VirtualInvokeData _9_CalculateFinalAlpha;
  VirtualInvokeData _10_get_localCorners;
  VirtualInvokeData _11_get_worldCorners;
  VirtualInvokeData _12_Invalidate;
  VirtualInvokeData _13_GetSides;
  VirtualInvokeData _14_OnEnable;
  VirtualInvokeData _15_OnInit;
  VirtualInvokeData _16_OnDisable;
  VirtualInvokeData _17_OnAnchor;
  VirtualInvokeData _18_SetRect;
  VirtualInvokeData _19_ParentHasChanged;
  VirtualInvokeData _20_OnStart;
  VirtualInvokeData _21_OnUpdate;
  VirtualInvokeData _22_CalculateConstrainOffset;
};

struct __UIPanel_Il2CppClass {
  Il2CppClass_1 _1;
  __UIPanel_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __UIPanel_Il2CppVtbl vtbl;
};

class UIPanel {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C6A028;
  static inline    UIPanel* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C71380;
  static inline    __UIPanel_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline UIPanel* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (UIPanel**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __UIPanel_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__UIPanel_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __UIPanel_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UIRect::AnchorPoint* leftAnchor;
  ModdingAPI::Exposed::UIRect::AnchorPoint* rightAnchor;
  ModdingAPI::Exposed::UIRect::AnchorPoint* bottomAnchor;
  ModdingAPI::Exposed::UIRect::AnchorPoint* topAnchor;
  int32_t updateAnchors;
  ModdingAPI::Exposed::UnityEngine::GameObject* mGo;
  ModdingAPI::Exposed::UnityEngine::Transform* mTrans;
  ModdingAPI::Exposed::BetterList_T_* mChildren;
  bool mChanged;
  bool mStarted;
  bool mParentFound;
  bool UIRect_mUpdateAnchors;
  int32_t UIRect_mUpdateFrame;
  bool UIRect_mAnchorsCached;
  ModdingAPI::Exposed::UIRoot* UIRect_mRoot;
  ModdingAPI::Exposed::UIRect* UIRect_mParent;
  bool UIRect_mRootSet;
  ModdingAPI::Exposed::UnityEngine::Camera* mCam;
  float finalAlpha;
  ModdingAPI::Exposed::UIPanel::OnGeometryUpdated* onGeometryUpdated;
  bool showInPanelTool;
  bool generateNormals;
  bool widgetsAreStatic;
  bool cullWhileDragging;
  bool alwaysOnScreen;
  bool anchorOffset;
  bool softBorderPadding;
  int32_t renderQueue;
  int32_t startingRenderQueue;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* widgets;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* drawCalls;
  ModdingAPI::Exposed::UnityEngine::Matrix4x4 worldToLocal;
  ModdingAPI::Exposed::UnityEngine::Vector4 drawCallClipRange;
  ModdingAPI::Exposed::UIPanel::OnClippingMoved* onClipMove;
  ModdingAPI::Exposed::UnityEngine::Texture2D* mClipTexture;
  float mAlpha;
  int32_t mClipping;
  ModdingAPI::Exposed::UnityEngine::Vector4 mClipRange;
  ModdingAPI::Exposed::UnityEngine::Vector2 mClipSoftness;
  int32_t mDepth;
  int32_t mSortingOrder;
  bool mRebuild;
  bool mResized;
  ModdingAPI::Exposed::UnityEngine::Vector2 mClipOffset;
  float mCullTime;
  float mUpdateTime;
  int32_t mMatrixFrame;
  int32_t mAlphaFrameID;
  int32_t mLayer;
  ModdingAPI::Exposed::UnityEngine::Vector2 mMin;
  ModdingAPI::Exposed::UnityEngine::Vector2 mMax;
  bool mHalfPixelOffset;
  bool mSortWidgets;
  bool mUpdateScroll;
  ModdingAPI::Exposed::UIPanel* mParentPanel;
  ModdingAPI::Exposed::UIDrawCall::OnRenderCallback* mOnRender;
  bool mForced;

  // Member methods:
  bool get_canBeAnchored() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BFB50))(this);
  }
  float get_alpha() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3FFC40))(this);
  }
  void set_alpha(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BFB60))(this, value);
  }
  int32_t get_depth() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7AA5D0))(this);
  }
  void set_depth(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BFC50))(this, value);
  }
  int32_t get_sortingOrder() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BFE30))(this);
  }
  void set_sortingOrder(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BFE40))(this, value);
  }
  float get_width() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BFFF0))(this);
  }
  float get_height() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C0010))(this);
  }
  bool get_halfPixelOffset() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x79CCE0))(this);
  }
  bool get_usedForUI() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C0030))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_drawCallOffset() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C0150))(this);
  }
  int32_t get_clipping() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x400B90))(this);
  }
  void set_clipping(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C05A0))(this, value);
  }
  ModdingAPI::Exposed::UIPanel* get_parentPanel() {
    return reinterpret_cast<ModdingAPI::Exposed::UIPanel*(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x400370))(this);
  }
  int32_t get_clipCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C05C0))(this);
  }
  bool get_hasClipping() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C06A0))(this);
  }
  bool get_hasCumulativeClipping() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C06C0))(this);
  }
  bool get_clipsChildren() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C06C0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_clipOffset() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C06E0))(this);
  }
  void set_clipOffset(ModdingAPI::Exposed::UnityEngine::Vector2 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C0700))(this, value);
  }
  void InvalidateClipping() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C0860))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Texture2D* get_clipTexture() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Texture2D*(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E0E0))(this);
  }
  void set_clipTexture(ModdingAPI::Exposed::UnityEngine::Texture2D* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*, ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C0AC0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector4 get_clipRange() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector4(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C0B90))(this);
  }
  void set_clipRange(ModdingAPI::Exposed::UnityEngine::Vector4 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*, ModdingAPI::Exposed::UnityEngine::Vector4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C0BA0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector4 get_baseClipRegion() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector4(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C0B90))(this);
  }
  void set_baseClipRegion(ModdingAPI::Exposed::UnityEngine::Vector4 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*, ModdingAPI::Exposed::UnityEngine::Vector4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C0BC0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector4 get_finalClipRegion() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector4(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C0E80))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_clipSoftness() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C0F40))(this);
  }
  void set_clipSoftness(ModdingAPI::Exposed::UnityEngine::Vector2 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C0F60))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3_array* get_localCorners() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3_array*(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C1060))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3_array* get_worldCorners() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3_array*(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C1450))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3_array* GetSides(ModdingAPI::Exposed::UnityEngine::Transform* relativeTo) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3_array*(__fastcall*)(ModdingAPI::Exposed::UIPanel*, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C1D80))(this, relativeTo);
  }
  void Invalidate(bool includeChildren) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C26E0))(this, includeChildren);
  }
  float CalculateFinalAlpha(int32_t frameID) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UIPanel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C2700))(this, frameID);
  }
  void SetRect(float x, float y, float width, float height) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C2830))(this, x, y, width, height);
  }
  bool IsVisible(ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b, ModdingAPI::Exposed::UnityEngine::Vector3 c, ModdingAPI::Exposed::UnityEngine::Vector3 d) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIPanel*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C2C30))(this, a, b, c, d);
  }
  bool IsVisible(ModdingAPI::Exposed::UnityEngine::Vector3 worldPos) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIPanel*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C3430))(this, worldPos);
  }
  bool IsVisible(ModdingAPI::Exposed::UIWidget* w) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIPanel*, ModdingAPI::Exposed::UIWidget*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C3530))(this, w);
  }
  bool Affects(ModdingAPI::Exposed::UIWidget* w) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIPanel*, ModdingAPI::Exposed::UIWidget*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C3760))(this, w);
  }
  void RebuildAllDrawCalls() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C3900))(this);
  }
  void SetDirty() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C3910))(this);
  }
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C3A90))(this);
  }
  void FindParent() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C3D10))(this);
  }
  void ParentHasChanged() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C3EC0))(this);
  }
  void OnStart() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C3EE0))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C3F50))(this);
  }
  void OnInit() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C3FC0))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C43C0))(this);
  }
  void UpdateTransformMatrix() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C46D0))(this);
  }
  void OnAnchor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C48A0))(this);
  }
  void LateUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C5370))(this);
  }
  void UpdateSelf() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C5770))(this);
  }
  void SortWidgets() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C5A10))(this);
  }
  void FillAllDrawCalls() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C5BB0))(this);
  }
  bool FillDrawCall(ModdingAPI::Exposed::UIDrawCall* dc) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIPanel*, ModdingAPI::Exposed::UIDrawCall*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C6290))(this, dc);
  }
  void UpdateDrawCalls() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C65C0))(this);
  }
  void UpdateLayers() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C6F50))(this);
  }
  void UpdateWidgets() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C72E0))(this);
  }
  ModdingAPI::Exposed::UIDrawCall* FindDrawCall(ModdingAPI::Exposed::UIWidget* w) {
    return reinterpret_cast<ModdingAPI::Exposed::UIDrawCall*(__fastcall*)(ModdingAPI::Exposed::UIPanel*, ModdingAPI::Exposed::UIWidget*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C7610))(this, w);
  }
  void AddWidget(ModdingAPI::Exposed::UIWidget* w) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*, ModdingAPI::Exposed::UIWidget*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C78E0))(this, w);
  }
  void RemoveWidget(ModdingAPI::Exposed::UIWidget* w) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*, ModdingAPI::Exposed::UIWidget*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C7B00))(this, w);
  }
  void Refresh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C7C60))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 CalculateConstrainOffset(ModdingAPI::Exposed::UnityEngine::Vector2 min, ModdingAPI::Exposed::UnityEngine::Vector2 max) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UIPanel*, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C7D90))(this, min, max);
  }
  bool ConstrainTargetToBounds(ModdingAPI::Exposed::UnityEngine::Transform* target, ModdingAPI::Exposed::UnityEngine::Bounds targetBounds, bool immediate) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIPanel*, ModdingAPI::Exposed::UnityEngine::Transform*, ModdingAPI::Exposed::UnityEngine::Bounds, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C7F70))(this, target, targetBounds, immediate);
  }
  bool ConstrainTargetToBounds(ModdingAPI::Exposed::UnityEngine::Transform* target, bool immediate) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIPanel*, ModdingAPI::Exposed::UnityEngine::Transform*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C8510))(this, target, immediate);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 GetWindowSize() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C8910))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 GetViewSize() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C8AB0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C8B70))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> list = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->list; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Single_array*> mTemp = __CppStaticProperty<ModdingAPI::Exposed::System::Single_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->mTemp; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector3_array*> mCorners = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector3_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->mCorners; }
  );
  static inline __CppStaticProperty<int32_t> mUpdateFrame = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->mUpdateFrame; }
  );

  // Static methods:
  static inline int32_t get_nextUnusedDepth() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BF9A0))();
  }
  static inline int32_t CompareFunc(ModdingAPI::Exposed::UIPanel* a, ModdingAPI::Exposed::UIPanel* b) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UIPanel*, ModdingAPI::Exposed::UIPanel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BFE60))(a, b);
  }
  static inline ModdingAPI::Exposed::UIPanel* Find(ModdingAPI::Exposed::UnityEngine::Transform* trans) {
    return reinterpret_cast<ModdingAPI::Exposed::UIPanel*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C85A0))(trans);
  }
  static inline ModdingAPI::Exposed::UIPanel* Find(ModdingAPI::Exposed::UnityEngine::Transform* trans, bool createIfMissing) {
    return reinterpret_cast<ModdingAPI::Exposed::UIPanel*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Transform*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C8640))(trans, createIfMissing);
  }
  static inline ModdingAPI::Exposed::UIPanel* Find(ModdingAPI::Exposed::UnityEngine::Transform* trans, bool createIfMissing, int32_t layer) {
    return reinterpret_cast<ModdingAPI::Exposed::UIPanel*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Transform*, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C86F0))(trans, createIfMissing, layer);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C8F40))();
  }
};
}