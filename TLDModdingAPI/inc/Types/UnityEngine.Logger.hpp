// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::UnityEngine {
struct __Logger_Il2CppStaticFields {
};

struct __Logger_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Log;
  VirtualInvokeData _5_Log;
  VirtualInvokeData _6_Log;
  VirtualInvokeData _7_Log;
  VirtualInvokeData _8_LogWarning;
  VirtualInvokeData _9_LogError;
  VirtualInvokeData _10_LogFormat;
  VirtualInvokeData _11_LogException;
  VirtualInvokeData _12_LogFormat;
  VirtualInvokeData _13_LogException;
  VirtualInvokeData _14_get_logHandler;
  VirtualInvokeData _15_set_logHandler;
  VirtualInvokeData _16_get_logEnabled;
  VirtualInvokeData _17_set_logEnabled;
  VirtualInvokeData _18_get_filterLogType;
  VirtualInvokeData _19_set_filterLogType;
  VirtualInvokeData _20_IsLogTypeAllowed;
};

struct __Logger_Il2CppClass {
  Il2CppClass_1 _1;
  __Logger_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Logger_Il2CppVtbl vtbl;
};

class Logger {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C7CF18;
  static inline    __Logger_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Logger_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Logger_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Logger_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::UnityEngine::ILogHandler* _logHandler_k__BackingField;
  bool _logEnabled_k__BackingField;
  int32_t _filterLogType_k__BackingField;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::UnityEngine::ILogHandler* logHandler) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Logger*, ModdingAPI::Exposed::UnityEngine::ILogHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1063C90))(this, logHandler);
  }
  ModdingAPI::Exposed::UnityEngine::ILogHandler* get_logHandler() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::ILogHandler*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Logger*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x666540))(this);
  }
  void set_logHandler(ModdingAPI::Exposed::UnityEngine::ILogHandler* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Logger*, ModdingAPI::Exposed::UnityEngine::ILogHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, value);
  }
  bool get_logEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Logger*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE2FF70))(this);
  }
  void set_logEnabled(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Logger*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5161B0))(this, value);
  }
  int32_t get_filterLogType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Logger*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE8330))(this);
  }
  void set_filterLogType(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Logger*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36E9D0))(this, value);
  }
  bool IsLogTypeAllowed(int32_t logType) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Logger*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1063CA0))(this, logType);
  }
  void Log(int32_t logType, Il2CppObject* message) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Logger*, int32_t, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1063DD0))(this, logType, message);
  }
  void Log(int32_t logType, Il2CppObject* message, ModdingAPI::Exposed::UnityEngine::Object* context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Logger*, int32_t, Il2CppObject*, ModdingAPI::Exposed::UnityEngine::Object*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1063F30))(this, logType, message, context);
  }
  void Log(int32_t logType, System_String* tag, Il2CppObject* message, ModdingAPI::Exposed::UnityEngine::Object* context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Logger*, int32_t, System_String*, Il2CppObject*, ModdingAPI::Exposed::UnityEngine::Object*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1064090))(this, logType, tag, message, context);
  }
  void Log(System_String* tag, Il2CppObject* message) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Logger*, System_String*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1064260))(this, tag, message);
  }
  void LogWarning(System_String* tag, Il2CppObject* message) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Logger*, System_String*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1064420))(this, tag, message);
  }
  void LogError(System_String* tag, Il2CppObject* message) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Logger*, System_String*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10645E0))(this, tag, message);
  }
  void LogFormat(int32_t logType, System_String* format, ModdingAPI::Exposed::System::Object_array* args) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Logger*, int32_t, System_String*, ModdingAPI::Exposed::System::Object_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1064790))(this, logType, format, args);
  }
  void LogException(ModdingAPI::Exposed::System::Exception* exception) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Logger*, ModdingAPI::Exposed::System::Exception*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1064870))(this, exception);
  }
  void LogFormat(int32_t logType, ModdingAPI::Exposed::UnityEngine::Object* context, System_String* format, ModdingAPI::Exposed::System::Object_array* args) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Logger*, int32_t, ModdingAPI::Exposed::UnityEngine::Object*, System_String*, ModdingAPI::Exposed::System::Object_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1064920))(this, logType, context, format, args);
  }
  void LogException(ModdingAPI::Exposed::System::Exception* exception, ModdingAPI::Exposed::UnityEngine::Object* context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Logger*, ModdingAPI::Exposed::System::Exception*, ModdingAPI::Exposed::UnityEngine::Object*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1064A00))(this, exception, context);
  }

  // Static methods:
  static inline System_String* GetString(Il2CppObject* message) {
    return reinterpret_cast<System_String*(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1063CD0))(message);
  }
};
}