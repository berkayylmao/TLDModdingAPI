// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Xml.LineInfo.hpp"


namespace ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl {
struct __NodeData_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData* s_None;
};

struct __NodeData_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_System_IComparable_CompareTo;
};

struct __NodeData_Il2CppClass {
  Il2CppClass_1 _1;
  __NodeData_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __NodeData_Il2CppVtbl vtbl;
};

class NodeData {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C7FAE0;
  static inline    __NodeData_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __NodeData_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__NodeData_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __NodeData_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t type;
  System_String* localName;
  System_String* prefix;
  System_String* ns;
  System_String* nameWPrefix;
  System_String* value;
  ModdingAPI::Exposed::System::Char_array* chars;
  int32_t valueStartPos;
  int32_t valueLength;
  ModdingAPI::Exposed::System::Xml::LineInfo lineInfo;
  ModdingAPI::Exposed::System::Xml::LineInfo lineInfo2;
  wchar_t quoteChar;
  int32_t depth;
  bool isEmptyOrDefault;
  int32_t entityId;
  bool xmlContextPushed;
  ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData* nextAttrValueChunk;
  Il2CppObject* schemaType;
  Il2CppObject* typedValue;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3710))(this);
  }
  int32_t get_LineNo() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319990))(this);
  }
  int32_t get_LinePos() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3199A0))(this);
  }
  bool get_IsEmptyElement() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3730))(this);
  }
  void set_IsEmptyElement(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3740))(this, value);
  }
  bool get_IsDefaultAttribute() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3750))(this);
  }
  void set_IsDefaultAttribute(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3740))(this, value);
  }
  bool get_ValueBuffered() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3760))(this);
  }
  System_String* get_StringValue() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3770))(this);
  }
  void TrimSpacesInValue() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C37B0))(this);
  }
  void Clear(int32_t type) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3920))(this, type);
  }
  void ClearName() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C39F0))(this);
  }
  void SetLineInfo(int32_t lineNo, int32_t linePos) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3AC0))(this, lineNo, linePos);
  }
  void SetLineInfo2(int32_t lineNo, int32_t linePos) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3AD0))(this, lineNo, linePos);
  }
  void SetValueNode(int32_t type, System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3AE0))(this, type, value);
  }
  void SetValueNode(int32_t type, ModdingAPI::Exposed::System::Char_array* chars, int32_t startPos, int32_t len) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*, int32_t, ModdingAPI::Exposed::System::Char_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3B10))(this, type, chars, startPos, len);
  }
  void SetNamedNode(int32_t type, System_String* localName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3B60))(this, type, localName);
  }
  void SetNamedNode(int32_t type, System_String* localName, System_String* prefix, System_String* nameWPrefix) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*, int32_t, System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3C20))(this, type, localName, prefix, nameWPrefix);
  }
  void SetValue(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3D00))(this, value);
  }
  void SetValue(ModdingAPI::Exposed::System::Char_array* chars, int32_t startPos, int32_t len) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*, ModdingAPI::Exposed::System::Char_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3D10))(this, chars, startPos, len);
  }
  void OnBufferInvalidated() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3D30))(this);
  }
  void CopyTo(int32_t valueOffset, ModdingAPI::Exposed::System::Text::StringBuilder* sb) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*, int32_t, ModdingAPI::Exposed::System::Text::StringBuilder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3D80))(this, valueOffset, sb);
  }
  System_String* GetNameWPrefix(ModdingAPI::Exposed::System::Xml::XmlNameTable* nt) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*, ModdingAPI::Exposed::System::Xml::XmlNameTable*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3E20))(this, nt);
  }
  System_String* CreateNameWPrefix(ModdingAPI::Exposed::System::Xml::XmlNameTable* nt) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*, ModdingAPI::Exposed::System::Xml::XmlNameTable*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3F10))(this, nt);
  }
  int32_t System::IComparable::CompareTo(Il2CppObject* obj) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3FF0))(this, obj);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*> s_None = __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_None; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData* get_None() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::NodeData*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3580))();
  }
};
}