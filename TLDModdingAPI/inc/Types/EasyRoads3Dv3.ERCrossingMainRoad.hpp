// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed::EasyRoads3Dv3 {
struct __ERCrossingMainRoad_Il2CppStaticFields {
};

struct __ERCrossingMainRoad_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ERCrossingMainRoad_Il2CppClass {
  Il2CppClass_1 _1;
  __ERCrossingMainRoad_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ERCrossingMainRoad_Il2CppVtbl vtbl;
};

class ERCrossingMainRoad {
public:
  // Il2Cpp fields:
  __ERCrossingMainRoad_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::EasyRoads3Dv3::ERModularBase* baseScript;
  double roadType1;
  int32_t roadTypeInt1;
  double roadType2;
  int32_t roadTypeInt2;
  double roadType3;
  int32_t roadTypeInt3;
  float indent1;
  float indent2;
  float roadWidth1;
  float roadWidth2;
  float roadWidth3;
  bool tCrossing;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* leftOuter1;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* rightOuter1;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* leftOuterUV1;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* rightOuterUV1;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* leftOuter2;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* rightOuter2;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* leftOuterUV2;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* rightOuterUV2;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* leftOuter3;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* rightOuter3;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* leftOuterUV3;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* rightOuterUV3;
  ModdingAPI::Exposed::UnityEngine::Material* sourceMaterial;
  ModdingAPI::Exposed::UnityEngine::Material* sourceMaterial1;
  ModdingAPI::Exposed::UnityEngine::Material* targetMaterial;
  float bottom2;
  float bottom2Inner;
  float bottom3;
  float bottom3Inner;
  float top2;
  float top2Inner;
  float top3;
  float top3Inner;
  float left2;
  float left3;
  float right2;
  float right3;
  int32_t vec2Count;
  int32_t vec3Count;
  float uvStart1;
  float uvEnd1;
  float uvStart2;
  float uvEnd2;
  ModdingAPI::Exposed::UnityEngine::Vector2 rightTopL;
  ModdingAPI::Exposed::UnityEngine::Vector2 rightTopR;
  ModdingAPI::Exposed::UnityEngine::Vector2 rightBottomL;
  ModdingAPI::Exposed::UnityEngine::Vector2 rightBottomR;
  ModdingAPI::Exposed::UnityEngine::Vector2 leftTopL;
  ModdingAPI::Exposed::UnityEngine::Vector2 leftTopR;
  ModdingAPI::Exposed::UnityEngine::Vector2 leftBottomL;
  ModdingAPI::Exposed::UnityEngine::Vector2 leftBottomR;
  float rightLeftUV;
  float rightRightUV;
  float leftLeftUV;
  float leftRightUV;
  float bottomuvInner2;
  float topuvInner2;
  float innerHeight2;
  float outerHeight2;
  float bottomuvInner3;
  float topuvInner3;
  float innerHeight3;
  float outerHeight3;
  float rightInnerStretch;
  float leftInnerStretch;
  ModdingAPI::Exposed::UnityEngine::Material* mat1;
  ModdingAPI::Exposed::UnityEngine::Material* mat2;
  ModdingAPI::Exposed::UnityEngine::Material* mat3;
  System_String* name;

  // Member methods:
  void OCCCCCCDCC() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingMainRoad*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4A5630))(this);
  }
  void Clear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingMainRoad*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4A75D0))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* Triangulate(ModdingAPI::Exposed::System::Collections::Generic::List_T_* vecs, ModdingAPI::Exposed::System::Collections::Generic::List_T_* edges) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingMainRoad*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4A78B0))(this, vecs, edges);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingMainRoad*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4A89D0))(this);
  }
};
}