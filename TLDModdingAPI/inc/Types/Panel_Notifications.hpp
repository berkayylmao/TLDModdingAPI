// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __Panel_Notifications_Il2CppStaticFields {
};

struct __Panel_Notifications_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Panel_Notifications_Il2CppClass {
  Il2CppClass_1 _1;
  __Panel_Notifications_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Panel_Notifications_Il2CppVtbl vtbl;
};

class Panel_Notifications {
public:
  // Il2Cpp fields:
  __Panel_Notifications_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::Notifications* m_Notifications;
  ModdingAPI::Exposed::ButtonLegendContainer* m_ButtonLegendContainer;
  ModdingAPI::Exposed::UnityEngine::Transform* m_NotificationsParent;
  ModdingAPI::Exposed::UILabel* m_Title;
  ModdingAPI::Exposed::UITexture* m_Background;
  ModdingAPI::Exposed::UIPanel* m_ScrollablePanel;
  ModdingAPI::Exposed::UILabel* m_ScrollableText;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Scrollbar;
  ModdingAPI::Exposed::UISprite* m_LoadingSprite;
  int32_t m_TitleFontSize;
  int32_t m_TitleFontSizeCyrillic;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ScreenPips;
  System_String* m_ScreenPipsOutline;
  System_String* m_ScreenPipsFilled;
  int32_t m_PipSpacing;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_NextButton;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_PrevButton;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TellMeMoreButton;
  int32_t m_NotificationIndex;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_NotificationList;
  System_String* m_TellMeMoreUrl;
  float m_ScrollablePanelHeight;
  bool m_WasContinuePressedWhenEnabled;
  bool m_WasEscapePressedWhenEnabled;
  bool m_WasMoreInfoPressedWhenEnabled;
  ModdingAPI::Exposed::UILabel* m_NextButtonLabel;
  ModdingAPI::Exposed::UISlider* m_ScrollbarSlider;
  ModdingAPI::Exposed::UISprite_array* m_Pips;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A58520))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A58800))(this);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x165DF10))(this);
  }
  void EnableIfPendingNotifications(int32_t opts) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A58D00))(this, opts);
  }
  void Enable(bool enabled, int32_t opts) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A58D40))(this, enabled, opts);
  }
  bool HasNotifications(int32_t opts) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A58F80))(this, opts);
  }
  void OnClickNext() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A59030))(this);
  }
  void OnClickPrevious() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A59210))(this);
  }
  void OnClickTellMeMore() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A59380))(this);
  }
  void OnScrollbarUp() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A59460))(this);
  }
  void OnScrollbarDown() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A59580))(this);
  }
  void OnScrollbarChange() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A596A0))(this);
  }
  System_String* GetNextButtonText() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A59740))(this);
  }
  void Populate(int32_t notificationIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A59830))(this, notificationIndex);
  }
  void SetBackground(ModdingAPI::Exposed::UnityEngine::Texture2D* tex, System_String* url) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*, ModdingAPI::Exposed::UnityEngine::Texture2D*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A59C40))(this, tex, url);
  }
  void SetScrollableText(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A59FF0))(this, text);
  }
  void SetTellMeMoreButton(System_String* url) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A5A230))(this, url);
  }
  void SetTitle(System_String* title) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A5A360))(this, title);
  }
  void SetupPips(int32_t index, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A5A670))(this, index, count);
  }
  void UpdateButtonLegend() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A5A920))(this);
  }
  void UpdateScrollbarSlider() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A5AC50))(this);
  }
  void UpdateScrollInput() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A5AFD0))(this);
  }
  bool IsLoading() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A5B130))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A5B1E0))(this);
  }
  void _SetBackground_b__43_0(ModdingAPI::Exposed::UnityEngine::Networking::UnityWebRequest* response) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*, ModdingAPI::Exposed::UnityEngine::Networking::UnityWebRequest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A5B340))(this, response);
  }
  void _SetBackground_b__43_1(ModdingAPI::Exposed::UnityEngine::Networking::UnityWebRequest* response) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Notifications*, ModdingAPI::Exposed::UnityEngine::Networking::UnityWebRequest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A5B690))(this, response);
  }
};
}