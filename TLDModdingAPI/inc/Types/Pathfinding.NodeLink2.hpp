// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed::Pathfinding {
struct __NodeLink2_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* reference;
  ModdingAPI::Exposed::UnityEngine::Color GizmosColor;
  ModdingAPI::Exposed::UnityEngine::Color GizmosColorSelected;
};

struct __NodeLink2_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_OnEnable;
  VirtualInvokeData _5_OnDisable;
  VirtualInvokeData _6_OnPostScan;
  VirtualInvokeData _7_OnPreScan;
  VirtualInvokeData _8_OnLatePostScan;
  VirtualInvokeData _9_OnPostCacheLoad;
  VirtualInvokeData _10_OnGraphsPreUpdate;
  VirtualInvokeData _11_OnGraphsPostUpdate;
  VirtualInvokeData _12_OnDrawGizmosSelected;
};

struct __NodeLink2_Il2CppClass {
  Il2CppClass_1 _1;
  __NodeLink2_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __NodeLink2_Il2CppVtbl vtbl;
};

class NodeLink2 {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C481F8;
  static inline    __NodeLink2_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __NodeLink2_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__NodeLink2_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __NodeLink2_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::Pathfinding::GraphModifier* GraphModifier_prev;
  ModdingAPI::Exposed::Pathfinding::GraphModifier* GraphModifier_next;
  ModdingAPI::Exposed::UnityEngine::Transform* end;
  float costFactor;
  bool oneWay;
  ModdingAPI::Exposed::Pathfinding::PointNode* startNode;
  ModdingAPI::Exposed::Pathfinding::PointNode* endNode;
  ModdingAPI::Exposed::Pathfinding::MeshNode* connectedNode1;
  ModdingAPI::Exposed::Pathfinding::MeshNode* connectedNode2;
  ModdingAPI::Exposed::UnityEngine::Vector3 clamped1;
  ModdingAPI::Exposed::UnityEngine::Vector3 clamped2;
  bool postScanCalled;

  // Member methods:
  ModdingAPI::Exposed::UnityEngine::Transform* get_StartTransform() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Transform*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4117E0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Transform* get_EndTransform() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Transform*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110B0))(this);
  }
  ModdingAPI::Exposed::Pathfinding::GraphNode* get_StartNode() {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::GraphNode*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319970))(this);
  }
  ModdingAPI::Exposed::Pathfinding::GraphNode* get_EndNode() {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::GraphNode*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319960))(this);
  }
  void OnPostScan() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2538130))(this);
  }
  void InternalOnPostScan() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25383F0))(this);
  }
  void OnGraphsPostUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2538C80))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2538DA0))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2538F30))(this);
  }
  void RemoveConnections(ModdingAPI::Exposed::Pathfinding::GraphNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*, ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2539310))(this, node);
  }
  void ContextApplyForce() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2539340))(this);
  }
  void Apply(bool forceNewCheck) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25394C0))(this, forceNewCheck);
  }
  void DrawCircle(ModdingAPI::Exposed::UnityEngine::Vector3 o, float r, int32_t detail, ModdingAPI::Exposed::UnityEngine::Color col) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*, ModdingAPI::Exposed::UnityEngine::Vector3, float, int32_t, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x253A410))(this, o, r, detail, col);
  }
  void DrawGizmoBezier(ModdingAPI::Exposed::UnityEngine::Vector3 p1, ModdingAPI::Exposed::UnityEngine::Vector3 p2) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x253A770))(this, p1, p2);
  }
  void OnDrawGizmosSelected() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x253ABD0))(this);
  }
  void OnDrawGizmos() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x253ABE0))(this);
  }
  void OnDrawGizmos(bool selected) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x253ABF0))(this, selected);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x204A9D0))(this);
  }
  bool _OnPostScan_b__20_0(bool force) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NodeLink2*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x253B850))(this, force);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> reference = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->reference; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color> GizmosColor = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color>(
   []() { return &GetStaticClassInstance()->pStaticFields->GizmosColor; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color> GizmosColorSelected = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color>(
   []() { return &GetStaticClassInstance()->pStaticFields->GizmosColorSelected; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::Pathfinding::NodeLink2* GetNodeLink(ModdingAPI::Exposed::Pathfinding::GraphNode* node) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::NodeLink2*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2538010))(node);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x253B6A0))();
  }
};
}