// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Runtime.Serialization.StreamingContext.hpp"


namespace ModdingAPI::Exposed::System::Resources {
struct __ResourceManager_Il2CppStaticFields {
  int32_t MagicNumber;
  int32_t HeaderVersionNumber;
  ModdingAPI::Exposed::System::Type* _minResourceSet;
  System_String* ResReaderTypeName;
  System_String* ResSetTypeName;
  System_String* MscorlibName;
  int32_t DEBUG;
};

struct __ResourceManager_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_BaseName;
  VirtualInvokeData _5_GetResourceFileName;
  VirtualInvokeData _6_GetResourceSet;
  VirtualInvokeData _7_InternalGetResourceSet;
  VirtualInvokeData _8_GetString;
};

struct __ResourceManager_Il2CppClass {
  Il2CppClass_1 _1;
  __ResourceManager_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ResourceManager_Il2CppVtbl vtbl;
};

class ResourceManager {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C41C50;
  static inline    __ResourceManager_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ResourceManager_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ResourceManager_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ResourceManager_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  System_String* BaseNameField;
  ModdingAPI::Exposed::System::Collections::Hashtable* ResourceSets;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* _resourceSets;
  System_String* moduleDir;
  ModdingAPI::Exposed::System::Reflection::Assembly* MainAssembly;
  ModdingAPI::Exposed::System::Type* _locationInfo;
  ModdingAPI::Exposed::System::Type* _userResourceSet;
  ModdingAPI::Exposed::System::Globalization::CultureInfo* _neutralResourcesCulture;
  ModdingAPI::Exposed::System::Resources::ResourceManager::CultureNameResourceSetPair* _lastUsedResourceCache;
  bool _ignoreCase;
  bool UseManifest;
  bool UseSatelliteAssem;
  int32_t _fallbackLoc;
  ModdingAPI::Exposed::System::Version* _satelliteContractVersion;
  bool _lookedForSatelliteContractVersion;
  ModdingAPI::Exposed::System::Reflection::Assembly* _callingAssembly;
  ModdingAPI::Exposed::System::Reflection::RuntimeAssembly* m_callingAssembly;
  ModdingAPI::Exposed::System::Resources::IResourceGroveler* resourceGroveler;

  // Member methods:
  void Init() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Resources::ResourceManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7289F0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Resources::ResourceManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x728BC0))(this);
  }
  void ::ctor(System_String* baseName, ModdingAPI::Exposed::System::Reflection::Assembly* assembly) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Resources::ResourceManager*, System_String*, ModdingAPI::Exposed::System::Reflection::Assembly*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x728EA0))(this, baseName, assembly);
  }
  void OnDeserializing(ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Resources::ResourceManager*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7291C0))(this, ctx);
  }
  void OnDeserialized(ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Resources::ResourceManager*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7291E0))(this, ctx);
  }
  void OnSerializing(ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Resources::ResourceManager*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0x729680))(this, ctx);
  }
  void CommonAssemblyInit() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Resources::ResourceManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7297E0))(this);
  }
  System_String* get_BaseName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Resources::ResourceManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  int32_t get_FallbackLocation() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Resources::ResourceManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5F11E0))(this);
  }
  System_String* GetResourceFileName(ModdingAPI::Exposed::System::Globalization::CultureInfo* culture) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Resources::ResourceManager*, ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x729CA0))(this, culture);
  }
  ModdingAPI::Exposed::System::Resources::ResourceSet* GetFirstResourceSet(ModdingAPI::Exposed::System::Globalization::CultureInfo* culture) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Resources::ResourceSet*(__fastcall*)(ModdingAPI::Exposed::System::Resources::ResourceManager*, ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x729EC0))(this, culture);
  }
  ModdingAPI::Exposed::System::Resources::ResourceSet* GetResourceSet(ModdingAPI::Exposed::System::Globalization::CultureInfo* culture, bool createIfNotExists, bool tryParents) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Resources::ResourceSet*(__fastcall*)(ModdingAPI::Exposed::System::Resources::ResourceManager*, ModdingAPI::Exposed::System::Globalization::CultureInfo*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x72A400))(this, culture, createIfNotExists, tryParents);
  }
  ModdingAPI::Exposed::System::Resources::ResourceSet* InternalGetResourceSet(ModdingAPI::Exposed::System::Globalization::CultureInfo* culture, bool createIfNotExists, bool tryParents) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Resources::ResourceSet*(__fastcall*)(ModdingAPI::Exposed::System::Resources::ResourceManager*, ModdingAPI::Exposed::System::Globalization::CultureInfo*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x72A7D0))(this, culture, createIfNotExists, tryParents);
  }
  ModdingAPI::Exposed::System::Resources::ResourceSet* InternalGetResourceSet(ModdingAPI::Exposed::System::Globalization::CultureInfo* requestedCulture, bool createIfNotExists, bool tryParents, int32_t stackMark) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Resources::ResourceSet*(__fastcall*)(ModdingAPI::Exposed::System::Resources::ResourceManager*, ModdingAPI::Exposed::System::Globalization::CultureInfo*, bool, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x72A800))(this, requestedCulture, createIfNotExists, tryParents, stackMark);
  }
  void SetAppXConfiguration() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Resources::ResourceManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  System_String* GetString(System_String* name, ModdingAPI::Exposed::System::Globalization::CultureInfo* culture) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Resources::ResourceManager*, System_String*, ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x72BCC0))(this, name, culture);
  }

  // Static fields:
  static inline __CppStaticProperty<int32_t> MagicNumber = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->MagicNumber; }
  );
  static inline __CppStaticProperty<int32_t> HeaderVersionNumber = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->HeaderVersionNumber; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Type*> _minResourceSet = __CppStaticProperty<ModdingAPI::Exposed::System::Type*>(
   []() { return &GetStaticClassInstance()->pStaticFields->_minResourceSet; }
  );
  static inline __CppStaticProperty<System_String*> ResReaderTypeName = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->ResReaderTypeName; }
  );
  static inline __CppStaticProperty<System_String*> ResSetTypeName = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->ResSetTypeName; }
  );
  static inline __CppStaticProperty<System_String*> MscorlibName = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->MscorlibName; }
  );
  static inline __CppStaticProperty<int32_t> DEBUG = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->DEBUG; }
  );

  // Static methods:
  static inline void AddResourceSet(ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* localResourceSets, System_String* cultureName, ModdingAPI::Exposed::System::Resources::ResourceSet* rs) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*, System_String*, ModdingAPI::Exposed::System::Resources::ResourceSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x72AF30))(localResourceSets, cultureName, rs);
  }
  static inline ModdingAPI::Exposed::System::Version* GetSatelliteContractVersion(ModdingAPI::Exposed::System::Reflection::Assembly* a) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Version*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::Assembly*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x72B150))(a);
  }
  static inline bool CompareNames(System_String* asmTypeName1, System_String* typeName2, ModdingAPI::Exposed::System::Reflection::AssemblyName* asmName2) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, System_String*, ModdingAPI::Exposed::System::Reflection::AssemblyName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x72B790))(asmTypeName1, typeName2, asmName2);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x72C1A0))();
  }
};
}