// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Quaternion.hpp"


namespace ModdingAPI::Exposed {
struct __CameraGlobalRT_Il2CppStaticFields {
};

struct __CameraGlobalRT_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __CameraGlobalRT_Il2CppClass {
  Il2CppClass_1 _1;
  __CameraGlobalRT_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CameraGlobalRT_Il2CppVtbl vtbl;
};

class CameraGlobalRT {
public:
  // Il2Cpp fields:
  __CameraGlobalRT_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::Camera* m_WorldCamera;
  ModdingAPI::Exposed::UnityEngine::Camera* m_WeaponCamera;
  ModdingAPI::Exposed::UnityEngine::Camera* m_InspectCamera;
  ModdingAPI::Exposed::UnityEngine::Camera* m_ImageEffectCamera;
  int32_t m_RenderTextureSizePadding;
  float m_SsaoFieldOfViewScalar;
  ModdingAPI::Exposed::UnityEngine::Camera* m_OverrideCamera;
  bool m_OverrideCameraParamsOnly;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_OriginalPosition;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_OriginalLocalPosition;
  ModdingAPI::Exposed::UnityEngine::Quaternion m_OriginalRotation;
  float m_OriginalFieldOfView;
  float m_OriginalNearClipPlane;
  float m_OriginalFarClipPlane;
  ModdingAPI::Exposed::UnityEngine::Camera* m_Camera;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* m_MainRenderTexture;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* m_InspectRenderTexture;
  int32_t m_LastWidth;
  int32_t m_LastHeight;
  int32_t m_OriginalClearFlags;
  bool m_Rendered;
  ModdingAPI::Exposed::UnityEngine::Material* m_MainBlitMaterial;
  ModdingAPI::Exposed::UITexture* m_UITextureForInspect;
  bool m_IsRendering;
  bool m_HighResRender;
  int32_t m_HighResCanvasX;
  int32_t m_HighResCanvasY;

  // Member methods:
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ECB080))(this);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ECB110))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ECB130))(this);
  }
  void OnPreRender() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ECB460))(this);
  }
  void RenderScene(ModdingAPI::Exposed::UnityEngine::RenderTexture* targetRenderTexture, int32_t width, int32_t height, bool renderWeaponCamera) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ECC460))(this, targetRenderTexture, width, height, renderWeaponCamera);
  }
  void InspectCameraToUITexture(ModdingAPI::Exposed::UITexture* texture, int32_t paddedWidth, int32_t paddedHeight, int32_t width, int32_t height) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*, ModdingAPI::Exposed::UITexture*, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ECC7E0))(this, texture, paddedWidth, paddedHeight, width, height);
  }
  void OnRenderImage(ModdingAPI::Exposed::UnityEngine::RenderTexture* source, ModdingAPI::Exposed::UnityEngine::RenderTexture* destination) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ECC8A0))(this, source, destination);
  }
  ModdingAPI::Exposed::UnityEngine::RenderTexture* GetRenderTexture(int32_t width, int32_t height) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::RenderTexture*(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ECC980))(this, width, height);
  }
  ModdingAPI::Exposed::UnityEngine::RenderTexture* GetTemporaryRenderTexture(int32_t width, int32_t height) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::RenderTexture*(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ECCC20))(this, width, height);
  }
  void RenderCamera(ModdingAPI::Exposed::UnityEngine::Camera* camera, ModdingAPI::Exposed::UnityEngine::RenderTexture* target, int32_t width, int32_t height) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*, ModdingAPI::Exposed::UnityEngine::Camera*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ECCC70))(this, camera, target, width, height);
  }
  void MaybeRenderInspectCamera(int32_t paddedWidth, int32_t paddedHeight, int32_t width, int32_t height) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ECD000))(this, paddedWidth, paddedHeight, width, height);
  }
  void ScaledBlit(ModdingAPI::Exposed::UnityEngine::RenderTexture* source, ModdingAPI::Exposed::UnityEngine::RenderTexture* destination) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ECD740))(this, source, destination);
  }
  void ReleaseMainRenderTarget() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ECDB90))(this);
  }
  void ReleaseInspectRenderTargets() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ECDCA0))(this);
  }
  void StopRendering() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ECDE10))(this);
  }
  void StartRendering() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ECDE20))(this);
  }
  ModdingAPI::Exposed::UnityEngine::RenderTexture* GetRenderTexture() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::RenderTexture*(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x307640))(this);
  }
  void HighResRender(bool isHighRes) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19C6FC0))(this, isHighRes);
  }
  int32_t GetRenderTextureSizePadding() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8A0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraGlobalRT*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ECDF90))(this);
  }

  // Static methods:
  static inline void OnResourceAvailabilityChanged(bool amConstrained) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ECDE30))(amConstrained);
  }
};
}