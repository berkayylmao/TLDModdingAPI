// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Globalization {
struct __DateTimeFormatInfoScanner_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* s_knownWords;
};

struct __DateTimeFormatInfoScanner_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __DateTimeFormatInfoScanner_Il2CppClass {
  Il2CppClass_1 _1;
  __DateTimeFormatInfoScanner_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __DateTimeFormatInfoScanner_Il2CppVtbl vtbl;
};

class DateTimeFormatInfoScanner {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C6A4A0;
  static inline    __DateTimeFormatInfoScanner_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __DateTimeFormatInfoScanner_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__DateTimeFormatInfoScanner_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __DateTimeFormatInfoScanner_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_dateWords;
  int32_t m_ymdFlags;

  // Member methods:
  void AddDateWordOrPostfix(System_String* formatPostfix, System_String* str) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfoScanner*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8EB30))(this, formatPostfix, str);
  }
  int32_t AddDateWords(System_String* pattern, int32_t index, System_String* formatPostfix) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfoScanner*, System_String*, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8EEA0))(this, pattern, index, formatPostfix);
  }
  void AddIgnorableSymbols(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfoScanner*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8F290))(this, text);
  }
  void ScanDateWord(System_String* pattern) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfoScanner*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8F440))(this, pattern);
  }
  ModdingAPI::Exposed::System::String_array* GetDateWordsOfDTFI(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi) {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfoScanner*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8F6C0))(this, dtfi);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfoScanner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF90160))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> s_knownWords = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_knownWords; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* get_KnownWords() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8E480))();
  }
  static inline int32_t SkipWhiteSpacesAndNonLetter(System_String* pattern, int32_t currentIndex) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8EA20))(pattern, currentIndex);
  }
  static inline int32_t ScanRepeatChar(System_String* pattern, wchar_t ch, int32_t index, int32_t count) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*, wchar_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8F220))(pattern, ch, index, count);
  }
  static inline int32_t GetFormatFlagGenitiveMonth(ModdingAPI::Exposed::System::String_array* monthNames, ModdingAPI::Exposed::System::String_array* genitveMonthNames, ModdingAPI::Exposed::System::String_array* abbrevMonthNames, ModdingAPI::Exposed::System::String_array* genetiveAbbrevMonthNames) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::System::String_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8FAB0))(monthNames, genitveMonthNames, abbrevMonthNames, genetiveAbbrevMonthNames);
  }
  static inline int32_t GetFormatFlagUseSpaceInMonthNames(ModdingAPI::Exposed::System::String_array* monthNames, ModdingAPI::Exposed::System::String_array* genitveMonthNames, ModdingAPI::Exposed::System::String_array* abbrevMonthNames, ModdingAPI::Exposed::System::String_array* genetiveAbbrevMonthNames) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::System::String_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8FB00))(monthNames, genitveMonthNames, abbrevMonthNames, genetiveAbbrevMonthNames);
  }
  static inline int32_t GetFormatFlagUseSpaceInDayNames(ModdingAPI::Exposed::System::String_array* dayNames, ModdingAPI::Exposed::System::String_array* abbrevDayNames) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::System::String_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8FBC0))(dayNames, abbrevDayNames);
  }
  static inline int32_t GetFormatFlagUseHebrewCalendar(int32_t calID) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8FC00))(calID);
  }
  static inline bool EqualStringArrays(ModdingAPI::Exposed::System::String_array* array1, ModdingAPI::Exposed::System::String_array* array2) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::System::String_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8FC10))(array1, array2);
  }
  static inline bool ArrayElementsHaveSpace(ModdingAPI::Exposed::System::String_array* array) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::String_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8FCE0))(array);
  }
  static inline bool ArrayElementsBeginWithDigit(ModdingAPI::Exposed::System::String_array* array) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::String_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8FE20))(array);
  }
};
}