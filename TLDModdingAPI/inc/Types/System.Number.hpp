// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::System::Decimal.hpp"
#include "ModdingAPI::Exposed::System::Number::NumberBuffer.hpp"
#include "ModdingAPI.Exposed.System.Decimal.hpp"


namespace ModdingAPI::Exposed::System {
struct __Number_Il2CppStaticFields {
};

struct __Number_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Number_Il2CppClass {
  Il2CppClass_1 _1;
  __Number_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Number_Il2CppVtbl vtbl;
};

class Number {
public:
  // Il2Cpp fields:
  __Number_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline bool NumberBufferToDecimal(uint8_t* number, ModdingAPI::Exposed::System::Decimal value) {
    return reinterpret_cast<bool(__fastcall*)(uint8_t*, ModdingAPI::Exposed::System::Decimal)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCDFEF0))(number, value);
  }
  static inline bool NumberBufferToDouble(uint8_t* number, double value) {
    return reinterpret_cast<bool(__fastcall*)(uint8_t*, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCDFF00))(number, value);
  }
  static inline System_String* FormatDecimal(ModdingAPI::Exposed::System::Decimal value, System_String* format, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* info) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Decimal, System_String*, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCDFF60))(value, format, info);
  }
  static inline System_String* FormatDouble(double value, System_String* format, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* info) {
    return reinterpret_cast<System_String*(__fastcall*)(double, System_String*, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE0100))(value, format, info);
  }
  static inline System_String* FormatInt32(int32_t value, System_String* format, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* info) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t, System_String*, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE01C0))(value, format, info);
  }
  static inline System_String* FormatUInt32(uint32_t value, System_String* format, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* info) {
    return reinterpret_cast<System_String*(__fastcall*)(uint32_t, System_String*, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE03B0))(value, format, info);
  }
  static inline System_String* FormatInt64(int64_t value, System_String* format, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* info) {
    return reinterpret_cast<System_String*(__fastcall*)(int64_t, System_String*, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE0590))(value, format, info);
  }
  static inline System_String* FormatUInt64(uint64_t value, System_String* format, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* info) {
    return reinterpret_cast<System_String*(__fastcall*)(uint64_t, System_String*, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE0780))(value, format, info);
  }
  static inline System_String* FormatSingle(float value, System_String* format, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* info) {
    return reinterpret_cast<System_String*(__fastcall*)(float, System_String*, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE0960))(value, format, info);
  }
  static inline bool HexNumberToInt32(ModdingAPI::Exposed::System::Number::NumberBuffer number, int32_t value) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Number::NumberBuffer, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE0A20))(number, value);
  }
  static inline bool HexNumberToInt64(ModdingAPI::Exposed::System::Number::NumberBuffer number, int64_t value) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Number::NumberBuffer, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE0AA0))(number, value);
  }
  static inline bool HexNumberToUInt32(ModdingAPI::Exposed::System::Number::NumberBuffer number, uint32_t value) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Number::NumberBuffer, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE0B60))(number, value);
  }
  static inline bool HexNumberToUInt64(ModdingAPI::Exposed::System::Number::NumberBuffer number, uint64_t value) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Number::NumberBuffer, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE0BE0))(number, value);
  }
  static inline bool IsWhite(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE0C70))(ch);
  }
  static inline bool NumberToInt32(ModdingAPI::Exposed::System::Number::NumberBuffer number, int32_t value) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Number::NumberBuffer, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE0C90))(number, value);
  }
  static inline bool NumberToInt64(ModdingAPI::Exposed::System::Number::NumberBuffer number, int64_t value) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Number::NumberBuffer, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE0D00))(number, value);
  }
  static inline bool NumberToUInt32(ModdingAPI::Exposed::System::Number::NumberBuffer number, uint32_t value) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Number::NumberBuffer, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE0D80))(number, value);
  }
  static inline bool NumberToUInt64(ModdingAPI::Exposed::System::Number::NumberBuffer number, uint64_t value) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Number::NumberBuffer, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE0DE0))(number, value);
  }
  static inline wchar_t* MatchChars(wchar_t* p, System_String* str) {
    return reinterpret_cast<wchar_t*(__fastcall*)(wchar_t*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE0E50))(p, str);
  }
  static inline wchar_t* MatchChars(wchar_t* p, wchar_t* str) {
    return reinterpret_cast<wchar_t*(__fastcall*)(wchar_t*, wchar_t*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE0EA0))(p, str);
  }
  static inline ModdingAPI::Exposed::System::Decimal ParseDecimal(System_String* value, int32_t options, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* numfmt) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Decimal(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE0EE0))(value, options, numfmt);
  }
  static inline double ParseDouble(System_String* value, int32_t options, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* numfmt) {
    return reinterpret_cast<double(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE10A0))(value, options, numfmt);
  }
  static inline int32_t ParseInt32(System_String* s, int32_t style, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* info) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE13B0))(s, style, info);
  }
  static inline int64_t ParseInt64(System_String* value, int32_t options, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* numfmt) {
    return reinterpret_cast<int64_t(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE1640))(value, options, numfmt);
  }
  static inline bool ParseNumber(wchar_t* str, int32_t options, ModdingAPI::Exposed::System::Number::NumberBuffer number, ModdingAPI::Exposed::System::Text::StringBuilder* sb, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* numfmt, bool parseDecimal) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t*, int32_t, ModdingAPI::Exposed::System::Number::NumberBuffer, ModdingAPI::Exposed::System::Text::StringBuilder*, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE18F0))(str, options, number, sb, numfmt, parseDecimal);
  }
  static inline float ParseSingle(System_String* value, int32_t options, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* numfmt) {
    return reinterpret_cast<float(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE22F0))(value, options, numfmt);
  }
  static inline uint32_t ParseUInt32(System_String* value, int32_t options, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* numfmt) {
    return reinterpret_cast<uint32_t(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE2660))(value, options, numfmt);
  }
  static inline uint64_t ParseUInt64(System_String* value, int32_t options, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* numfmt) {
    return reinterpret_cast<uint64_t(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE2900))(value, options, numfmt);
  }
  static inline void StringToNumber(System_String* str, int32_t options, ModdingAPI::Exposed::System::Number::NumberBuffer number, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* info, bool parseDecimal) {
    reinterpret_cast<void(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Number::NumberBuffer, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE2BB0))(str, options, number, info, parseDecimal);
  }
  static inline bool TrailingZeros(System_String* s, int32_t index) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE2D30))(s, index);
  }
  static inline bool TryParseDecimal(System_String* value, int32_t options, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* numfmt, ModdingAPI::Exposed::System::Decimal result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*, ModdingAPI::Exposed::System::Decimal)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE2D90))(value, options, numfmt, result);
  }
  static inline bool TryParseDouble(System_String* value, int32_t options, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* numfmt, double result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE2F40))(value, options, numfmt, result);
  }
  static inline bool TryParseInt32(System_String* s, int32_t style, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* info, int32_t result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE3120))(s, style, info, result);
  }
  static inline bool TryParseInt64(System_String* s, int32_t style, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* info, int64_t result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE3390))(s, style, info, result);
  }
  static inline bool TryParseSingle(System_String* value, int32_t options, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* numfmt, float result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE3590))(value, options, numfmt, result);
  }
  static inline bool TryParseUInt32(System_String* s, int32_t style, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* info, uint32_t result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE3790))(s, style, info, result);
  }
  static inline bool TryParseUInt64(System_String* s, int32_t style, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* info, uint64_t result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE3A00))(s, style, info, result);
  }
  static inline bool TryStringToNumber(System_String* str, int32_t options, ModdingAPI::Exposed::System::Number::NumberBuffer number, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* numfmt, bool parseDecimal) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Number::NumberBuffer, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE3C90))(str, options, number, numfmt, parseDecimal);
  }
  static inline bool TryStringToNumber(System_String* str, int32_t options, ModdingAPI::Exposed::System::Number::NumberBuffer number, ModdingAPI::Exposed::System::Text::StringBuilder* sb, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* numfmt, bool parseDecimal) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Number::NumberBuffer, ModdingAPI::Exposed::System::Text::StringBuilder*, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCE3D20))(str, options, number, sb, numfmt, parseDecimal);
  }
};
}