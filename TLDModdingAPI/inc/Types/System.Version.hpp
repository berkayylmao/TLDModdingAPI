// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::System::Version::VersionResult.hpp"


namespace ModdingAPI::Exposed::System {
struct __Version_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Char_array* SeparatorsArray;
};

struct __Version_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Clone;
  VirtualInvokeData _5_CompareTo;
  VirtualInvokeData _6_CompareTo;
  VirtualInvokeData _7_Equals;
};

struct __Version_Il2CppClass {
  Il2CppClass_1 _1;
  __Version_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Version_Il2CppVtbl vtbl;
};

class Version {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C93558;
  static inline    Version* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C22AB8;
  static inline    __Version_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline Version* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (Version**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __Version_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Version_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Version_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t _Major;
  int32_t _Minor;
  int32_t _Build;
  int32_t _Revision;

  // Member methods:
  void ::ctor(int32_t major, int32_t minor, int32_t build, int32_t revision) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Version*, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1058090))(this, major, minor, build, revision);
  }
  void ::ctor(int32_t major, int32_t minor, int32_t build) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Version*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1058270))(this, major, minor, build);
  }
  void ::ctor(int32_t major, int32_t minor) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Version*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1058400))(this, major, minor);
  }
  void ::ctor(System_String* version) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Version*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1058530))(this, version);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Version*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1058710))(this);
  }
  int32_t get_Major() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Version*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311060))(this);
  }
  int32_t get_Minor() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Version*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311080))(this);
  }
  int32_t get_Build() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Version*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FED20))(this);
  }
  int32_t get_Revision() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Version*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36E9C0))(this);
  }
  Il2CppObject* Clone() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Version*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1058720))(this);
  }
  int32_t CompareTo(Il2CppObject* version) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Version*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1058880))(this, version);
  }
  int32_t CompareTo(ModdingAPI::Exposed::System::Version* value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Version*, ModdingAPI::Exposed::System::Version*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10589F0))(this, value);
  }
  bool Equals(Il2CppObject* obj) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Version*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1058B80))(this, obj);
  }
  bool Equals(ModdingAPI::Exposed::System::Version* obj) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Version*, ModdingAPI::Exposed::System::Version*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1058D00))(this, obj);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Version*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1058DF0))(this);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Version*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1058E20))(this);
  }
  System_String* ToString(int32_t fieldCount) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Version*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1058F60))(this, fieldCount);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*> SeparatorsArray = __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->SeparatorsArray; }
  );

  // Static methods:
  static inline void AppendPositiveNumber(int32_t num, ModdingAPI::Exposed::System::Text::StringBuilder* sb) {
    reinterpret_cast<void(__fastcall*)(int32_t, ModdingAPI::Exposed::System::Text::StringBuilder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1059450))(num, sb);
  }
  static inline ModdingAPI::Exposed::System::Version* Parse(System_String* input) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Version*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10594F0))(input);
  }
  static inline bool TryParseVersion(System_String* version, ModdingAPI::Exposed::System::Version::VersionResult result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Version::VersionResult)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1059610))(version, result);
  }
  static inline bool TryParseComponent(System_String* component, System_String* componentName, ModdingAPI::Exposed::System::Version::VersionResult result, int32_t parsedComponent) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, System_String*, ModdingAPI::Exposed::System::Version::VersionResult, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1059B50))(component, componentName, result, parsedComponent);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1059FB0))();
  }
};
}