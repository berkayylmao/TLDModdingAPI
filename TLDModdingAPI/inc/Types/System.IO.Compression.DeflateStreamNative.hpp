// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Runtime.InteropServices.GCHandle.hpp"


namespace ModdingAPI::Exposed::System::IO::Compression {
struct __DeflateStreamNative_Il2CppStaticFields {
};

struct __DeflateStreamNative_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __DeflateStreamNative_Il2CppClass {
  Il2CppClass_1 _1;
  __DeflateStreamNative_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __DeflateStreamNative_Il2CppVtbl vtbl;
};

class DeflateStreamNative {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C79670;
  static inline    __DeflateStreamNative_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __DeflateStreamNative_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__DeflateStreamNative_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __DeflateStreamNative_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative::UnmanagedReadOrWrite* feeder;
  ModdingAPI::Exposed::System::IO::Stream* base_stream;
  ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative::SafeDeflateStreamHandle* z_stream;
  ModdingAPI::Exposed::System::Runtime::InteropServices::GCHandle data;
  bool disposed;
  ModdingAPI::Exposed::System::Byte_array* io_buffer;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void Finalize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC2AA20))(this);
  }
  void Dispose(bool disposing) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC2AB00))(this, disposing);
  }
  void Flush() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC2ABF0))(this);
  }
  int32_t ReadZStream(intptr_t buffer, int32_t length) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative*, intptr_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC2ACF0))(this, buffer, length);
  }
  void WriteZStream(intptr_t buffer, int32_t length) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative*, intptr_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC2ADF0))(this, buffer, length);
  }
  int32_t UnmanagedRead(intptr_t buffer, int32_t length) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative*, intptr_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC2B110))(this, buffer, length);
  }
  int32_t UnmanagedWrite(intptr_t buffer, int32_t length) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative*, intptr_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC2B4C0))(this, buffer, length);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative* Create(ModdingAPI::Exposed::System::IO::Stream* compressedStream, int32_t mode, bool gzip) {
    return reinterpret_cast<ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative*(__fastcall*)(ModdingAPI::Exposed::System::IO::Stream*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC2A6C0))(compressedStream, mode, gzip);
  }
  static inline int32_t UnmanagedRead(intptr_t buffer, int32_t length, intptr_t data) {
    return reinterpret_cast<int32_t(__fastcall*)(intptr_t, int32_t, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC2AEF0))(buffer, length, data);
  }
  static inline int32_t UnmanagedWrite(intptr_t buffer, int32_t length, intptr_t data) {
    return reinterpret_cast<int32_t(__fastcall*)(intptr_t, int32_t, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC2B280))(buffer, length, data);
  }
  static inline void CheckResult(int32_t result, System_String* where) {
    reinterpret_cast<void(__fastcall*)(int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC2B640))(result, where);
  }
  static inline ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative::SafeDeflateStreamHandle* CreateZStream(int32_t compress, bool gzip, ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative::UnmanagedReadOrWrite* feeder, intptr_t data) {
    return reinterpret_cast<ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative::SafeDeflateStreamHandle*(__fastcall*)(int32_t, bool, ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative::UnmanagedReadOrWrite*, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC2B7A0))(compress, gzip, feeder, data);
  }
  static inline int32_t CloseZStream(intptr_t stream) {
    return reinterpret_cast<int32_t(__fastcall*)(intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC2B9E0))(stream);
  }
  static inline int32_t Flush(ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative::SafeDeflateStreamHandle* stream) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative::SafeDeflateStreamHandle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC2B9F0))(stream);
  }
  static inline int32_t ReadZStream(ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative::SafeDeflateStreamHandle* stream, intptr_t buffer, int32_t length) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative::SafeDeflateStreamHandle*, intptr_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC2BA90))(stream, buffer, length);
  }
  static inline int32_t WriteZStream(ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative::SafeDeflateStreamHandle* stream, intptr_t buffer, int32_t length) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::Compression::DeflateStreamNative::SafeDeflateStreamHandle*, intptr_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC2BB10))(stream, buffer, length);
  }
};
}