// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.DateTime.hpp"


namespace ModdingAPI::Exposed {
struct __SaveGameSlots_Il2CppStaticFields {
  System_String* AUTOSAVE_SLOT_NAME;
  System_String* SANDBOX_SLOT_PREFIX;
  System_String* STORY_SLOT_PREFIX;
  System_String* CHALLENGE_SLOT_PREFIX;
  System_String* CHECKPOINT_SLOT_PREFIX;
  System_String* AUTOSAVE_SLOT_PREFIX;
  System_String* QUICKSAVE_SLOT_PREFIX;
  int32_t MAX_AUTOSAVES;
  int32_t MAX_SAVESLOTS;
  ModdingAPI::Exposed::SlotData* m_AutoSaveSlot;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_SaveSlots;
  ModdingAPI::Exposed::System::Collections::Generic::HashSet_T_* m_InvalidSlots;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_SlotDisplayNames;
};

struct __SaveGameSlots_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SaveGameSlots_Il2CppClass {
  Il2CppClass_1 _1;
  __SaveGameSlots_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SaveGameSlots_Il2CppVtbl vtbl;
};

class SaveGameSlots {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C72E70;
  static inline    __SaveGameSlots_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __SaveGameSlots_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__SaveGameSlots_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __SaveGameSlots_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SaveGameSlots*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<System_String*> AUTOSAVE_SLOT_NAME = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->AUTOSAVE_SLOT_NAME; }
  );
  static inline __CppStaticProperty<System_String*> SANDBOX_SLOT_PREFIX = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->SANDBOX_SLOT_PREFIX; }
  );
  static inline __CppStaticProperty<System_String*> STORY_SLOT_PREFIX = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->STORY_SLOT_PREFIX; }
  );
  static inline __CppStaticProperty<System_String*> CHALLENGE_SLOT_PREFIX = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->CHALLENGE_SLOT_PREFIX; }
  );
  static inline __CppStaticProperty<System_String*> CHECKPOINT_SLOT_PREFIX = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->CHECKPOINT_SLOT_PREFIX; }
  );
  static inline __CppStaticProperty<System_String*> AUTOSAVE_SLOT_PREFIX = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->AUTOSAVE_SLOT_PREFIX; }
  );
  static inline __CppStaticProperty<System_String*> QUICKSAVE_SLOT_PREFIX = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->QUICKSAVE_SLOT_PREFIX; }
  );
  static inline __CppStaticProperty<int32_t> MAX_AUTOSAVES = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->MAX_AUTOSAVES; }
  );
  static inline __CppStaticProperty<int32_t> MAX_SAVESLOTS = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->MAX_SAVESLOTS; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::SlotData*> m_AutoSaveSlot = __CppStaticProperty<ModdingAPI::Exposed::SlotData*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_AutoSaveSlot; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> m_SaveSlots = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_SaveSlots; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::HashSet_T_*> m_InvalidSlots = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::HashSet_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_InvalidSlots; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> m_SlotDisplayNames = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_SlotDisplayNames; }
  );

  // Static methods:
  static inline void Init() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACB320))();
  }
  static inline void LoadAllSavedGameFiles() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACB490))();
  }
  static inline uint32_t GetUnusedGameId() {
    return reinterpret_cast<uint32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACB630))();
  }
  static inline bool IsValidSavedGameName(System_String* name) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACB7E0))(name);
  }
  static inline bool SaveExists(int32_t slotType, uint32_t gameId) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACBA80))(slotType, gameId);
  }
  static inline void GetSlotDataFor(int32_t slotType, ModdingAPI::Exposed::System::Collections::Generic::List_T_* slots) {
    reinterpret_cast<void(__fastcall*)(int32_t, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACBC50))(slotType, slots);
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::List_T_* GetSortedSaveSlotsForEpisodes(int32_t slotType) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACBE00))(slotType);
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::List_T_* GetSortedSaveSlots(int32_t episode, int32_t slotType) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACC270))(episode, slotType);
  }
  static inline bool SlotsAreLoading(int32_t slotType) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACC6A0))(slotType);
  }
  static inline void SetLoadingPriority(int32_t slotType) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACC7B0))(slotType);
  }
  static inline bool WriteSlotToDisk(System_String* slotName) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACC880))(slotName);
  }
  static inline void WriteSlotToDisk(ModdingAPI::Exposed::SlotData* slot, int32_t timestampState) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SlotData*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACC9B0))(slot, timestampState);
  }
  static inline bool HasSaveSlot(System_String* slotname) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACCBB0))(slotname);
  }
  static inline ModdingAPI::Exposed::System::DateTime GetTimestampForSlot(System_String* slotname) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACCC50))(slotname);
  }
  static inline void AddInvalidSlotName(System_String* name) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACCD70))(name);
  }
  static inline bool CreateSlotFromData(System_String* dataAsString) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACCE50))(dataAsString);
  }
  static inline void AddSlotData(ModdingAPI::Exposed::SlotData* sd) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SlotData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACD160))(sd);
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::List_T_* GetSlotFilesInCreationOrder(System_String* slotname) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACD380))(slotname);
  }
  static inline ModdingAPI::Exposed::SlotData* CreateSlot(System_String* slotname, int32_t gameMode, uint32_t gameId, int32_t episode) {
    return reinterpret_cast<ModdingAPI::Exposed::SlotData*(__fastcall*)(System_String*, int32_t, uint32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACD530))(slotname, gameMode, gameId, episode);
  }
  static inline int32_t GetCurrentBuildChangelistNumber() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACD860))();
  }
  static inline void ClearAutoSave() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACD9F0))();
  }
  static inline bool DeleteSlot(System_String* slotName) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACDAC0))(slotName);
  }
  static inline ModdingAPI::Exposed::SlotData* FindNewestAssociatedSaveSlot(ModdingAPI::Exposed::SlotData* source) {
    return reinterpret_cast<ModdingAPI::Exposed::SlotData*(__fastcall*)(ModdingAPI::Exposed::SlotData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACDD50))(source);
  }
  static inline void RebaseMatchingSaves(ModdingAPI::Exposed::SlotData* source, ModdingAPI::Exposed::SlotData* target) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SlotData*, ModdingAPI::Exposed::SlotData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACE020))(source, target);
  }
  static inline bool HasCheckpointSave(ModdingAPI::Exposed::SlotData* slot) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::SlotData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACE250))(slot);
  }
  static inline void ReassignCheckpointSaves(ModdingAPI::Exposed::SlotData* source, ModdingAPI::Exposed::SlotData* target) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SlotData*, ModdingAPI::Exposed::SlotData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACE450))(source, target);
  }
  static inline void DeleteAllSlotsForGameId(uint32_t gameId) {
    reinterpret_cast<void(__fastcall*)(uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACE660))(gameId);
  }
  static inline void DeleteSlot(ModdingAPI::Exposed::SlotData* slotData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SlotData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACE810))(slotData);
  }
  static inline bool CopyData(System_String* sourceSlotname, System_String* destSlotname, int32_t gameMode) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACEA20))(sourceSlotname, destSlotname, gameMode);
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::List_T_* GetExtraInstancesOfFilename(System_String* slotname, System_String* filename) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACEFD0))(slotname, filename);
  }
  static inline bool HasFilenameInSlot(System_String* slotname, System_String* filename) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACF2B0))(slotname, filename);
  }
  static inline void DeleteFileFromSlot(System_String* slotname, System_String* filename) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACF3A0))(slotname, filename);
  }
  static inline System_String* LoadDataFromSlot(System_String* slotname, System_String* filename) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACF4B0))(slotname, filename);
  }
  static inline System_String* LoadDataFromSlotUsingGuid(System_String* slotname, System_String* guid) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACF640))(slotname, guid);
  }
  static inline bool SaveDataToSlot(int32_t gameMode, int32_t episode, uint32_t saveId, System_String* slotname, System_String* filename, System_String* data) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, uint32_t, System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACF8A0))(gameMode, episode, saveId, slotname, filename, data);
  }
  static inline System_String* BuildSlotName(int32_t episode, int32_t slotType, uint32_t n) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t, int32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACFBB0))(episode, slotType, n);
  }
  static inline int32_t GetSaveSlotTypeFromName(System_String* name) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1ACFEC0))(name);
  }
  static inline System_String* GetSlotPrefix(int32_t slotType) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AD0200))(slotType);
  }
  static inline System_String* GetUserDefinedSlotName(System_String* slotName) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AD0440))(slotName);
  }
  static inline bool SetUserDefinedSlotName(System_String* slotName, System_String* displayName) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AD05A0))(slotName, displayName);
  }
  static inline void SaveUserDefinedSlotName(System_String* slotName, System_String* newUserDefinedName) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AD06A0))(slotName, newUserDefinedName);
  }
  static inline void SetSlotDisplayName(System_String* slotName, System_String* displayName) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AD07C0))(slotName, displayName);
  }
  static inline void ClearSlotDisplayName(System_String* slotName) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AD0970))(slotName);
  }
  static inline void AddGUIDToPrevSceneSave(System_String* slotName, System_String* sceneName, System_String* guid) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AD0AA0))(slotName, sceneName, guid);
  }
  static inline System_String* GetOldestAutosaveName(int32_t episode) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AD0EA0))(episode);
  }
  static inline System_String* GetBaseNameForSave(System_String* name) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AD1150))(name);
  }
  static inline void SetBaseNameForSave(System_String* name, System_String* basename) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AD1200))(name, basename);
  }
  static inline void SetBaseNameForSave(ModdingAPI::Exposed::SlotData* dest, ModdingAPI::Exposed::SlotData* source) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SlotData*, ModdingAPI::Exposed::SlotData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AD13A0))(dest, source);
  }
  static inline int32_t GetNumSaveSlotsInUse() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AD13E0))();
  }
  static inline ModdingAPI::Exposed::SlotData* GetSaveSlotFromName(System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::SlotData*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AD16A0))(name);
  }
  static inline ModdingAPI::Exposed::SaveSlotInfo* CreateSaveSlotInfo(ModdingAPI::Exposed::SlotData* slot) {
    return reinterpret_cast<ModdingAPI::Exposed::SaveSlotInfo*(__fastcall*)(ModdingAPI::Exposed::SlotData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AD1920))(slot);
  }
  static inline uint32_t GetSaveSlotId(System_String* name) {
    return reinterpret_cast<uint32_t(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AD24B0))(name);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AD25F0))();
  }
};
}