// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __AchievementManager_Il2CppStaticFields {
  ModdingAPI::Exposed::AchievementSaveData* m_AchievementSaveData;
  bool s_DebugVerbose;
};

struct __AchievementManager_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __AchievementManager_Il2CppClass {
  Il2CppClass_1 _1;
  __AchievementManager_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AchievementManager_Il2CppVtbl vtbl;
};

class AchievementManager {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C55CB8;
  static inline    __AchievementManager_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __AchievementManager_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__AchievementManager_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __AchievementManager_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  int32_t m_NumDaysSurvived;
  int32_t m_ConsecutiveNightsSurvived;
  int32_t m_FullyHarvestedDeer;
  bool m_StartedNightOutside;
  bool m_WentInsideThisNight;
  bool m_HasFiredGun;
  bool m_HasKilledSomething;
  bool m_LakeRegionAllInteriors;
  bool m_CoastalRegionAllInteriors;
  int32_t m_NumDaysLivingOffLand;
  bool m_UsedRosehipTea;
  bool m_UsedReishiTea;
  bool m_UsedOldMansBeardDressing;
  int32_t m_NumRosehipPlantsHarvested;
  int32_t m_NumReishiPlantsHarvested;
  int32_t m_NumOldMansPlantsHarvested;
  int32_t m_NumCatTailPlantsHarvested;
  int32_t m_NumDaysCalorieStoreAboveZero;
  int32_t m_NumArcheryBooksRead;
  int32_t m_NumCarcassHarvestingBooksRead;
  int32_t m_NumCookingBooksRead;
  int32_t m_NumFireStartingBooksRead;
  int32_t m_NumIceFishingBooksRead;
  int32_t m_NumMendingBooksRead;
  int32_t m_NumRifleFirearmAdvancedBooksRead;
  int32_t m_NumRifleFirearmBooksRead;
  int32_t m_NumRevolverBooksRead;
  int32_t m_NumGunsmithingBooksRead;
  int32_t m_NumImprovisedKnivesCrafted;
  int32_t m_NumImprovisedHatchetsCrafted;
  int32_t m_LongestBurningCampFire;
  bool m_FoundAllCachesEpisodeOne;
  bool m_FoundAllCachesEpisodeTwo;
  int32_t m_NumTimberwolfPacksDefeated;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_MappedRegions;
  bool m_KilledBear;
  bool m_WrappedInFur;
  bool m_CaughtBigFish;
  bool m_StunnedRabitFarAway;
  bool m_ClothingSlotsAllPerfect;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_ChallengeAchievements;
  int32_t m_Version;
  bool m_Inited;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_NumTopLevelIconsPerRegion;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_NumLocationTriggersPerRegion;
  bool m_SaveProfileRequested;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F7920))(this);
  }
  void MaybeSaveProfile() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F7C30))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F7CE0))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F7F30))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F8570))(this, text);
  }
  void UpdateAchievements() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F89E0))(this);
  }
  void UpdateDaysSurvived(int32_t numDays) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F8B00))(this, numDays);
  }
  void SendDeltaDaysSurvived_Sanbox(int32_t numDays) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F9210))(this, numDays);
  }
  void SendDeltaDistanceTravelled(float deltaDistance) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F92A0))(this, deltaDistance);
  }
  void SendBlizzardSurvived() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F9330))(this);
  }
  void SendBearAttackSurvived() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F93C0))(this);
  }
  void SendWolfKill() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F9450))(this);
  }
  void SendWildlifeBowHit() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F94E0))(this);
  }
  void SendWildlifeRifleHit() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F9570))(this);
  }
  void SendWorldExploredUpdate(float percentage) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F9600))(this, percentage);
  }
  void NightStarted() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F9690))(this);
  }
  void NightEnded() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F9780))(this);
  }
  void WentInsideDuringNight() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F99A0))(this);
  }
  void FullyHarvestedDeer() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F99B0))(this);
  }
  void AteFoodItem(ModdingAPI::Exposed::FoodItem* foodItem) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, ModdingAPI::Exposed::FoodItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F9B90))(this, foodItem);
  }
  void KilledBear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void CaughtFish(ModdingAPI::Exposed::GearItem* fishItem) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F9C80))(this, fishItem);
  }
  void MaybeUnlockStoneAgeSniper(float distance) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F9CC0))(this, distance);
  }
  void SetWearingPerfectClothesInAllSlots() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F9CE0))(this);
  }
  void WentToSleep(ModdingAPI::Exposed::GearItem* bedroll) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F9CF0))(this, bedroll);
  }
  void UsedMedicine(ModdingAPI::Exposed::GearItem* medicineItem) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F9EF0))(this, medicineItem);
  }
  void HarvestedPlant(System_String* plantName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FA080))(this, plantName);
  }
  void ResearchedBook(System_String* bookName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FA220))(this, bookName);
  }
  void CraftedItem(System_String* itemName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FA490))(this, itemName);
  }
  void DefeatTimberwolfPack() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FA580))(this);
  }
  void SetLongestBurningCampFire(float hours) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FA590))(this, hours);
  }
  void ExploredNewInterior(System_String* interiorName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FA650))(this, interiorName);
  }
  void SetChallengeAchievementStatus(int32_t type, bool completed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FA760))(this, type, completed);
  }
  bool GetChallengeAchievementStatus(int32_t type) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FA890))(this, type);
  }
  void ResetNumDaysCalorieStoreAboveZero() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FAA50))(this);
  }
  void MaybeUnlockFaithfulCartographer(System_String* sceneName, bool areAllNamedLocationsUnlocked) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FAA60))(this, sceneName, areAllNamedLocationsUnlocked);
  }
  bool IsRegionCompleteFaithfulCartographer(System_String* sceneName) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FAEB0))(this, sceneName);
  }
  void UpdateCacheAchievementInProfile() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FB070))(this);
  }
  bool MaybeReSendUnlockedAchievement(int32_t achievement) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FB4B0))(this, achievement);
  }
  void CheckAchievements() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FB610))(this);
  }
  bool CheckInteriors(System_String* sceneName) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AchievementManager*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FBEB0))(this, sceneName);
  }
  bool CompletedAllChallenges() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FC250))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AchievementManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FC530))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::AchievementSaveData*> m_AchievementSaveData = __CppStaticProperty<ModdingAPI::Exposed::AchievementSaveData*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_AchievementSaveData; }
  );
  static inline __CppStaticProperty<bool> s_DebugVerbose = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_DebugVerbose; }
  );

  // Static methods:
  static inline void UnlockAchievement(int32_t achievement) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FB2B0))(achievement);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x16FCDE0))();
  }
};
}