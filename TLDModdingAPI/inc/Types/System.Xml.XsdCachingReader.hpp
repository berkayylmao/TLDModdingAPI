// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Xml {
struct __XsdCachingReader_Il2CppStaticFields {
};

struct __XsdCachingReader_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Dispose;
  VirtualInvokeData _5_get_Settings;
  VirtualInvokeData _6_get_NodeType;
  VirtualInvokeData _7_get_Name;
  VirtualInvokeData _8_get_LocalName;
  VirtualInvokeData _9_get_NamespaceURI;
  VirtualInvokeData _10_get_Prefix;
  VirtualInvokeData _11_get_HasValue;
  VirtualInvokeData _12_get_Value;
  VirtualInvokeData _13_get_Depth;
  VirtualInvokeData _14_get_BaseURI;
  VirtualInvokeData _15_get_IsEmptyElement;
  VirtualInvokeData _16_get_IsDefault;
  VirtualInvokeData _17_get_SchemaInfo;
  VirtualInvokeData _18_ReadContentAsString;
  VirtualInvokeData _19_get_AttributeCount;
  VirtualInvokeData _20_MoveToAttribute;
  VirtualInvokeData _21_MoveToAttribute;
  VirtualInvokeData _22_MoveToFirstAttribute;
  VirtualInvokeData _23_MoveToNextAttribute;
  VirtualInvokeData _24_MoveToElement;
  VirtualInvokeData _25_ReadAttributeValue;
  VirtualInvokeData _26_Read;
  VirtualInvokeData _27_get_EOF;
  VirtualInvokeData _28_Close;
  VirtualInvokeData _29_get_ReadState;
  VirtualInvokeData _30_get_NameTable;
  VirtualInvokeData _31_LookupNamespace;
  VirtualInvokeData _32_get_CanResolveEntity;
  VirtualInvokeData _33_ResolveEntity;
  VirtualInvokeData _34_MoveToContent;
  VirtualInvokeData _35_ReadStartElement;
  VirtualInvokeData _36_ReadEndElement;
  VirtualInvokeData _37_IsStartElement;
  VirtualInvokeData _38_Dispose;
  VirtualInvokeData _39_get_NamespaceManager;
  VirtualInvokeData _40_get_DtdInfo;
  VirtualInvokeData _41_System_Xml_IXmlLineInfo_get_LineNumber;
  VirtualInvokeData _42_System_Xml_IXmlLineInfo_get_LinePosition;
};

struct __XsdCachingReader_Il2CppClass {
  Il2CppClass_1 _1;
  __XsdCachingReader_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __XsdCachingReader_Il2CppVtbl vtbl;
};

class XsdCachingReader {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C80CE0;
  static inline    __XsdCachingReader_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __XsdCachingReader_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__XsdCachingReader_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __XsdCachingReader_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Xml::XmlReader* coreReader;
  ModdingAPI::Exposed::System::Xml::XmlNameTable* coreReaderNameTable;
  ModdingAPI::Exposed::System::Xml::ValidatingReaderNodeData_array* contentEvents;
  ModdingAPI::Exposed::System::Xml::ValidatingReaderNodeData_array* attributeEvents;
  ModdingAPI::Exposed::System::Xml::ValidatingReaderNodeData* cachedNode;
  int32_t cacheState;
  int32_t contentIndex;
  int32_t attributeCount;
  bool returnOriginalStringValues;
  ModdingAPI::Exposed::System::Xml::CachingEventHandler* cacheHandler;
  int32_t currentAttrIndex;
  int32_t currentContentIndex;
  bool readAhead;
  ModdingAPI::Exposed::System::Xml::IXmlLineInfo* lineInfo;
  ModdingAPI::Exposed::System::Xml::ValidatingReaderNodeData* textNode;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Xml::XmlReader* reader, ModdingAPI::Exposed::System::Xml::IXmlLineInfo* lineInfo, ModdingAPI::Exposed::System::Xml::CachingEventHandler* handlerMethod) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*, ModdingAPI::Exposed::System::Xml::XmlReader*, ModdingAPI::Exposed::System::Xml::IXmlLineInfo*, ModdingAPI::Exposed::System::Xml::CachingEventHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E0060))(this, reader, lineInfo, handlerMethod);
  }
  void Init() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E0150))(this);
  }
  void Reset(ModdingAPI::Exposed::System::Xml::XmlReader* reader) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*, ModdingAPI::Exposed::System::Xml::XmlReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E0310))(this, reader);
  }
  ModdingAPI::Exposed::System::Xml::XmlReaderSettings* get_Settings() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlReaderSettings*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E0320))(this);
  }
  int32_t get_NodeType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E0350))(this);
  }
  System_String* get_Name() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E0370))(this);
  }
  System_String* get_LocalName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E03A0))(this);
  }
  System_String* get_NamespaceURI() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E03C0))(this);
  }
  System_String* get_Prefix() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E03E0))(this);
  }
  bool get_HasValue() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E0400))(this);
  }
  System_String* get_Value() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E04B0))(this);
  }
  int32_t get_Depth() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E04F0))(this);
  }
  System_String* get_BaseURI() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D1200))(this);
  }
  bool get_IsEmptyElement() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this);
  }
  bool get_IsDefault() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this);
  }
  int32_t get_AttributeCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8E0))(this);
  }
  bool MoveToAttribute(System_String* name) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E0510))(this, name);
  }
  void MoveToAttribute(int32_t i) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E0700))(this, i);
  }
  bool MoveToFirstAttribute() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E07F0))(this);
  }
  bool MoveToNextAttribute() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E0840))(this);
  }
  bool MoveToElement() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E08A0))(this);
  }
  bool Read() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E08F0))(this);
  }
  ModdingAPI::Exposed::System::Xml::ValidatingReaderNodeData* RecordTextNode(System_String* textValue, System_String* originalStringValue, int32_t depth, int32_t lineNo, int32_t linePos) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::ValidatingReaderNodeData*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*, System_String*, System_String*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E0CB0))(this, textValue, originalStringValue, depth, lineNo, linePos);
  }
  void SwitchTextNodeAndEndElement(System_String* textValue, System_String* originalStringValue) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E0D10))(this, textValue, originalStringValue);
  }
  void RecordEndElementNode() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E0EA0))(this);
  }
  System_String* ReadOriginalContentAsString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E1050))(this);
  }
  bool get_EOF() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E1070))(this);
  }
  void Close() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E10B0))(this);
  }
  int32_t get_ReadState() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E10F0))(this);
  }
  ModdingAPI::Exposed::System::Xml::XmlNameTable* get_NameTable() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlNameTable*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  System_String* LookupNamespace(System_String* prefix) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E1120))(this, prefix);
  }
  void ResolveEntity() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E1150))(this);
  }
  bool ReadAttributeValue() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E11A0))(this);
  }
  int32_t System::Xml::IXmlLineInfo::get_LineNumber() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E11F0))(this);
  }
  int32_t System::Xml::IXmlLineInfo::get_LinePosition() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E1210))(this);
  }
  void SetToReplayMode() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E1230))(this);
  }
  ModdingAPI::Exposed::System::Xml::XmlReader* GetCoreReader() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlReader*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  ModdingAPI::Exposed::System::Xml::IXmlLineInfo* GetLineInfo() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::IXmlLineInfo*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3199C0))(this);
  }
  void ClearAttributesInfo() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E1260))(this);
  }
  ModdingAPI::Exposed::System::Xml::ValidatingReaderNodeData* AddAttribute(int32_t attIndex) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::ValidatingReaderNodeData*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E1270))(this, attIndex);
  }
  ModdingAPI::Exposed::System::Xml::ValidatingReaderNodeData* AddContent(int32_t nodeType) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::ValidatingReaderNodeData*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E1510))(this, nodeType);
  }
  void RecordAttributes() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E17C0))(this);
  }
  int32_t GetAttributeIndexWithoutPrefix(System_String* name) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E19C0))(this, name);
  }
  int32_t GetAttributeIndexWithPrefix(System_String* name) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E1A70))(this, name);
  }
  ModdingAPI::Exposed::System::Xml::ValidatingReaderNodeData* CreateDummyTextNode(System_String* attributeValue, int32_t depth) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::ValidatingReaderNodeData*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XsdCachingReader*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E1B40))(this, attributeValue, depth);
  }
};
}