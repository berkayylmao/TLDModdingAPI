// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Xml {
struct __XmlWriterSettings_Il2CppStaticFields {
};

struct __XmlWriterSettings_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __XmlWriterSettings_Il2CppClass {
  Il2CppClass_1 _1;
  __XmlWriterSettings_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __XmlWriterSettings_Il2CppVtbl vtbl;
};

class XmlWriterSettings {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C7FE78;
  static inline    __XmlWriterSettings_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __XmlWriterSettings_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__XmlWriterSettings_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __XmlWriterSettings_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  bool useAsync;
  ModdingAPI::Exposed::System::Text::Encoding* encoding;
  bool omitXmlDecl;
  int32_t newLineHandling;
  System_String* newLineChars;
  int32_t indent;
  System_String* indentChars;
  bool newLineOnAttributes;
  bool closeOutput;
  int32_t namespaceHandling;
  int32_t conformanceLevel;
  bool checkCharacters;
  bool writeEndDocumentOnClose;
  int32_t outputMethod;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* cdataSections;
  bool doNotEscapeUriAttributes;
  bool mergeCDataSections;
  System_String* mediaType;
  System_String* docTypeSystem;
  System_String* docTypePublic;
  int32_t standalone;
  bool autoXmlDecl;
  bool isReadOnly;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE080))(this);
  }
  bool get_Async() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33C2C0))(this);
  }
  ModdingAPI::Exposed::System::Text::Encoding* get_Encoding() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::Encoding*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  bool get_OmitXmlDeclaration() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x46FCC0))(this);
  }
  void set_OmitXmlDeclaration(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE2C0))(this, value);
  }
  int32_t get_NewLineHandling() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x37AAF0))(this);
  }
  System_String* get_NewLineChars() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110B0))(this);
  }
  bool get_Indent() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE360))(this);
  }
  void set_Indent(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE370))(this, value);
  }
  System_String* get_IndentChars() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319970))(this);
  }
  bool get_NewLineOnAttributes() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE420))(this);
  }
  bool get_CloseOutput() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE430))(this);
  }
  int32_t get_ConformanceLevel() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383900))(this);
  }
  void set_ConformanceLevel(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE440))(this, value);
  }
  bool get_CheckCharacters() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE510))(this);
  }
  int32_t get_NamespaceHandling() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D900))(this);
  }
  void set_NamespaceHandling(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE520))(this, value);
  }
  bool get_WriteEndDocumentOnClose() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE5F0))(this);
  }
  int32_t get_OutputMethod() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319990))(this);
  }
  void set_OutputMethod(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383940))(this, value);
  }
  ModdingAPI::Exposed::System::Xml::XmlWriterSettings* Clone() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlWriterSettings*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE600))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* get_CDataSectionElements() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383960))(this);
  }
  bool get_DoNotEscapeUriAttributes() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x58F760))(this);
  }
  bool get_MergeCDataSections() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE810))(this);
  }
  System_String* get_MediaType() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319930))(this);
  }
  System_String* get_DocTypeSystem() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319940))(this);
  }
  System_String* get_DocTypePublic() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319950))(this);
  }
  int32_t get_Standalone() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x307620))(this);
  }
  bool get_AutoXmlDeclaration() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE820))(this);
  }
  int32_t get_IndentInternal() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D870))(this);
  }
  bool get_IsQuerySpecific() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE830))(this);
  }
  ModdingAPI::Exposed::System::Xml::XmlWriter* CreateWriter(ModdingAPI::Exposed::System::IO::Stream* output) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlWriter*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*, ModdingAPI::Exposed::System::IO::Stream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE8E0))(this, output);
  }
  ModdingAPI::Exposed::System::Xml::XmlWriter* CreateWriter(ModdingAPI::Exposed::System::IO::TextWriter* output) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlWriter*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*, ModdingAPI::Exposed::System::IO::TextWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DF5D0))(this, output);
  }
  void set_ReadOnly(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DFE30))(this, value);
  }
  void CheckReadOnly(System_String* propertyName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DFE40))(this, propertyName);
  }
  void Initialize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlWriterSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DFF40))(this);
  }
};
}