// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __vp_FPSPlayer_Il2CppStaticFields {
};

struct __vp_FPSPlayer_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __vp_FPSPlayer_Il2CppClass {
  Il2CppClass_1 _1;
  __vp_FPSPlayer_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __vp_FPSPlayer_Il2CppVtbl vtbl;
};

class vp_FPSPlayer {
public:
  // Il2Cpp fields:
  __vp_FPSPlayer_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::vp_FPSCamera* FPSCamera;
  ModdingAPI::Exposed::vp_FPSController* Controller;
  ModdingAPI::Exposed::BloodTrail* m_BloodTrail;
  ModdingAPI::Exposed::vp_Timer* m_ReenableWeaponStatesTimer;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_AvailableWeapons;
  bool m_CrouchToggleOn;
  bool m_MovementInputLastFrame;
  bool m_AltFireReleaseRequiredBeforeZoom;
  bool m_InteractReleaseRequiredBeforeSpearZoom;
  bool m_CancelSpearZoomRequested;
  bool m_InZoom;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_StrafingRightDirection;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_StrafingCenter;
  float m_StrafingDistanceLimit;
  bool m_SpearZoomRequested;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF4B50))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF4C00))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF4CB0))(this);
  }
  void InputWalk() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF5200))(this);
  }
  void InputStrafing() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF52F0))(this);
  }
  void InputJump() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  bool HasHeadRoom() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF53E0))(this);
  }
  bool EnableCrouch(bool enabled) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF5760))(this, enabled);
  }
  bool EnableCrouchImmediate(bool enabled) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF5A20))(this, enabled);
  }
  void InputCrouch() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF5CF0))(this);
  }
  void PullTrigger() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF5DB0))(this);
  }
  void CheckForFireRelease() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF61C0))(this);
  }
  void InputZoom() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF6370))(this);
  }
  bool SetWeapon(int32_t weaponID, ModdingAPI::Exposed::GearItem* gi) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*, int32_t, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF6DB0))(this, weaponID, gi);
  }
  void Reload() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF6E60))(this);
  }
  void CancelZoom() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF7380))(this);
  }
  void MaybeCancelZoomInternal() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF7430))(this);
  }
  void CancelReload() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF7900))(this);
  }
  void SetState(System_String* state, bool isEnabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF7CB0))(this, state, isEnabled);
  }
  bool IsStateEnabled(System_String* state) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF8140))(this, state);
  }
  void UpdateSprintState() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF8230))(this);
  }
  void AllowState(System_String* state, bool isAllowed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF83E0))(this, state, isAllowed);
  }
  void ReenableWeaponStatesIn(float seconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF84D0))(this, seconds);
  }
  void ResetState() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF86C0))(this);
  }
  void SetWeaponAvailable(int32_t weaponID, bool isAvailable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF8960))(this, weaponID, isAvailable);
  }
  bool IsWeaponAvailable(int32_t weaponID) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF8C10))(this, weaponID);
  }
  void SetStrafingParameters(ModdingAPI::Exposed::UnityEngine::Vector3 strafingRightDirection, ModdingAPI::Exposed::UnityEngine::Vector3 strafingCenter, float strafingDistanceLimit) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF8D60))(this, strafingRightDirection, strafingCenter, strafingDistanceLimit);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetStrafingRightDirection() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF8D90))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetStrafingCenter() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BA2400))(this);
  }
  float GetStrafingDistanceLimit() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56F070))(this);
  }
  void HandleBearSpearInput(ModdingAPI::Exposed::PlayerManager* pm) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*, ModdingAPI::Exposed::PlayerManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF8DB0))(this, pm);
  }
  bool ShouldTurnOffZoom() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF9320))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF9610))(this);
  }
  void _ReenableWeaponStatesIn_b__37_0() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF9770))(this);
  }
};
}