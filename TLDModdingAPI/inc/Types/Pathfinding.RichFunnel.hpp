// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"


namespace ModdingAPI::Exposed::Pathfinding {
struct __RichFunnel_Il2CppStaticFields {
};

struct __RichFunnel_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _5_OnEnterPool;
};

struct __RichFunnel_Il2CppClass {
  Il2CppClass_1 _1;
  __RichFunnel_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __RichFunnel_Il2CppVtbl vtbl;
};

class RichFunnel {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C4A2A8;
  static inline    __RichFunnel_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __RichFunnel_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__RichFunnel_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __RichFunnel_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* left;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* right;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* nodes;
  ModdingAPI::Exposed::UnityEngine::Vector3 exactStart;
  ModdingAPI::Exposed::UnityEngine::Vector3 exactEnd;
  ModdingAPI::Exposed::Pathfinding::NavGraph* graph;
  int32_t currentNode;
  ModdingAPI::Exposed::UnityEngine::Vector3 currentPosition;
  int32_t checkForDestroyedNodesCounter;
  ModdingAPI::Exposed::Pathfinding::RichPath* path;
  ModdingAPI::Exposed::System::Int32_array* triBuffer;
  int32_t funnelSimplificationMode;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichFunnel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A7DB0))(this);
  }
  ModdingAPI::Exposed::Pathfinding::RichFunnel* Initialize(ModdingAPI::Exposed::Pathfinding::RichPath* path, ModdingAPI::Exposed::Pathfinding::NavGraph* graph) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::RichFunnel*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichFunnel*, ModdingAPI::Exposed::Pathfinding::RichPath*, ModdingAPI::Exposed::Pathfinding::NavGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A7F60))(this, path, graph);
  }
  void OnEnterPool() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichFunnel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A8080))(this);
  }
  void BuildFunnelCorridor(ModdingAPI::Exposed::System::Collections::Generic::List_T_* nodes, int32_t start, int32_t end) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichFunnel*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A81A0))(this, nodes, start, end);
  }
  void SimplifyPath(ModdingAPI::Exposed::Pathfinding::IRaycastableGraph* graph, ModdingAPI::Exposed::System::Collections::Generic::List_T_* nodes, int32_t start, int32_t end, ModdingAPI::Exposed::System::Collections::Generic::List_T_* result, ModdingAPI::Exposed::UnityEngine::Vector3 startPoint, ModdingAPI::Exposed::UnityEngine::Vector3 endPoint) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichFunnel*, ModdingAPI::Exposed::Pathfinding::IRaycastableGraph*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t, int32_t, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A98F0))(this, graph, nodes, start, end, result, startPoint, endPoint);
  }
  void UpdateFunnelCorridor(int32_t splitIndex, ModdingAPI::Exposed::Pathfinding::TriangleMeshNode* prefix) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichFunnel*, int32_t, ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21AA540))(this, splitIndex, prefix);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 Update(ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::System::Collections::Generic::List_T_* buffer, int32_t numCorners, bool lastCorner, bool requiresRepath) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichFunnel*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21AA8B0))(this, position, buffer, numCorners, lastCorner, requiresRepath);
  }
  void FindWalls(ModdingAPI::Exposed::System::Collections::Generic::List_T_* wallBuffer, float range) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichFunnel*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21AB320))(this, wallBuffer, range);
  }
  void FindWalls(int32_t nodeIndex, ModdingAPI::Exposed::System::Collections::Generic::List_T_* wallBuffer, ModdingAPI::Exposed::UnityEngine::Vector3 position, float range) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichFunnel*, int32_t, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21AB360))(this, nodeIndex, wallBuffer, position, range);
  }
  bool FindNextCorners(ModdingAPI::Exposed::UnityEngine::Vector3 origin, int32_t startIndex, ModdingAPI::Exposed::System::Collections::Generic::List_T_* funnelPath, int32_t numCorners, bool lastCorner) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichFunnel*, ModdingAPI::Exposed::UnityEngine::Vector3, int32_t, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21ABB10))(this, origin, startIndex, funnelPath, numCorners, lastCorner);
  }

  // Static methods:
  static inline void SimplifyPath3(ModdingAPI::Exposed::Pathfinding::IRaycastableGraph* rcg, ModdingAPI::Exposed::System::Collections::Generic::List_T_* nodes, int32_t start, int32_t end, ModdingAPI::Exposed::System::Collections::Generic::List_T_* result, ModdingAPI::Exposed::UnityEngine::Vector3 startPoint, ModdingAPI::Exposed::UnityEngine::Vector3 endPoint, int32_t depth) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::IRaycastableGraph*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t, int32_t, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A8990))(rcg, nodes, start, end, result, startPoint, endPoint, depth);
  }
  static inline void SimplifyPath2(ModdingAPI::Exposed::Pathfinding::IRaycastableGraph* rcg, ModdingAPI::Exposed::System::Collections::Generic::List_T_* nodes, int32_t start, int32_t end, ModdingAPI::Exposed::System::Collections::Generic::List_T_* result, ModdingAPI::Exposed::UnityEngine::Vector3 startPoint, ModdingAPI::Exposed::UnityEngine::Vector3 endPoint) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::IRaycastableGraph*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t, int32_t, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A9330))(rcg, nodes, start, end, result, startPoint, endPoint);
  }
};
}