// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Guid.hpp"


namespace ModdingAPI::Exposed::Mono::Unity {
struct __UnityTlsProvider_Il2CppStaticFields {
};

struct __UnityTlsProvider_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_ID;
  VirtualInvokeData _5_get_Name;
  VirtualInvokeData _6_get_SupportsSslStream;
  VirtualInvokeData _7_get_SupportsConnectionInfo;
  VirtualInvokeData _8_get_SupportsMonoExtensions;
  VirtualInvokeData _9_get_SupportedProtocols;
  VirtualInvokeData _10_CreateSslStream;
  VirtualInvokeData _11_CreateSslStreamInternal;
  VirtualInvokeData _12_ValidateCertificate;
  VirtualInvokeData _13_get_SupportsCleanShutdown;
};

struct __UnityTlsProvider_Il2CppClass {
  Il2CppClass_1 _1;
  __UnityTlsProvider_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __UnityTlsProvider_Il2CppVtbl vtbl;
};

class UnityTlsProvider {
public:
  // Il2Cpp fields:
  __UnityTlsProvider_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member methods:
  System_String* get_Name() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD45100))(this);
  }
  ModdingAPI::Exposed::System::Guid get_ID() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Guid(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD45180))(this);
  }
  bool get_SupportsSslStream() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x403F70))(this);
  }
  bool get_SupportsMonoExtensions() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x403F70))(this);
  }
  bool get_SupportsConnectionInfo() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x403F70))(this);
  }
  bool get_SupportsCleanShutdown() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x403F70))(this);
  }
  int32_t get_SupportedProtocols() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD45230))(this);
  }
  ModdingAPI::Exposed::Mono::Security::Interface::IMonoSslStream* CreateSslStream(ModdingAPI::Exposed::System::IO::Stream* innerStream, bool leaveInnerStreamOpen, ModdingAPI::Exposed::Mono::Security::Interface::MonoTlsSettings* settings) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Security::Interface::IMonoSslStream*(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsProvider*, ModdingAPI::Exposed::System::IO::Stream*, bool, ModdingAPI::Exposed::Mono::Security::Interface::MonoTlsSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD45240))(this, innerStream, leaveInnerStreamOpen, settings);
  }
  ModdingAPI::Exposed::Mono::Security::Interface::IMonoSslStream* CreateSslStreamInternal(ModdingAPI::Exposed::System::Net::Security::SslStream* sslStream, ModdingAPI::Exposed::System::IO::Stream* innerStream, bool leaveInnerStreamOpen, ModdingAPI::Exposed::Mono::Security::Interface::MonoTlsSettings* settings) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Security::Interface::IMonoSslStream*(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsProvider*, ModdingAPI::Exposed::System::Net::Security::SslStream*, ModdingAPI::Exposed::System::IO::Stream*, bool, ModdingAPI::Exposed::Mono::Security::Interface::MonoTlsSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD45260))(this, sslStream, innerStream, leaveInnerStreamOpen, settings);
  }
  bool ValidateCertificate(ModdingAPI::Exposed::Mono::Security::Interface::ICertificateValidator2* validator, System_String* targetHost, bool serverMode, ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509CertificateCollection* certificates, bool wantsChain, ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Chain* chain, int32_t errors, int32_t status11) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsProvider*, ModdingAPI::Exposed::Mono::Security::Interface::ICertificateValidator2*, System_String*, bool, ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509CertificateCollection*, bool, ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Chain*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD45460))(this, validator, targetHost, serverMode, certificates, wantsChain, chain, errors, status11);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
};
}