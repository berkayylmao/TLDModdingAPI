// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __CraftingRequirementContainer_Il2CppStaticFields {
};

struct __CraftingRequirementContainer_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __CraftingRequirementContainer_Il2CppClass {
  Il2CppClass_1 _1;
  __CraftingRequirementContainer_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CraftingRequirementContainer_Il2CppVtbl vtbl;
};

class CraftingRequirementContainer {
public:
  // Il2Cpp fields:
  __CraftingRequirementContainer_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::CraftingRequirementLocation* m_Location;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Materials;
  ModdingAPI::Exposed::CraftingRequirementMultiTool* m_MultiTool;
  ModdingAPI::Exposed::CraftingRequirementTool* m_SingleTool;
  ModdingAPI::Exposed::CraftingRequirementTime* m_Time;
  ModdingAPI::Exposed::CraftingRequirementTimeSelect* m_TimeSelect;
  ModdingAPI::Exposed::CraftingRequirementQuantitySelect* m_QuantitySelect;
  int32_t m_CurrentHighlight;
  bool m_Selected;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Positions;
  int32_t m_PositionIndex;
  float m_PositionOffsetY;
  int32_t m_DisplayedMaterials;
  bool m_RequiresForge;

  // Member methods:
  void Disable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197FE30))(this);
  }
  void Enable(ModdingAPI::Exposed::BlueprintItem* bpi, ModdingAPI::Exposed::InProgressCraftItem* wip) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*, ModdingAPI::Exposed::BlueprintItem*, ModdingAPI::Exposed::InProgressCraftItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197FF10))(this, bpi, wip);
  }
  ModdingAPI::Exposed::GearItem* GetSelectedTool() {
    return reinterpret_cast<ModdingAPI::Exposed::GearItem*(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19807F0))(this);
  }
  int32_t GetQuantity() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1980870))(this);
  }
  void HandleNavigation() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1980960))(this);
  }
  bool HasMultipleNavigationOptions() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1980A80))(this);
  }
  void ManualUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1980AD0))(this);
  }
  void OnNext() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1980B00))(this);
  }
  void OnPrevious() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1980E20))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1981120))(this);
  }
  void AddPosition(ModdingAPI::Exposed::UnityEngine::GameObject* go) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19817F0))(this, go);
  }
  void ApplyNextPosition(ModdingAPI::Exposed::UnityEngine::Transform* trans) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1981990))(this, trans);
  }
  void OnSelectedQuantityChanged() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1981AE0))(this);
  }
  void OnSelectedToolChanged() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1981B00))(this);
  }
  void RefreshCraftingTimeDisplay() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1981B10))(this);
  }
  void RefreshMaterialDisplay() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1981DF0))(this);
  }
  void RefreshHighlight() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19821D0))(this);
  }
  void ResetNextPosition() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1982270))(this);
  }
  void SetHighlightedItem(int32_t item) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1982280))(this, item);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CraftingRequirementContainer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19823B0))(this);
  }
};
}