// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.Steamworks.AppId_t.hpp"
#include "ModdingAPI::Exposed::Steamworks::SteamAPICall_t.hpp"
#include "ModdingAPI.Exposed.Steamworks.SteamAPICall_t.hpp"


namespace ModdingAPI::Exposed::Steamworks {
struct __SteamUtils_Il2CppStaticFields {
};

struct __SteamUtils_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SteamUtils_Il2CppClass {
  Il2CppClass_1 _1;
  __SteamUtils_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SteamUtils_Il2CppVtbl vtbl;
};

class SteamUtils {
public:
  // Il2Cpp fields:
  __SteamUtils_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline uint32_t GetSecondsSinceAppActive() {
    return reinterpret_cast<uint32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B180))();
  }
  static inline uint32_t GetSecondsSinceComputerActive() {
    return reinterpret_cast<uint32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B1A0))();
  }
  static inline int32_t GetConnectedUniverse() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B1C0))();
  }
  static inline uint32_t GetServerRealTime() {
    return reinterpret_cast<uint32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B1E0))();
  }
  static inline System_String* GetIPCountry() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B200))();
  }
  static inline bool GetImageSize(int32_t iImage, uint32_t pnWidth, uint32_t pnHeight) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B230))(iImage, pnWidth, pnHeight);
  }
  static inline bool GetImageRGBA(int32_t iImage, ModdingAPI::Exposed::System::Byte_array* pubDest, int32_t nDestBufferSize) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, ModdingAPI::Exposed::System::Byte_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B280))(iImage, pubDest, nDestBufferSize);
  }
  static inline bool GetCSERIPPort(uint32_t unIP, uint16_t usPort) {
    return reinterpret_cast<bool(__fastcall*)(uint32_t, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B2D0))(unIP, usPort);
  }
  static inline uint8_t GetCurrentBatteryPower() {
    return reinterpret_cast<uint8_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B310))();
  }
  static inline ModdingAPI::Exposed::Steamworks::AppId_t GetAppID() {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::AppId_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B330))();
  }
  static inline void SetOverlayNotificationPosition(int32_t eNotificationPosition) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B3E0))(eNotificationPosition);
  }
  static inline bool IsAPICallCompleted(ModdingAPI::Exposed::Steamworks::SteamAPICall_t hSteamAPICall, bool pbFailed) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamAPICall_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B410))(hSteamAPICall, pbFailed);
  }
  static inline int32_t GetAPICallFailureReason(ModdingAPI::Exposed::Steamworks::SteamAPICall_t hSteamAPICall) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamAPICall_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B450))(hSteamAPICall);
  }
  static inline bool GetAPICallResult(ModdingAPI::Exposed::Steamworks::SteamAPICall_t hSteamAPICall, intptr_t pCallback, int32_t cubCallback, int32_t iCallbackExpected, bool pbFailed) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamAPICall_t, intptr_t, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B480))(hSteamAPICall, pCallback, cubCallback, iCallbackExpected, pbFailed);
  }
  static inline uint32_t GetIPCCallCount() {
    return reinterpret_cast<uint32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B4F0))();
  }
  static inline void SetWarningMessageHook(ModdingAPI::Exposed::Steamworks::SteamAPIWarningMessageHook_t* pFunction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamAPIWarningMessageHook_t*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B510))(pFunction);
  }
  static inline bool IsOverlayEnabled() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B540))();
  }
  static inline bool BOverlayNeedsPresent() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B560))();
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t CheckFileSignature(System_String* szFileName) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B580))(szFileName);
  }
  static inline bool ShowGamepadTextInput(int32_t eInputMode, int32_t eLineInputMode, System_String* pchDescription, uint32_t unCharMax, System_String* pchExistingText) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, System_String*, uint32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282B7A0))(eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
  }
  static inline uint32_t GetEnteredGamepadTextLength() {
    return reinterpret_cast<uint32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x282BAF0))();
  }
  static inline bool GetEnteredGamepadTextInput(System_String* pchText, uint32_t cchText) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282BB10))(pchText, cchText);
  }
  static inline System_String* GetSteamUILanguage() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x282BC30))();
  }
  static inline bool IsSteamRunningInVR() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x282BC60))();
  }
  static inline void SetOverlayNotificationInset(int32_t nHorizontalInset, int32_t nVerticalInset) {
    reinterpret_cast<void(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282BC80))(nHorizontalInset, nVerticalInset);
  }
  static inline bool IsSteamInBigPictureMode() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x282BCC0))();
  }
  static inline void StartVRDashboard() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x282BCE0))();
  }
  static inline bool IsVRHeadsetStreamingEnabled() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x282BD00))();
  }
  static inline void SetVRHeadsetStreamingEnabled(bool bEnabled) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282BD20))(bEnabled);
  }
  static inline bool IsSteamChinaLauncher() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x282BD50))();
  }
  static inline bool InitFilterText() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x282BD70))();
  }
  static inline int32_t FilterText(System_String* pchOutFilteredText, uint32_t nByteSizeOutFilteredText, System_String* pchInputMessage, bool bLegalOnly) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*, uint32_t, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282BD90))(pchOutFilteredText, nByteSizeOutFilteredText, pchInputMessage, bLegalOnly);
  }
};
}