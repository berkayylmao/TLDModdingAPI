// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Xml.LineInfo.hpp"


namespace ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl {
struct __DtdParserProxy_Il2CppStaticFields {
};

struct __DtdParserProxy_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_System_Xml_IDtdParserAdapterV1_get_V1CompatibilityMode;
  VirtualInvokeData _5_System_Xml_IDtdParserAdapterV1_get_Normalization;
  VirtualInvokeData _6_System_Xml_IDtdParserAdapterV1_get_Namespaces;
  VirtualInvokeData _7_System_Xml_IDtdParserAdapterWithValidation_get_DtdValidation;
  VirtualInvokeData _8_System_Xml_IDtdParserAdapterWithValidation_get_ValidationEventHandling;
  VirtualInvokeData _9_System_Xml_IDtdParserAdapter_get_NameTable;
  VirtualInvokeData _10_System_Xml_IDtdParserAdapter_get_NamespaceResolver;
  VirtualInvokeData _11_System_Xml_IDtdParserAdapter_get_BaseUri;
  VirtualInvokeData _12_System_Xml_IDtdParserAdapter_get_ParsingBuffer;
  VirtualInvokeData _13_System_Xml_IDtdParserAdapter_get_ParsingBufferLength;
  VirtualInvokeData _14_System_Xml_IDtdParserAdapter_get_CurrentPosition;
  VirtualInvokeData _15_System_Xml_IDtdParserAdapter_set_CurrentPosition;
  VirtualInvokeData _16_System_Xml_IDtdParserAdapter_get_LineNo;
  VirtualInvokeData _17_System_Xml_IDtdParserAdapter_get_LineStartPosition;
  VirtualInvokeData _18_System_Xml_IDtdParserAdapter_get_IsEof;
  VirtualInvokeData _19_System_Xml_IDtdParserAdapter_get_EntityStackLength;
  VirtualInvokeData _20_System_Xml_IDtdParserAdapter_get_IsEntityEolNormalized;
  VirtualInvokeData _21_System_Xml_IDtdParserAdapter_ReadData;
  VirtualInvokeData _22_System_Xml_IDtdParserAdapter_OnNewLine;
  VirtualInvokeData _23_System_Xml_IDtdParserAdapter_ParseNumericCharRef;
  VirtualInvokeData _24_System_Xml_IDtdParserAdapter_ParseNamedCharRef;
  VirtualInvokeData _25_System_Xml_IDtdParserAdapter_ParsePI;
  VirtualInvokeData _26_System_Xml_IDtdParserAdapter_ParseComment;
  VirtualInvokeData _27_System_Xml_IDtdParserAdapter_PushEntity;
  VirtualInvokeData _28_System_Xml_IDtdParserAdapter_PopEntity;
  VirtualInvokeData _29_System_Xml_IDtdParserAdapter_PushExternalSubset;
  VirtualInvokeData _30_System_Xml_IDtdParserAdapter_PushInternalDtd;
  VirtualInvokeData _31_System_Xml_IDtdParserAdapter_OnSystemId;
  VirtualInvokeData _32_System_Xml_IDtdParserAdapter_OnPublicId;
  VirtualInvokeData _33_System_Xml_IDtdParserAdapter_Throw;
};

struct __DtdParserProxy_Il2CppClass {
  Il2CppClass_1 _1;
  __DtdParserProxy_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __DtdParserProxy_Il2CppVtbl vtbl;
};

class DtdParserProxy {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C7FE98;
  static inline    __DtdParserProxy_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __DtdParserProxy_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__DtdParserProxy_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __DtdParserProxy_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl* reader;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl* reader) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*, ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, reader);
  }
  ModdingAPI::Exposed::System::Xml::XmlNameTable* System::Xml::IDtdParserAdapter::get_NameTable() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlNameTable*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2A80))(this);
  }
  ModdingAPI::Exposed::System::Xml::IXmlNamespaceResolver* System::Xml::IDtdParserAdapter::get_NamespaceResolver() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::IXmlNamespaceResolver*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2AA0))(this);
  }
  ModdingAPI::Exposed::System::Uri* System::Xml::IDtdParserAdapter::get_BaseUri() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Uri*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2AC0))(this);
  }
  bool System::Xml::IDtdParserAdapter::get_IsEof() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2BC0))(this);
  }
  ModdingAPI::Exposed::System::Char_array* System::Xml::IDtdParserAdapter::get_ParsingBuffer() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Char_array*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2BE0))(this);
  }
  int32_t System::Xml::IDtdParserAdapter::get_ParsingBufferLength() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2C00))(this);
  }
  int32_t System::Xml::IDtdParserAdapter::get_CurrentPosition() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2C20))(this);
  }
  void System::Xml::IDtdParserAdapter::set_CurrentPosition(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2C40))(this, value);
  }
  int32_t System::Xml::IDtdParserAdapter::get_EntityStackLength() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2C60))(this);
  }
  bool System::Xml::IDtdParserAdapter::get_IsEntityEolNormalized() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2C80))(this);
  }
  void System::Xml::IDtdParserAdapter::OnNewLine(int32_t pos) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2CA0))(this, pos);
  }
  int32_t System::Xml::IDtdParserAdapter::get_LineNo() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2CD0))(this);
  }
  int32_t System::Xml::IDtdParserAdapter::get_LineStartPosition() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2CF0))(this);
  }
  int32_t System::Xml::IDtdParserAdapter::ReadData() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2D10))(this);
  }
  int32_t System::Xml::IDtdParserAdapter::ParseNumericCharRef(ModdingAPI::Exposed::System::Text::StringBuilder* internalSubsetBuilder) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*, ModdingAPI::Exposed::System::Text::StringBuilder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2D30))(this, internalSubsetBuilder);
  }
  int32_t System::Xml::IDtdParserAdapter::ParseNamedCharRef(bool expand, ModdingAPI::Exposed::System::Text::StringBuilder* internalSubsetBuilder) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*, bool, ModdingAPI::Exposed::System::Text::StringBuilder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2D70))(this, expand, internalSubsetBuilder);
  }
  void System::Xml::IDtdParserAdapter::ParsePI(ModdingAPI::Exposed::System::Text::StringBuilder* sb) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*, ModdingAPI::Exposed::System::Text::StringBuilder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2D90))(this, sb);
  }
  void System::Xml::IDtdParserAdapter::ParseComment(ModdingAPI::Exposed::System::Text::StringBuilder* sb) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*, ModdingAPI::Exposed::System::Text::StringBuilder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2DF0))(this, sb);
  }
  bool System::Xml::IDtdParserAdapter::PushEntity(ModdingAPI::Exposed::System::Xml::IDtdEntityInfo* entity, int32_t entityId) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*, ModdingAPI::Exposed::System::Xml::IDtdEntityInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2E10))(this, entity, entityId);
  }
  bool System::Xml::IDtdParserAdapter::PopEntity(ModdingAPI::Exposed::System::Xml::IDtdEntityInfo* oldEntity, int32_t newEntityId) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*, ModdingAPI::Exposed::System::Xml::IDtdEntityInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2F40))(this, oldEntity, newEntityId);
  }
  bool System::Xml::IDtdParserAdapter::PushExternalSubset(System_String* systemId, System_String* publicId) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C2FB0))(this, systemId, publicId);
  }
  void System::Xml::IDtdParserAdapter::PushInternalDtd(System_String* baseUri, System_String* internalDtd) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3130))(this, baseUri, internalDtd);
  }
  void System::Xml::IDtdParserAdapter::Throw(ModdingAPI::Exposed::System::Exception* e) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*, ModdingAPI::Exposed::System::Exception*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C31D0))(this, e);
  }
  void System::Xml::IDtdParserAdapter::OnSystemId(System_String* systemId, ModdingAPI::Exposed::System::Xml::LineInfo keywordLineInfo, ModdingAPI::Exposed::System::Xml::LineInfo systemLiteralLineInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*, System_String*, ModdingAPI::Exposed::System::Xml::LineInfo, ModdingAPI::Exposed::System::Xml::LineInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3200))(this, systemId, keywordLineInfo, systemLiteralLineInfo);
  }
  void System::Xml::IDtdParserAdapter::OnPublicId(System_String* publicId, ModdingAPI::Exposed::System::Xml::LineInfo keywordLineInfo, ModdingAPI::Exposed::System::Xml::LineInfo publicLiteralLineInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*, System_String*, ModdingAPI::Exposed::System::Xml::LineInfo, ModdingAPI::Exposed::System::Xml::LineInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C32E0))(this, publicId, keywordLineInfo, publicLiteralLineInfo);
  }
  bool System::Xml::IDtdParserAdapterWithValidation::get_DtdValidation() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C33C0))(this);
  }
  ModdingAPI::Exposed::System::Xml::IValidationEventHandling* System::Xml::IDtdParserAdapterWithValidation::get_ValidationEventHandling() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::IValidationEventHandling*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C33F0))(this);
  }
  bool System::Xml::IDtdParserAdapterV1::get_Normalization() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3410))(this);
  }
  bool System::Xml::IDtdParserAdapterV1::get_Namespaces() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3430))(this);
  }
  bool System::Xml::IDtdParserAdapterV1::get_V1CompatibilityMode() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlTextReaderImpl::DtdParserProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3450))(this);
  }
};
}