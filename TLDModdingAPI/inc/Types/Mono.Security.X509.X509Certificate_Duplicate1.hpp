// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.DateTime.hpp"
#include "ModdingAPI.Exposed.System.Runtime.Serialization.StreamingContext.hpp"


namespace ModdingAPI::Exposed::Mono::Security::X509 {
struct __X509Certificate_Duplicate1_Il2CppStaticFields {
  System_String* encoding_error;
};

struct __X509Certificate_Duplicate1_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _5_get_IssuerName;
  VirtualInvokeData _6_get_KeyAlgorithm;
  VirtualInvokeData _7_get_KeyAlgorithmParameters;
  VirtualInvokeData _8_get_PublicKey;
  VirtualInvokeData _9_get_RSA;
  VirtualInvokeData _10_set_RSA;
  VirtualInvokeData _11_get_RawData;
  VirtualInvokeData _12_get_SerialNumber;
  VirtualInvokeData _13_get_SignatureAlgorithm;
  VirtualInvokeData _14_get_SubjectName;
  VirtualInvokeData _15_get_ValidFrom;
  VirtualInvokeData _16_get_ValidUntil;
  VirtualInvokeData _17_GetObjectData;
};

struct __X509Certificate_Duplicate1_Il2CppClass {
  Il2CppClass_1 _1;
  __X509Certificate_Duplicate1_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __X509Certificate_Duplicate1_Il2CppVtbl vtbl;
};

class X509Certificate_Duplicate1 {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C35A58;
  static inline    __X509Certificate_Duplicate1_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __X509Certificate_Duplicate1_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__X509Certificate_Duplicate1_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __X509Certificate_Duplicate1_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::Mono::Security::ASN1_Duplicate1* decoder;
  ModdingAPI::Exposed::System::Byte_array* m_encodedcert;
  ModdingAPI::Exposed::System::DateTime m_from;
  ModdingAPI::Exposed::System::DateTime m_until;
  ModdingAPI::Exposed::Mono::Security::ASN1_Duplicate1* issuer;
  System_String* m_issuername;
  System_String* m_keyalgo;
  ModdingAPI::Exposed::System::Byte_array* m_keyalgoparams;
  ModdingAPI::Exposed::Mono::Security::ASN1_Duplicate1* subject;
  System_String* m_subject;
  ModdingAPI::Exposed::System::Byte_array* m_publickey;
  ModdingAPI::Exposed::System::Byte_array* signature;
  System_String* m_signaturealgo;
  ModdingAPI::Exposed::System::Byte_array* m_signaturealgoparams;
  ModdingAPI::Exposed::System::Security::Cryptography::RSA* _rsa;
  ModdingAPI::Exposed::System::Security::Cryptography::DSA* _dsa;
  int32_t version;
  ModdingAPI::Exposed::System::Byte_array* serialnumber;
  ModdingAPI::Exposed::System::Byte_array* issuerUniqueID;
  ModdingAPI::Exposed::System::Byte_array* subjectUniqueID;
  ModdingAPI::Exposed::Mono::Security::X509::X509ExtensionCollection_Duplicate1* extensions;

  // Member methods:
  void Parse(ModdingAPI::Exposed::System::Byte_array* data) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15730E0))(this, data);
  }
  void ::ctor(ModdingAPI::Exposed::System::Byte_array* data) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1573BC0))(this, data);
  }
  ModdingAPI::Exposed::System::Byte_array* GetUnsignedBigInteger(ModdingAPI::Exposed::System::Byte_array* integer) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1573D20))(this, integer);
  }
  ModdingAPI::Exposed::System::Security::Cryptography::DSA* get_DSA() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::Cryptography::DSA*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1573E10))(this);
  }
  void set_DSA(ModdingAPI::Exposed::System::Security::Cryptography::DSA* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*, ModdingAPI::Exposed::System::Security::Cryptography::DSA*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15743C0))(this, value);
  }
  System_String* get_IssuerName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319970))(this);
  }
  System_String* get_KeyAlgorithm() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319960))(this);
  }
  ModdingAPI::Exposed::System::Byte_array* get_KeyAlgorithmParameters() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15743E0))(this);
  }
  ModdingAPI::Exposed::System::Byte_array* get_PublicKey() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1574530))(this);
  }
  ModdingAPI::Exposed::System::Security::Cryptography::RSA* get_RSA() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::Cryptography::RSA*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1574680))(this);
  }
  void set_RSA(ModdingAPI::Exposed::System::Security::Cryptography::RSA* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*, ModdingAPI::Exposed::System::Security::Cryptography::RSA*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1574A10))(this, value);
  }
  ModdingAPI::Exposed::System::Byte_array* get_RawData() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1574A30))(this);
  }
  ModdingAPI::Exposed::System::Byte_array* get_SerialNumber() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1574B80))(this);
  }
  System_String* get_SignatureAlgorithm() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319940))(this);
  }
  System_String* get_SubjectName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383960))(this);
  }
  ModdingAPI::Exposed::System::DateTime get_ValidFrom() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110A0))(this);
  }
  ModdingAPI::Exposed::System::DateTime get_ValidUntil() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110B0))(this);
  }
  int32_t get_Version() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383AA0))(this);
  }
  ModdingAPI::Exposed::Mono::Security::ASN1_Duplicate1* GetIssuerName() {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Security::ASN1_Duplicate1*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335370))(this);
  }
  ModdingAPI::Exposed::Mono::Security::ASN1_Duplicate1* GetSubjectName() {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Security::ASN1_Duplicate1*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A440))(this);
  }
  void GetObjectData(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo* info, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*, ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1574CD0))(this, info, context);
  }

  // Static fields:
  static inline __CppStaticProperty<System_String*> encoding_error = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->encoding_error; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::System::Byte_array* PEM(System_String* type, ModdingAPI::Exposed::System::Byte_array* data) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1574D70))(type, data);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1574F70))();
  }
};
}