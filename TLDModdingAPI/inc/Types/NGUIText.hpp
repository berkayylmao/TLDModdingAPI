// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.CharacterInfo.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color32.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Color.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed {
struct __NGUIText_Il2CppStaticFields {
  ModdingAPI::Exposed::UIFont* bitmapFont;
  ModdingAPI::Exposed::UnityEngine::Font* dynamicFont;
  ModdingAPI::Exposed::NGUIText::GlyphInfo* glyph;
  int32_t fontSize;
  float fontScale;
  float pixelDensity;
  int32_t fontStyle;
  int32_t alignment;
  ModdingAPI::Exposed::UnityEngine::Color tint;
  int32_t rectWidth;
  int32_t rectHeight;
  int32_t regionWidth;
  int32_t regionHeight;
  int32_t maxLines;
  bool gradient;
  ModdingAPI::Exposed::UnityEngine::Color gradientBottom;
  ModdingAPI::Exposed::UnityEngine::Color gradientTop;
  bool encoding;
  float spacingX;
  float spacingY;
  bool premultiply;
  int32_t symbolStyle;
  int32_t finalSize;
  float finalSpacingX;
  float finalLineHeight;
  float baseline;
  bool useSymbols;
  ModdingAPI::Exposed::BetterList_T_* m_DynamicSymbolNames;
  System_String* m_DynamicSymbolKeyphrase;
  System_String* m_DynamicSymbolKeyphraseUpper;
  System_String* m_DynamicSymbolNameUpper;
  ModdingAPI::Exposed::BetterList_T_* s_DynamicSymbols;
  ModdingAPI::Exposed::UnityEngine::Color mInvisible;
  ModdingAPI::Exposed::BetterList_T_* mColors;
  float mAlpha;
  ModdingAPI::Exposed::UnityEngine::CharacterInfo mTempChar;
  ModdingAPI::Exposed::BetterList_T_* mSizes;
  ModdingAPI::Exposed::UnityEngine::Color32 s_c0;
  ModdingAPI::Exposed::UnityEngine::Color32 s_c1;
  ModdingAPI::Exposed::System::Single_array* mBoldOffset;
};

struct __NGUIText_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __NGUIText_Il2CppClass {
  Il2CppClass_1 _1;
  __NGUIText_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __NGUIText_Il2CppVtbl vtbl;
};

class NGUIText {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C60468;
  static inline    __NGUIText_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __NGUIText_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__NGUIText_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __NGUIText_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::UIFont*> bitmapFont = __CppStaticProperty<ModdingAPI::Exposed::UIFont*>(
   []() { return &GetStaticClassInstance()->pStaticFields->bitmapFont; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Font*> dynamicFont = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Font*>(
   []() { return &GetStaticClassInstance()->pStaticFields->dynamicFont; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::NGUIText::GlyphInfo*> glyph = __CppStaticProperty<ModdingAPI::Exposed::NGUIText::GlyphInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->glyph; }
  );
  static inline __CppStaticProperty<int32_t> fontSize = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->fontSize; }
  );
  static inline __CppStaticProperty<float> fontScale = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->fontScale; }
  );
  static inline __CppStaticProperty<float> pixelDensity = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->pixelDensity; }
  );
  static inline __CppStaticProperty<int32_t> fontStyle = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->fontStyle; }
  );
  static inline __CppStaticProperty<int32_t> alignment = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->alignment; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color> tint = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color>(
   []() { return &GetStaticClassInstance()->pStaticFields->tint; }
  );
  static inline __CppStaticProperty<int32_t> rectWidth = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->rectWidth; }
  );
  static inline __CppStaticProperty<int32_t> rectHeight = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->rectHeight; }
  );
  static inline __CppStaticProperty<int32_t> regionWidth = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->regionWidth; }
  );
  static inline __CppStaticProperty<int32_t> regionHeight = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->regionHeight; }
  );
  static inline __CppStaticProperty<int32_t> maxLines = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->maxLines; }
  );
  static inline __CppStaticProperty<bool> gradient = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->gradient; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color> gradientBottom = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color>(
   []() { return &GetStaticClassInstance()->pStaticFields->gradientBottom; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color> gradientTop = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color>(
   []() { return &GetStaticClassInstance()->pStaticFields->gradientTop; }
  );
  static inline __CppStaticProperty<bool> encoding = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->encoding; }
  );
  static inline __CppStaticProperty<float> spacingX = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->spacingX; }
  );
  static inline __CppStaticProperty<float> spacingY = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->spacingY; }
  );
  static inline __CppStaticProperty<bool> premultiply = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->premultiply; }
  );
  static inline __CppStaticProperty<int32_t> symbolStyle = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->symbolStyle; }
  );
  static inline __CppStaticProperty<int32_t> finalSize = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->finalSize; }
  );
  static inline __CppStaticProperty<float> finalSpacingX = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->finalSpacingX; }
  );
  static inline __CppStaticProperty<float> finalLineHeight = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->finalLineHeight; }
  );
  static inline __CppStaticProperty<float> baseline = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->baseline; }
  );
  static inline __CppStaticProperty<bool> useSymbols = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->useSymbols; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::BetterList_T_*> m_DynamicSymbolNames = __CppStaticProperty<ModdingAPI::Exposed::BetterList_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_DynamicSymbolNames; }
  );
  static inline __CppStaticProperty<System_String*> m_DynamicSymbolKeyphrase = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_DynamicSymbolKeyphrase; }
  );
  static inline __CppStaticProperty<System_String*> m_DynamicSymbolKeyphraseUpper = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_DynamicSymbolKeyphraseUpper; }
  );
  static inline __CppStaticProperty<System_String*> m_DynamicSymbolNameUpper = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_DynamicSymbolNameUpper; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::BetterList_T_*> s_DynamicSymbols = __CppStaticProperty<ModdingAPI::Exposed::BetterList_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_DynamicSymbols; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color> mInvisible = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color>(
   []() { return &GetStaticClassInstance()->pStaticFields->mInvisible; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::BetterList_T_*> mColors = __CppStaticProperty<ModdingAPI::Exposed::BetterList_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->mColors; }
  );
  static inline __CppStaticProperty<float> mAlpha = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->mAlpha; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::CharacterInfo> mTempChar = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::CharacterInfo>(
   []() { return &GetStaticClassInstance()->pStaticFields->mTempChar; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::BetterList_T_*> mSizes = __CppStaticProperty<ModdingAPI::Exposed::BetterList_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->mSizes; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color32> s_c0 = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color32>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_c0; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color32> s_c1 = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color32>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_c1; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Single_array*> mBoldOffset = __CppStaticProperty<ModdingAPI::Exposed::System::Single_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->mBoldOffset; }
  );

  // Static methods:
  static inline void Update() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D93520))();
  }
  static inline void Update(bool request) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D935B0))(request);
  }
  static inline System_String* Prepare(System_String* text) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D939D0))(text);
  }
  static inline ModdingAPI::Exposed::BMSymbol* GetSymbol(System_String* text, int32_t index, int32_t textLength) {
    return reinterpret_cast<ModdingAPI::Exposed::BMSymbol*(__fastcall*)(System_String*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D93B20))(text, index, textLength);
  }
  static inline float GetGlyphWidth(int32_t ch, int32_t prev) {
    return reinterpret_cast<float(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D93D10))(ch, prev);
  }
  static inline ModdingAPI::Exposed::NGUIText::GlyphInfo* GetGlyph(int32_t ch, int32_t prev) {
    return reinterpret_cast<ModdingAPI::Exposed::NGUIText::GlyphInfo*(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D94030))(ch, prev);
  }
  static inline float ParseAlpha(System_String* text, int32_t index) {
    return reinterpret_cast<float(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D949F0))(text, index);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Color ParseColor(System_String* text, int32_t offset) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D94B20))(text, offset);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Color ParseColor24(System_String* text, int32_t offset) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D94BF0))(text, offset);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Color ParseColor32(System_String* text, int32_t offset) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D94D50))(text, offset);
  }
  static inline System_String* EncodeColor(ModdingAPI::Exposed::UnityEngine::Color c) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D94F00))(c);
  }
  static inline System_String* EncodeColor(System_String* text, ModdingAPI::Exposed::UnityEngine::Color c) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D94FB0))(text, c);
  }
  static inline System_String* EncodeAlpha(float a) {
    return reinterpret_cast<System_String*(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D95240))(a);
  }
  static inline System_String* EncodeColor24(ModdingAPI::Exposed::UnityEngine::Color c) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D95380))(c);
  }
  static inline System_String* EncodeColor32(ModdingAPI::Exposed::UnityEngine::Color c) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D95440))(c);
  }
  static inline bool ParseSymbol(System_String* text, int32_t index) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D954F0))(text, index);
  }
  static inline bool IsHex(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D95610))(ch);
  }
  static inline bool ParseSymbol(System_String* text, int32_t index, ModdingAPI::Exposed::BetterList_T_* colors, bool premultiply, int32_t sub, bool bold, bool italic, bool underline, bool strike, bool ignoreColor) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::BetterList_T_*, bool, int32_t, bool, bool, bool, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D95640))(text, index, colors, premultiply, sub, bold, italic, underline, strike, ignoreColor);
  }
  static inline System_String* StripSymbols(System_String* text) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D96230))(text);
  }
  static inline void Align(ModdingAPI::Exposed::BetterList_T_* verts, int32_t indexOffset, float printedWidth) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BetterList_T_*, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D963D0))(verts, indexOffset, printedWidth);
  }
  static inline int32_t GetExactCharacterIndex(ModdingAPI::Exposed::BetterList_T_* verts, ModdingAPI::Exposed::BetterList_T_* indices, ModdingAPI::Exposed::UnityEngine::Vector2 pos) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D96A10))(verts, indices, pos);
  }
  static inline int32_t GetApproximateCharacterIndex(ModdingAPI::Exposed::BetterList_T_* verts, ModdingAPI::Exposed::BetterList_T_* indices, ModdingAPI::Exposed::UnityEngine::Vector2 pos) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D96C00))(verts, indices, pos);
  }
  static inline bool IsSpace(int32_t ch) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D96E70))(ch);
  }
  static inline void EndLine(ModdingAPI::Exposed::System::Text::StringBuilder* s) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::StringBuilder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D96E90))(s);
  }
  static inline void ReplaceSpaceWithNewline(ModdingAPI::Exposed::System::Text::StringBuilder* s) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::StringBuilder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D96FD0))(s);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 CalculatePrintedSize(System_String* text) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D970E0))(text);
  }
  static inline int32_t CalculateOffsetToFit(System_String* text) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D97680))(text);
  }
  static inline System_String* GetEndOfLineThatFits(System_String* text) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D97C50))(text);
  }
  static inline bool WrapText(System_String* text, System_String* finalText) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D97D20))(text, finalText);
  }
  static inline bool WrapText(System_String* text, System_String* finalText, bool keepCharCount, bool bulleted, int32_t bulletSpacing) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, System_String*, bool, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D97DE0))(text, finalText, keepCharCount, bulleted, bulletSpacing);
  }
  static inline void Print(System_String* text, ModdingAPI::Exposed::BetterList_T_* verts, ModdingAPI::Exposed::BetterList_T_* uvs, ModdingAPI::Exposed::BetterList_T_* cols, ModdingAPI::Exposed::UILabel* printedLabel) {
    reinterpret_cast<void(__fastcall*)(System_String*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D98A40))(text, verts, uvs, cols, printedLabel);
  }
  static inline void PrintApproximateCharacterPositions(System_String* text, ModdingAPI::Exposed::BetterList_T_* verts, ModdingAPI::Exposed::BetterList_T_* indices) {
    reinterpret_cast<void(__fastcall*)(System_String*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D9C450))(text, verts, indices);
  }
  static inline void PrintExactCharacterPositions(System_String* text, ModdingAPI::Exposed::BetterList_T_* verts, ModdingAPI::Exposed::BetterList_T_* indices) {
    reinterpret_cast<void(__fastcall*)(System_String*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D9CDA0))(text, verts, indices);
  }
  static inline void PrintCaretAndSelection(System_String* text, int32_t start, int32_t end, ModdingAPI::Exposed::BetterList_T_* caret, ModdingAPI::Exposed::BetterList_T_* highlight) {
    reinterpret_cast<void(__fastcall*)(System_String*, int32_t, int32_t, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D9D5C0))(text, start, end, caret, highlight);
  }
  static inline ModdingAPI::Exposed::BMSymbol* GetDynamicSymbol(System_String* text, int32_t offset, int32_t textLength) {
    return reinterpret_cast<ModdingAPI::Exposed::BMSymbol*(__fastcall*)(System_String*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D9E690))(text, offset, textLength);
  }
  static inline System_String* MaybeReplaceSymbolWithKeycode(System_String* text, ModdingAPI::Exposed::BMSymbol* symbol) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, ModdingAPI::Exposed::BMSymbol*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D9F080))(text, symbol);
  }
  static inline System_String* MaybeReplaceSymbolsWithKeycodes(System_String* text) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D9F3B0))(text);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D9F580))();
  }
};
}