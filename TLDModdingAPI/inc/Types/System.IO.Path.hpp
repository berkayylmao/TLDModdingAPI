// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::IO {
struct __Path_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Char_array* InvalidPathChars;
  wchar_t AltDirectorySeparatorChar;
  wchar_t DirectorySeparatorChar;
  wchar_t PathSeparator;
  System_String* DirectorySeparatorStr;
  wchar_t VolumeSeparatorChar;
  ModdingAPI::Exposed::System::Char_array* PathSeparatorChars;
  bool dirEqualsVolume;
  ModdingAPI::Exposed::System::Char_array* trimEndCharsWindows;
  ModdingAPI::Exposed::System::Char_array* trimEndCharsUnix;
};

struct __Path_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Path_Il2CppClass {
  Il2CppClass_1 _1;
  __Path_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Path_Il2CppVtbl vtbl;
};

class Path {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C25B78;
  static inline    __Path_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Path_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Path_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Path_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*> InvalidPathChars = __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->InvalidPathChars; }
  );
  static inline __CppStaticProperty<wchar_t> AltDirectorySeparatorChar = __CppStaticProperty<wchar_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->AltDirectorySeparatorChar; }
  );
  static inline __CppStaticProperty<wchar_t> DirectorySeparatorChar = __CppStaticProperty<wchar_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->DirectorySeparatorChar; }
  );
  static inline __CppStaticProperty<wchar_t> PathSeparator = __CppStaticProperty<wchar_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->PathSeparator; }
  );
  static inline __CppStaticProperty<System_String*> DirectorySeparatorStr = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->DirectorySeparatorStr; }
  );
  static inline __CppStaticProperty<wchar_t> VolumeSeparatorChar = __CppStaticProperty<wchar_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->VolumeSeparatorChar; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*> PathSeparatorChars = __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->PathSeparatorChars; }
  );
  static inline __CppStaticProperty<bool> dirEqualsVolume = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->dirEqualsVolume; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*> trimEndCharsWindows = __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->trimEndCharsWindows; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*> trimEndCharsUnix = __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->trimEndCharsUnix; }
  );

  // Static methods:
  static inline System_String* ChangeExtension(System_String* path, System_String* extension) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9BF10))(path, extension);
  }
  static inline System_String* Combine(System_String* path1, System_String* path2) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9C180))(path1, path2);
  }
  static inline System_String* CleanPath(System_String* s) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9C4F0))(s);
  }
  static inline System_String* GetDirectoryName(System_String* path) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9CA00))(path);
  }
  static inline System_String* GetExtension(System_String* path) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9CE80))(path);
  }
  static inline System_String* GetFileName(System_String* path) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9CFF0))(path);
  }
  static inline System_String* GetFileNameWithoutExtension(System_String* path) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9D170))(path);
  }
  static inline System_String* GetFullPath(System_String* path) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9D220))(path);
  }
  static inline System_String* GetFullPathInternal(System_String* path) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9D2C0))(path);
  }
  static inline int32_t GetFullPathName(System_String* path, int32_t numBufferChars, ModdingAPI::Exposed::System::Text::StringBuilder* buffer, intptr_t lpFilePartOrNull) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Text::StringBuilder*, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9D360))(path, numBufferChars, buffer, lpFilePartOrNull);
  }
  static inline System_String* GetFullPathName(System_String* path) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9D5B0))(path);
  }
  static inline System_String* WindowsDriveAdjustment(System_String* path) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9D900))(path);
  }
  static inline System_String* InsecureGetFullPath(System_String* path) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9DC10))(path);
  }
  static inline bool IsDirectorySeparator(wchar_t c) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9E2B0))(c);
  }
  static inline System_String* GetPathRoot(System_String* path) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9E390))(path);
  }
  static inline System_String* GetTempPath() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9E8B0))();
  }
  static inline System_String* get_temp_path() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9EA10))();
  }
  static inline bool IsPathRooted(System_String* path) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9EA20))(path);
  }
  static inline ModdingAPI::Exposed::System::Char_array* GetInvalidFileNameChars() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Char_array*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9EC40))();
  }
  static inline ModdingAPI::Exposed::System::Char_array* GetInvalidPathChars() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Char_array*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9ECE0))();
  }
  static inline int32_t findExtension(System_String* path) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9ED80))(path);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9EE70))();
  }
  static inline System_String* GetServerAndShare(System_String* path) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9F160))(path);
  }
  static inline bool SameRoot(System_String* root, System_String* path) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9F2F0))(root, path);
  }
  static inline System_String* CanonicalizePath(System_String* path) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9F640))(path);
  }
  static inline System_String* Combine(ModdingAPI::Exposed::System::String_array* paths) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::String_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9FF90))(paths);
  }
  static inline System_String* Combine(System_String* path1, System_String* path2, System_String* path3) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA03F0))(path1, path2, path3);
  }
  static inline void Validate(System_String* path) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA0650))(path);
  }
  static inline void Validate(System_String* path, System_String* parameterName) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA06F0))(path, parameterName);
  }
  static inline System_String* get_DirectorySeparatorCharAsString() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA08E0))();
  }
  static inline ModdingAPI::Exposed::System::Char_array* get_TrimEndChars() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Char_array*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA0980))();
  }
  static inline void CheckSearchPattern(System_String* searchPattern) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA0A20))(searchPattern);
  }
  static inline void CheckInvalidPathChars(System_String* path, bool checkAdditional) {
    reinterpret_cast<void(__fastcall*)(System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA0C20))(path, checkAdditional);
  }
  static inline System_String* InternalCombine(System_String* path1, System_String* path2) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA0DC0))(path1, path2);
  }
};
}