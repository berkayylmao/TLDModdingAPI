// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Diagnostics.Tracing.DataCollector.hpp"

namespace ModdingAPI::Exposed::System::Diagnostics::Tracing {
struct __DataCollector_Il2CppObject {
  uint8_t* scratchEnd;
  ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource::EventData* datasEnd;
  ModdingAPI::Exposed::System::Runtime::InteropServices::GCHandle* pinsEnd;
  ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource::EventData* datasStart;
  uint8_t* scratch;
  ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource::EventData* datas;
  ModdingAPI::Exposed::System::Runtime::InteropServices::GCHandle* pins;
  ModdingAPI::Exposed::System::Byte_array* buffer;
  int32_t bufferPos;
  int32_t bufferNesting;
  bool writingScalars;
};
struct __DataCollector_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Diagnostics::Tracing::DataCollector ThreadInstance;
};

struct __DataCollector_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __DataCollector_Il2CppClass {
  Il2CppClass_1 _1;
  __DataCollector_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __DataCollector_Il2CppVtbl vtbl;
};

class DataCollector {
  static constexpr uint64_t _rvaClassInstance     = 0x3C22750;
  static inline    __DataCollector_Il2CppClass* _pStaticClassInstance = nullptr;

public:
  // Static class getter:
  static inline __DataCollector_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__DataCollector_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Member fields:
  uint8_t* scratchEnd;
  ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource::EventData* datasEnd;
  ModdingAPI::Exposed::System::Runtime::InteropServices::GCHandle* pinsEnd;
  ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource::EventData* datasStart;
  uint8_t* scratch;
  ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource::EventData* datas;
  ModdingAPI::Exposed::System::Runtime::InteropServices::GCHandle* pins;
  ModdingAPI::Exposed::System::Byte_array* buffer;
  int32_t bufferPos;
  int32_t bufferNesting;
  bool writingScalars;

  // Member methods:
  void Enable(uint8_t* scratch, int32_t scratchSize, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource::EventData* datas, int32_t dataCount, ModdingAPI::Exposed::System::Runtime::InteropServices::GCHandle* pins, int32_t pinCount) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::DataCollector*, uint8_t*, int32_t, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource::EventData*, int32_t, ModdingAPI::Exposed::System::Runtime::InteropServices::GCHandle*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x179F0))(this, scratch, scratchSize, datas, dataCount, pins, pinCount);
  }
  void Disable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::DataCollector*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17A40))(this);
  }
  ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource::EventData* Finish() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource::EventData*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::DataCollector*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17A50))(this);
  }
  void AddScalar(void* value, int32_t size) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::DataCollector*, void*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17A70))(this, value, size);
  }
  void AddBinary(System_String* value, int32_t size) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::DataCollector*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17A80))(this, value, size);
  }
  void AddBinary(ModdingAPI::Exposed::System::Array* value, int32_t size) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::DataCollector*, ModdingAPI::Exposed::System::Array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17A90))(this, value, size);
  }
  void AddArray(ModdingAPI::Exposed::System::Array* value, int32_t length, int32_t itemSize) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::DataCollector*, ModdingAPI::Exposed::System::Array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AB0))(this, value, length, itemSize);
  }
  int32_t BeginBufferedArray() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::DataCollector*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AC0))(this);
  }
  void EndBufferedArray(int32_t bookmark, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::DataCollector*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AF0))(this, bookmark, count);
  }
  void BeginBuffered() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::DataCollector*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17B00))(this);
  }
  void EndBuffered() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::DataCollector*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17B20))(this);
  }
  void EnsureBuffer() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::DataCollector*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17B70))(this);
  }
  void EnsureBuffer(int32_t additionalSize) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::DataCollector*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17B90))(this, additionalSize);
  }
  void GrowBuffer(int32_t required) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::DataCollector*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17BB0))(this, required);
  }
  void PinArray(Il2CppObject* value, int32_t size) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::DataCollector*, Il2CppObject*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17BC0))(this, value, size);
  }
  void ScalarsBegin() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::DataCollector*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17BD0))(this);
  }
  void ScalarsEnd() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::DataCollector*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17BE0))(this);
  }

};
}