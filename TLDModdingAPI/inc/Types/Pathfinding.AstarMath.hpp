// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"
#include "ModdingAPI::Exposed::Pathfinding::Int3.hpp"
#include "ModdingAPI::Exposed::Pathfinding::Int2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed::Pathfinding {
struct __AstarMath_Il2CppStaticFields {
};

struct __AstarMath_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __AstarMath_Il2CppClass {
  Il2CppClass_1 _1;
  __AstarMath_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AstarMath_Il2CppVtbl vtbl;
};

class AstarMath {
public:
  // Il2Cpp fields:
  __AstarMath_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 NearestPoint(ModdingAPI::Exposed::UnityEngine::Vector3 lineStart, ModdingAPI::Exposed::UnityEngine::Vector3 lineEnd, ModdingAPI::Exposed::UnityEngine::Vector3 point) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A2590))(lineStart, lineEnd, point);
  }
  static inline float NearestPointFactor(ModdingAPI::Exposed::UnityEngine::Vector3 lineStart, ModdingAPI::Exposed::UnityEngine::Vector3 lineEnd, ModdingAPI::Exposed::UnityEngine::Vector3 point) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A2610))(lineStart, lineEnd, point);
  }
  static inline float NearestPointFactor(ModdingAPI::Exposed::Pathfinding::Int3 lineStart, ModdingAPI::Exposed::Pathfinding::Int3 lineEnd, ModdingAPI::Exposed::Pathfinding::Int3 point) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A2670))(lineStart, lineEnd, point);
  }
  static inline float NearestPointFactor(ModdingAPI::Exposed::Pathfinding::Int2 lineStart, ModdingAPI::Exposed::Pathfinding::Int2 lineEnd, ModdingAPI::Exposed::Pathfinding::Int2 point) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int2, ModdingAPI::Exposed::Pathfinding::Int2, ModdingAPI::Exposed::Pathfinding::Int2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A26D0))(lineStart, lineEnd, point);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 NearestPointStrict(ModdingAPI::Exposed::UnityEngine::Vector3 lineStart, ModdingAPI::Exposed::UnityEngine::Vector3 lineEnd, ModdingAPI::Exposed::UnityEngine::Vector3 point) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A2820))(lineStart, lineEnd, point);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 NearestPointStrictXZ(ModdingAPI::Exposed::UnityEngine::Vector3 lineStart, ModdingAPI::Exposed::UnityEngine::Vector3 lineEnd, ModdingAPI::Exposed::UnityEngine::Vector3 point) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A28A0))(lineStart, lineEnd, point);
  }
  static inline float DistancePointSegment(int32_t x, int32_t z, int32_t px, int32_t pz, int32_t qx, int32_t qz) {
    return reinterpret_cast<float(__fastcall*)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A2920))(x, z, px, pz, qx, qz);
  }
  static inline float DistancePointSegment(ModdingAPI::Exposed::Pathfinding::Int3 a, ModdingAPI::Exposed::Pathfinding::Int3 b, ModdingAPI::Exposed::Pathfinding::Int3 p) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3, ModdingAPI::Exposed::Pathfinding::Int3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2451E50))(a, b, p);
  }
  static inline float DistancePointSegmentStrict(ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b, ModdingAPI::Exposed::UnityEngine::Vector3 p) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A2930))(a, b, p);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 CubicBezier(ModdingAPI::Exposed::UnityEngine::Vector3 p0, ModdingAPI::Exposed::UnityEngine::Vector3 p1, ModdingAPI::Exposed::UnityEngine::Vector3 p2, ModdingAPI::Exposed::UnityEngine::Vector3 p3, float t) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A2990))(p0, p1, p2, p3, t);
  }
  static inline float MapTo(float startMin, float startMax, float value) {
    return reinterpret_cast<float(__fastcall*)(float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A2A40))(startMin, startMax, value);
  }
  static inline float MapTo(float startMin, float startMax, float targetMin, float targetMax, float value) {
    return reinterpret_cast<float(__fastcall*)(float, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A2B20))(startMin, startMax, targetMin, targetMax, value);
  }
  static inline System_String* FormatBytesBinary(int32_t bytes) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A2C40))(bytes);
  }
  static inline int32_t Bit(int32_t a, int32_t b) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A2DF0))(a, b);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Color IntToColor(int32_t i, float a) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A2E00))(i, a);
  }
  static inline float SqrMagnitudeXZ(ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2452590))(a, b);
  }
  static inline float DistancePointSegment2(int32_t x, int32_t z, int32_t px, int32_t pz, int32_t qx, int32_t qz) {
    return reinterpret_cast<float(__fastcall*)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A2E90))(x, z, px, pz, qx, qz);
  }
  static inline float DistancePointSegment2(ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b, ModdingAPI::Exposed::UnityEngine::Vector3 p) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A2EF0))(a, b, p);
  }
  static inline int32_t ComputeVertexHash(int32_t x, int32_t y, int32_t z) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A2F50))(x, y, z);
  }
  static inline float Hermite(float start, float end, float value) {
    return reinterpret_cast<float(__fastcall*)(float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A2FB0))(start, end, value);
  }
  static inline float MapToRange(float targetMin, float targetMax, float value) {
    return reinterpret_cast<float(__fastcall*)(float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A3010))(targetMin, targetMax, value);
  }
  static inline System_String* FormatBytes(int32_t bytes) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A3070))(bytes);
  }
  static inline float MagnitudeXZ(ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A30D0))(a, b);
  }
  static inline int32_t Repeat(int32_t i, int32_t n) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A3130))(i, n);
  }
  static inline float Abs(float a) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A3190))(a);
  }
  static inline int32_t Abs(int32_t a) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A31F0))(a);
  }
  static inline float Min(float a, float b) {
    return reinterpret_cast<float(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A3250))(a, b);
  }
  static inline int32_t Min(int32_t a, int32_t b) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A32B0))(a, b);
  }
  static inline uint32_t Min(uint32_t a, uint32_t b) {
    return reinterpret_cast<uint32_t(__fastcall*)(uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A3310))(a, b);
  }
  static inline float Max(float a, float b) {
    return reinterpret_cast<float(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A3370))(a, b);
  }
  static inline int32_t Max(int32_t a, int32_t b) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A33D0))(a, b);
  }
  static inline uint32_t Max(uint32_t a, uint32_t b) {
    return reinterpret_cast<uint32_t(__fastcall*)(uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A3430))(a, b);
  }
  static inline uint16_t Max(uint16_t a, uint16_t b) {
    return reinterpret_cast<uint16_t(__fastcall*)(uint16_t, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A3490))(a, b);
  }
  static inline float Sign(float a) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A34F0))(a);
  }
  static inline int32_t Sign(int32_t a) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A3550))(a);
  }
  static inline float Clamp(float a, float b, float c) {
    return reinterpret_cast<float(__fastcall*)(float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A35B0))(a, b, c);
  }
  static inline int32_t Clamp(int32_t a, int32_t b, int32_t c) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A3610))(a, b, c);
  }
  static inline float Clamp01(float a) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A3670))(a);
  }
  static inline int32_t Clamp01(int32_t a) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A36D0))(a);
  }
  static inline float Lerp(float a, float b, float t) {
    return reinterpret_cast<float(__fastcall*)(float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A3730))(a, b, t);
  }
  static inline int32_t RoundToInt(float v) {
    return reinterpret_cast<int32_t(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A3790))(v);
  }
  static inline int32_t RoundToInt(double v) {
    return reinterpret_cast<int32_t(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A37F0))(v);
  }
};
}