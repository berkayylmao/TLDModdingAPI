// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.DateTime.hpp"


namespace ModdingAPI::Exposed {
struct __ThreeDaysOfNight_Il2CppStaticFields {
  bool m_ForcedOn;
  int32_t m_CurrentDay;
  ModdingAPI::Exposed::System::DateTime m_StartEventTime;
  ModdingAPI::Exposed::System::DateTime m_DayTwoStartTime;
  ModdingAPI::Exposed::System::DateTime m_DayThreeStartTime;
  ModdingAPI::Exposed::System::DateTime m_DayFourStartTime;
  ModdingAPI::Exposed::System::DateTime m_EndEventTime;
  int32_t m_OverrideSetDay;
  ModdingAPI::Exposed::ThreeDaysOfNight* m_Instance;
};

struct __ThreeDaysOfNight_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ThreeDaysOfNight_Il2CppClass {
  Il2CppClass_1 _1;
  __ThreeDaysOfNight_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ThreeDaysOfNight_Il2CppVtbl vtbl;
};

class ThreeDaysOfNight {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C603F8;
  static inline    __ThreeDaysOfNight_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ThreeDaysOfNight_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ThreeDaysOfNight_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ThreeDaysOfNight_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_FlashlightDurationMultiplier;
  float m_FlashlightEffectivenessMultiplier;
  float m_DayFourColdRateMultiplier;
  float m_DayFourBaselineAirTempIndoors;
  float m_HoursNoWolfGracePeriod;
  int32_t m_NumReduceMaxSpawnWolf;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ThreeDaysOfNight*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAE990))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ThreeDaysOfNight*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<bool> m_ForcedOn = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_ForcedOn; }
  );
  static inline __CppStaticProperty<int32_t> m_CurrentDay = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_CurrentDay; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::DateTime> m_StartEventTime = __CppStaticProperty<ModdingAPI::Exposed::System::DateTime>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_StartEventTime; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::DateTime> m_DayTwoStartTime = __CppStaticProperty<ModdingAPI::Exposed::System::DateTime>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_DayTwoStartTime; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::DateTime> m_DayThreeStartTime = __CppStaticProperty<ModdingAPI::Exposed::System::DateTime>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_DayThreeStartTime; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::DateTime> m_DayFourStartTime = __CppStaticProperty<ModdingAPI::Exposed::System::DateTime>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_DayFourStartTime; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::DateTime> m_EndEventTime = __CppStaticProperty<ModdingAPI::Exposed::System::DateTime>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_EndEventTime; }
  );
  static inline __CppStaticProperty<int32_t> m_OverrideSetDay = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_OverrideSetDay; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::ThreeDaysOfNight*> m_Instance = __CppStaticProperty<ModdingAPI::Exposed::ThreeDaysOfNight*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_Instance; }
  );

  // Static methods:
  static inline void Init() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAEA20))();
  }
  static inline void SetCurrentDay(int32_t dayNumber) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAEC40))(dayNumber);
  }
  static inline void SetTransitionToDay(int32_t dayNumber) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAECF0))(dayNumber);
  }
  static inline void SetDailyTimerLabel(ModdingAPI::Exposed::UILabel* dayLabel, ModdingAPI::Exposed::UILabel* timerLabel) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAEF00))(dayLabel, timerLabel);
  }
  static inline bool CanManuallyUnlock() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))();
  }
  static inline bool IsActive() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))();
  }
  static inline bool NoWolfGracePeriodActive() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAF1F0))();
  }
  static inline int32_t GetCurrentDayNumber() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAF2E0))();
  }
  static inline float GetFlashlightDurationMultiplier() {
    return reinterpret_cast<float(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAF3F0))();
  }
  static inline float GetFlashlightEffectivenessMultiplier() {
    return reinterpret_cast<float(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAF480))();
  }
  static inline float GetColdRateMultiplier() {
    return reinterpret_cast<float(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAF510))();
  }
  static inline float GetBaselineAirTempIndoors() {
    return reinterpret_cast<float(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAF5A0))();
  }
  static inline int32_t GetNumReduceMaxSpawnWolf() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAF630))();
  }
};
}