// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.AnimatorStateInfo.hpp"
#include "ModdingAPI.Exposed.AnimationEventValue.hpp"


namespace ModdingAPI::Exposed {
struct __AnimationEvents_Il2CppStaticFields {
  ModdingAPI::Exposed::Utils::Subtitle_array* s_Subtitles;
};

struct __AnimationEvents_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_OnStateEnter;
  VirtualInvokeData _5_OnStateUpdate;
  VirtualInvokeData _6_OnStateExit;
  VirtualInvokeData _7_OnStateMove;
  VirtualInvokeData _8_OnStateIK;
  VirtualInvokeData _9_OnStateMachineEnter;
  VirtualInvokeData _10_OnStateMachineExit;
  VirtualInvokeData _11_OnStateEnter;
  VirtualInvokeData _12_OnStateUpdate;
  VirtualInvokeData _13_OnStateExit;
  VirtualInvokeData _14_OnStateMove;
  VirtualInvokeData _15_OnStateIK;
  VirtualInvokeData _16_OnStateMachineEnter;
  VirtualInvokeData _17_OnStateMachineExit;
};

struct __AnimationEvents_Il2CppClass {
  Il2CppClass_1 _1;
  __AnimationEvents_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AnimationEvents_Il2CppVtbl vtbl;
};

class AnimationEvents {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C4EDF8;
  static inline    __AnimationEvents_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __AnimationEvents_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__AnimationEvents_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __AnimationEvents_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_FrameRate;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Events;
  ModdingAPI::Exposed::System::Boolean_array* m_EventsPushed;
  ModdingAPI::Exposed::System::Boolean_array* m_EventsPopped;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_EventStacks;
  float m_NumFrames;
  float m_LastFrameId;
  float m_SyncNormalizedTime;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_HasEntered;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_HasUpdated;
  ModdingAPI::Exposed::PlayEventMonitor* m_PlayEventMonitor;
  uint32_t m_NumSubtitles;

  // Member methods:
  void DoEnter(ModdingAPI::Exposed::UnityEngine::Animator* animator, ModdingAPI::Exposed::UnityEngine::AnimatorStateInfo stateInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::UnityEngine::AnimatorStateInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA4CD0))(this, animator, stateInfo);
  }
  void OnStateEnter(ModdingAPI::Exposed::UnityEngine::Animator* animator, ModdingAPI::Exposed::UnityEngine::AnimatorStateInfo stateInfo, int32_t layerIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::UnityEngine::AnimatorStateInfo, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA4E40))(this, animator, stateInfo, layerIndex);
  }
  void DoExit(ModdingAPI::Exposed::UnityEngine::AnimatorStateInfo stateInfo, ModdingAPI::Exposed::UnityEngine::Animator* animator) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::AnimatorStateInfo, ModdingAPI::Exposed::UnityEngine::Animator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA5130))(this, stateInfo, animator);
  }
  void OnStateExit(ModdingAPI::Exposed::UnityEngine::Animator* animator, ModdingAPI::Exposed::UnityEngine::AnimatorStateInfo stateInfo, int32_t layerIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::UnityEngine::AnimatorStateInfo, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA5C80))(this, animator, stateInfo, layerIndex);
  }
  void DoUpdate(ModdingAPI::Exposed::UnityEngine::AnimatorStateInfo stateInfo, ModdingAPI::Exposed::UnityEngine::Animator* animator) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::AnimatorStateInfo, ModdingAPI::Exposed::UnityEngine::Animator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA5EB0))(this, stateInfo, animator);
  }
  void OnStateUpdate(ModdingAPI::Exposed::UnityEngine::Animator* animator, ModdingAPI::Exposed::UnityEngine::AnimatorStateInfo stateInfo, int32_t layerIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::UnityEngine::AnimatorStateInfo, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA6120))(this, animator, stateInfo, layerIndex);
  }
  void MaybeTriggerEvent(ModdingAPI::Exposed::UnityEngine::Animator* animator, int32_t index, float frame) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA6210))(this, animator, index, frame);
  }
  void MaybeRecreateEventArrays() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA6D80))(this);
  }
  void ProcessEndFrameEvents(ModdingAPI::Exposed::UnityEngine::Animator* animator) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA7070))(this, animator);
  }
  void ResetEventStacks(ModdingAPI::Exposed::UnityEngine::Animator* animator) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA7080))(this, animator);
  }
  ModdingAPI::Exposed::AnimationEventValue GetCurrentValueFromList(ModdingAPI::Exposed::System::Collections::Generic::List_T_* list, ModdingAPI::Exposed::UnityEngine::Animator* animator, int32_t hash, int32_t type, ModdingAPI::Exposed::UnityEngine::RuntimeAnimatorController* target) {
    return reinterpret_cast<ModdingAPI::Exposed::AnimationEventValue(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::UnityEngine::Animator*, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::RuntimeAnimatorController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA7630))(this, list, animator, hash, type, target);
  }
  void EventHide(ModdingAPI::Exposed::UnityEngine::Animator* animator, ModdingAPI::Exposed::AnimationEventData* eventAnimationData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::AnimationEventData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA7930))(this, animator, eventAnimationData);
  }
  void EventShow(ModdingAPI::Exposed::UnityEngine::Animator* animator, ModdingAPI::Exposed::AnimationEventData* eventAnimationData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::AnimationEventData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA7BD0))(this, animator, eventAnimationData);
  }
  bool IsChildOfFP(ModdingAPI::Exposed::UnityEngine::GameObject* go) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA7E70))(this, go);
  }
  void EventPlay(ModdingAPI::Exposed::UnityEngine::Animator* animator, ModdingAPI::Exposed::AnimationEventData* eventAnimationData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::AnimationEventData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA8050))(this, animator, eventAnimationData);
  }
  void EventStop(ModdingAPI::Exposed::UnityEngine::Animator* animator, ModdingAPI::Exposed::AnimationEventData* eventAnimationData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::AnimationEventData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA83D0))(this, animator, eventAnimationData);
  }
  void EventPlayMovie(ModdingAPI::Exposed::UnityEngine::Animator* animator, ModdingAPI::Exposed::AnimationEventData* eventAnimationData, float delay, float startTime) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::AnimationEventData*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA8710))(this, animator, eventAnimationData, delay, startTime);
  }
  void EventDisplaySubtitles(ModdingAPI::Exposed::UnityEngine::Animator* animator, ModdingAPI::Exposed::AnimationEventData* eventAnimationData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::AnimationEventData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA88F0))(this, animator, eventAnimationData);
  }
  void EventUpdateLayerWeight(ModdingAPI::Exposed::UnityEngine::Animator* animator, ModdingAPI::Exposed::AnimationEventData* eventAnimationData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::AnimationEventData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA8A50))(this, animator, eventAnimationData);
  }
  void EnableHipAndShoulderOffsetLayerOverride(ModdingAPI::Exposed::UnityEngine::Animator* animator, ModdingAPI::Exposed::AnimationEventData* eventAnimationData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::AnimationEventData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA8B40))(this, animator, eventAnimationData);
  }
  void EventPrepareMovie(ModdingAPI::Exposed::UnityEngine::Animator* animator, ModdingAPI::Exposed::AnimationEventData* eventAnimationData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::AnimationEventData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA8C00))(this, animator, eventAnimationData);
  }
  void EventEnableObject(ModdingAPI::Exposed::UnityEngine::Animator* animator, ModdingAPI::Exposed::AnimationEventData* eventAnimationData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::AnimationEventData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA8CC0))(this, animator, eventAnimationData);
  }
  void EventDisableObject(ModdingAPI::Exposed::UnityEngine::Animator* animator, ModdingAPI::Exposed::AnimationEventData* eventAnimationData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::AnimationEventData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA8CE0))(this, animator, eventAnimationData);
  }
  void DoEnableObject(ModdingAPI::Exposed::UnityEngine::Animator* animator, ModdingAPI::Exposed::AnimationEventData* eventAnimationData, bool isEnabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::AnimationEventData*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA8D00))(this, animator, eventAnimationData, isEnabled);
  }
  void EventStopMovie(ModdingAPI::Exposed::UnityEngine::Animator* animator, ModdingAPI::Exposed::AnimationEventData* eventAnimationData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::AnimationEventData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA8F60))(this, animator, eventAnimationData);
  }
  void SetParameterValue(ModdingAPI::Exposed::UnityEngine::Animator* animator, System_String* name, ModdingAPI::Exposed::AnimationEventValue value, ModdingAPI::Exposed::UnityEngine::RuntimeAnimatorController* target, int32_t targetCycleOffsetHash) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, System_String*, ModdingAPI::Exposed::AnimationEventValue, ModdingAPI::Exposed::UnityEngine::RuntimeAnimatorController*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA8FF0))(this, animator, name, value, target, targetCycleOffsetHash);
  }
  void PushAnimationEventValue(ModdingAPI::Exposed::UnityEngine::Animator* animator, int32_t index, ModdingAPI::Exposed::AnimationEventValue value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, int32_t, ModdingAPI::Exposed::AnimationEventValue)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA93C0))(this, animator, index, value);
  }
  void PopAnimationEventValue(ModdingAPI::Exposed::UnityEngine::Animator* animator, int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*, ModdingAPI::Exposed::UnityEngine::Animator*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA9580))(this, animator, index);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AnimationEvents*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA9740))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::Utils::Subtitle_array*> s_Subtitles = __CppStaticProperty<ModdingAPI::Exposed::Utils::Subtitle_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_Subtitles; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CA9AA0))();
  }
};
}