// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Runtime.Serialization.StreamingContext.hpp"


namespace ModdingAPI::Exposed::System::Net {
struct __WebProxy_Il2CppStaticFields {
};

struct __WebProxy_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_GetProxy;
  VirtualInvokeData _5_IsBypassed;
  VirtualInvokeData _6_get_Credentials;
  VirtualInvokeData _7_System_Runtime_Serialization_ISerializable_GetObjectData;
  VirtualInvokeData _8_GetObjectData;
};

struct __WebProxy_Il2CppClass {
  Il2CppClass_1 _1;
  __WebProxy_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __WebProxy_Il2CppVtbl vtbl;
};

class WebProxy {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C37800;
  static inline    __WebProxy_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __WebProxy_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__WebProxy_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __WebProxy_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  bool _UseRegistry;
  bool _BypassOnLocal;
  bool m_EnableAutoproxy;
  ModdingAPI::Exposed::System::Uri* _ProxyAddress;
  ModdingAPI::Exposed::System::Collections::ArrayList* _BypassList;
  ModdingAPI::Exposed::System::Net::ICredentials* _Credentials;
  ModdingAPI::Exposed::System::Text::RegularExpressions::Regex_array* _RegExBypassList;
  ModdingAPI::Exposed::System::Collections::Hashtable* _ProxyHostAddresses;
  ModdingAPI::Exposed::System::Net::AutoWebProxyScriptEngine* m_ScriptEngine;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB08C30))(this);
  }
  void ::ctor(ModdingAPI::Exposed::System::Uri* Address, bool BypassOnLocal, ModdingAPI::Exposed::System::String_array* BypassList, ModdingAPI::Exposed::System::Net::ICredentials* Credentials) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*, ModdingAPI::Exposed::System::Uri*, bool, ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::System::Net::ICredentials*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB08CC0))(this, Address, BypassOnLocal, BypassList, Credentials);
  }
  ModdingAPI::Exposed::System::Net::ICredentials* get_Credentials() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Net::ICredentials*(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110B0))(this);
  }
  bool get_UseDefaultCredentials() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB08E40))(this);
  }
  void set_UseDefaultCredentials(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB08F10))(this, value);
  }
  ModdingAPI::Exposed::System::Uri* GetProxy(ModdingAPI::Exposed::System::Uri* destination) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Uri*(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*, ModdingAPI::Exposed::System::Uri*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB08FD0))(this, destination);
  }
  void UpdateRegExList(bool canThrow) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB09190))(this, canThrow);
  }
  bool IsMatchInBypassList(ModdingAPI::Exposed::System::Uri* input) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*, ModdingAPI::Exposed::System::Uri*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB094A0))(this, input);
  }
  bool IsLocal(ModdingAPI::Exposed::System::Uri* host) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*, ModdingAPI::Exposed::System::Uri*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB09760))(this, host);
  }
  bool IsLocalInProxyHash(ModdingAPI::Exposed::System::Uri* host) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*, ModdingAPI::Exposed::System::Uri*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB09AC0))(this, host);
  }
  bool IsBypassed(ModdingAPI::Exposed::System::Uri* host) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*, ModdingAPI::Exposed::System::Uri*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB09C10))(this, host);
  }
  bool IsBypassedManual(ModdingAPI::Exposed::System::Uri* host) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*, ModdingAPI::Exposed::System::Uri*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB09D50))(this, host);
  }
  void ::ctor(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo* serializationInfo, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext streamingContext) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*, ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB09F60))(this, serializationInfo, streamingContext);
  }
  void System::Runtime::Serialization::ISerializable::GetObjectData(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo* serializationInfo, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext streamingContext) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*, ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0x91FD60))(this, serializationInfo, streamingContext);
  }
  void GetObjectData(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo* serializationInfo, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext streamingContext) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*, ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB0A240))(this, serializationInfo, streamingContext);
  }
  ModdingAPI::Exposed::System::Net::AutoWebProxyScriptEngine* get_ScriptEngine() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Net::AutoWebProxyScriptEngine*(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319960))(this);
  }
  void ::ctor(bool enableAutoproxy) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB0A3E0))(this, enableAutoproxy);
  }
  void UnsafeUpdateFromRegistry() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5EB2D0))(this);
  }
  bool GetProxyAuto(ModdingAPI::Exposed::System::Uri* destination, ModdingAPI::Exposed::System::Uri* proxyUri) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*, ModdingAPI::Exposed::System::Uri*, ModdingAPI::Exposed::System::Uri*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB0A3F0))(this, destination, proxyUri);
  }
  bool IsBypassedAuto(ModdingAPI::Exposed::System::Uri* destination, bool isBypassed) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::WebProxy*, ModdingAPI::Exposed::System::Uri*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB0A480))(this, destination, isBypassed);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::System::Net::IWebProxy* CreateDefaultProxy() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Net::IWebProxy*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x90CA60))();
  }
  static inline bool AreAllBypassed(ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_* proxies, bool checkFirstOnly) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB0A500))(proxies, checkFirstOnly);
  }
  static inline ModdingAPI::Exposed::System::Uri* ProxyUri(System_String* proxyName) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Uri*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB0A6A0))(proxyName);
  }
};
}