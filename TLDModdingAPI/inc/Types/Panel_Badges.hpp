// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed {
struct __Panel_Badges_Il2CppStaticFields {
};

struct __Panel_Badges_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Panel_Badges_Il2CppClass {
  Il2CppClass_1 _1;
  __Panel_Badges_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Panel_Badges_Il2CppVtbl vtbl;
};

class Panel_Badges {
public:
  // Il2Cpp fields:
  __Panel_Badges_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::ButtonLegendContainer* m_ButtonLegendContainer;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ButtonLeft;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ButtonRight;
  ModdingAPI::Exposed::TweenAlpha* m_LabelTween;
  ModdingAPI::Exposed::UILabel* m_NameLabel;
  ModdingAPI::Exposed::UISprite* m_LineBreakSprite;
  ModdingAPI::Exposed::UILabel* m_DescLabel;
  ModdingAPI::Exposed::UISprite* m_ProgressBarSprite;
  ModdingAPI::Exposed::UILabel* m_ProgressLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FeatsObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ChallengesObject;
  ModdingAPI::Exposed::UILabel* m_NavButtonHeaderLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ScrollListParentObject;
  ModdingAPI::Exposed::ScrollList* m_FeatsScrollList;
  ModdingAPI::Exposed::ScrollList* m_ChallengesScrollList;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FeatsUpsell;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ChallengesUpsell;
  ModdingAPI::Exposed::UnityEngine::Color m_ColorHeaderLocked;
  ModdingAPI::Exposed::UnityEngine::Color m_ColorHeaderUnlocked;
  ModdingAPI::Exposed::UnityEngine::Color m_ColorDescriptionLocked;
  ModdingAPI::Exposed::UnityEngine::Color m_ColorDescriptionUnlocked;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FeatProgressObject;
  ModdingAPI::Exposed::UISprite* m_FeatProgressSprite;
  ModdingAPI::Exposed::UILabel* m_FeatProgressLabel;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_FeatProgressBarRange;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_ChallengeBadges;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FeatBenefitHeader;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FeatBenefitDescription;
  ModdingAPI::Exposed::ScrollList* m_SelectedScrollList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Feats;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Challenges;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_SelectedBadgeInfo;
  ModdingAPI::Exposed::ButtonLegendConfigure_array* m_ButtonLegendConfigureArray_Feats;
  ModdingAPI::Exposed::ButtonLegendConfigure_array* m_ButtonLegendConfigureArray_Challenges;
  int32_t m_CameFrom;
  ModdingAPI::Exposed::UILabel* m_FeatBenefitDescriptionLabel;
  ModdingAPI::Exposed::UILabel* m_FeatBenefitHeaderLabel;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1E430))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1E550))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1E6A0))(this);
  }
  void Enable(bool enable, int32_t cameFrom) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1E7D0))(this, enable, cameFrom);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x165DF10))(this);
  }
  void OnCancel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1EA10))(this);
  }
  void OnBadgeLabelClicked() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1EBD0))(this);
  }
  void NextTool() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1EC90))(this);
  }
  void PrevTool() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1EE50))(this);
  }
  void BadgeIndexSelected(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1F010))(this, index);
  }
  void OnFeats() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1F1B0))(this);
  }
  void OnChallenges() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1F280))(this);
  }
  bool HasAnyUnviewedUnlockedBadges() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1F350))(this);
  }
  void SetupScrollLists() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1F3A0))(this);
  }
  void AddFeatToList(ModdingAPI::Exposed::Feat* f) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*, ModdingAPI::Exposed::Feat*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1F3C0))(this, f);
  }
  void SetupFeatScrollList() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1F4E0))(this);
  }
  void AddChallengeToList(ModdingAPI::Exposed::BadgeInfo* bi) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*, ModdingAPI::Exposed::BadgeInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1F840))(this, bi);
  }
  ModdingAPI::Exposed::BadgeUIInfo* GetBadgeUIInfo(int32_t type) {
    return reinterpret_cast<ModdingAPI::Exposed::BadgeUIInfo*(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1F990))(this, type);
  }
  void SetupChallengeScrollList() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1FB50))(this);
  }
  void EnableFeatBenefit(bool isEnabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1FFE0))(this, isEnabled);
  }
  void RefreshVisualsMainScreen() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B200B0))(this);
  }
  void RefreshVisualsScrollList() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B202D0))(this);
  }
  void SetTabActive(ModdingAPI::Exposed::UnityEngine::GameObject* tabObj) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B20CC0))(this, tabObj);
  }
  bool ListHasUnviewedUnlockedBadge(ModdingAPI::Exposed::System::Collections::Generic::List_T_* badgeInfoList) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B20E40))(this, badgeInfoList);
  }
  void UpdateButtonLegend() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B20FC0))(this);
  }
  void RefreshButtonConfigure(ModdingAPI::Exposed::ButtonLegendConfigure_array* buttonLegendConfigureArray) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*, ModdingAPI::Exposed::ButtonLegendConfigure_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B210C0))(this, buttonLegendConfigureArray);
  }
  void DoGamepadControls() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B211C0))(this);
  }
  void RefreshVisuals() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B21350))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Badges*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B21460))(this);
  }
};
}