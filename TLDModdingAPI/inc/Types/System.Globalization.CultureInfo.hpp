// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Globalization.CultureInfo.Data.hpp"


namespace ModdingAPI::Exposed::System::Globalization {
struct __CultureInfo_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Globalization::CultureInfo* invariant_culture_info;
  Il2CppObject* shared_table_lock;
  ModdingAPI::Exposed::System::Globalization::CultureInfo* default_current_culture;
  ModdingAPI::Exposed::System::Globalization::CultureInfo* s_DefaultThreadCurrentUICulture;
  ModdingAPI::Exposed::System::Globalization::CultureInfo* s_DefaultThreadCurrentCulture;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* shared_by_number;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* shared_by_name;
  bool IsTaiwanSku;
};

struct __CultureInfo_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _6_get_LCID;
  VirtualInvokeData _7_get_Name;
  VirtualInvokeData _8_get_Calendar;
  VirtualInvokeData _9_get_Parent;
  VirtualInvokeData _10_get_TextInfo;
  VirtualInvokeData _11_Clone;
  VirtualInvokeData _12_get_CompareInfo;
  VirtualInvokeData _13_get_IsNeutralCulture;
  VirtualInvokeData _14_get_NumberFormat;
  VirtualInvokeData _15_set_NumberFormat;
  VirtualInvokeData _16_get_DateTimeFormat;
  VirtualInvokeData _17_set_DateTimeFormat;
  VirtualInvokeData _18_get_EnglishName;
  VirtualInvokeData _19_GetFormat;
};

struct __CultureInfo_Il2CppClass {
  Il2CppClass_1 _1;
  __CultureInfo_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CultureInfo_Il2CppVtbl vtbl;
};

class CultureInfo {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C465E0;
  static inline    CultureInfo* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C6CF78;
  static inline    __CultureInfo_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline CultureInfo* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (CultureInfo**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __CultureInfo_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__CultureInfo_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __CultureInfo_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  bool m_isReadOnly;
  int32_t cultureID;
  int32_t parent_lcid;
  int32_t datetime_index;
  int32_t number_index;
  int32_t default_calendar_type;
  bool m_useUserOverride;
  ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* numInfo;
  ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dateTimeInfo;
  ModdingAPI::Exposed::System::Globalization::TextInfo* textInfo;
  System_String* m_name;
  System_String* englishname;
  System_String* nativename;
  System_String* iso3lang;
  System_String* iso2lang;
  System_String* win3lang;
  System_String* territory;
  ModdingAPI::Exposed::System::String_array* native_calendar_names;
  ModdingAPI::Exposed::System::Globalization::CompareInfo* compareInfo;
  void* textinfo_data;
  int32_t m_dataItem;
  ModdingAPI::Exposed::System::Globalization::Calendar* calendar;
  ModdingAPI::Exposed::System::Globalization::CultureInfo* parent_culture;
  bool constructed;
  ModdingAPI::Exposed::System::Byte_array* cached_serialized_form;
  ModdingAPI::Exposed::System::Globalization::CultureData* m_cultureData;
  bool m_isInherited;

  // Member methods:
  System_String* get_Territory() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319950))(this);
  }
  int32_t get_LCID() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311080))(this);
  }
  System_String* get_Name() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319980))(this);
  }
  ModdingAPI::Exposed::System::Globalization::Calendar* get_Calendar() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::Calendar*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF7ECA0))(this);
  }
  ModdingAPI::Exposed::System::Globalization::CultureInfo* get_Parent() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF7ED70))(this);
  }
  ModdingAPI::Exposed::System::Globalization::TextInfo* get_TextInfo() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::TextInfo*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF7F2C0))(this);
  }
  Il2CppObject* Clone() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF7F530))(this);
  }
  bool Equals(Il2CppObject* value) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF7F7E0))(this, value);
  }
  ModdingAPI::Exposed::System::Globalization::CultureInfo::Data GetTextInfoData() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo::Data(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF7FE40))(this);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311080))(this);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319980))(this);
  }
  ModdingAPI::Exposed::System::Globalization::CompareInfo* get_CompareInfo() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CompareInfo*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF7FE60))(this);
  }
  bool get_IsNeutralCulture() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF800B0))(this);
  }
  void CheckNeutral() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* get_NumberFormat() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF800F0))(this);
  }
  void set_NumberFormat(ModdingAPI::Exposed::System::Globalization::NumberFormatInfo* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*, ModdingAPI::Exposed::System::Globalization::NumberFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF80280))(this, value);
  }
  ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* get_DateTimeFormat() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF803D0))(this);
  }
  void set_DateTimeFormat(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF805B0))(this, value);
  }
  System_String* get_EnglishName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF80700))(this);
  }
  bool get_IsReadOnly() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33C2C0))(this);
  }
  Il2CppObject* GetFormat(ModdingAPI::Exposed::System::Type* formatType) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF80770))(this, formatType);
  }
  void Construct() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF808B0))(this);
  }
  bool construct_internal_locale_from_lcid(int32_t lcid) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF80910))(this, lcid);
  }
  bool construct_internal_locale_from_name(System_String* name) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF80970))(this, name);
  }
  void ConstructInvariant(bool read_only) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF80C40))(this, read_only);
  }
  ModdingAPI::Exposed::System::Globalization::TextInfo* CreateTextInfo(bool readOnly) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::TextInfo*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF80D90))(this, readOnly);
  }
  void ::ctor(int32_t culture) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF80F00))(this, culture);
  }
  void ::ctor(int32_t culture, bool useUserOverride) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF80F20))(this, culture, useUserOverride);
  }
  void ::ctor(int32_t culture, bool useUserOverride, bool read_only) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*, int32_t, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF80F40))(this, culture, useUserOverride, read_only);
  }
  void ::ctor(System_String* name) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF81240))(this, name);
  }
  void ::ctor(System_String* name, bool useUserOverride) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF81260))(this, name, useUserOverride);
  }
  void ::ctor(System_String* name, bool useUserOverride, bool read_only) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*, System_String*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF81280))(this, name, useUserOverride, read_only);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF81620))(this);
  }
  int32_t get_CalendarType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF84320))(this);
  }
  System_String* get_SortName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319980))(this);
  }
  bool get_HasInvariantCultureName() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF84D40))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::CultureInfo*> invariant_culture_info = __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::CultureInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->invariant_culture_info; }
  );
  static inline __CppStaticProperty<Il2CppObject*> shared_table_lock = __CppStaticProperty<Il2CppObject*>(
   []() { return &GetStaticClassInstance()->pStaticFields->shared_table_lock; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::CultureInfo*> default_current_culture = __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::CultureInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->default_current_culture; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::CultureInfo*> s_DefaultThreadCurrentUICulture = __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::CultureInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_DefaultThreadCurrentUICulture; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::CultureInfo*> s_DefaultThreadCurrentCulture = __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::CultureInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_DefaultThreadCurrentCulture; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> shared_by_number = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->shared_by_number; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> shared_by_name = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->shared_by_name; }
  );
  static inline __CppStaticProperty<bool> IsTaiwanSku = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->IsTaiwanSku; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::System::Globalization::CultureInfo* get_InvariantCulture() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF7E8C0))();
  }
  static inline ModdingAPI::Exposed::System::Globalization::CultureInfo* get_CurrentCulture() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF7E970))();
  }
  static inline ModdingAPI::Exposed::System::Globalization::CultureInfo* get_CurrentUICulture() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF7E9A0))();
  }
  static inline ModdingAPI::Exposed::System::Globalization::CultureInfo* ConstructCurrentCulture() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF7E9D0))();
  }
  static inline ModdingAPI::Exposed::System::Globalization::CultureInfo* ConstructCurrentUICulture() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF7EC10))();
  }
  static inline ModdingAPI::Exposed::System::Globalization::CultureInfo_array* GetCultures(int32_t types) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo_array*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF7F900))(types);
  }
  static inline System_String* get_current_locale_name() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF80A90))();
  }
  static inline ModdingAPI::Exposed::System::Globalization::CultureInfo_array* internal_get_cultures(bool neutral, bool specific, bool installed) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo_array*(__fastcall*)(bool, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF80B20))(neutral, specific, installed);
  }
  static inline void insert_into_shared_tables(ModdingAPI::Exposed::System::Globalization::CultureInfo* c) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF81630))(c);
  }
  static inline ModdingAPI::Exposed::System::Globalization::CultureInfo* GetCultureInfo(int32_t culture) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF819C0))(culture);
  }
  static inline ModdingAPI::Exposed::System::Globalization::CultureInfo* GetCultureInfo(System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF81D80))(name);
  }
  static inline ModdingAPI::Exposed::System::Globalization::CultureInfo* CreateCulture(System_String* name, bool reference) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)(System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF82130))(name, reference);
  }
  static inline ModdingAPI::Exposed::System::Globalization::CultureInfo* CreateSpecificCulture(System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF822B0))(name);
  }
  static inline ModdingAPI::Exposed::System::Globalization::CultureInfo* CreateSpecificCultureFromNeutral(System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF82810))(name);
  }
  static inline ModdingAPI::Exposed::System::Globalization::Calendar* CreateCalendar(int32_t calendarType) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::Calendar*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF84400))(calendarType);
  }
  static inline ModdingAPI::Exposed::System::Exception* CreateNotFoundException(System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF84720))(name);
  }
  static inline ModdingAPI::Exposed::System::Globalization::CultureInfo* get_DefaultThreadCurrentCulture() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF848A0))();
  }
  static inline ModdingAPI::Exposed::System::Globalization::CultureInfo* get_DefaultThreadCurrentUICulture() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF84950))();
  }
  static inline ModdingAPI::Exposed::System::Globalization::CultureInfo* get_UserDefaultUICulture() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF84A00))();
  }
  static inline ModdingAPI::Exposed::System::Globalization::CultureInfo* get_UserDefaultCulture() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF84A90))();
  }
  static inline void CheckDomainSafetyObject(Il2CppObject* obj, Il2CppObject* container) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF84B20))(obj, container);
  }
  static inline bool VerifyCultureName(System_String* cultureName, bool throwException) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF84E40))(cultureName, throwException);
  }
  static inline bool VerifyCultureName(ModdingAPI::Exposed::System::Globalization::CultureInfo* culture, bool throwException) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF84FC0))(culture, throwException);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF850B0))();
  }
};
}