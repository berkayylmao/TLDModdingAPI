// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed {
struct __InteriorLightingManager_Il2CppStaticFields {
};

struct __InteriorLightingManager_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __InteriorLightingManager_Il2CppClass {
  Il2CppClass_1 _1;
  __InteriorLightingManager_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __InteriorLightingManager_Il2CppVtbl vtbl;
};

class InteriorLightingManager {
public:
  // Il2Cpp fields:
  __InteriorLightingManager_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool m_ForceClearWeather;
  float m_MiddayMultiplier;
  float m_MiddayAmbientMultiplier;
  float m_SandboxAmbientMultiplier;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_LightGroupParent;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_LightGroupList;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_LooseLightParent;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_LooseLightList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_LooseLightsOriginal;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_LooseLightMiddayParent;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_LooseLightsMiddayList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_LooseLightsMiddayOriginal;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FxParent;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_ParticleList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_FXOriginalRate;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_LightShaftParent;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_LightShaftGimbleList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_LightShaftTodList;
  bool m_AutoGenerateCurves;
  int32_t m_CurveControlPoints;
  ModdingAPI::Exposed::ScaledCurve* m_ClearWeatherCurve;
  ModdingAPI::Exposed::ScaledCurve* m_PartlyCloudyWeatherCurve;
  ModdingAPI::Exposed::ScaledCurve* m_CloudyWeatherCurve;
  ModdingAPI::Exposed::ScaledCurve* m_LightSnowWeatherCurve;
  ModdingAPI::Exposed::ScaledCurve* m_HeavySnowWeatherCurve;
  ModdingAPI::Exposed::ScaledCurve* m_LightFogWeatherCurve;
  ModdingAPI::Exposed::ScaledCurve* m_DenseFogWeatherCurve;
  ModdingAPI::Exposed::ScaledCurve* m_BlizzardWeatherCurve;
  ModdingAPI::Exposed::ScaledCurve* m_AuroraCurve;
  ModdingAPI::Exposed::MinMax* m_ClearWeatherIntensity;
  ModdingAPI::Exposed::MinMax* m_PartlyCloudyWeatherIntensity;
  ModdingAPI::Exposed::MinMax* m_CloudyWeatherIntensity;
  ModdingAPI::Exposed::MinMax* m_LightSnowWeatherIntensity;
  ModdingAPI::Exposed::MinMax* m_HeavySnowWeatherIntensity;
  ModdingAPI::Exposed::MinMax* m_LightFogWeatherIntensity;
  ModdingAPI::Exposed::MinMax* m_DenseFogWeatherIntensity;
  ModdingAPI::Exposed::MinMax* m_BlizzardWeatherIntensity;
  ModdingAPI::Exposed::MinMax* m_AuroraIntensity;
  ModdingAPI::Exposed::MinMax* m_CycleRate;
  ModdingAPI::Exposed::MinMax* m_GroupCycleRate;
  ModdingAPI::Exposed::MinMax* m_WindRateMultiplier;
  ModdingAPI::Exposed::MinMax* m_NormalizedWindSpeed;
  float m_AuroraRed;
  float m_AuroraGreen;
  float m_AuroraBlue;
  float m_AuroraColorization;
  float m_RandomRate;
  float m_KeyStep;
  float m_ScrubTimer;
  float m_CurWeatherVal;
  float m_LitGrpIntensity;
  float m_TodIntensitySun;
  float m_TodIntensityCalc;
  float m_CurMiddayVal;
  float m_CurMiddayAmb;
  float m_AuroraFade;
  ModdingAPI::Exposed::UnityEngine::Color m_SunColour;
  float m_SunBright;
  ModdingAPI::Exposed::TodAmbientLight* m_AmbientLight;
  int32_t m_WeatherCur;
  int32_t m_WeatherPrv;
  float m_WeatherBlend;
  int32_t curTodBS;
  float curTodPercent;
  bool m_Initialized;

  // Member methods:
  void Initialize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19D95D0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19D9960))(this);
  }
  void UpdateLights(float scrubTime, float todSun, float todCalc, float auroraIntensity) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DA2A0))(this, scrubTime, todSun, todCalc, auroraIntensity);
  }
  ModdingAPI::Exposed::UnityEngine::Color GetAuroraColours() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DAD10))(this);
  }
  void UpdateParticles(float timeOfDayIntensity) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DAE60))(this, timeOfDayIntensity);
  }
  void UpdateLightShaft(float timeOfDayIntensity, bool followTod) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DB130))(this, timeOfDayIntensity, followTod);
  }
  void SetEmissionRate(ModdingAPI::Exposed::UnityEngine::ParticleSystem* ps, float er) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*, ModdingAPI::Exposed::UnityEngine::ParticleSystem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DB340))(this, ps, er);
  }
  void InitializeCurves() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DB4E0))(this);
  }
  float EvaluateCurve(int32_t curWeather, float curTime) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DC310))(this, curWeather, curTime);
  }
  float GetBlendedCurve(int32_t weather1, int32_t weather2, float curTime, float weatherBlend) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*, int32_t, int32_t, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DC4C0))(this, weather1, weather2, curTime, weatherBlend);
  }
  float GetWindMultiplier() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DC5F0))(this);
  }
  float GetGroupSpreadOffset() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DC710))(this);
  }
  float GetTimeOfDayIntensity() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DC830))(this);
  }
  float MiddayIntensities() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DC9B0))(this);
  }
  float GetSunlightIntensity(float sunlight, ModdingAPI::Exposed::UnityEngine::Color sunColor) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*, float, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DCAC0))(this, sunlight, sunColor);
  }
  void FindLightShaftControllers() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DCBB0))(this);
  }
  void FindLightGroups() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DCCE0))(this);
  }
  void FindLooseLights() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DCED0))(this);
  }
  void FindParticleSystems() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DD2A0))(this);
  }
  void GetStartingValues() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DD390))(this);
  }
  void FilterGroupedObjects() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DDDD0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InteriorLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19DE5D0))(this);
  }
};
}