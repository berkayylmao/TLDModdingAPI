// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Quaternion.hpp"


namespace ModdingAPI::Exposed {
struct __PlayerClimbRope_Il2CppStaticFields {
  ModdingAPI::Exposed::PlayerClimbRopeProxy* m_PlayerClimbRopeProxy;
};

struct __PlayerClimbRope_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __PlayerClimbRope_Il2CppClass {
  Il2CppClass_1 _1;
  __PlayerClimbRope_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __PlayerClimbRope_Il2CppVtbl vtbl;
};

class PlayerClimbRope {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C858E8;
  static inline    __PlayerClimbRope_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __PlayerClimbRope_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__PlayerClimbRope_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __PlayerClimbRope_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_ClimbSpeedUpFullyRested;
  float m_ClimbSpeedUpExhausted;
  float m_ClimbSpeedDownFullyRested;
  float m_ClimbSpeedDownExhausted;
  float m_LowStaminaSpeedScaleThreshold;
  float m_LowestStaminaSpeedScale;
  float m_StaminaDrainPerSecondClimbingUp;
  float m_StaminaDrainPerSecondClimbingDown;
  float m_StaminaDrainPerSecondClimbingHolding;
  float m_FatigueDrainPerSecondClimbingUp;
  float m_FatigueDrainPerSecondClimbingDown;
  float m_FatigueDrainPerSecondClimbingHolding;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_PitchLimitDegrees;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_YawLimitDegrees;
  float m_SlipRollMinSeconds;
  float m_SlipRollMaxSeconds;
  float m_SlipChanceInitial;
  float m_SlipChanceIncreasePerRoll;
  float m_SlipDropDistanceMin;
  float m_SlipDropDistanceMax;
  float m_FallChanceInitial;
  float m_FallChanceIncreasePerRoll;
  float m_FallDeathThreshold;
  float m_FallBelowGroundLiftedPositionOffset;
  bool m_Anim_ConstrainPitchDuringClimb;
  float m_Anim_ConstrainedPitchAngle;
  float m_Anim_GetOnDuration;
  float m_Anim_GetOnTopTimePerMeter;
  float m_Anim_GetOffDuration;
  float m_Anim_GetUpAfterFallDuration;
  float m_Anim_ClimbSpeedToAnimScalar;
  float m_Anim_UnitMotion;
  float m_Anim_DirectionTransitionTime;
  float m_Anim_SplineBasisBlendTime;
  float m_Anim_SplineRollBlendTime;
  float m_Anim_ProjectionSineOffset;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_Anim_ProjectionDistances;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_Anim_PitchRanges;
  float m_Anim_SideSwaySineOffset;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_Anim_SideSwayDistances;
  float m_Anim_DropBackSineOffset;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_Anim_DropBackDistances;
  float m_Anim_OvershootSineOffset;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_Anim_OvershootDistances;
  float m_Anim_FootOffset;
  float m_Anim_ClimbUpLookaheadDistance;
  float m_Anim_TopStepToSideDistance;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_Anim_HeadPosSpringStiffness;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_Anim_HeadPosSpringDampening;
  float m_Anim_PitchSpringStiffness;
  float m_Anim_PitchSpringDampening;
  float m_Anim_RollSpringStiffness;
  float m_Anim_RollSpringDampening;
  System_String* m_Audio_GetOn;
  System_String* m_Audio_GetOff;
  System_String* m_Audio_AboutToSlip;
  System_String* m_Audio_FallStart;
  System_String* m_Audio_FallStop;
  System_String* m_Audio_SlipStart;
  System_String* m_Audio_SlipStop;
  System_String* m_Audio_AboutToSlip_VO;
  System_String* m_Audio_FallStart_VO;
  System_String* m_Audio_FallStop_VO;
  System_String* m_Audio_SlipStart_VO;
  System_String* m_Audio_SlipStop_VO;
  System_String* m_Audio_ClimbExertion_VO;
  System_String* m_Audio_RopeSnap;
  bool m_BlockCameraPitch;
  bool m_BlockCameraYaw;
  bool m_IsFalling;
  ModdingAPI::Exposed::Rope* m_Rope;
  float m_ClimbSpeed;
  float m_CurrentSplineParameter;
  int32_t m_ClimbingState;
  bool m_FallWillRecover;
  float m_FallHeight;
  float m_SpeedScaleByStamina;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_StartPitchLimit;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_StartYawLimit;
  float m_GroundOffset;
  float m_MinSplineTAtTop;
  float m_MaxSplineTAtBottom;
  int32_t m_FindGroundCollisionLayer;
  float m_SplineTBeforeEdge;
  float m_Anim_Phase;
  float m_Anim_Direction;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_Anim_SplineNormal;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_Anim_SplineLat;
  float m_Anim_RequestSlip;
  float m_Anim_SlipTargetT;
  float m_Anim_SlipBaseT;
  float m_Anim_SlipTimer;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* m_Anim_SlipStageParams;
  int32_t m_Anim_SlipStageIndex;
  float m_Anim_SlipScalar;
  float m_Anim_LastSlipPitch;
  float m_Anim_LastSlipRoll;
  float m_Anim_LastSlipSwayOffset;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_Anim_FallRestPos;
  float m_Anim_CameraPitch;
  float m_Anim_CameraRoll;
  float m_NoStaminaTimerSeconds;
  float m_NextSlipRollSeconds;
  float m_NextSlipChance;
  float m_NextFallChance;
  ModdingAPI::Exposed::UnityEngine::Transform* m_RopePhysicsHelper;
  ModdingAPI::Exposed::UnityEngine::Transform* m_RopePhysicsHelper_Head;
  bool m_ForceBlendedValues;
  ModdingAPI::Exposed::Spring3* m_HeadSpring;
  ModdingAPI::Exposed::Spring* m_PitchSpring;
  ModdingAPI::Exposed::Spring* m_RollSpring;
  uint32_t m_SlipAudioId;
  uint32_t m_SlipVOId;
  uint32_t m_FallAudioId;
  uint32_t m_FallVOId;
  bool m_HasPlayedSnapAudio;
  ModdingAPI::Exposed::PlayerClimbRope::OnOffTransitionInfo* m_OnOffTransition;
  bool m_StartHasBeenCalled;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE1F00))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE1F20))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE22E0))(this, text);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* PutPlayerOnRopeAfterDeserialize(ModdingAPI::Exposed::PlayerClimbRopeProxy* saveProxy) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*, ModdingAPI::Exposed::PlayerClimbRopeProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE2520))(this, saveProxy);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE2680))(this);
  }
  void BeginClimbing(ModdingAPI::Exposed::Rope* r, float initialSplineT) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*, ModdingAPI::Exposed::Rope*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE2A40))(this, r, initialSplineT);
  }
  float FindLowestValidTOnSpline() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE4950))(this);
  }
  void RefreshSpringSettings() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE4FE0))(this);
  }
  void RequestExitToPoint(ModdingAPI::Exposed::Rope* r, ModdingAPI::Exposed::RopeExitPoint* rep) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*, ModdingAPI::Exposed::Rope*, ModdingAPI::Exposed::RopeExitPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE50B0))(this, r, rep);
  }
  void RequestExitTopOrBottom(ModdingAPI::Exposed::UnityEngine::Transform* camT) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE5A00))(this, camT);
  }
  void RequestExitAfterFall(ModdingAPI::Exposed::UnityEngine::Transform* camT) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE6650))(this, camT);
  }
  void EndClimbing(ModdingAPI::Exposed::UnityEngine::Vector3 endPos, ModdingAPI::Exposed::UnityEngine::Quaternion endRot) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Quaternion)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE7080))(this, endPos, endRot);
  }
  bool IsInOnOffTransition() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE7370))(this);
  }
  bool FallingWithoutRecovery() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE7380))(this);
  }
  void OnRopeTransition(bool onRope) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE73A0))(this, onRope);
  }
  void SetClimbingState() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE7700))(this);
  }
  bool get_IsSlipping() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE7840))(this);
  }
  void UpdatePosition() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE7860))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetSlipStageParams(int32_t i, float baseT, float limitT, float scalar, float splineLen) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*, int32_t, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE9610))(this, i, baseT, limitT, scalar, splineLen);
  }
  void HandleSlipStage(float swayOffset, float pitchOffset, float rollOffset) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DE98F0))(this, swayOffset, pitchOffset, rollOffset);
  }
  void StopSounds(uint32_t voId, uint32_t soundId) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*, uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DEAAF0))(this, voId, soundId);
  }
  void EndSlipHandling() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DEAC60))(this);
  }
  int32_t GetClimbingState() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DEAD90))(this);
  }
  bool GetAdjustedViewAngles(ModdingAPI::Exposed::UnityEngine::Vector2 viewAngles, float rollScalar) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*, ModdingAPI::Exposed::UnityEngine::Vector2, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DEADC0))(this, viewAngles, rollScalar);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetPositionOnRope(bool allowMotion, ModdingAPI::Exposed::UnityEngine::Vector3 splinePos, ModdingAPI::Exposed::UnityEngine::Vector3 splineTan, ModdingAPI::Exposed::UnityEngine::Vector3 splineNorm, ModdingAPI::Exposed::UnityEngine::Vector3 splineLat, float splinePitch, float splineRoll) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*, bool, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DEB500))(this, allowMotion, splinePos, splineTan, splineNorm, splineLat, splinePitch, splineRoll);
  }
  void MaybePlaceFootstep(float oldPhase, float newPhase, float splineT, ModdingAPI::Exposed::UnityEngine::Vector3 splinePos) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*, float, float, float, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DEC630))(this, oldPhase, newPhase, splineT, splinePos);
  }
  void UpdateStamina() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DEC8B0))(this);
  }
  void UpdateFatigue() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DECAD0))(this);
  }
  void SetClimbSpeed() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DECD00))(this);
  }
  void MaybeFallDueToRopeBreak() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DECEA0))(this);
  }
  void MaybeSlipOrFall() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DED050))(this);
  }
  void RequestFall() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DED3F0))(this);
  }
  void RequestSlip(float slipDistance) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DED400))(this, slipDistance);
  }
  void SlipBegin(float slipDistance) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DED410))(this, slipDistance);
  }
  void EnablePhysicsHelper(bool isFalling) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DED8C0))(this, isFalling);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerClimbRope*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DEDB90))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::PlayerClimbRopeProxy*> m_PlayerClimbRopeProxy = __CppStaticProperty<ModdingAPI::Exposed::PlayerClimbRopeProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_PlayerClimbRopeProxy; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1DEDBA0))();
  }
};
}