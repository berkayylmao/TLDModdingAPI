// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Decimal.hpp"


namespace ModdingAPI::Exposed::System::Xml::Schema {
struct __ParticleContentValidator_Il2CppStaticFields {
};

struct __ParticleContentValidator_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_IsEmptiable;
  VirtualInvokeData _5_InitValidation;
  VirtualInvokeData _6_ValidateElement;
  VirtualInvokeData _7_CompleteValidation;
  VirtualInvokeData _8_ExpectedElements;
  VirtualInvokeData _9_ExpectedParticles;
};

struct __ParticleContentValidator_Il2CppClass {
  Il2CppClass_1 _1;
  __ParticleContentValidator_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ParticleContentValidator_Il2CppVtbl vtbl;
};

class ParticleContentValidator {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C3E260;
  static inline    __ParticleContentValidator_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ParticleContentValidator_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ParticleContentValidator_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ParticleContentValidator_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t ContentValidator_contentType;
  bool ContentValidator_isOpen;
  bool ContentValidator_isEmptiable;
  ModdingAPI::Exposed::System::Xml::Schema::SymbolsDictionary* symbols;
  ModdingAPI::Exposed::System::Xml::Schema::Positions* positions;
  ModdingAPI::Exposed::System::Collections::Stack* stack;
  ModdingAPI::Exposed::System::Xml::Schema::SyntaxTreeNode* contentNode;
  bool isPartial;
  int32_t minMaxNodesCount;
  bool enableUpaCheck;

  // Member methods:
  void ::ctor(int32_t contentType) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x479170))(this, contentType);
  }
  void ::ctor(int32_t contentType, bool enableUpaCheck) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x479180))(this, contentType, enableUpaCheck);
  }
  void InitValidation(ModdingAPI::Exposed::System::Xml::Schema::ValidationState* context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*, ModdingAPI::Exposed::System::Xml::Schema::ValidationState*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x479230))(this, context);
  }
  Il2CppObject* ValidateElement(ModdingAPI::Exposed::System::Xml::XmlQualifiedName* name, ModdingAPI::Exposed::System::Xml::Schema::ValidationState* context, int32_t errorCode) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*, ModdingAPI::Exposed::System::Xml::Schema::ValidationState*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x479280))(this, name, context, errorCode);
  }
  bool CompleteValidation(ModdingAPI::Exposed::System::Xml::Schema::ValidationState* context) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*, ModdingAPI::Exposed::System::Xml::Schema::ValidationState*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4792D0))(this, context);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x479320))(this);
  }
  void OpenGroup() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x479720))(this);
  }
  void CloseGroup() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x479750))(this);
  }
  bool Exists(ModdingAPI::Exposed::System::Xml::XmlQualifiedName* name) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4798F0))(this, name);
  }
  void AddName(ModdingAPI::Exposed::System::Xml::XmlQualifiedName* name, Il2CppObject* particle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x479930))(this, name, particle);
  }
  void AddNamespaceList(ModdingAPI::Exposed::System::Xml::Schema::NamespaceList* namespaceList, Il2CppObject* particle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*, ModdingAPI::Exposed::System::Xml::Schema::NamespaceList*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x479AD0))(this, namespaceList, particle);
  }
  void AddLeafNode(ModdingAPI::Exposed::System::Xml::Schema::SyntaxTreeNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*, ModdingAPI::Exposed::System::Xml::Schema::SyntaxTreeNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x479C60))(this, node);
  }
  void AddChoice() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x479DB0))(this);
  }
  void AddSequence() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x479F90))(this);
  }
  void AddStar() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x47A170))(this);
  }
  void AddPlus() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x47A2C0))(this);
  }
  void AddQMark() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x47A410))(this);
  }
  void AddLeafRange(ModdingAPI::Exposed::System::Decimal min, ModdingAPI::Exposed::System::Decimal max) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*, ModdingAPI::Exposed::System::Decimal, ModdingAPI::Exposed::System::Decimal)>(Helpers::Memory::GetInstance().MakeAbsolute(0x47A560))(this, min, max);
  }
  void Closure(ModdingAPI::Exposed::System::Xml::Schema::InteriorNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*, ModdingAPI::Exposed::System::Xml::Schema::InteriorNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x47A7C0))(this, node);
  }
  ModdingAPI::Exposed::System::Xml::Schema::ContentValidator* Finish(bool useDFA) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::ContentValidator*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x47A9B0))(this, useDFA);
  }
  ModdingAPI::Exposed::System::Xml::Schema::BitSet_array* CalculateTotalFollowposForRangeNodes(ModdingAPI::Exposed::System::Xml::Schema::BitSet* firstpos, ModdingAPI::Exposed::System::Xml::Schema::BitSet_array* followpos, ModdingAPI::Exposed::System::Xml::Schema::BitSet* posWithRangeTerminals) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::BitSet_array*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*, ModdingAPI::Exposed::System::Xml::Schema::BitSet*, ModdingAPI::Exposed::System::Xml::Schema::BitSet_array*, ModdingAPI::Exposed::System::Xml::Schema::BitSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x47B8B0))(this, firstpos, followpos, posWithRangeTerminals);
  }
  void CheckCMUPAWithLeafRangeNodes(ModdingAPI::Exposed::System::Xml::Schema::BitSet* curpos) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*, ModdingAPI::Exposed::System::Xml::Schema::BitSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x47BDC0))(this, curpos);
  }
  ModdingAPI::Exposed::System::Xml::Schema::BitSet* GetApplicableMinMaxFollowPos(ModdingAPI::Exposed::System::Xml::Schema::BitSet* curpos, ModdingAPI::Exposed::System::Xml::Schema::BitSet* posWithRangeTerminals, ModdingAPI::Exposed::System::Xml::Schema::BitSet_array* minmaxFollowPos) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::BitSet*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*, ModdingAPI::Exposed::System::Xml::Schema::BitSet*, ModdingAPI::Exposed::System::Xml::Schema::BitSet*, ModdingAPI::Exposed::System::Xml::Schema::BitSet_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x47BFB0))(this, curpos, posWithRangeTerminals, minmaxFollowPos);
  }
  void CheckUniqueParticleAttribution(ModdingAPI::Exposed::System::Xml::Schema::BitSet* firstpos, ModdingAPI::Exposed::System::Xml::Schema::BitSet_array* followpos) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*, ModdingAPI::Exposed::System::Xml::Schema::BitSet*, ModdingAPI::Exposed::System::Xml::Schema::BitSet_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x47C270))(this, firstpos, followpos);
  }
  void CheckUniqueParticleAttribution(ModdingAPI::Exposed::System::Xml::Schema::BitSet* curpos) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*, ModdingAPI::Exposed::System::Xml::Schema::BitSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x47C330))(this, curpos);
  }
  ModdingAPI::Exposed::System::Int32_array_array* BuildTransitionTable(ModdingAPI::Exposed::System::Xml::Schema::BitSet* firstpos, ModdingAPI::Exposed::System::Xml::Schema::BitSet_array* followpos, int32_t endMarkerPos) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Int32_array_array*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::ParticleContentValidator*, ModdingAPI::Exposed::System::Xml::Schema::BitSet*, ModdingAPI::Exposed::System::Xml::Schema::BitSet_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x47C5A0))(this, firstpos, followpos, endMarkerPos);
  }
};
}