// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::NodeCanvas::DialogueTrees {
struct __Statement_Il2CppStaticFields {
};

struct __Statement_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_text;
  VirtualInvokeData _5_get_audio;
  VirtualInvokeData _6_get_meta;
  VirtualInvokeData _7_get_anim;
};

struct __Statement_Il2CppClass {
  Il2CppClass_1 _1;
  __Statement_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Statement_Il2CppVtbl vtbl;
};

class Statement {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C58988;
  static inline    __Statement_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Statement_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Statement_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Statement_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  System_String* _text;
  ModdingAPI::Exposed::UnityEngine::AudioClip* _audio;
  System_String* _meta;
  int32_t _anim;

  // Member methods:
  System_String* get_text() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::Statement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  void set_text(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::Statement*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::AudioClip* get_audio() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::AudioClip*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::Statement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  void set_audio(ModdingAPI::Exposed::UnityEngine::AudioClip* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::Statement*, ModdingAPI::Exposed::UnityEngine::AudioClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3E0))(this, value);
  }
  System_String* get_meta() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::Statement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110A0))(this);
  }
  void set_meta(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::Statement*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x310F00))(this, value);
  }
  int32_t get_anim() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::Statement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36F810))(this);
  }
  void set_anim(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::Statement*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x31DD50))(this, value);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::Statement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2291C50))(this);
  }
  void ::ctor(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::Statement*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2291CF0))(this, text);
  }
  void ::ctor(System_String* text, ModdingAPI::Exposed::UnityEngine::AudioClip* audio) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::Statement*, System_String*, ModdingAPI::Exposed::UnityEngine::AudioClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2291DB0))(this, text, audio);
  }
  void ::ctor(System_String* text, int32_t anim) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::Statement*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2291E70))(this, text, anim);
  }
  void ::ctor(System_String* text, ModdingAPI::Exposed::UnityEngine::AudioClip* audio, System_String* meta) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::Statement*, System_String*, ModdingAPI::Exposed::UnityEngine::AudioClip*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2291F30))(this, text, audio, meta);
  }
  ModdingAPI::Exposed::NodeCanvas::DialogueTrees::IStatement* BlackboardReplace(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* bb) {
    return reinterpret_cast<ModdingAPI::Exposed::NodeCanvas::DialogueTrees::IStatement*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::Statement*, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2291FD0))(this, bb);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::Statement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
};
}