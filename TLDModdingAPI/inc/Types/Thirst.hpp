// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __Thirst_Il2CppStaticFields {
  ModdingAPI::Exposed::ThirstSaveDataProxy* m_ThirstSaveDataProxy;
};

struct __Thirst_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Thirst_Il2CppClass {
  Il2CppClass_1 _1;
  __Thirst_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Thirst_Il2CppVtbl vtbl;
};

class Thirst {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C275B0;
  static inline    __Thirst_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Thirst_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Thirst_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Thirst_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_ThirstQuenchedPerLiter;
  float m_CurrentThirst;
  float m_MaxThirst;
  float m_ThirstIncreasePerDay;
  float m_ThirstIncreasePerDayWhenResting;
  float m_SlightlyThirstyThreshold;
  float m_ThirstyThreshold;
  float m_VeryThirstyThreshold;
  float m_DehydratedThreshold;
  System_String* m_SlightlyThirstyVoiceOver;
  System_String* m_ThirstyVoiceOver;
  System_String* m_VeryThirstyVoiceOver;
  System_String* m_DehydratedVoiceOver;
  float m_MinSecondsBetweenVoiceOverVariations;
  float m_TimeToDisplayThirstWhenChanged;
  int32_t m_ThirstLevelForPreviousVoiceOver;
  float m_NumSecondsSinceLastVoiceOver;
  float m_TimeDisableThirstOnHUD;
  int32_t m_ThirstLevelLastStatusChange;
  bool m_DehydratedInLog;
  float m_LitersToDrinkOverTime;
  float m_LitersLeftToDrink;
  float m_LitersToDrinkOverTimeDuration;
  bool m_StartHasBeenCalled;
  bool m_SuppressVoiceOver;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Thirst*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAB050))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Thirst*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAB210))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Thirst*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAB650))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Thirst*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAB7A0))(this, text);
  }
  System_String* GetThirstStateString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Thirst*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAB890))(this);
  }
  void AddThirst(float thirstValue) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Thirst*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAB970))(this, thirstValue);
  }
  void AddThirstOverTime(float litersToDrink, float timeSeconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Thirst*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BABA90))(this, litersToDrink, timeSeconds);
  }
  void ClearAddThirstOverTime() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Thirst*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17A52E0))(this);
  }
  bool IsAddingThirstOverTime() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Thirst*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BABAB0))(this);
  }
  bool IsDehydrated() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Thirst*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BABAD0))(this);
  }
  bool IsVeryThirsty() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Thirst*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BABAE0))(this);
  }
  void SetSuppressVoiceOver(bool suppress) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Thirst*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x875310))(this, suppress);
  }
  bool ShouldPlayThirstVoiceOver() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Thirst*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BABAF0))(this);
  }
  void MaybePlayPlayerThirstVoiceOver() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Thirst*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BABC00))(this);
  }
  int32_t GetThirstLevel() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Thirst*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BABED0))(this);
  }
  void DisplayThirstOnHUDForTime(float seconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Thirst*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BABF10))(this, seconds);
  }
  System_String* GetThirstTextForHud() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Thirst*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BABFD0))(this);
  }
  void MaybeUpdateThirstStatusLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Thirst*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAC150))(this);
  }
  void UpdateAddThirstOverTime() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Thirst*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAC5B0))(this);
  }
  void UpdateThirstStatusOnHUD() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Thirst*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAC780))(this);
  }
  void MaybeUpdateDehydratedStatusInLog() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Thirst*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAD010))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Thirst*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::ThirstSaveDataProxy*> m_ThirstSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::ThirstSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_ThirstSaveDataProxy; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAD180))();
  }
};
}