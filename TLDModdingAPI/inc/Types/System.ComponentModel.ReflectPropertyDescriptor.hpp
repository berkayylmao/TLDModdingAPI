// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Collections.Specialized.BitVector32.hpp"


namespace ModdingAPI::Exposed::System::ComponentModel {
struct __ReflectPropertyDescriptor_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Type_array* argsNone;
  Il2CppObject* noValue;
  ModdingAPI::Exposed::System::Diagnostics::TraceSwitch* PropDescCreateSwitch;
  ModdingAPI::Exposed::System::Diagnostics::TraceSwitch* PropDescUsageSwitch;
  int32_t BitDefaultValueQueried;
  int32_t BitGetQueried;
  int32_t BitSetQueried;
  int32_t BitShouldSerializeQueried;
  int32_t BitResetQueried;
  int32_t BitChangedQueried;
  int32_t BitIPropChangedQueried;
  int32_t BitReadOnlyChecked;
  int32_t BitAmbientValueQueried;
  int32_t BitSetOnDemand;
};

struct __ReflectPropertyDescriptor_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_AttributeArray;
  VirtualInvokeData _5_set_AttributeArray;
  VirtualInvokeData _6_get_Attributes;
  VirtualInvokeData _7_get_Name;
  VirtualInvokeData _8_get_NameHashCode;
  VirtualInvokeData _9_get_DisplayName;
  VirtualInvokeData _10_CreateAttributeCollection;
  VirtualInvokeData _11_FillAttributes;
  VirtualInvokeData _12_get_ComponentType;
  VirtualInvokeData _13_get_IsReadOnly;
  VirtualInvokeData _14_get_PropertyType;
};

struct __ReflectPropertyDescriptor_Il2CppClass {
  Il2CppClass_1 _1;
  __ReflectPropertyDescriptor_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ReflectPropertyDescriptor_Il2CppVtbl vtbl;
};

class ReflectPropertyDescriptor {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C3C648;
  static inline    __ReflectPropertyDescriptor_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ReflectPropertyDescriptor_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ReflectPropertyDescriptor_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ReflectPropertyDescriptor_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  System_String* MemberDescriptor_name;
  System_String* MemberDescriptor_displayName;
  int32_t MemberDescriptor_nameHash;
  ModdingAPI::Exposed::System::ComponentModel::AttributeCollection* MemberDescriptor_attributeCollection;
  ModdingAPI::Exposed::System::Attribute_array* MemberDescriptor_attributes;
  ModdingAPI::Exposed::System::Attribute_array* MemberDescriptor_originalAttributes;
  bool MemberDescriptor_attributesFiltered;
  bool MemberDescriptor_attributesFilled;
  int32_t MemberDescriptor_metadataVersion;
  System_String* MemberDescriptor_category;
  System_String* MemberDescriptor_description;
  Il2CppObject* MemberDescriptor_lockCookie;
  ModdingAPI::Exposed::System::ComponentModel::TypeConverter* PropertyDescriptor_converter;
  ModdingAPI::Exposed::System::Object_array* PropertyDescriptor_editors;
  ModdingAPI::Exposed::System::Type_array* PropertyDescriptor_editorTypes;
  int32_t PropertyDescriptor_editorCount;
  ModdingAPI::Exposed::System::Collections::Specialized::BitVector32 state;
  ModdingAPI::Exposed::System::Type* componentClass;
  ModdingAPI::Exposed::System::Type* type;
  Il2CppObject* defaultValue;
  Il2CppObject* ambientValue;
  ModdingAPI::Exposed::System::Reflection::PropertyInfo* propInfo;
  ModdingAPI::Exposed::System::Reflection::MethodInfo* getMethod;
  ModdingAPI::Exposed::System::Reflection::MethodInfo* setMethod;
  ModdingAPI::Exposed::System::Reflection::MethodInfo* shouldSerializeMethod;
  ModdingAPI::Exposed::System::Reflection::MethodInfo* resetMethod;
  ModdingAPI::Exposed::System::Type* receiverType;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Type* componentClass, System_String* name, ModdingAPI::Exposed::System::Type* type, ModdingAPI::Exposed::System::Attribute_array* attributes) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::ComponentModel::ReflectPropertyDescriptor*, ModdingAPI::Exposed::System::Type*, System_String*, ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Attribute_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEC5EF0))(this, componentClass, name, type, attributes);
  }
  void ::ctor(ModdingAPI::Exposed::System::Type* componentClass, System_String* name, ModdingAPI::Exposed::System::Type* type, ModdingAPI::Exposed::System::Reflection::PropertyInfo* propInfo, ModdingAPI::Exposed::System::Reflection::MethodInfo* getMethod, ModdingAPI::Exposed::System::Reflection::MethodInfo* setMethod, ModdingAPI::Exposed::System::Attribute_array* attrs) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::ComponentModel::ReflectPropertyDescriptor*, ModdingAPI::Exposed::System::Type*, System_String*, ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Reflection::PropertyInfo*, ModdingAPI::Exposed::System::Reflection::MethodInfo*, ModdingAPI::Exposed::System::Reflection::MethodInfo*, ModdingAPI::Exposed::System::Attribute_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEC6110))(this, componentClass, name, type, propInfo, getMethod, setMethod, attrs);
  }
  void ::ctor(ModdingAPI::Exposed::System::Type* componentClass, System_String* name, ModdingAPI::Exposed::System::Type* type, ModdingAPI::Exposed::System::Type* receiverType, ModdingAPI::Exposed::System::Reflection::MethodInfo* getMethod, ModdingAPI::Exposed::System::Reflection::MethodInfo* setMethod, ModdingAPI::Exposed::System::Attribute_array* attrs) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::ComponentModel::ReflectPropertyDescriptor*, ModdingAPI::Exposed::System::Type*, System_String*, ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Reflection::MethodInfo*, ModdingAPI::Exposed::System::Reflection::MethodInfo*, ModdingAPI::Exposed::System::Attribute_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEC62A0))(this, componentClass, name, type, receiverType, getMethod, setMethod, attrs);
  }
  void ::ctor(ModdingAPI::Exposed::System::Type* componentClass, ModdingAPI::Exposed::System::ComponentModel::PropertyDescriptor* oldReflectPropertyDescriptor, ModdingAPI::Exposed::System::Attribute_array* attributes) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::ComponentModel::ReflectPropertyDescriptor*, ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::ComponentModel::PropertyDescriptor*, ModdingAPI::Exposed::System::Attribute_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEC63D0))(this, componentClass, oldReflectPropertyDescriptor, attributes);
  }
  ModdingAPI::Exposed::System::Type* get_ComponentType() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::ComponentModel::ReflectPropertyDescriptor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x307640))(this);
  }
  bool get_IsExtender() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::ComponentModel::ReflectPropertyDescriptor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEC6850))(this);
  }
  bool get_IsReadOnly() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::ComponentModel::ReflectPropertyDescriptor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEC68F0))(this);
  }
  ModdingAPI::Exposed::System::Type* get_PropertyType() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::ComponentModel::ReflectPropertyDescriptor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3BC530))(this);
  }
  ModdingAPI::Exposed::System::Reflection::MethodInfo* get_SetMethodValue() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Reflection::MethodInfo*(__fastcall*)(ModdingAPI::Exposed::System::ComponentModel::ReflectPropertyDescriptor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEC6A80))(this);
  }
  ModdingAPI::Exposed::System::Type* ExtenderGetReceiverType() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::ComponentModel::ReflectPropertyDescriptor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F11D0))(this);
  }
  ModdingAPI::Exposed::System::Type* ExtenderGetType(ModdingAPI::Exposed::System::ComponentModel::IExtenderProvider* provider) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::ComponentModel::ReflectPropertyDescriptor*, ModdingAPI::Exposed::System::ComponentModel::IExtenderProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEC7070))(this, provider);
  }
  void FillAttributes(ModdingAPI::Exposed::System::Collections::IList* attributes) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::ComponentModel::ReflectPropertyDescriptor*, ModdingAPI::Exposed::System::Collections::IList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEC7090))(this, attributes);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Type_array*> argsNone = __CppStaticProperty<ModdingAPI::Exposed::System::Type_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->argsNone; }
  );
  static inline __CppStaticProperty<Il2CppObject*> noValue = __CppStaticProperty<Il2CppObject*>(
   []() { return &GetStaticClassInstance()->pStaticFields->noValue; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Diagnostics::TraceSwitch*> PropDescCreateSwitch = __CppStaticProperty<ModdingAPI::Exposed::System::Diagnostics::TraceSwitch*>(
   []() { return &GetStaticClassInstance()->pStaticFields->PropDescCreateSwitch; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Diagnostics::TraceSwitch*> PropDescUsageSwitch = __CppStaticProperty<ModdingAPI::Exposed::System::Diagnostics::TraceSwitch*>(
   []() { return &GetStaticClassInstance()->pStaticFields->PropDescUsageSwitch; }
  );
  static inline __CppStaticProperty<int32_t> BitDefaultValueQueried = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->BitDefaultValueQueried; }
  );
  static inline __CppStaticProperty<int32_t> BitGetQueried = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->BitGetQueried; }
  );
  static inline __CppStaticProperty<int32_t> BitSetQueried = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->BitSetQueried; }
  );
  static inline __CppStaticProperty<int32_t> BitShouldSerializeQueried = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->BitShouldSerializeQueried; }
  );
  static inline __CppStaticProperty<int32_t> BitResetQueried = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->BitResetQueried; }
  );
  static inline __CppStaticProperty<int32_t> BitChangedQueried = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->BitChangedQueried; }
  );
  static inline __CppStaticProperty<int32_t> BitIPropChangedQueried = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->BitIPropChangedQueried; }
  );
  static inline __CppStaticProperty<int32_t> BitReadOnlyChecked = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->BitReadOnlyChecked; }
  );
  static inline __CppStaticProperty<int32_t> BitAmbientValueQueried = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->BitAmbientValueQueried; }
  );
  static inline __CppStaticProperty<int32_t> BitSetOnDemand = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->BitSetOnDemand; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xEC7AC0))();
  }
};
}