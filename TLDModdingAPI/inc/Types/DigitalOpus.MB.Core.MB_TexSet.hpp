// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.DigitalOpus.MB.Core.DRect.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Rect.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed::DigitalOpus::MB::Core {
struct __MB_TexSet_Il2CppStaticFields {
};

struct __MB_TexSet_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __MB_TexSet_Il2CppClass {
  Il2CppClass_1 _1;
  __MB_TexSet_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MB_TexSet_Il2CppVtbl vtbl;
};

class MB_TexSet {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C4EA90;
  static inline    __MB_TexSet_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __MB_TexSet_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__MB_TexSet_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __MB_TexSet_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture_array* ts;
  ModdingAPI::Exposed::DigitalOpus::MB::Core::MatsAndGOs* matsAndGOs;
  bool _allTexturesUseSameMatTiling_k__BackingField;
  bool _thisIsOnlyTexSetInAtlas_k__BackingField;
  int32_t _tilingTreatment_k__BackingField;
  ModdingAPI::Exposed::UnityEngine::Vector2 _obUVoffset_k__BackingField;
  ModdingAPI::Exposed::UnityEngine::Vector2 _obUVscale_k__BackingField;
  int32_t idealWidth;
  int32_t idealHeight;
  ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet::PipelineVariation* pipelineVariation;

  // Member methods:
  bool get_allTexturesUseSameMatTiling() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x46FCC0))(this);
  }
  void set_allTexturesUseSameMatTiling(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D810))(this, value);
  }
  bool get_thisIsOnlyTexSetInAtlas() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x46FCD0))(this);
  }
  void set_thisIsOnlyTexSetInAtlas(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D820))(this, value);
  }
  int32_t get_tilingTreatment() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x37AAF0))(this);
  }
  void set_tilingTreatment(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3838F0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_obUVoffset() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD20A0))(this);
  }
  void set_obUVoffset(ModdingAPI::Exposed::UnityEngine::Vector2 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD20C0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_obUVscale() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD20E0))(this);
  }
  void set_obUVscale(ModdingAPI::Exposed::UnityEngine::Vector2 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD2100))(this, value);
  }
  ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect get_obUVrect() {
    return reinterpret_cast<ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD2120))(this);
  }
  void ::ctor(ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture_array* tss, ModdingAPI::Exposed::UnityEngine::Vector2 uvOffset, ModdingAPI::Exposed::UnityEngine::Vector2 uvScale, int32_t treatment) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture_array*, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD2160))(this, tss, uvOffset, uvScale, treatment);
  }
  bool IsEqual(Il2CppObject* obj, bool fixOutOfBoundsUVs, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties* resultMaterialTextureBlender) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, Il2CppObject*, bool, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD2580))(this, obj, fixOutOfBoundsUVs, resultMaterialTextureBlender);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 GetMaxRawTextureHeightWidth() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD29F0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Rect GetEncapsulatingSamplingRectIfTilingSame() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD2B90))(this);
  }
  void SetEncapsulatingSamplingRectWhenMergingTexSets(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect newEncapsulatingSamplingRect) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD2C50))(this, newEncapsulatingSamplingRect);
  }
  void SetEncapsulatingSamplingRectForTesting(int32_t propIdx, ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect newEncapsulatingSamplingRect) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, int32_t, ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD2CE0))(this, propIdx, newEncapsulatingSamplingRect);
  }
  void SetEncapsulatingRect(int32_t propIdx, bool considerMeshUVs) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD2D40))(this, propIdx, considerMeshUVs);
  }
  void CreateColoredTexToReplaceNull(System_String* propName, int32_t propIdx, bool considerMeshUVs, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner* combiner, ModdingAPI::Exposed::UnityEngine::Color col) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, System_String*, int32_t, bool, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD2E40))(this, propName, propIdx, considerMeshUVs, combiner, col);
  }
  void SetThisIsOnlyTexSetInAtlasTrue() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9F7ED0))(this);
  }
  void SetAllTexturesUseSameMatTilingTrue() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD2FA0))(this);
  }
  void AdjustResultMaterialNonTextureProperties(ModdingAPI::Exposed::UnityEngine::Material* resultMaterial, ModdingAPI::Exposed::System::Collections::Generic::List_T_* props) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, ModdingAPI::Exposed::UnityEngine::Material*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD30F0))(this, resultMaterial, props);
  }
  void SetTilingTreatmentAndAdjustEncapsulatingSamplingRect(int32_t newTilingTreatment) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD3210))(this, newTilingTreatment);
  }
  void GetRectsForTextureBakeResults(ModdingAPI::Exposed::UnityEngine::Rect allPropsUseSameTiling_encapsulatingSamplingRect, ModdingAPI::Exposed::UnityEngine::Rect propsUseDifferntTiling_obUVRect) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, ModdingAPI::Exposed::UnityEngine::Rect, ModdingAPI::Exposed::UnityEngine::Rect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD32C0))(this, allPropsUseSameTiling_encapsulatingSamplingRect, propsUseDifferntTiling_obUVRect);
  }
  ModdingAPI::Exposed::UnityEngine::Rect GetMaterialTilingRectForTextureBakerResults(int32_t materialIndex) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD33D0))(this, materialIndex);
  }
  void CalcInitialFullSamplingRects(bool fixOutOfBoundsUVs) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD3500))(this, fixOutOfBoundsUVs);
  }
  void CalcMatAndUVSamplingRects() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD3870))(this);
  }
  bool AllTexturesAreSameForMerge(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet* other, bool considerNonTextureProperties, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties* resultMaterialTextureBlender) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, bool, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD3B20))(this, other, considerNonTextureProperties, resultMaterialTextureBlender);
  }
  void DrawRectsToMergeGizmos(ModdingAPI::Exposed::UnityEngine::Color encC, ModdingAPI::Exposed::UnityEngine::Color innerC) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, ModdingAPI::Exposed::UnityEngine::Color, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD3EC0))(this, encC, innerC);
  }
  System_String* GetDescription() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD43D0))(this);
  }
  System_String* GetMatSubrectDescriptions() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD48A0))(this);
  }
};
}