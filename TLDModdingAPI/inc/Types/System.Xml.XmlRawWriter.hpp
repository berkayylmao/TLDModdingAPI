// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Xml {
struct __XmlRawWriter_Il2CppStaticFields {
};

struct __XmlRawWriter_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Dispose;
  VirtualInvokeData _5_WriteStartDocument;
  VirtualInvokeData _6_WriteStartDocument;
  VirtualInvokeData _7_WriteEndDocument;
  VirtualInvokeData _8_WriteDocType;
  VirtualInvokeData _10_WriteEndElement;
  VirtualInvokeData _11_WriteFullEndElement;
  VirtualInvokeData _14_WriteCData;
  VirtualInvokeData _18_WriteCharEntity;
  VirtualInvokeData _19_WriteWhitespace;
  VirtualInvokeData _21_WriteSurrogateCharEntity;
  VirtualInvokeData _22_WriteChars;
  VirtualInvokeData _23_WriteRaw;
  VirtualInvokeData _24_WriteRaw;
  VirtualInvokeData _25_WriteBase64;
  VirtualInvokeData _26_WriteBinHex;
  VirtualInvokeData _27_get_WriteState;
  VirtualInvokeData _28_Close;
  VirtualInvokeData _30_LookupPrefix;
  VirtualInvokeData _31_WriteValue;
  VirtualInvokeData _32_WriteValue;
  VirtualInvokeData _33_WriteValue;
  VirtualInvokeData _34_WriteValue;
  VirtualInvokeData _35_WriteValue;
  VirtualInvokeData _36_WriteValue;
  VirtualInvokeData _37_WriteValue;
  VirtualInvokeData _38_WriteValue;
  VirtualInvokeData _39_WriteValue;
  VirtualInvokeData _40_Dispose;
  VirtualInvokeData _41_set_NamespaceResolver;
  VirtualInvokeData _42_WriteXmlDeclaration;
  VirtualInvokeData _43_WriteXmlDeclaration;
  VirtualInvokeData _45_OnRootElement;
  VirtualInvokeData _47_WriteFullEndElement;
  VirtualInvokeData _49_get_SupportsNamespaceDeclarationInChunks;
  VirtualInvokeData _50_WriteStartNamespaceDeclaration;
  VirtualInvokeData _51_WriteEndNamespaceDeclaration;
  VirtualInvokeData _52_WriteEndBase64;
  VirtualInvokeData _53_Close;
  VirtualInvokeData _65535__ctor;
};

struct __XmlRawWriter_Il2CppClass {
  Il2CppClass_1 _1;
  __XmlRawWriter_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __XmlRawWriter_Il2CppVtbl vtbl;
};

class XmlRawWriter {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C80F30;
  static inline    __XmlRawWriter_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __XmlRawWriter_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__XmlRawWriter_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __XmlRawWriter_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Xml::XmlRawWriterBase64Encoder* base64Encoder;
  ModdingAPI::Exposed::System::Xml::IXmlNamespaceResolver* resolver;

  // Member methods:
  void WriteStartDocument() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xBF1B20))(this);
  }
  void WriteStartDocument(bool standalone) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xBF1B90))(this, standalone);
  }
  void WriteEndDocument() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xBF1C00))(this);
  }
  void WriteDocType(System_String* name, System_String* pubid, System_String* sysid, System_String* subset) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, System_String*, System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, name, pubid, sysid, subset);
  }
  void WriteEndElement() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xBF1C70))(this);
  }
  void WriteFullEndElement() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xBF1CE0))(this);
  }
  void WriteBase64(ModdingAPI::Exposed::System::Byte_array* buffer, int32_t index, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xBF1D50))(this, buffer, index, count);
  }
  System_String* LookupPrefix(System_String* ns) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xBF1EF0))(this, ns);
  }
  int32_t get_WriteState() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xBF1F60))(this);
  }
  void WriteCData(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8D58C0))(this, text);
  }
  void WriteCharEntity(wchar_t ch) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xBF1FD0))(this, ch);
  }
  void WriteSurrogateCharEntity(wchar_t lowChar, wchar_t highChar) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, wchar_t, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xBF20B0))(this, lowChar, highChar);
  }
  void WriteWhitespace(System_String* ws) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8D58C0))(this, ws);
  }
  void WriteChars(ModdingAPI::Exposed::System::Char_array* buffer, int32_t index, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, ModdingAPI::Exposed::System::Char_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8D52E0))(this, buffer, index, count);
  }
  void WriteRaw(ModdingAPI::Exposed::System::Char_array* buffer, int32_t index, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, ModdingAPI::Exposed::System::Char_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8D52E0))(this, buffer, index, count);
  }
  void WriteRaw(System_String* data) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8D58C0))(this, data);
  }
  void WriteValue(Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xBF21B0))(this, value);
  }
  void WriteValue(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8D58C0))(this, value);
  }
  void set_NamespaceResolver(ModdingAPI::Exposed::System::Xml::IXmlNamespaceResolver* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, ModdingAPI::Exposed::System::Xml::IXmlNamespaceResolver*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3E0))(this, value);
  }
  void WriteXmlDeclaration(int32_t standalone) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, standalone);
  }
  void WriteXmlDeclaration(System_String* xmldecl) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, xmldecl);
  }
  void OnRootElement(int32_t conformanceLevel) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, conformanceLevel);
  }
  void WriteFullEndElement(System_String* prefix, System_String* localName, System_String* ns) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xBF22D0))(this, prefix, localName, ns);
  }
  bool get_SupportsNamespaceDeclarationInChunks() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this);
  }
  void WriteStartNamespaceDeclaration(System_String* prefix) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xBF22F0))(this, prefix);
  }
  void WriteEndNamespaceDeclaration() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xBF2340))(this);
  }
  void WriteEndBase64() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xBF2390))(this);
  }
  void Close(int32_t currentState) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xBF23B0))(this, currentState);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlRawWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
};
}