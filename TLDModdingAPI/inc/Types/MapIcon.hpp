// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed {
struct __MapIcon_Il2CppStaticFields {
};

struct __MapIcon_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __MapIcon_Il2CppClass {
  Il2CppClass_1 _1;
  __MapIcon_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MapIcon_Il2CppVtbl vtbl;
};

class MapIcon {
public:
  // Il2Cpp fields:
  __MapIcon_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UISprite* m_MainSprite;
  ModdingAPI::Exposed::UISprite* m_BGSprite;
  ModdingAPI::Exposed::UISprite* m_Directional;
  ModdingAPI::Exposed::UISprite* m_AreaZoneSprite;
  ModdingAPI::Exposed::UISprite* m_OffscreenStationary;
  ModdingAPI::Exposed::UISprite* m_OffscreenDirectional;
  ModdingAPI::Exposed::TweenAlpha* m_LabelTween;
  ModdingAPI::Exposed::UILabel* m_Label;
  ModdingAPI::Exposed::UISprite* m_LabelBGSprite;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_LabelBGSpritePadding;
  float m_SizeIncreaseOnSelect;
  float m_SizeIncreaseTimeSeconds;
  bool m_TextEntryScaleWithZoom;
  ModdingAPI::Exposed::UISprite* m_MissionHighlight;
  ModdingAPI::Exposed::UnityEngine::Color m_DefaultColour;
  ModdingAPI::Exposed::UnityEngine::Color m_MainMissionColour;
  ModdingAPI::Exposed::UnityEngine::Color m_SideMissionColour;
  ModdingAPI::Exposed::MapIcon* m_LocationMapIcon;
  int32_t m_MapIconType;
  int32_t m_State;
  bool m_IsHovering;
  int32_t m_DepthCached;
  float m_SizeIncreaseCurrent;
  float m_HoverTweenTimer;
  System_String* m_LocationNameLocID;
  bool m_ShowDirection;

  // Member methods:
  void LateUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MapIcon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21BD030))(this);
  }
  void DoSetup(ModdingAPI::Exposed::MapElementSaveData* mapData, ModdingAPI::Exposed::UnityEngine::Transform* parentToUse, int32_t index, int32_t iconType) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MapIcon*, ModdingAPI::Exposed::MapElementSaveData*, ModdingAPI::Exposed::UnityEngine::Transform*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21BDA50))(this, mapData, parentToUse, index, iconType);
  }
  void EnableDirectionalIcon(float angle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MapIcon*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21BE1A0))(this, angle);
  }
  void ShowHoverWidget() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MapIcon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21BE540))(this);
  }
  void HideHoverWidget() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MapIcon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21BE600))(this);
  }
  System_String* GetLocationNameLocID() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::MapIcon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F11D0))(this);
  }
  int32_t GetState() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MapIcon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x307730))(this);
  }
  int32_t SetState(int32_t state) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MapIcon*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21BE740))(this, state);
  }
  System_String* SetLocationMapIcon(ModdingAPI::Exposed::MapIcon* icon) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::MapIcon*, ModdingAPI::Exposed::MapIcon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21BE970))(this, icon);
  }
  ModdingAPI::Exposed::UnityEngine::Transform* GetLocationMapTransform() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Transform*(__fastcall*)(ModdingAPI::Exposed::MapIcon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21BEC10))(this);
  }
  void SetSpriteActive(ModdingAPI::Exposed::UISprite* sprite, bool isActive) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MapIcon*, ModdingAPI::Exposed::UISprite*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21BED50))(this, sprite, isActive);
  }
  void SetDepths(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MapIcon*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21BEF10))(this, index);
  }
  int32_t GetBaseDepth() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MapIcon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21BF270))(this);
  }
  void TintSprite(ModdingAPI::Exposed::UISprite* sprite, ModdingAPI::Exposed::UnityEngine::Color tint) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MapIcon*, ModdingAPI::Exposed::UISprite*, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21BF2B0))(this, sprite, tint);
  }
  void ScaleSprite(ModdingAPI::Exposed::UISprite* sprite, float scale) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MapIcon*, ModdingAPI::Exposed::UISprite*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21BF470))(this, sprite, scale);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MapIcon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21BF650))(this);
  }
};
}