// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.ParticleSystem.MinMaxCurve.hpp"
#include "ModdingAPI.Exposed.UnityEngine.ParticleSystem.MinMaxGradient.hpp"

namespace ModdingAPI::Exposed::UnityEngine::ParticleSystem {
struct __MainModule_Il2CppObject {
  ModdingAPI::Exposed::UnityEngine::ParticleSystem* m_ParticleSystem;
};
struct __MainModule_Il2CppStaticFields {
};

struct __MainModule_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __MainModule_Il2CppClass {
  Il2CppClass_1 _1;
  __MainModule_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MainModule_Il2CppVtbl vtbl;
};

class MainModule {
public:
  // Member fields:
  ModdingAPI::Exposed::UnityEngine::ParticleSystem* m_ParticleSystem;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::UnityEngine::ParticleSystem* particleSystem) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*, ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2C00))(this, particleSystem);
  }
  float get_duration() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5BA20))(this);
  }
  bool get_loop() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5BA80))(this);
  }
  ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve get_startDelay() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5BAE0))(this);
  }
  void set_startLifetime(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5BB70))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve get_startLifetime() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5BBE0))(this);
  }
  void set_startLifetimeMultiplier(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5BC70))(this, value);
  }
  void set_startSpeed(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5BC80))(this, value);
  }
  void set_startSpeedMultiplier(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5BCF0))(this, value);
  }
  void set_startSize(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5BD00))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve get_startSize() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5BD70))(this);
  }
  void set_startSizeMultiplier(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5BE00))(this, value);
  }
  void set_startRotation(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5BE10))(this, value);
  }
  void set_startColor(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxGradient value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxGradient)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5BE80))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxGradient get_startColor() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxGradient(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5BF00))(this);
  }
  void set_gravityModifier(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5BF40))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve get_gravityModifier() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5BFB0))(this);
  }
  void set_gravityModifierMultiplier(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C040))(this, value);
  }
  int32_t get_maxParticles() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C050))(this);
  }
  void set_maxParticles(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C0B0))(this, value);
  }

  // Static methods:
  static inline float GetDuration(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15779C0))(system);
  }
  static inline bool GetLoop(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577A10))(system);
  }
  static inline void GetStartDelay(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve curve) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577A60))(system, curve);
  }
  static inline void SetStartLifetime(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve curve) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577AC0))(system, curve);
  }
  static inline void GetStartLifetime(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve curve) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577B20))(system, curve);
  }
  static inline void SetStartLifetimeMultiplier(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system, float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577B80))(system, value);
  }
  static inline void SetStartSpeed(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve curve) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577BE0))(system, curve);
  }
  static inline void SetStartSpeedMultiplier(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system, float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577C40))(system, value);
  }
  static inline void SetStartSizeX(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve curve) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577CA0))(system, curve);
  }
  static inline void GetStartSizeX(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve curve) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577D00))(system, curve);
  }
  static inline void SetStartSizeXMultiplier(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system, float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577D60))(system, value);
  }
  static inline void SetStartRotationZ(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve curve) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577DC0))(system, curve);
  }
  static inline void SetStartColor(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxGradient gradient) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxGradient)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577E20))(system, gradient);
  }
  static inline void GetStartColor(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxGradient gradient) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxGradient)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577E80))(system, gradient);
  }
  static inline void SetGravityModifier(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve curve) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577EE0))(system, curve);
  }
  static inline void GetGravityModifier(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve curve) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::MinMaxCurve)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577F40))(system, curve);
  }
  static inline void SetGravityModifierMultiplier(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system, float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577FA0))(system, value);
  }
  static inline void SetMaxParticles(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system, int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1578000))(system, value);
  }
  static inline int32_t GetMaxParticles(ModdingAPI::Exposed::UnityEngine::ParticleSystem* system) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1578060))(system);
  }

};
}