// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __MB3_TextureBaker_Il2CppStaticFields {
};

struct __MB3_TextureBaker_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_textureBakeResults;
  VirtualInvokeData _5_set_textureBakeResults;
  VirtualInvokeData _6_GetObjectsToCombine;
  VirtualInvokeData _7_get_atlasPadding;
  VirtualInvokeData _8_set_atlasPadding;
  VirtualInvokeData _9_get_maxAtlasSize;
  VirtualInvokeData _10_set_maxAtlasSize;
  VirtualInvokeData _11_get_useMaxAtlasWidthOverride;
  VirtualInvokeData _12_set_useMaxAtlasWidthOverride;
  VirtualInvokeData _13_get_maxAtlasWidthOverride;
  VirtualInvokeData _14_set_maxAtlasWidthOverride;
  VirtualInvokeData _15_get_useMaxAtlasHeightOverride;
  VirtualInvokeData _16_set_useMaxAtlasHeightOverride;
  VirtualInvokeData _17_get_maxAtlasHeightOverride;
  VirtualInvokeData _18_set_maxAtlasHeightOverride;
  VirtualInvokeData _19_get_resizePowerOfTwoTextures;
  VirtualInvokeData _20_set_resizePowerOfTwoTextures;
  VirtualInvokeData _21_get_fixOutOfBoundsUVs;
  VirtualInvokeData _22_set_fixOutOfBoundsUVs;
  VirtualInvokeData _23_get_maxTilingBakeSize;
  VirtualInvokeData _24_set_maxTilingBakeSize;
  VirtualInvokeData _25_get_packingAlgorithm;
  VirtualInvokeData _26_set_packingAlgorithm;
  VirtualInvokeData _27_get_customShaderProperties;
  VirtualInvokeData _28_set_customShaderProperties;
  VirtualInvokeData _29_get_customShaderPropNames;
  VirtualInvokeData _30_set_customShaderPropNames;
  VirtualInvokeData _31_get_doMultiMaterial;
  VirtualInvokeData _32_set_doMultiMaterial;
  VirtualInvokeData _33_get_doMultiMaterialSplitAtlasesIfTooBig;
  VirtualInvokeData _34_set_doMultiMaterialSplitAtlasesIfTooBig;
  VirtualInvokeData _35_get_doMultiMaterialSplitAtlasesIfOBUVs;
  VirtualInvokeData _36_set_doMultiMaterialSplitAtlasesIfOBUVs;
  VirtualInvokeData _37_get_resultMaterial;
  VirtualInvokeData _38_set_resultMaterial;
};

struct __MB3_TextureBaker_Il2CppClass {
  Il2CppClass_1 _1;
  __MB3_TextureBaker_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MB3_TextureBaker_Il2CppVtbl vtbl;
};

class MB3_TextureBaker {
public:
  // Il2Cpp fields:
  __MB3_TextureBaker_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::Vector3 sortAxis;
  int32_t LOG_LEVEL;
  ModdingAPI::Exposed::MB2_TextureBakeResults* _textureBakeResults;
  int32_t _atlasPadding;
  int32_t _maxAtlasSize;
  bool _useMaxAtlasWidthOverride;
  int32_t _maxAtlasWidthOverride;
  bool _useMaxAtlasHeightOverride;
  int32_t _maxAtlasHeightOverride;
  bool _resizePowerOfTwoTextures;
  bool _fixOutOfBoundsUVs;
  int32_t _maxTilingBakeSize;
  int32_t _packingAlgorithm;
  bool _meshBakerTexturePackerForcePowerOfTwo;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* _customShaderProperties;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* _customShaderPropNames_Depricated;
  bool _doMultiMaterial;
  bool _doMultiMaterialSplitAtlasesIfTooBig;
  bool _doMultiMaterialSplitAtlasesIfOBUVs;
  ModdingAPI::Exposed::UnityEngine::Material* _resultMaterial;
  bool _considerNonTextureProperties;
  bool _doSuggestTreatment;
  ModdingAPI::Exposed::MB3_TextureBaker::CreateAtlasesCoroutineResult* _coroutineResult;
  ModdingAPI::Exposed::MB_MultiMaterial_array* resultMaterials;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* objsToMesh;
  ModdingAPI::Exposed::MB3_TextureBaker::OnCombinedTexturesCoroutineSuccess* onBuiltAtlasesSuccess;
  ModdingAPI::Exposed::MB3_TextureBaker::OnCombinedTexturesCoroutineFail* onBuiltAtlasesFail;
  ModdingAPI::Exposed::MB_AtlasesAndRects_array* OnCombinedTexturesCoroutineAtlasesAndRects;

  // Member methods:
  ModdingAPI::Exposed::MB2_TextureBakeResults* get_textureBakeResults() {
    return reinterpret_cast<ModdingAPI::Exposed::MB2_TextureBakeResults*(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335370))(this);
  }
  void set_textureBakeResults(ModdingAPI::Exposed::MB2_TextureBakeResults* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, ModdingAPI::Exposed::MB2_TextureBakeResults*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A410))(this, value);
  }
  int32_t get_atlasPadding() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8A0))(this);
  }
  void set_atlasPadding(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8B0))(this, value);
  }
  int32_t get_maxAtlasSize() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8C0))(this);
  }
  void set_maxAtlasSize(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8D0))(this, value);
  }
  bool get_useMaxAtlasWidthOverride() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE420))(this);
  }
  void set_useMaxAtlasWidthOverride(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD5550))(this, value);
  }
  int32_t get_maxAtlasWidthOverride() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D900))(this);
  }
  void set_maxAtlasWidthOverride(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D910))(this, value);
  }
  bool get_useMaxAtlasHeightOverride() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EFF30))(this);
  }
  void set_useMaxAtlasHeightOverride(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EFF40))(this, value);
  }
  int32_t get_maxAtlasHeightOverride() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383920))(this);
  }
  void set_maxAtlasHeightOverride(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383930))(this, value);
  }
  bool get_resizePowerOfTwoTextures() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x766C20))(this);
  }
  void set_resizePowerOfTwoTextures(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x766C30))(this, value);
  }
  bool get_fixOutOfBoundsUVs() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6F260))(this);
  }
  void set_fixOutOfBoundsUVs(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21B1510))(this, value);
  }
  int32_t get_maxTilingBakeSize() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3199A0))(this);
  }
  void set_maxTilingBakeSize(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383950))(this, value);
  }
  int32_t get_packingAlgorithm() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E8B70))(this);
  }
  void set_packingAlgorithm(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E8B80))(this, value);
  }
  bool get_meshBakerTexturePackerForcePowerOfTwo() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCAF2D0))(this);
  }
  void set_meshBakerTexturePackerForcePowerOfTwo(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21B1520))(this, value);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* get_customShaderProperties() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3199C0))(this);
  }
  void set_customShaderProperties(ModdingAPI::Exposed::System::Collections::Generic::List_T_* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A4B0))(this, value);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* get_customShaderPropNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319930))(this);
  }
  void set_customShaderPropNames(ModdingAPI::Exposed::System::Collections::Generic::List_T_* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A4C0))(this, value);
  }
  bool get_doMultiMaterial() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C1CD0))(this);
  }
  void set_doMultiMaterial(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C1CE0))(this, value);
  }
  bool get_doMultiMaterialSplitAtlasesIfTooBig() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C1AF0))(this);
  }
  void set_doMultiMaterialSplitAtlasesIfTooBig(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C1CF0))(this, value);
  }
  bool get_doMultiMaterialSplitAtlasesIfOBUVs() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C1E30))(this);
  }
  void set_doMultiMaterialSplitAtlasesIfOBUVs(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C1E40))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Material* get_resultMaterial() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319950))(this);
  }
  void set_resultMaterial(ModdingAPI::Exposed::UnityEngine::Material* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383A40))(this, value);
  }
  bool get_considerNonTextureProperties() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7F6490))(this);
  }
  void set_considerNonTextureProperties(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5EC50))(this, value);
  }
  bool get_doSuggestTreatment() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DDC60))(this);
  }
  void set_doSuggestTreatment(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DDC70))(this, value);
  }
  ModdingAPI::Exposed::MB3_TextureBaker::CreateAtlasesCoroutineResult* get_CoroutineResult() {
    return reinterpret_cast<ModdingAPI::Exposed::MB3_TextureBaker::CreateAtlasesCoroutineResult*(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x307640))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* GetObjectsToCombine() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21B1530))(this);
  }
  ModdingAPI::Exposed::MB_AtlasesAndRects_array* CreateAtlases() {
    return reinterpret_cast<ModdingAPI::Exposed::MB_AtlasesAndRects_array*(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21B16A0))(this);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* CreateAtlasesCoroutine(ModdingAPI::Exposed::DigitalOpus::MB::Core::ProgressUpdateDelegate* progressInfo, ModdingAPI::Exposed::MB3_TextureBaker::CreateAtlasesCoroutineResult* coroutineResult, bool saveAtlasesAsAssets, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* editorMethods, float maxTimePerFrame) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, ModdingAPI::Exposed::DigitalOpus::MB::Core::ProgressUpdateDelegate*, ModdingAPI::Exposed::MB3_TextureBaker::CreateAtlasesCoroutineResult*, bool, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21B16C0))(this, progressInfo, coroutineResult, saveAtlasesAsAssets, editorMethods, maxTimePerFrame);
  }
  ModdingAPI::Exposed::MB_AtlasesAndRects_array* CreateAtlases(ModdingAPI::Exposed::DigitalOpus::MB::Core::ProgressUpdateDelegate* progressInfo, bool saveAtlasesAsAssets, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* editorMethods) {
    return reinterpret_cast<ModdingAPI::Exposed::MB_AtlasesAndRects_array*(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, ModdingAPI::Exposed::DigitalOpus::MB::Core::ProgressUpdateDelegate*, bool, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21B1860))(this, progressInfo, saveAtlasesAsAssets, editorMethods);
  }
  void unpackMat2RectMap(ModdingAPI::Exposed::MB2_TextureBakeResults* tbr) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, ModdingAPI::Exposed::MB2_TextureBakeResults*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21B1E10))(this, tbr);
  }
  ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner* CreateAndConfigureTextureCombiner() {
    return reinterpret_cast<ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21B2370))(this);
  }
  System_String* PrintSet(ModdingAPI::Exposed::System::Collections::Generic::HashSet_T_* s) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*, ModdingAPI::Exposed::System::Collections::Generic::HashSet_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21B2A20))(this, s);
  }
  bool _ValidateResultMaterials() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21B2C80))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_TextureBaker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21B37A0))(this);
  }

  // Static methods:
  static inline void ConfigureNewMaterialToMatchOld(ModdingAPI::Exposed::UnityEngine::Material* newMat, ModdingAPI::Exposed::UnityEngine::Material* original) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Material*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21B2570))(newMat, original);
  }
};
}