// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed::TMPro {
struct __TMP_Settings_Il2CppStaticFields {
  ModdingAPI::Exposed::TMPro::TMP_Settings* s_Instance;
};

struct __TMP_Settings_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __TMP_Settings_Il2CppClass {
  Il2CppClass_1 _1;
  __TMP_Settings_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TMP_Settings_Il2CppVtbl vtbl;
};

class TMP_Settings {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C57000;
  static inline    __TMP_Settings_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __TMP_Settings_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__TMP_Settings_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __TMP_Settings_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool m_enableWordWrapping;
  bool m_enableKerning;
  bool m_enableExtraPadding;
  bool m_enableTintAllSprites;
  bool m_enableParseEscapeCharacters;
  bool m_EnableRaycastTarget;
  bool m_GetFontFeaturesAtRuntime;
  int32_t m_missingGlyphCharacter;
  bool m_warningsDisabled;
  ModdingAPI::Exposed::TMPro::TMP_FontAsset* m_defaultFontAsset;
  System_String* m_defaultFontAssetPath;
  float m_defaultFontSize;
  float m_defaultAutoSizeMinRatio;
  float m_defaultAutoSizeMaxRatio;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_defaultTextMeshProTextContainerSize;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_defaultTextMeshProUITextContainerSize;
  bool m_autoSizeTextContainer;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_fallbackFontAssets;
  bool m_matchMaterialPreset;
  ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* m_defaultSpriteAsset;
  System_String* m_defaultSpriteAssetPath;
  System_String* m_defaultColorGradientPresetsPath;
  bool m_enableEmojiSupport;
  ModdingAPI::Exposed::TMPro::TMP_StyleSheet* m_defaultStyleSheet;
  ModdingAPI::Exposed::UnityEngine::TextAsset* m_leadingCharacters;
  ModdingAPI::Exposed::UnityEngine::TextAsset* m_followingCharacters;
  ModdingAPI::Exposed::TMPro::TMP_Settings::LineBreakingTable* m_linebreakingRules;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_Settings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EAA60))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::TMPro::TMP_Settings*> s_Instance = __CppStaticProperty<ModdingAPI::Exposed::TMPro::TMP_Settings*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_Instance; }
  );

  // Static methods:
  static inline System_String* get_version() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9BB0))();
  }
  static inline bool get_enableWordWrapping() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9C30))();
  }
  static inline bool get_enableKerning() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9C50))();
  }
  static inline bool get_enableExtraPadding() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9C70))();
  }
  static inline bool get_enableTintAllSprites() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9C90))();
  }
  static inline bool get_enableParseEscapeCharacters() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9CB0))();
  }
  static inline bool get_enableRaycastTarget() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9CD0))();
  }
  static inline bool get_getFontFeaturesAtRuntime() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9CF0))();
  }
  static inline int32_t get_missingGlyphCharacter() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9D10))();
  }
  static inline void set_missingGlyphCharacter(int32_t value) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9D30))(value);
  }
  static inline bool get_warningsDisabled() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9D60))();
  }
  static inline ModdingAPI::Exposed::TMPro::TMP_FontAsset* get_defaultFontAsset() {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_FontAsset*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9D80))();
  }
  static inline System_String* get_defaultFontAssetPath() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9DA0))();
  }
  static inline float get_defaultFontSize() {
    return reinterpret_cast<float(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9DC0))();
  }
  static inline float get_defaultTextAutoSizingMinRatio() {
    return reinterpret_cast<float(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9DE0))();
  }
  static inline float get_defaultTextAutoSizingMaxRatio() {
    return reinterpret_cast<float(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9E00))();
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 get_defaultTextMeshProTextContainerSize() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9E20))();
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 get_defaultTextMeshProUITextContainerSize() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9E50))();
  }
  static inline bool get_autoSizeTextContainer() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9E80))();
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::List_T_* get_fallbackFontAssets() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9EA0))();
  }
  static inline bool get_matchMaterialPreset() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9EC0))();
  }
  static inline ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* get_defaultSpriteAsset() {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9EE0))();
  }
  static inline System_String* get_defaultSpriteAssetPath() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9F00))();
  }
  static inline System_String* get_defaultColorGradientPresetsPath() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9F20))();
  }
  static inline bool get_enableEmojiSupport() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9F40))();
  }
  static inline void set_enableEmojiSupport(bool value) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9F70))(value);
  }
  static inline ModdingAPI::Exposed::TMPro::TMP_StyleSheet* get_defaultStyleSheet() {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_StyleSheet*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9FA0))();
  }
  static inline ModdingAPI::Exposed::UnityEngine::TextAsset* get_leadingCharacters() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::TextAsset*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E9FD0))();
  }
  static inline ModdingAPI::Exposed::UnityEngine::TextAsset* get_followingCharacters() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::TextAsset*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EA000))();
  }
  static inline ModdingAPI::Exposed::TMPro::TMP_Settings::LineBreakingTable* get_linebreakingRules() {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_Settings::LineBreakingTable*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EA030))();
  }
  static inline ModdingAPI::Exposed::TMPro::TMP_Settings* get_instance() {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_Settings*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EA080))();
  }
  static inline ModdingAPI::Exposed::TMPro::TMP_Settings* LoadDefaultSettings() {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_Settings*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EA170))();
  }
  static inline ModdingAPI::Exposed::TMPro::TMP_Settings* GetSettings() {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_Settings*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EA290))();
  }
  static inline ModdingAPI::Exposed::TMPro::TMP_FontAsset* GetFontAsset() {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_FontAsset*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EA350))();
  }
  static inline ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* GetSpriteAsset() {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EA420))();
  }
  static inline ModdingAPI::Exposed::TMPro::TMP_StyleSheet* GetStyleSheet() {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_StyleSheet*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EA4F0))();
  }
  static inline void LoadLinebreakingRules() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EA5C0))();
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* GetCharacters(ModdingAPI::Exposed::UnityEngine::TextAsset* file) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EA800))(file);
  }
};
}