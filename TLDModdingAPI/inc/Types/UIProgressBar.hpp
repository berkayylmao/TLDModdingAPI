// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __UIProgressBar_Il2CppStaticFields {
  ModdingAPI::Exposed::UIProgressBar* current;
};

struct __UIProgressBar_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Upgrade;
  VirtualInvokeData _5_OnStart;
  VirtualInvokeData _6_LocalToValue;
  VirtualInvokeData _7_ForceUpdate;
};

struct __UIProgressBar_Il2CppClass {
  Il2CppClass_1 _1;
  __UIProgressBar_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __UIProgressBar_Il2CppVtbl vtbl;
};

class UIProgressBar {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C5F160;
  static inline    __UIProgressBar_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __UIProgressBar_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__UIProgressBar_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __UIProgressBar_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UIProgressBar::OnDragFinished* onDragFinished;
  ModdingAPI::Exposed::UnityEngine::Transform* thumb;
  float thumbOffset;
  ModdingAPI::Exposed::UnityEngine::Vector2 thumbLimits;
  ModdingAPI::Exposed::UIWidget* mBG;
  ModdingAPI::Exposed::UIWidget* mFG;
  float mValue;
  int32_t mFill;
  ModdingAPI::Exposed::UnityEngine::Transform* mTrans;
  bool mIsDirty;
  ModdingAPI::Exposed::UnityEngine::Camera* mCam;
  float mOffset;
  int32_t numberOfSteps;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* onChange;

  // Member methods:
  ModdingAPI::Exposed::UnityEngine::Transform* get_cachedTransform() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Transform*(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D2BB0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Camera* get_cachedCamera() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Camera*(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D2CB0))(this);
  }
  ModdingAPI::Exposed::UIWidget* get_foregroundWidget() {
    return reinterpret_cast<ModdingAPI::Exposed::UIWidget*(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319960))(this);
  }
  void set_foregroundWidget(ModdingAPI::Exposed::UIWidget* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*, ModdingAPI::Exposed::UIWidget*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D2E30))(this, value);
  }
  ModdingAPI::Exposed::UIWidget* get_backgroundWidget() {
    return reinterpret_cast<ModdingAPI::Exposed::UIWidget*(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319970))(this);
  }
  void set_backgroundWidget(ModdingAPI::Exposed::UIWidget* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*, ModdingAPI::Exposed::UIWidget*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D2EF0))(this, value);
  }
  int32_t get_fillDirection() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383920))(this);
  }
  void set_fillDirection(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D2FB0))(this, value);
  }
  float get_value() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D2FD0))(this);
  }
  void set_value(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D30C0))(this, value);
  }
  float GetRawValue() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56EEC0))(this);
  }
  float get_alpha() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D32D0))(this);
  }
  void set_alpha(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D3400))(this, value);
  }
  bool get_isHorizontal() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D3A00))(this);
  }
  bool get_isInverted() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x203B0C0))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D3A20))(this);
  }
  void Upgrade() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnStart() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D3C10))(this);
  }
  void OnValidate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D3C30))(this);
  }
  float ScreenToValue(ModdingAPI::Exposed::UnityEngine::Vector2 screenPos) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D3DE0))(this, screenPos);
  }
  float LocalToValue(ModdingAPI::Exposed::UnityEngine::Vector2 localPos) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D4370))(this, localPos);
  }
  void ForceUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D4550))(this);
  }
  void SetThumbPosition(ModdingAPI::Exposed::UnityEngine::Vector3 worldPos) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D5570))(this, worldPos);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 LerpWithoutClamp(ModdingAPI::Exposed::UnityEngine::Vector3 A, ModdingAPI::Exposed::UnityEngine::Vector3 B, float t) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D59C0))(this, A, B, t);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIProgressBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D5B10))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::UIProgressBar*> current = __CppStaticProperty<ModdingAPI::Exposed::UIProgressBar*>(
   []() { return &GetStaticClassInstance()->pStaticFields->current; }
  );
};
}