// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Runtime.InteropServices.GCHandle.hpp"
#include "ModdingAPI.Exposed.System.Guid.hpp"
#include "ModdingAPI.Exposed.System.Diagnostics.Tracing.EventDescriptor.hpp"
#include "ModdingAPI::Exposed::System::Guid.hpp"


namespace ModdingAPI::Exposed::System::Diagnostics::Tracing {
struct __EventProvider_Il2CppStaticFields {
  bool m_setInformationMissing;
  int32_t s_returnCode;
  ModdingAPI::Exposed::System::Int32_array* nibblebits;
};

struct __EventProvider_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Dispose;
  VirtualInvokeData _5_Dispose;
  VirtualInvokeData _6_OnControllerCommand;
};

struct __EventProvider_Il2CppClass {
  Il2CppClass_1 _1;
  __EventProvider_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __EventProvider_Il2CppVtbl vtbl;
};

class EventProvider {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C229D8;
  static inline    __EventProvider_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __EventProvider_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__EventProvider_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __EventProvider_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::Microsoft::Win32::UnsafeNativeMethods::ManifestEtw::EtwEnableCallback* m_etwCallback;
  ModdingAPI::Exposed::System::Runtime::InteropServices::GCHandle m_thisGCHandle;
  int64_t m_regHandle;
  uint8_t m_level;
  int64_t m_anyKeywordMask;
  int64_t m_allKeywordMask;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_liveSessions;
  bool m_enabled;
  ModdingAPI::Exposed::System::Guid m_providerId;
  bool m_disposed;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void Register(ModdingAPI::Exposed::System::Guid providerGuid) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*, ModdingAPI::Exposed::System::Guid)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EF460))(this, providerGuid);
  }
  int32_t SetInformation(int32_t eventInfoClass, void* data, int32_t dataSize) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*, int32_t, void*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EF700))(this, eventInfoClass, data, dataSize);
  }
  void Dispose() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EF8C0))(this);
  }
  void Dispose(bool disposing) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EF970))(this, disposing);
  }
  void Finalize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EFBA0))(this);
  }
  void Deregister() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EFC20))(this);
  }
  void EtwEnableCallBackImpl(int32_t controlCode, uint8_t setLevel, int64_t anyKeyword, int64_t allKeyword, ModdingAPI::Exposed::Microsoft::Win32::UnsafeNativeMethods::ManifestEtw::EVENT_FILTER_DESCRIPTOR* filterData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*, int32_t, uint8_t, int64_t, int64_t, ModdingAPI::Exposed::Microsoft::Win32::UnsafeNativeMethods::ManifestEtw::EVENT_FILTER_DESCRIPTOR*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EFE40))(this, controlCode, setLevel, anyKeyword, allKeyword, filterData);
  }
  void OnControllerCommand(int32_t command, ModdingAPI::Exposed::System::Collections::Generic::IDictionary_TKey__TValue_* arguments, int32_t sessionId, int32_t etwSessionId) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*, int32_t, ModdingAPI::Exposed::System::Collections::Generic::IDictionary_TKey__TValue_*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, command, arguments, sessionId, etwSessionId);
  }
  int32_t get_Level() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3F0))(this);
  }
  int64_t get_MatchAnyKeyword() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335370))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* GetSessions() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F03D0))(this);
  }
  void GetSessionInfo(ModdingAPI::Exposed::System::Action_T1__T2_* action) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*, ModdingAPI::Exposed::System::Action_T1__T2_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F10B0))(this, action);
  }
  bool GetDataFromController(int32_t etwSessionId, ModdingAPI::Exposed::Microsoft::Win32::UnsafeNativeMethods::ManifestEtw::EVENT_FILTER_DESCRIPTOR* filterData, int32_t command, ModdingAPI::Exposed::System::Byte_array* data, int32_t dataStart) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*, int32_t, ModdingAPI::Exposed::Microsoft::Win32::UnsafeNativeMethods::ManifestEtw::EVENT_FILTER_DESCRIPTOR*, int32_t, ModdingAPI::Exposed::System::Byte_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F13F0))(this, etwSessionId, filterData, command, data, dataStart);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EFF30))(this);
  }
  bool IsEnabled(uint8_t level, int64_t keywords) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*, uint8_t, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F1520))(this, level, keywords);
  }
  bool WriteEvent(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventDescriptor eventDescriptor, ModdingAPI::Exposed::System::Guid* activityID, ModdingAPI::Exposed::System::Guid* childActivityID, ModdingAPI::Exposed::System::Object_array* eventPayload) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventDescriptor, ModdingAPI::Exposed::System::Guid*, ModdingAPI::Exposed::System::Guid*, ModdingAPI::Exposed::System::Object_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F2350))(this, eventDescriptor, activityID, childActivityID, eventPayload);
  }
  bool WriteEvent(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventDescriptor eventDescriptor, ModdingAPI::Exposed::System::Guid* activityID, ModdingAPI::Exposed::System::Guid* childActivityID, int32_t dataCount, intptr_t data) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventDescriptor, ModdingAPI::Exposed::System::Guid*, ModdingAPI::Exposed::System::Guid*, int32_t, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F3110))(this, eventDescriptor, activityID, childActivityID, dataCount, data);
  }
  bool WriteEventRaw(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventDescriptor eventDescriptor, ModdingAPI::Exposed::System::Guid* activityID, ModdingAPI::Exposed::System::Guid* relatedActivityID, int32_t dataCount, intptr_t data) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventDescriptor, ModdingAPI::Exposed::System::Guid*, ModdingAPI::Exposed::System::Guid*, int32_t, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F3220))(this, eventDescriptor, activityID, relatedActivityID, dataCount, data);
  }
  uint32_t EventUnregister() {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F3330))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<bool> m_setInformationMissing = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_setInformationMissing; }
  );
  static inline __CppStaticProperty<int32_t> s_returnCode = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_returnCode; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*> nibblebits = __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->nibblebits; }
  );

  // Static methods:
  static inline void EtwEnableCallBack(ModdingAPI::Exposed::System::Guid sourceId, int32_t controlCode, uint8_t setLevel, int64_t anyKeyword, int64_t allKeyword, ModdingAPI::Exposed::Microsoft::Win32::UnsafeNativeMethods::ManifestEtw::EVENT_FILTER_DESCRIPTOR* filterData, void* callbackContext) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Guid, int32_t, uint8_t, int64_t, int64_t, ModdingAPI::Exposed::Microsoft::Win32::UnsafeNativeMethods::ManifestEtw::EVENT_FILTER_DESCRIPTOR*, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EFCE0))(sourceId, controlCode, setLevel, anyKeyword, allKeyword, filterData, callbackContext);
  }
  static inline int32_t FindNull(ModdingAPI::Exposed::System::Byte_array* buffer, int32_t idx) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F0380))(buffer, idx);
  }
  static inline void GetSessionInfoCallback(int32_t etwSessionId, int64_t matchAllKeywords, ModdingAPI::Exposed::System::Collections::Generic::List_T_* sessionList) {
    reinterpret_cast<void(__fastcall*)(int32_t, int64_t, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F0D00))(etwSessionId, matchAllKeywords, sessionList);
  }
  static inline int32_t IndexOfSessionInList(ModdingAPI::Exposed::System::Collections::Generic::List_T_* sessions, int32_t etwSessionId) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F1310))(sessions, etwSessionId);
  }
  static inline int32_t GetLastWriteEventError() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F1560))();
  }
  static inline void SetLastError(int32_t error) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F1640))(error);
  }
  static inline Il2CppObject* EncodeObject(Il2CppObject* data, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider::EventData* dataDescriptor, uint8_t* dataBuffer, uint32_t totalEventSize) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(Il2CppObject*, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventProvider::EventData*, uint8_t*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F17A0))(data, dataDescriptor, dataBuffer, totalEventSize);
  }
  static inline int32_t bitcount(uint32_t n) {
    return reinterpret_cast<int32_t(__fastcall*)(uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F33E0))(n);
  }
  static inline int32_t bitindex(uint32_t n) {
    return reinterpret_cast<int32_t(__fastcall*)(uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F34E0))(n);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F3500))();
  }
};
}