// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Dynamic::Utils {
struct __TypeUtils_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Reflection::Assembly* s_mscorlib;
};

struct __TypeUtils_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __TypeUtils_Il2CppClass {
  Il2CppClass_1 _1;
  __TypeUtils_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TypeUtils_Il2CppVtbl vtbl;
};

class TypeUtils {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C25810;
  static inline    __TypeUtils_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __TypeUtils_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__TypeUtils_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __TypeUtils_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Reflection::Assembly*> s_mscorlib = __CppStaticProperty<ModdingAPI::Exposed::System::Reflection::Assembly*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_mscorlib; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::System::Type* GetNonNullableType(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D5A10))(type);
  }
  static inline ModdingAPI::Exposed::System::Type* GetNullableType(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D5A80))(type);
  }
  static inline bool IsNullableType(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D5C10))(type);
  }
  static inline bool IsBool(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D5D10))(type);
  }
  static inline bool IsNumeric(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D5DD0))(type);
  }
  static inline bool IsInteger(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D5EB0))(type);
  }
  static inline bool IsArithmetic(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D5F90))(type);
  }
  static inline bool IsUnsignedInt(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D6070))(type);
  }
  static inline bool IsIntegerOrBool(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D6160))(type);
  }
  static inline bool IsValidInstanceType(ModdingAPI::Exposed::System::Reflection::MemberInfo* member, ModdingAPI::Exposed::System::Type* instanceType) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MemberInfo*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D6240))(member, instanceType);
  }
  static inline bool HasIdentityPrimitiveOrNullableConversionTo(ModdingAPI::Exposed::System::Type* source, ModdingAPI::Exposed::System::Type* dest) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D65B0))(source, dest);
  }
  static inline bool HasReferenceConversionTo(ModdingAPI::Exposed::System::Type* source, ModdingAPI::Exposed::System::Type* dest) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D67A0))(source, dest);
  }
  static inline bool IsCovariant(ModdingAPI::Exposed::System::Type* t) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D69E0))(t);
  }
  static inline bool IsContravariant(ModdingAPI::Exposed::System::Type* t) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D6A10))(t);
  }
  static inline bool IsInvariant(ModdingAPI::Exposed::System::Type* t) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D6A40))(t);
  }
  static inline bool IsDelegate(ModdingAPI::Exposed::System::Type* t) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D6A70))(t);
  }
  static inline bool IsLegalExplicitVariantDelegateConversion(ModdingAPI::Exposed::System::Type* source, ModdingAPI::Exposed::System::Type* dest) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D6B40))(source, dest);
  }
  static inline bool IsConvertible(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D6E80))(type);
  }
  static inline bool HasReferenceEquality(ModdingAPI::Exposed::System::Type* left, ModdingAPI::Exposed::System::Type* right) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D6F60))(left, right);
  }
  static inline bool HasBuiltInEqualityOperator(ModdingAPI::Exposed::System::Type* left, ModdingAPI::Exposed::System::Type* right) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D7020))(left, right);
  }
  static inline bool IsImplicitlyConvertibleTo(ModdingAPI::Exposed::System::Type* source, ModdingAPI::Exposed::System::Type* destination) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D7210))(source, destination);
  }
  static inline ModdingAPI::Exposed::System::Reflection::MethodInfo* GetUserDefinedCoercionMethod(ModdingAPI::Exposed::System::Type* convertFrom, ModdingAPI::Exposed::System::Type* convertToType) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Reflection::MethodInfo*(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D7580))(convertFrom, convertToType);
  }
  static inline ModdingAPI::Exposed::System::Reflection::MethodInfo* FindConversionOperator(ModdingAPI::Exposed::System::Reflection::MethodInfo_array* methods, ModdingAPI::Exposed::System::Type* typeFrom, ModdingAPI::Exposed::System::Type* typeTo) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Reflection::MethodInfo*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MethodInfo_array*, ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D7700))(methods, typeFrom, typeTo);
  }
  static inline bool IsImplicitNumericConversion(ModdingAPI::Exposed::System::Type* source, ModdingAPI::Exposed::System::Type* destination) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D7920))(source, destination);
  }
  static inline bool IsImplicitReferenceConversion(ModdingAPI::Exposed::System::Type* source, ModdingAPI::Exposed::System::Type* destination) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA17CF0))(source, destination);
  }
  static inline bool IsImplicitBoxingConversion(ModdingAPI::Exposed::System::Type* source, ModdingAPI::Exposed::System::Type* destination) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D7B20))(source, destination);
  }
  static inline bool IsImplicitNullableConversion(ModdingAPI::Exposed::System::Type* source, ModdingAPI::Exposed::System::Type* destination) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D7CA0))(source, destination);
  }
  static inline ModdingAPI::Exposed::System::Type* FindGenericType(ModdingAPI::Exposed::System::Type* definition, ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D7D00))(definition, type);
  }
  static inline ModdingAPI::Exposed::System::Reflection::MethodInfo* GetBooleanOperator(ModdingAPI::Exposed::System::Type* type, System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Reflection::MethodInfo*(__fastcall*)(ModdingAPI::Exposed::System::Type*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D8010))(type, name);
  }
  static inline ModdingAPI::Exposed::System::Type* GetNonRefType(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D81F0))(type);
  }
  static inline bool AreEquivalent(ModdingAPI::Exposed::System::Type* t1, ModdingAPI::Exposed::System::Type* t2) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D8240))(t1, t2);
  }
  static inline bool AreReferenceAssignable(ModdingAPI::Exposed::System::Type* dest, ModdingAPI::Exposed::System::Type* src) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D8310))(dest, src);
  }
  static inline bool IsSameOrSubclass(ModdingAPI::Exposed::System::Type* type, ModdingAPI::Exposed::System::Type* subType) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D83B0))(type, subType);
  }
  static inline void ValidateType(ModdingAPI::Exposed::System::Type* type, System_String* paramName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Type*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D8410))(type, paramName);
  }
  static inline void ValidateType(ModdingAPI::Exposed::System::Type* type, System_String* paramName, bool allowByRef, bool allowPointer) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Type*, System_String*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D8430))(type, paramName, allowByRef, allowPointer);
  }
  static inline bool ValidateType(ModdingAPI::Exposed::System::Type* type, System_String* paramName, int32_t index) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D8560))(type, paramName, index);
  }
  static inline ModdingAPI::Exposed::System::Reflection::Assembly* get_MsCorLib() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Reflection::Assembly*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D8690))();
  }
  static inline bool CanCache(ModdingAPI::Exposed::System::Type* t) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D8770))(t);
  }
  static inline ModdingAPI::Exposed::System::Reflection::MethodInfo* GetInvokeMethod(ModdingAPI::Exposed::System::Type* delegateType) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Reflection::MethodInfo*(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11D8960))(delegateType);
  }
};
}