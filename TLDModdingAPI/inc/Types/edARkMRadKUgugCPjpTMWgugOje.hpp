// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::OYQnJsXWWNrfKFBxdADdKexwMQy.hpp"
#include "ModdingAPI::Exposed::LxkJpyUADsZPRZMLfAsHKjqyPPaU.hpp"
#include "ModdingAPI::Exposed::WnTeLuUNSDFALJavDMgNrHnHmJya.hpp"


namespace ModdingAPI::Exposed {
struct __edARkMRadKUgugCPjpTMWgugOje_Il2CppStaticFields {
};

struct __edARkMRadKUgugCPjpTMWgugOje_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __edARkMRadKUgugCPjpTMWgugOje_Il2CppClass {
  Il2CppClass_1 _1;
  __edARkMRadKUgugCPjpTMWgugOje_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __edARkMRadKUgugCPjpTMWgugOje_Il2CppVtbl vtbl;
};

class edARkMRadKUgugCPjpTMWgugOje {
public:
  // Il2Cpp fields:
  __edARkMRadKUgugCPjpTMWgugOje_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline int32_t kGwwCpUIrHRCWYDZhDHXtBUglge(int32_t , ModdingAPI::Exposed::OYQnJsXWWNrfKFBxdADdKexwMQy ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, ModdingAPI::Exposed::OYQnJsXWWNrfKFBxdADdKexwMQy)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D500))(, );
  }
  static inline int32_t gErZCOmBQEYjFpGJvXVjSzLMpJJ(int32_t , void* ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D520))(, );
  }
  static inline int32_t dleHRXSoxIiHMnHsHFhHitfNxwD(int32_t , void* ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D8A0))(, );
  }
  static inline int32_t kcPbsWMatEWVctBjbcZqKdbcicNE(int32_t , void* ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D950))(, );
  }
  static inline int32_t kmqQaHeBrtHTqsABnQbkuOJeVit(int32_t , void* ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30DA00))(, );
  }
  static inline int32_t zEalKkoUkNbTKiorULqmjQhBPOR(int32_t , void* ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30DAB0))(, );
  }
  static inline int32_t UAgtKMissnIUuoHlnbJYbMltVVn(int32_t , void* ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30DB60))(, );
  }
  static inline int32_t dJAafIQtNSCNndRmJgsjhfaRXcqh(int32_t , ModdingAPI::Exposed::LxkJpyUADsZPRZMLfAsHKjqyPPaU ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, ModdingAPI::Exposed::LxkJpyUADsZPRZMLfAsHKjqyPPaU)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30DC10))(, );
  }
  static inline int32_t oTNchLgCPZDQPlhLUCOBEKmfSxVN(int32_t , void* ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30DC30))(, );
  }
  static inline int32_t stlBMjynXKytiYKdnSrKfqxiGAS(int32_t , void* ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30E0C0))(, );
  }
  static inline int32_t qXcBwlSSRkFvztFfYEHipaRNllI(int32_t , void* ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30E170))(, );
  }
  static inline int32_t dtbzajdiCgfQRMSltSkQVILQoEA(int32_t , void* ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30E220))(, );
  }
  static inline int32_t iiRcSiBfsfNnZstPHgKsxICQNbS(int32_t , void* ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30E2D0))(, );
  }
  static inline int32_t XZwnpFXFTyylgCKjAVCVBYZNarO(int32_t , void* ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30E380))(, );
  }
  static inline int32_t lcrDYmNxrHnKEOPsqtbWIKRFrVX(int32_t , int32_t , ModdingAPI::Exposed::WnTeLuUNSDFALJavDMgNrHnHmJya ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, ModdingAPI::Exposed::WnTeLuUNSDFALJavDMgNrHnHmJya)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30E430))(, , );
  }
  static inline int32_t sMwwKOSCQbxRLBBDkQkPtPIQZFO(int32_t , int32_t , void* ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30E450))(, , );
  }
  static inline int32_t iAjxPitbquLYFAbyYkBVKzHBUpM(int32_t , int32_t , void* ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30E7D0))(, , );
  }
  static inline int32_t WjIghSFOfsHRMEynCSyWSdOMBfB(int32_t , int32_t , void* ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30E880))(, , );
  }
  static inline int32_t mYAwllRlskbmTeSMdMfJZuqYGXFp(int32_t , int32_t , void* ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30E930))(, , );
  }
  static inline int32_t UastKBSsPsJsgMBXQyrzWZJRwxE(int32_t , int32_t , void* ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30E9E0))(, , );
  }
  static inline int32_t pTnozbsTwpfssbpleOzfMsbQolk(int32_t , int32_t , void* ) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, void*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30EA90))(, , );
  }
};
}