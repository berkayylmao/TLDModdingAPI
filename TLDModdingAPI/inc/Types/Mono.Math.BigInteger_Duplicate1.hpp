// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Mono::Math {
struct __BigInteger_Duplicate1_Il2CppStaticFields {
  ModdingAPI::Exposed::System::UInt32_array* smallPrimes;
  ModdingAPI::Exposed::System::Security::Cryptography::RandomNumberGenerator* rng;
};

struct __BigInteger_Duplicate1_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __BigInteger_Duplicate1_Il2CppClass {
  Il2CppClass_1 _1;
  __BigInteger_Duplicate1_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __BigInteger_Duplicate1_Il2CppVtbl vtbl;
};

class BigInteger_Duplicate1 {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C958B0;
  static inline    __BigInteger_Duplicate1_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __BigInteger_Duplicate1_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__BigInteger_Duplicate1_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __BigInteger_Duplicate1_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  uint32_t length;
  ModdingAPI::Exposed::System::UInt32_array* data;

  // Member methods:
  void ::ctor(int32_t sign, uint32_t len) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, int32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B28B0))(this, sign, len);
  }
  void ::ctor(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* bi) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B2950))(this, bi);
  }
  void ::ctor(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* bi, uint32_t len) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B2AC0))(this, bi, len);
  }
  void ::ctor(ModdingAPI::Exposed::System::Byte_array* inData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B2BE0))(this, inData);
  }
  void ::ctor(uint32_t ui) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B2FC0))(this, ui);
  }
  int32_t BitCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDBF700))(this);
  }
  bool TestBit(int32_t bitNum) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B3F80))(this, bitNum);
  }
  void SetBit(uint32_t bitNum) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDBF930))(this, bitNum);
  }
  void SetBit(uint32_t bitNum, bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, uint32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDBF980))(this, bitNum, value);
  }
  int32_t LowestSetBit() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B4080))(this);
  }
  ModdingAPI::Exposed::System::Byte_array* GetBytes() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B4160))(this);
  }
  System_String* ToString(uint32_t radix) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B4530))(this, radix);
  }
  System_String* ToString(uint32_t radix, System_String* characterSet) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, uint32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B45D0))(this, radix, characterSet);
  }
  void Normalize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDC0600))(this);
  }
  void Clear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDC0660))(this);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDC06C0))(this);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B4A90))(this);
  }
  bool Equals(Il2CppObject* o) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B4B20))(this, o);
  }
  ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* ModInverse(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* modulus) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B4CD0))(this, modulus);
  }
  void Incr2() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDC0F10))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::UInt32_array*> smallPrimes = __CppStaticProperty<ModdingAPI::Exposed::System::UInt32_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->smallPrimes; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Security::Cryptography::RandomNumberGenerator*> rng = __CppStaticProperty<ModdingAPI::Exposed::System::Security::Cryptography::RandomNumberGenerator*>(
   []() { return &GetStaticClassInstance()->pStaticFields->rng; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::System::Security::Cryptography::RandomNumberGenerator* get_Rng() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::Cryptography::RandomNumberGenerator*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B39C0))();
  }
  static inline ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* GenerateRandom(int32_t bits, ModdingAPI::Exposed::System::Security::Cryptography::RandomNumberGenerator* rng) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*(__fastcall*)(int32_t, ModdingAPI::Exposed::System::Security::Cryptography::RandomNumberGenerator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B3AE0))(bits, rng);
  }
  static inline ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* GenerateRandom(int32_t bits) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B3DE0))(bits);
  }
  static inline ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* GeneratePseudoPrime(int32_t bits) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B4CE0))(bits);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B4E40))();
  }
};
}