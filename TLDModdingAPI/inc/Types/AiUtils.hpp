// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI::Exposed::Pathfinding::NNInfo.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Color.hpp"
#include "ModdingAPI::Exposed::UnityEngine::RaycastHit.hpp"


namespace ModdingAPI::Exposed {
struct __AiUtils_Il2CppStaticFields {
  ModdingAPI::Exposed::UnityEngine::RaycastHit_array* m_GetRandomPointOnNavmeshNoPaddingHits;
  ModdingAPI::Exposed::UnityEngine::RaycastHit_array* s_SphereCastResults;
};

struct __AiUtils_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __AiUtils_Il2CppClass {
  Il2CppClass_1 _1;
  __AiUtils_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AiUtils_Il2CppVtbl vtbl;
};

class AiUtils {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C58828;
  static inline    __AiUtils_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __AiUtils_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__AiUtils_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __AiUtils_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AiUtils*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::RaycastHit_array*> m_GetRandomPointOnNavmeshNoPaddingHits = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::RaycastHit_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_GetRandomPointOnNavmeshNoPaddingHits; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::RaycastHit_array*> s_SphereCastResults = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::RaycastHit_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_SphereCastResults; }
  );

  // Static methods:
  static inline bool PositionVisible(ModdingAPI::Exposed::UnityEngine::Vector3 npcPos, ModdingAPI::Exposed::UnityEngine::Vector3 npcForward, ModdingAPI::Exposed::UnityEngine::Vector3 pos, float range, float fov, float raycastRadius, int32_t layerMask) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float, float, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1710730))(npcPos, npcForward, pos, range, fov, raycastRadius, layerMask);
  }
  static inline ModdingAPI::Exposed::Fire* GetClosestVisibleBurningFire(ModdingAPI::Exposed::BaseAi* bai) {
    return reinterpret_cast<ModdingAPI::Exposed::Fire*(__fastcall*)(ModdingAPI::Exposed::BaseAi*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1710C20))(bai);
  }
  static inline bool InSameNavmeshArea(ModdingAPI::Exposed::UnityEngine::Vector3 start, ModdingAPI::Exposed::UnityEngine::Vector3 end) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1711060))(start, end);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 GetClosestNavmeshPoint(ModdingAPI::Exposed::UnityEngine::Vector3 pos, int32_t area, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint, ModdingAPI::Exposed::Pathfinding::NNInfo info) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, int32_t, ModdingAPI::Exposed::Pathfinding::NNConstraint*, ModdingAPI::Exposed::Pathfinding::NNInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1711240))(pos, area, constraint, info);
  }
  static inline bool CanPathfindToPosition(ModdingAPI::Exposed::UnityEngine::Vector3 pos, ModdingAPI::Exposed::UnityEngine::Vector3 testedPosition, float xzThreshold, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint, ModdingAPI::Exposed::Pathfinding::NNInfo info) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float, ModdingAPI::Exposed::Pathfinding::NNConstraint*, ModdingAPI::Exposed::Pathfinding::NNInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1711370))(pos, testedPosition, xzThreshold, constraint, info);
  }
  static inline int32_t GetNavmeshArea(ModdingAPI::Exposed::UnityEngine::Vector3 pos) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1711530))(pos);
  }
  static inline void DrawDebugSphere(ModdingAPI::Exposed::UnityEngine::Vector3 position, float radius, ModdingAPI::Exposed::UnityEngine::Color color) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, float, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17115D0))(position, radius, color);
  }
  static inline bool FindNearestGroundAndNavmeshFor(ModdingAPI::Exposed::UnityEngine::Vector3 pos, ModdingAPI::Exposed::UnityEngine::Vector3 groundPos, ModdingAPI::Exposed::UnityEngine::Vector3 navmeshPos) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1711A10))(pos, groundPos, navmeshPos);
  }
  static inline bool GetNavmeshClampedPosition(ModdingAPI::Exposed::UnityEngine::Vector3 clampedPosition, ModdingAPI::Exposed::UnityEngine::Vector3 pos, ModdingAPI::Exposed::UnityEngine::Vector3 constraintPos, float heightOffset, float radius, float xzThresholdDist, float thresholdDist) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1711DC0))(clampedPosition, pos, constraintPos, heightOffset, radius, xzThresholdDist, thresholdDist);
  }
  static inline bool GetValidPositionUnder(ModdingAPI::Exposed::UnityEngine::Vector3 validPosition, ModdingAPI::Exposed::UnityEngine::Vector3 raycastStart, ModdingAPI::Exposed::UnityEngine::Vector3 clampedPosition, float xzThresholdDist, float thresholdDist) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1712050))(validPosition, raycastStart, clampedPosition, xzThresholdDist, thresholdDist);
  }
  static inline bool GetClosestNavmeshPos(ModdingAPI::Exposed::UnityEngine::Vector3 navmeshPos, ModdingAPI::Exposed::UnityEngine::Vector3 pos, ModdingAPI::Exposed::UnityEngine::Vector3 constraintPos, float radius, float heightOffset) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17123E0))(navmeshPos, pos, constraintPos, radius, heightOffset);
  }
  static inline bool IsNavmeshPosValid(ModdingAPI::Exposed::UnityEngine::Vector3 pos, float radius, float heightOffset) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1712650))(pos, radius, heightOffset);
  }
  static inline bool GetRandomPointOnNavmeshWithDistance(ModdingAPI::Exposed::UnityEngine::Vector3 outPos, ModdingAPI::Exposed::UnityEngine::Vector3 origin, float minRadius, float maxRadius, int32_t area, bool testNavMeshSurfaceOnly, float liftDistance, float raycastDistance) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float, float, int32_t, bool, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17128D0))(outPos, origin, minRadius, maxRadius, area, testNavMeshSurfaceOnly, liftDistance, raycastDistance);
  }
  static inline bool GetRandomPointOnNavmesh(ModdingAPI::Exposed::UnityEngine::Vector3 outPos, ModdingAPI::Exposed::UnityEngine::Vector3 origin, float minRadius, float maxRadius, int32_t area, bool testNavMeshSurfaceOnly, float liftDistance) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float, float, int32_t, bool, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1712A10))(outPos, origin, minRadius, maxRadius, area, testNavMeshSurfaceOnly, liftDistance);
  }
  static inline bool GetRandomPointAndNormalOnNavmeshNoPadding(ModdingAPI::Exposed::UnityEngine::Vector3 outPos, ModdingAPI::Exposed::UnityEngine::Vector3 outNormal, ModdingAPI::Exposed::UnityEngine::Vector3 origin, float minRadius, float maxRadius, int32_t area, bool testNavMeshSurfaceOnly, float raycastDistance) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float, float, int32_t, bool, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1712B50))(outPos, outNormal, origin, minRadius, maxRadius, area, testNavMeshSurfaceOnly, raycastDistance);
  }
  static inline bool OverlapSphereNonSelf(ModdingAPI::Exposed::UnityEngine::Vector3 position, float radius, int32_t layerMask, ModdingAPI::Exposed::UnityEngine::Collider_array* selfColliders) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, float, int32_t, ModdingAPI::Exposed::UnityEngine::Collider_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17131D0))(position, radius, layerMask, selfColliders);
  }
  static inline bool PositionIsClear(ModdingAPI::Exposed::UnityEngine::GameObject* objectToSpawn, float objectRadius, ModdingAPI::Exposed::UnityEngine::Vector3 posToSpawn, bool ignoreSelf) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*, float, ModdingAPI::Exposed::UnityEngine::Vector3, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17133C0))(objectToSpawn, objectRadius, posToSpawn, ignoreSelf);
  }
  static inline bool PositionIsClearGivenCollisionMask(ModdingAPI::Exposed::UnityEngine::GameObject* objectToSpawn, float objectRadius, ModdingAPI::Exposed::UnityEngine::Vector3 posToSpawn, bool ignoreSelf, int32_t collisionMask) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*, float, ModdingAPI::Exposed::UnityEngine::Vector3, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17134B0))(objectToSpawn, objectRadius, posToSpawn, ignoreSelf, collisionMask);
  }
  static inline ModdingAPI::Exposed::BaseAi* GetAiFeedingOnCarcass(ModdingAPI::Exposed::BodyHarvest* bh) {
    return reinterpret_cast<ModdingAPI::Exposed::BaseAi*(__fastcall*)(ModdingAPI::Exposed::BodyHarvest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1713680))(bh);
  }
  static inline void DespawnHostileAiAroundPoint(ModdingAPI::Exposed::UnityEngine::Vector3 pos, float radius) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1713870))(pos, radius);
  }
  static inline void TurnTowardsTarget(ModdingAPI::Exposed::BaseAi* bai) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BaseAi*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1713B00))(bai);
  }
  static inline void PointTowardsDirection(ModdingAPI::Exposed::BaseAi* bai, ModdingAPI::Exposed::UnityEngine::Vector3 dir) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BaseAi*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1713CB0))(bai, dir);
  }
  static inline ModdingAPI::Exposed::BaseAi* FindClosestAiWithinCone(ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::UnityEngine::Vector3 direction, float minDistance, float maxDistance, float maxAngleDegrees) {
    return reinterpret_cast<ModdingAPI::Exposed::BaseAi*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1713D00))(position, direction, minDistance, maxDistance, maxAngleDegrees);
  }
  static inline ModdingAPI::Exposed::BaseAi* GetBaseAiFromObject(ModdingAPI::Exposed::UnityEngine::GameObject* go) {
    return reinterpret_cast<ModdingAPI::Exposed::BaseAi*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17140E0))(go);
  }
  static inline bool RaycastWithAimAssist(ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::UnityEngine::Vector3 direction, ModdingAPI::Exposed::UnityEngine::RaycastHit hit, float maxDistance, float minDistanceForAssist, float maxDistanceForAssist, float maxAngleDegrees, int32_t layerMask) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::RaycastHit, float, float, float, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1714260))(position, direction, hit, maxDistance, minDistanceForAssist, maxDistanceForAssist, maxAngleDegrees, layerMask);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3_array* GetPointsForGradualTurn(ModdingAPI::Exposed::UnityEngine::Transform* transform, ModdingAPI::Exposed::UnityEngine::Vector3 target, float turnRadius, float maxTurnSegmentAngle) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3_array*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Transform*, ModdingAPI::Exposed::UnityEngine::Vector3, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17146D0))(transform, target, turnRadius, maxTurnSegmentAngle);
  }
  static inline void LogWarning(System_String* output) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17152A0))(output);
  }
  static inline bool LayerCanBeGround(int32_t layer) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1715360))(layer);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1715380))();
  }
};
}