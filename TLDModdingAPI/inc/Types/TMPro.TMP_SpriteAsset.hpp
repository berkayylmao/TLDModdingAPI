// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::TMPro {
struct __TMP_SpriteAsset_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* k_searchedSpriteAssets;
};

struct __TMP_SpriteAsset_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __TMP_SpriteAsset_Il2CppClass {
  Il2CppClass_1 _1;
  __TMP_SpriteAsset_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TMP_SpriteAsset_Il2CppVtbl vtbl;
};

class TMP_SpriteAsset {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C57358;
  static inline    __TMP_SpriteAsset_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __TMP_SpriteAsset_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__TMP_SpriteAsset_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __TMP_SpriteAsset_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  int32_t hashCode;
  ModdingAPI::Exposed::UnityEngine::Material* material;
  int32_t materialHashCode;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_UnicodeLookup;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_NameLookup;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_GlyphIndexLookup;
  System_String* m_Version;
  ModdingAPI::Exposed::UnityEngine::Texture* spriteSheet;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_SpriteCharacterTable;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_SpriteGlyphTable;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* spriteInfoList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* fallbackSpriteAssets;
  bool m_IsSpriteAssetLookupTablesDirty;

  // Member methods:
  System_String* get_version() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319980))(this);
  }
  void set_version(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A430))(this, value);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* get_spriteCharacterTable() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EBC60))(this);
  }
  void set_spriteCharacterTable(ModdingAPI::Exposed::System::Collections::Generic::List_T_* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383970))(this, value);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* get_spriteGlyphTable() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3199C0))(this);
  }
  void set_spriteGlyphTable(ModdingAPI::Exposed::System::Collections::Generic::List_T_* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A4B0))(this, value);
  }
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EBC90))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Material* GetDefaultSpriteMaterial() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EBD60))(this);
  }
  void UpdateLookupTables() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EBFE0))(this);
  }
  int32_t GetSpriteIndexFromHashcode(int32_t hashCode) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EC980))(this, hashCode);
  }
  int32_t GetSpriteIndexFromUnicode(uint32_t unicode) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4ECA90))(this, unicode);
  }
  int32_t GetSpriteIndexFromName(System_String* name) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4ECBA0))(this, name);
  }
  void SortGlyphTable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EDD10))(this);
  }
  void SortCharacterTable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EDF20))(this);
  }
  void SortGlyphAndCharacterTables() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EE130))(this);
  }
  void UpgradeSpriteAsset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EE150))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EE9D0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> k_searchedSpriteAssets = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->k_searchedSpriteAssets; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* SearchForSpriteByUnicode(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* spriteAsset, uint32_t unicode, bool includeFallbacks, int32_t spriteIndex) {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*, uint32_t, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4ECC70))(spriteAsset, unicode, includeFallbacks, spriteIndex);
  }
  static inline ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* SearchForSpriteByUnicodeInternal(ModdingAPI::Exposed::System::Collections::Generic::List_T_* spriteAssets, uint32_t unicode, bool includeFallbacks, int32_t spriteIndex) {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::List_T_*, uint32_t, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4ED0B0))(spriteAssets, unicode, includeFallbacks, spriteIndex);
  }
  static inline ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* SearchForSpriteByUnicodeInternal(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* spriteAsset, uint32_t unicode, bool includeFallbacks, int32_t spriteIndex) {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*, uint32_t, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4ED3C0))(spriteAsset, unicode, includeFallbacks, spriteIndex);
  }
  static inline ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* SearchForSpriteByHashCode(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* spriteAsset, int32_t hashCode, bool includeFallbacks, int32_t spriteIndex) {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*, int32_t, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4ED4C0))(spriteAsset, hashCode, includeFallbacks, spriteIndex);
  }
  static inline ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* SearchForSpriteByHashCodeInternal(ModdingAPI::Exposed::System::Collections::Generic::List_T_* spriteAssets, int32_t hashCode, bool searchFallbacks, int32_t spriteIndex) {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4ED900))(spriteAssets, hashCode, searchFallbacks, spriteIndex);
  }
  static inline ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* SearchForSpriteByHashCodeInternal(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* spriteAsset, int32_t hashCode, bool searchFallbacks, int32_t spriteIndex) {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*, int32_t, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EDC10))(spriteAsset, hashCode, searchFallbacks, spriteIndex);
  }
};
}