// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed {
struct __vp_FPSController_Il2CppStaticFields {
};

struct __vp_FPSController_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Init;
  VirtualInvokeData _5_AllowState;
  VirtualInvokeData _6_Refresh;
};

struct __vp_FPSController_Il2CppClass {
  Il2CppClass_1 _1;
  __vp_FPSController_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __vp_FPSController_Il2CppVtbl vtbl;
};

class vp_FPSController {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C834C8;
  static inline    vp_FPSController* _pStaticObjectInstance = nullptr;

public:
// Singleton object getter:
  static inline vp_FPSController* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (vp_FPSController**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

  // Il2Cpp fields:
  __vp_FPSController_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool Persist;
  ModdingAPI::Exposed::vp_StateManager* m_StateManager;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* States;
  ModdingAPI::Exposed::vp_StateInfo* m_DefaultState;
  bool m_Initialized;
  ModdingAPI::Exposed::UnityEngine::CharacterController* m_Controller;
  float MotorVelocityMin;
  float MotorVelocityMax;
  float MotorAcceleration;
  float MotorDamping;
  float MotorJumpForce;
  float MotorAirSpeed;
  float MotorSlopeSpeedUp;
  float MotorSlopeSpeedDown;
  bool MotorAnalogInput;
  float InputDeadzone;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_MotorThrottle;
  bool m_MoveForward;
  bool m_MoveLeft;
  bool m_MoveRight;
  bool m_MoveBack;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_MoveInput;
  float PhysicsForceDamping;
  float PhysicsPushForce;
  float PhysicsGravityModifier;
  float PhysicsWallBounce;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_ExternalForce;
  bool m_WasGroundedLastFrame;
  float m_FallSpeed;
  float m_LastFallSpeed;
  float m_HighestFallSpeed;
  float m_FallImpact;
  float m_FallDistance;
  bool m_Compact;
  float m_NormalHeight;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_NormalCenter;
  float m_CompactHeight;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_CompactCenter;
  bool m_IsOnUnpassableCapsule;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_UnpassableCapsuleNormalHit;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_LastMoveVelocity;
  bool m_ControllerStoppedMoving;
  bool m_CameraWasDetachedLastFrame;
  float m_TimeMoving;
  float m_LastMotorAccel;

  // Member methods:
  float get_FallImpact() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF0300))(this);
  }
  float get_FallDistance() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x169DB20))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_Velocity() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF0310))(this);
  }
  bool get_Compact() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CF1870))(this);
  }
  void set_Compact(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF0330))(this, value);
  }
  float get_NormalHeight() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AA8460))(this);
  }
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF0340))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void DoPlayerStrafing(ModdingAPI::Exposed::UnityEngine::Vector3 moveDirection, ModdingAPI::Exposed::UnityEngine::Vector3 prevPos) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF0510))(this, moveDirection, prevPos);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF0B30))(this);
  }
  void SetCompactImmmediate(bool isCompact) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF22E0))(this, isCompact);
  }
  void UpdateMoves() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF2500))(this);
  }
  float GetSlopeMultiplier() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF30C0))(this);
  }
  void AddForce(ModdingAPI::Exposed::UnityEngine::Vector3 force) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF3390))(this, force);
  }
  void AddForce(float x, float y, float z) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF34A0))(this, x, y, z);
  }
  bool Jump() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF34D0))(this);
  }
  void OnControllerColliderHit(ModdingAPI::Exposed::UnityEngine::ControllerColliderHit* hit) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*, ModdingAPI::Exposed::UnityEngine::ControllerColliderHit*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF3630))(this, hit);
  }
  void AbsorbHorisontalForce(ModdingAPI::Exposed::UnityEngine::Vector3 impact) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF3CE0))(this, impact);
  }
  void AbsorbUpForce(float impact) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF3F90))(this, impact);
  }
  float AbsorbForce(float current, float toAbsorb) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF4100))(this, current, toAbsorb);
  }
  void MoveForward() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF1F60))(this);
  }
  void MoveBack() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF4280))(this);
  }
  void MoveLeft() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF4290))(this);
  }
  void MoveRight() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF42A0))(this);
  }
  void Move(ModdingAPI::Exposed::UnityEngine::Vector2 input) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF42B0))(this, input);
  }
  void SetPosition(ModdingAPI::Exposed::UnityEngine::Vector3 position) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15552B0))(this, position);
  }
  void Stop() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF42E0))(this);
  }
  void TryGroundingCharacterController() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF4470))(this);
  }
  void SetWasGroundedLastFrame(bool grounded) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD6B80))(this, grounded);
  }
  bool ShouldFreezeMovement() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF45C0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 AdjustMovementForCapsule(ModdingAPI::Exposed::UnityEngine::Vector3 moveDirection) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF47D0))(this, moveDirection);
  }
  bool CanDoStrafing() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FF49D0))(this);
  }
};
}