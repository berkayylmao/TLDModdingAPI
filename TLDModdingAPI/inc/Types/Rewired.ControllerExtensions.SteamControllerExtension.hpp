// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed::Rewired::ControllerExtensions {
struct __SteamControllerExtension_Il2CppStaticFields {
};

struct __SteamControllerExtension_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Clear;
  VirtualInvokeData _5_SourceUpdated;
  VirtualInvokeData _6_UpdateData;
  VirtualInvokeData _7_Clone;
};

struct __SteamControllerExtension_Il2CppClass {
  Il2CppClass_1 _1;
  __SteamControllerExtension_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SteamControllerExtension_Il2CppVtbl vtbl;
};

class SteamControllerExtension {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C83940;
  static inline    __SteamControllerExtension_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __SteamControllerExtension_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__SteamControllerExtension_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __SteamControllerExtension_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::Rewired::Controller* Extension_eRiZsSFDNrFJxnreKaUhJBCLIKi;
  ModdingAPI::Exposed::Rewired::Interfaces::IControllerExtensionSource* Extension_ovJjdavCVCSQaRYvkKYaPvETjMV;
  int32_t _reInputId;
  ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension::vohrvpRHymtjMjqnogQeIHyUOPyU* fGhzNzNjvtDWYoPIgmXBNXrBWIC;

  // Member methods:
  ModdingAPI::Exposed::Rewired::Joystick* HIsKJrtJPOeSqxjNaBmpGTCmjtsn() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::Joystick*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81D520))(this);
  }
  ModdingAPI::Exposed::Rewired::Interfaces::ISteamControllerInternal* get_internalController() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::Interfaces::ISteamControllerInternal*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81D630))(this);
  }
  void ::ctor(ModdingAPI::Exposed::Rewired::Interfaces::ISteamControllerInternal* internalController) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, ModdingAPI::Exposed::Rewired::Interfaces::ISteamControllerInternal*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81D650))(this, internalController);
  }
  void ::ctor(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension* source) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81D7A0))(this, source);
  }
  uint64_t GetActionSetHandle(System_String* actionSetName) {
    return reinterpret_cast<uint64_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81D800))(this, actionSetName);
  }
  uint64_t GetAnalogActionHandle(System_String* actionName) {
    return reinterpret_cast<uint64_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81D910))(this, actionName);
  }
  uint64_t GetDigitalActionHandle(System_String* actionName) {
    return reinterpret_cast<uint64_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81DA50))(this, actionName);
  }
  System_String* GetActionSetName(uint64_t actionSetHandle) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81DB60))(this, actionSetHandle);
  }
  System_String* GetAnalogActionName(uint64_t actionHandle) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81DCD0))(this, actionHandle);
  }
  System_String* GetDigitalActionName(uint64_t actionHandle) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81DE00))(this, actionHandle);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 GetAnalogActionValue(System_String* actionName) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81DF30))(this, actionName);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 GetAnalogActionValue(uint64_t actionHandle) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81E0F0))(this, actionHandle);
  }
  bool GetDigitalActionValue(System_String* actionName) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81E2B0))(this, actionName);
  }
  bool GetDigitalActionValue(uint64_t actionHandle) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81E3C0))(this, actionHandle);
  }
  bool SetActiveActionSet(uint64_t actionSetHandle) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81E4E0))(this, actionSetHandle);
  }
  bool SetActiveActionSet(System_String* actionSetName) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81E600))(this, actionSetName);
  }
  uint64_t GetActiveActionSetHandle() {
    return reinterpret_cast<uint64_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81E710))(this);
  }
  System_String* GetActiveActionSetName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81E850))(this);
  }
  void ShowBindingPanel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81E970))(this);
  }
  void SetHapticPulse(uint32_t targePad, float durationSeconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, uint32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81EA80))(this, targePad, durationSeconds);
  }
  void SetHapticPulse(uint32_t targePad, uint16_t durationMicroSeconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, uint32_t, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81EC30))(this, targePad, durationMicroSeconds);
  }
  ModdingAPI::Exposed::System::Collections::Generic::IList_T_* GetDigitalActionOrigins(System_String* actionSetName, System_String* actionName) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IList_T_*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81EDD0))(this, actionSetName, actionName);
  }
  ModdingAPI::Exposed::System::Collections::Generic::IList_T_* GetDigitalActionOrigins(uint64_t actionSetHandle, uint64_t actionHandle) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IList_T_*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, uint64_t, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81EF70))(this, actionSetHandle, actionHandle);
  }
  ModdingAPI::Exposed::System::Collections::Generic::IList_T_* GetAnalogActionOrigins(System_String* actionSetName, System_String* actionName) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IList_T_*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81F0A0))(this, actionSetName, actionName);
  }
  ModdingAPI::Exposed::System::Collections::Generic::IList_T_* GetAnalogActionOrigins(uint64_t actionSetHandle, uint64_t actionHandle) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IList_T_*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, uint64_t, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81F240))(this, actionSetHandle, actionHandle);
  }
  void UpdateData(int32_t updateLoop) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, updateLoop);
  }
  void SourceUpdated(ModdingAPI::Exposed::Rewired::Interfaces::IControllerExtensionSource* source) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*, ModdingAPI::Exposed::Rewired::Interfaces::IControllerExtensionSource*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81F370))(this, source);
  }
  ModdingAPI::Exposed::Rewired::Controller::Extension* Clone() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::Controller::Extension*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x81F440))(this);
  }
  void hBrVVmrdIBdzlWHPriZmuajDAJY() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerExtensions::SteamControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
};
}