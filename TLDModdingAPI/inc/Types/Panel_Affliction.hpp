// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.Affliction.hpp"
#include "ModdingAPI::Exposed::Affliction.hpp"


namespace ModdingAPI::Exposed {
struct __Panel_Affliction_Il2CppStaticFields {
  ModdingAPI::Exposed::AfflictionType_array* s_TypesToCheck;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* s_ShownAfflictionTypes;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_TmpAfflictionList;
};

struct __Panel_Affliction_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Panel_Affliction_Il2CppClass {
  Il2CppClass_1 _1;
  __Panel_Affliction_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Panel_Affliction_Il2CppVtbl vtbl;
};

class Panel_Affliction {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C8BC78;
  static inline    __Panel_Affliction_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Panel_Affliction_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Panel_Affliction_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Panel_Affliction_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::ScrollList* m_ScrollList;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ButtonLeft;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ButtonRight;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ButtonLeftGamepad;
  ModdingAPI::Exposed::UISprite* m_ButtonLeftGamepadSprite;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ButtonRightGamepad;
  ModdingAPI::Exposed::UISprite* m_ButtonRightGamepadSprite;
  ModdingAPI::Exposed::GenericButtonMouseSpawner* m_MouseButtonTreatWounds;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Background;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_PanelContent;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_AfflictionButtonColorReferencesPrefab;
  ModdingAPI::Exposed::UILabel* m_Label;
  ModdingAPI::Exposed::UILabel* m_LabelCause;
  ModdingAPI::Exposed::UILabel* m_LabelLocation;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_SelectionEffect;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_PanelOffsetInInventory;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_ButtonTreatWoundsOffsetInInventory;
  ModdingAPI::Exposed::ButtonLegendContainer* m_ButtonLegendContainer;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_CoverflowAfflictions;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Afflictions;
  ModdingAPI::Exposed::FirstAidItem* m_FirstAidItem;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_OriginalPanelPosition;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_OriginalBUttonTreatWoundsPosition;
  System_String* m_TreatWoundsLocalizationId;
  ModdingAPI::Exposed::AfflictionButton* m_AfflictionButtonColorReferences;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_AfflictionButtonColorReferencesObject;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B170E0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B17400))(this);
  }
  void LateUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B17500))(this);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x165DF10))(this);
  }
  void Enable(bool enabled, ModdingAPI::Exposed::System::Collections::Generic::List_T_* listAffliction, ModdingAPI::Exposed::FirstAidItem* firstAidItem) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*, bool, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::FirstAidItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B17620))(this, enabled, listAffliction, firstAidItem);
  }
  void OnCancel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B17A30))(this);
  }
  void SelectItemByIndex(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B17AF0))(this, index);
  }
  void PreviousAffliction() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B17BF0))(this);
  }
  void NextAffliction() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B17D00))(this);
  }
  void TreatWound() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B17E10))(this);
  }
  bool TryGetSelectedAffliction(ModdingAPI::Exposed::Affliction affliction) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*, ModdingAPI::Exposed::Affliction)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B19AF0))(this, affliction);
  }
  void MovePanel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B19C40))(this);
  }
  void RestorePanel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1A0A0))(this);
  }
  void UpdateCoverFlowColor(int32_t index, bool isSelected) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1A410))(this, index, isSelected);
  }
  void UpdateSelectedAffliction(ModdingAPI::Exposed::Affliction affliction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*, ModdingAPI::Exposed::Affliction)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1A690))(this, affliction);
  }
  void UpdateSelectedAffliction(int32_t selectedAfflictionIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1AB20))(this, selectedAfflictionIndex);
  }
  void RefreshVisuals() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1AC10))(this);
  }
  void EnableInventoryRightSide(bool enabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1AFB0))(this, enabled);
  }
  void SetupScrollList(ModdingAPI::Exposed::System::Collections::Generic::List_T_* afflictionList) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1B1D0))(this, afflictionList);
  }
  void UpdateButtonLegend() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1B4A0))(this);
  }
  void UpdateTreatWoundsLocalizationId() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1B690))(this);
  }
  void InitializeColorReferences() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1B790))(this);
  }
  void UpdateGamepadSelection() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1C770))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Affliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1DD80))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::AfflictionType_array*> s_TypesToCheck = __CppStaticProperty<ModdingAPI::Exposed::AfflictionType_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_TypesToCheck; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> s_ShownAfflictionTypes = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_ShownAfflictionTypes; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> m_TmpAfflictionList = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_TmpAfflictionList; }
  );

  // Static methods:
  static inline void GetAllAfflictions(ModdingAPI::Exposed::System::Collections::Generic::List_T_* list) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B18000))(list);
  }
  static inline void GetAllBadAfflictions(int32_t exclusions, ModdingAPI::Exposed::System::Collections::Generic::List_T_* badAfflictions) {
    reinterpret_cast<void(__fastcall*)(int32_t, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B180A0))(exclusions, badAfflictions);
  }
  static inline int32_t GetAfflictionLocation(int32_t type, int32_t localAfflictionIndex) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B184B0))(type, localAfflictionIndex);
  }
  static inline bool HasAffliction(int32_t afflictionType) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B18570))(afflictionType);
  }
  static inline void GetAfflictions(ModdingAPI::Exposed::FirstAidItem* firstAidItem, ModdingAPI::Exposed::System::Collections::Generic::List_T_* list) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FirstAidItem*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B18E70))(firstAidItem, list);
  }
  static inline bool CanBeTreated(ModdingAPI::Exposed::Affliction affliction) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Affliction)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B190E0))(affliction);
  }
  static inline bool CanBeTreatedWith(ModdingAPI::Exposed::FirstAidItem* firstAidItem, ModdingAPI::Exposed::Affliction affliction) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::FirstAidItem*, ModdingAPI::Exposed::Affliction)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B192F0))(firstAidItem, affliction);
  }
  static inline int32_t GetAfflictionsCount(int32_t afflictionType) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B195A0))(afflictionType);
  }
  static inline void MaybeAddOrFilter(ModdingAPI::Exposed::FirstAidItem* firstAidItem, ModdingAPI::Exposed::System::Collections::Generic::List_T_* list, ModdingAPI::Exposed::Affliction affliction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FirstAidItem*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::Affliction)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1BA10))(firstAidItem, list, affliction);
  }
  static inline System_String* LocalizedNameFromAfflictionLocation(int32_t afflictionBodyArea) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1BB50))(afflictionBodyArea);
  }
  static inline bool RequiresBandage(int32_t afflictionType, int32_t area, int32_t localIndex) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1BC30))(afflictionType, area, localIndex);
  }
  static inline bool RequiresAntibiotic(int32_t afflictionType, int32_t area, int32_t localIndex) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1BE90))(afflictionType, area, localIndex);
  }
  static inline bool RequiresAntiseptic(int32_t afflictionType, int32_t area, int32_t localIndex) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1C040))(afflictionType, area, localIndex);
  }
  static inline bool RequiresPainKiller(int32_t afflictionType, int32_t area, int32_t localIndex) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1C110))(afflictionType, area, localIndex);
  }
  static inline void RefreshtListOfShownAfflictionTypes() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1C360))();
  }
  static inline ModdingAPI::Exposed::Affliction GetCurrentAffliction(int32_t type, int32_t localAfflictionIndex) {
    return reinterpret_cast<ModdingAPI::Exposed::Affliction(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1CAC0))(type, localAfflictionIndex);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1E120))();
  }
};
}