// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __AILerp_Il2CppStaticFields {
};

struct __AILerp_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Awake;
  VirtualInvokeData _5_Start;
  VirtualInvokeData _6_OnEnable;
  VirtualInvokeData _7_SearchPath;
  VirtualInvokeData _8_ForceSearchPath;
  VirtualInvokeData _9_OnTargetReached;
  VirtualInvokeData _10_OnPathComplete;
  VirtualInvokeData _11_ConfigurePathSwitchInterpolation;
  VirtualInvokeData _12_GetFeetPosition;
  VirtualInvokeData _13_ConfigureNewPath;
  VirtualInvokeData _14_Update;
  VirtualInvokeData _15_CalculateNextPosition;
};

struct __AILerp_Il2CppClass {
  Il2CppClass_1 _1;
  __AILerp_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AILerp_Il2CppVtbl vtbl;
};

class AILerp {
public:
  // Il2Cpp fields:
  __AILerp_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float repathRate;
  ModdingAPI::Exposed::UnityEngine::Transform* target;
  bool canSearch;
  bool canMove;
  float speed;
  bool enableRotation;
  bool rotationIn2D;
  float rotationSpeed;
  bool interpolatePathSwitches;
  float switchPathInterpolationSpeed;
  ModdingAPI::Exposed::Seeker* seeker;
  ModdingAPI::Exposed::UnityEngine::Transform* tr;
  float lastRepath;
  ModdingAPI::Exposed::Pathfinding::ABPath* path;
  int32_t currentWaypointIndex;
  float distanceAlongSegment;
  bool _targetReached_k__BackingField;
  bool canSearchAgain;
  ModdingAPI::Exposed::UnityEngine::Vector3 previousMovementOrigin;
  ModdingAPI::Exposed::UnityEngine::Vector3 previousMovementDirection;
  float previousMovementStartTime;
  bool startHasRun;

  // Member methods:
  bool get_targetReached() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AILerp*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7DA960))(this);
  }
  void set_targetReached(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AILerp*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5C3740))(this, value);
  }
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AILerp*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE80C0))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AILerp*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE82A0))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AILerp*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE82C0))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AILerp*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE85B0))(this);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* RepeatTrySearchPath() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::AILerp*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE87E0))(this);
  }
  float TrySearchPath() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AILerp*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE8930))(this);
  }
  void SearchPath() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AILerp*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6DF1B0))(this);
  }
  void ForceSearchPath() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AILerp*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE8AC0))(this);
  }
  void OnTargetReached() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AILerp*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnPathComplete(ModdingAPI::Exposed::Pathfinding::Path* _p) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AILerp*, ModdingAPI::Exposed::Pathfinding::Path*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE8D40))(this, _p);
  }
  void ConfigurePathSwitchInterpolation() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AILerp*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE8F20))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetFeetPosition() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::AILerp*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE93F0))(this);
  }
  void ConfigureNewPath() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AILerp*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE9480))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AILerp*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE99F0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 CalculateNextPosition(ModdingAPI::Exposed::UnityEngine::Vector3 direction) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::AILerp*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE9DA0))(this, direction);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AILerp*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EEA4D0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 _Awake_b__25_0() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::AILerp*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE93F0))(this);
  }
};
}