// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __QualitySettingsManager_Il2CppStaticFields {
  ModdingAPI::Exposed::QualitySettingsManagerSaveData* m_QualitySettingsManagerSaveData;
  int32_t m_CurrentQuality;
  ModdingAPI::Exposed::QualityLevelSettings* m_QualityCustom;
};

struct __QualitySettingsManager_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __QualitySettingsManager_Il2CppClass {
  Il2CppClass_1 _1;
  __QualitySettingsManager_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __QualitySettingsManager_Il2CppVtbl vtbl;
};

class QualitySettingsManager {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C4A808;
  static inline    __QualitySettingsManager_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __QualitySettingsManager_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__QualitySettingsManager_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __QualitySettingsManager_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::QualityLevelSettings* m_QualityPresetLow;
  ModdingAPI::Exposed::QualityLevelSettings* m_QualityPresetMedium;
  ModdingAPI::Exposed::QualityLevelSettings* m_QualityPresetHigh;
  ModdingAPI::Exposed::QualityLevelSettings* m_QualityPresetUltra;
  ModdingAPI::Exposed::QualityLevelSettings* m_QualityPresetFancy;
  ModdingAPI::Exposed::QualityLevelSettings* m_QualityPresetXboxOne;
  ModdingAPI::Exposed::QualityLevelSettings* m_QualityPresetPS4;
  ModdingAPI::Exposed::QualityLevelSettings* m_QualityPresetXboxOneX;
  ModdingAPI::Exposed::QualityLevelSettings* m_QualityPresetPS4Pro;
  ModdingAPI::Exposed::LodBias* m_SceneLodBias;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B47750))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B47A30))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B47B50))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B47C60))(this, text);
  }
  int32_t SetCurrentQualityLevel(int32_t quality) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B47E00))(this, quality);
  }
  int32_t GetCurrentQualityLevel() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B47EB0))(this);
  }
  ModdingAPI::Exposed::QualityLevelSettings* GetQualitySettings(int32_t quality) {
    return reinterpret_cast<ModdingAPI::Exposed::QualityLevelSettings*(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B47F50))(this, quality);
  }
  ModdingAPI::Exposed::QualityLevelSettings* GetCurrentQualitySettings() {
    return reinterpret_cast<ModdingAPI::Exposed::QualityLevelSettings*(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B48150))(this);
  }
  void ApplyCurrentQualitySettings() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B48200))(this);
  }
  void QualityLevelChanged(int32_t quality) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B482B0))(this, quality);
  }
  void ApplyQualitySettings(int32_t quality) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B48370))(this, quality);
  }
  void SetDefaultQualityLevel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B48FA0))(this);
  }
  void SetPostFx(int32_t quality) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B49170))(this, quality);
  }
  void SetSSAO(int32_t quality) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B49870))(this, quality);
  }
  void CopyQualitySettings(ModdingAPI::Exposed::QualityLevelSettings* dest, ModdingAPI::Exposed::QualityLevelSettings* source) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*, ModdingAPI::Exposed::QualityLevelSettings*, ModdingAPI::Exposed::QualityLevelSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B49B00))(this, dest, source);
  }
  bool Match(ModdingAPI::Exposed::QualityLevelSettings* A, ModdingAPI::Exposed::QualityLevelSettings* B) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*, ModdingAPI::Exposed::QualityLevelSettings*, ModdingAPI::Exposed::QualityLevelSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B49B90))(this, A, B);
  }
  void ClampSliderValuesToRange(ModdingAPI::Exposed::QualityLevelSettings* settings) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*, ModdingAPI::Exposed::QualityLevelSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B49DF0))(this, settings);
  }
  void ClampMasterTextureLimit(ModdingAPI::Exposed::QualityLevelSettings* settings) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*, ModdingAPI::Exposed::QualityLevelSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B49F70))(this, settings);
  }
  float GetLodBias(int32_t quality) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4A070))(this, quality);
  }
  float GetHeightmapPixelError(ModdingAPI::Exposed::UnityEngine::Terrain* t, int32_t quality) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*, ModdingAPI::Exposed::UnityEngine::Terrain*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4A2C0))(this, t, quality);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::QualitySettingsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::QualitySettingsManagerSaveData*> m_QualitySettingsManagerSaveData = __CppStaticProperty<ModdingAPI::Exposed::QualitySettingsManagerSaveData*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_QualitySettingsManagerSaveData; }
  );
  static inline __CppStaticProperty<int32_t> m_CurrentQuality = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_CurrentQuality; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::QualityLevelSettings*> m_QualityCustom = __CppStaticProperty<ModdingAPI::Exposed::QualityLevelSettings*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_QualityCustom; }
  );

  // Static methods:
  static inline bool SystemShouldUseLowGraphicsQuality() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B49120))();
  }
  static inline bool UsingOpenGL() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4A510))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B4A5F0))();
  }
};
}