// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __HuntedPart2WaypointController_Il2CppStaticFields {
  ModdingAPI::Exposed::HuntedPart2WaypointControllerSaveData* m_HuntedPart2WaypointControllerSaveData;
};

struct __HuntedPart2WaypointController_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __HuntedPart2WaypointController_Il2CppClass {
  Il2CppClass_1 _1;
  __HuntedPart2WaypointController_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __HuntedPart2WaypointController_Il2CppVtbl vtbl;
};

class HuntedPart2WaypointController {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C4D130;
  static inline    __HuntedPart2WaypointController_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __HuntedPart2WaypointController_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__HuntedPart2WaypointController_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __HuntedPart2WaypointController_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::HuntedPart2Waypoint_array* m_Waypoints;
  int32_t m_CurrentWaypoint;
  int32_t m_CurrentWeatherStage;
  float m_WaypointIncrementTimer;
  float m_WaypointWanderPauseTimer;
  bool m_WanderPaused;
  bool m_WanderingAroundPoint;
  ModdingAPI::Exposed::BaseAi* m_BaseAI;
  float m_DetectionRangeOrig;
  float m_DetectionFOVOrig;
  float m_HearFootstepsRangeOrig;
  float m_HearRifleRangeOrig;
  float m_HearCarAlarmRangeOrig;
  float m_SmellRangeOrig;
  bool m_DoneInit;
  bool m_StartHasBeenCalled;
  int32_t m_State;

  // Member methods:
  void ProcessHitByPlayer() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1751A60))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1751B90))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1751C80))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1751DC0))(this, text);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1751F90))(this);
  }
  void SetCurrentWaypoint(int32_t waypoint) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1752D60))(this, waypoint);
  }
  bool GoToCurrentWaypoint() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1752D90))(this);
  }
  void IncrementWaypoint() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1752F40))(this);
  }
  bool InRangeOfTargetWaypoint() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1753090))(this);
  }
  int32_t GetCurrentWaypointType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1753310))(this);
  }
  bool FinalAmbushStarted() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1753360))(this);
  }
  bool AwaitingFinalAmbush() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1753370))(this);
  }
  void WinChallenge() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1753380))(this);
  }
  void ForceEndGame() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1753440))(this);
  }
  bool ShouldDoWanderPause() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1753A20))(this);
  }
  void ToggleDetection(bool enableDetection) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1753EC0))(this, enableDetection);
  }
  void WaypointsInitialize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1753FB0))(this);
  }
  bool SkipWaypointFollowingBasedOnAiMode() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17543C0))(this);
  }
  void MaybeDisableDuplicateBear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1754430))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::HuntedPart2WaypointController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::HuntedPart2WaypointControllerSaveData*> m_HuntedPart2WaypointControllerSaveData = __CppStaticProperty<ModdingAPI::Exposed::HuntedPart2WaypointControllerSaveData*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_HuntedPart2WaypointControllerSaveData; }
  );

  // Static methods:
  static inline bool IsHuntedBear(ModdingAPI::Exposed::BaseAi* bai) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BaseAi*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1751830))(bai);
  }
  static inline int32_t GetCurrentWaypoint(System_String* text) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17519A0))(text);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1754740))();
  }
};
}