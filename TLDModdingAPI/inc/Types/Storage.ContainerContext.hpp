// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Storage {
struct __ContainerContext_Il2CppStaticFields {
  ModdingAPI::Exposed::UnityAOT::ObjectResultCallback* gGetAsyncThunk;
  ModdingAPI::Exposed::UnityAOT::ObjectResultCallback* gReadAsyncThunk;
  ModdingAPI::Exposed::UnityAOT::GenericActionCallback* gSubmitUpdatesThunk;
  ModdingAPI::Exposed::Storage::ContainerContextPlugin::BlobInfoQueryAsyncCallback* gBlobInfoQueryThunk;
};

struct __ContainerContext_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Dispose;
};

struct __ContainerContext_Il2CppClass {
  Il2CppClass_1 _1;
  __ContainerContext_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ContainerContext_Il2CppVtbl vtbl;
};

class ContainerContext {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C8F4A0;
  static inline    __ContainerContext_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ContainerContext_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ContainerContext_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ContainerContext_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  System_String* _Name_k__BackingField;
  intptr_t m_Self;

  // Member methods:
  System_String* get_Name() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Storage::ContainerContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  void set_Name(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Storage::ContainerContext*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, value);
  }
  ModdingAPI::Exposed::Storage::GetDataMapViewAsyncOp* GetAsync(ModdingAPI::Exposed::System::String_array* names, ModdingAPI::Exposed::Storage::GetDataMapViewAsyncOp::GetAsyncCallback* callback) {
    return reinterpret_cast<ModdingAPI::Exposed::Storage::GetDataMapViewAsyncOp*(__fastcall*)(ModdingAPI::Exposed::Storage::ContainerContext*, ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::Storage::GetDataMapViewAsyncOp::GetAsyncCallback*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA77C0))(this, names, callback);
  }
  ModdingAPI::Exposed::Storage::ReadDataMapAsyncOp* ReadAsync(ModdingAPI::Exposed::Storage::DataMap* map, ModdingAPI::Exposed::Storage::ReadDataMapAsyncOp::ReadAsyncCallback* callback) {
    return reinterpret_cast<ModdingAPI::Exposed::Storage::ReadDataMapAsyncOp*(__fastcall*)(ModdingAPI::Exposed::Storage::ContainerContext*, ModdingAPI::Exposed::Storage::DataMap*, ModdingAPI::Exposed::Storage::ReadDataMapAsyncOp::ReadAsyncCallback*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA7A30))(this, map, callback);
  }
  ModdingAPI::Exposed::Storage::SubmitDataMapUpdatesAsyncOp* SubmitUpdatesAsync(ModdingAPI::Exposed::Storage::DataMap* toUpdate, ModdingAPI::Exposed::System::String_array* toDelete, ModdingAPI::Exposed::Storage::SubmitDataMapUpdatesAsyncOp::UpdateAsyncCallback* callback, System_String* displayName) {
    return reinterpret_cast<ModdingAPI::Exposed::Storage::SubmitDataMapUpdatesAsyncOp*(__fastcall*)(ModdingAPI::Exposed::Storage::ContainerContext*, ModdingAPI::Exposed::Storage::DataMap*, ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::Storage::SubmitDataMapUpdatesAsyncOp::UpdateAsyncCallback*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA7D20))(this, toUpdate, toDelete, callback, displayName);
  }
  ModdingAPI::Exposed::Storage::SubmitDataMapUpdatesAsyncOp* DeleteAsync(ModdingAPI::Exposed::System::String_array* toDelete, ModdingAPI::Exposed::Storage::SubmitDataMapUpdatesAsyncOp::UpdateAsyncCallback* callback, System_String* displayName) {
    return reinterpret_cast<ModdingAPI::Exposed::Storage::SubmitDataMapUpdatesAsyncOp*(__fastcall*)(ModdingAPI::Exposed::Storage::ContainerContext*, ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::Storage::SubmitDataMapUpdatesAsyncOp::UpdateAsyncCallback*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA7FC0))(this, toDelete, callback, displayName);
  }
  ModdingAPI::Exposed::Storage::BlobInfoQueryAsyncOp* QueryBlobInfoAsync(System_String* query, ModdingAPI::Exposed::Storage::BlobInfoQueryAsyncOp::BlobInfoQueryCallback* callback) {
    return reinterpret_cast<ModdingAPI::Exposed::Storage::BlobInfoQueryAsyncOp*(__fastcall*)(ModdingAPI::Exposed::Storage::ContainerContext*, System_String*, ModdingAPI::Exposed::Storage::BlobInfoQueryAsyncOp::BlobInfoQueryCallback*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA7FF0))(this, query, callback);
  }
  void ::ctor(intptr_t self, System_String* name) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Storage::ContainerContext*, intptr_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA82E0))(this, self, name);
  }
  void Dispose() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Storage::ContainerContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA83B0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityAOT::ObjectResultCallback*> gGetAsyncThunk = __CppStaticProperty<ModdingAPI::Exposed::UnityAOT::ObjectResultCallback*>(
   []() { return &GetStaticClassInstance()->pStaticFields->gGetAsyncThunk; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityAOT::ObjectResultCallback*> gReadAsyncThunk = __CppStaticProperty<ModdingAPI::Exposed::UnityAOT::ObjectResultCallback*>(
   []() { return &GetStaticClassInstance()->pStaticFields->gReadAsyncThunk; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityAOT::GenericActionCallback*> gSubmitUpdatesThunk = __CppStaticProperty<ModdingAPI::Exposed::UnityAOT::GenericActionCallback*>(
   []() { return &GetStaticClassInstance()->pStaticFields->gSubmitUpdatesThunk; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::Storage::ContainerContextPlugin::BlobInfoQueryAsyncCallback*> gBlobInfoQueryThunk = __CppStaticProperty<ModdingAPI::Exposed::Storage::ContainerContextPlugin::BlobInfoQueryAsyncCallback*>(
   []() { return &GetStaticClassInstance()->pStaticFields->gBlobInfoQueryThunk; }
  );

  // Static methods:
  static inline void GetAsyncThunk(uint32_t result, intptr_t map, intptr_t userData) {
    reinterpret_cast<void(__fastcall*)(uint32_t, intptr_t, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA84D0))(result, map, userData);
  }
  static inline void ReadAsyncThunk(uint32_t result, intptr_t map, intptr_t userData) {
    reinterpret_cast<void(__fastcall*)(uint32_t, intptr_t, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA8610))(result, map, userData);
  }
  static inline void SubmitUpdatesAsyncThunk(uint32_t result, uint32_t status, intptr_t userData) {
    reinterpret_cast<void(__fastcall*)(uint32_t, uint32_t, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA87D0))(result, status, userData);
  }
  static inline void BlobInfoQueryAsyncThunk(uint32_t result, intptr_t queryHandle, intptr_t userData, uint32_t totalResults) {
    reinterpret_cast<void(__fastcall*)(uint32_t, intptr_t, intptr_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA89B0))(result, queryHandle, userData, totalResults);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA8B10))();
  }
};
}