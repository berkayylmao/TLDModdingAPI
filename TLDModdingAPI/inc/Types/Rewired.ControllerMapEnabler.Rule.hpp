// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Rewired::ControllerMapEnabler {
struct __Rule_Il2CppStaticFields {
};

struct __Rule_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Rewired_Utils_Interfaces_IDeepCloneable_DeepClone;
};

struct __Rule_Il2CppClass {
  Il2CppClass_1 _1;
  __Rule_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Rule_Il2CppVtbl vtbl;
};

class Rule {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C23D98;
  static inline    __Rule_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Rule_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Rule_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Rule_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  System_String* _tag;
  bool _enable;
  ModdingAPI::Exposed::System::Int32_array* _categoryIds;
  ModdingAPI::Exposed::System::Int32_array* _layoutIds;
  ModdingAPI::Exposed::Rewired::ControllerSetSelector* _controllerSetSelector;
  ModdingAPI::Exposed::System::String_array* _preInitCategoryNames;
  ModdingAPI::Exposed::System::String_array* _preInitLayoutNames;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0B7A0))(this);
  }
  void ::ctor(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule* source) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*, ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0BA80))(this, source);
  }
  void ::ctor(System_String* tag, bool enabled, ModdingAPI::Exposed::System::Int32_array* categoryIds, ModdingAPI::Exposed::System::Int32_array* layoutIds, ModdingAPI::Exposed::Rewired::ControllerSetSelector* controllerSetSelector) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*, System_String*, bool, ModdingAPI::Exposed::System::Int32_array*, ModdingAPI::Exposed::System::Int32_array*, ModdingAPI::Exposed::Rewired::ControllerSetSelector*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0BCD0))(this, tag, enabled, categoryIds, layoutIds, controllerSetSelector);
  }
  bool get_appliesToAllLayouts() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0BCF0))(this);
  }
  System_String* get_tag() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  void set_tag(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, value);
  }
  bool get_enable() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x318510))(this);
  }
  void set_enable(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5161B0))(this, value);
  }
  ModdingAPI::Exposed::Rewired::ControllerSetSelector* get_controllerSetSelector() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::ControllerSetSelector*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0BD10))(this);
  }
  void set_controllerSetSelector(ModdingAPI::Exposed::Rewired::ControllerSetSelector* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*, ModdingAPI::Exposed::Rewired::ControllerSetSelector*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0BE70))(this, value);
  }
  ModdingAPI::Exposed::System::Int32_array* get_categoryIds() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Int32_array*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0BFE0))(this);
  }
  void set_categoryIds(ModdingAPI::Exposed::System::Int32_array* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0C140))(this, value);
  }
  ModdingAPI::Exposed::System::Int32_array* get_layoutIds() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Int32_array*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0C2F0))(this);
  }
  void set_layoutIds(ModdingAPI::Exposed::System::Int32_array* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0C450))(this, value);
  }
  int32_t get_categoryId() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0C600))(this);
  }
  void set_categoryId(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0C690))(this, value);
  }
  int32_t get_layoutId() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0C8D0))(this);
  }
  void set_layoutId(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0C930))(this, value);
  }
  ModdingAPI::Exposed::System::String_array* get_categoryNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0CB90))(this);
  }
  void set_categoryNames(ModdingAPI::Exposed::System::String_array* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*, ModdingAPI::Exposed::System::String_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0CDD0))(this, value);
  }
  ModdingAPI::Exposed::System::String_array* get_layoutNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0D530))(this);
  }
  void set_layoutNames(ModdingAPI::Exposed::System::String_array* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*, ModdingAPI::Exposed::System::String_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0D7C0))(this, value);
  }
  System_String* get_categoryName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0DF30))(this);
  }
  void set_categoryName(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0E120))(this, value);
  }
  System_String* get_layoutName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0E4D0))(this);
  }
  void set_layoutName(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0E6B0))(this, value);
  }
  bool get_isValid() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0E9E0))(this);
  }
  bool Matches(ModdingAPI::Exposed::Rewired::ControllerMap* map) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*, ModdingAPI::Exposed::Rewired::ControllerMap*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0ED30))(this, map);
  }
  void Initialize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0F0C0))(this);
  }
  void CheckNoControllerTypeError() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0FC60))(this);
  }
  Il2CppObject* Rewired::Utils::Interfaces::IDeepCloneable::DeepClone() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerMapEnabler::Rule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE0FF70))(this);
  }
};
}