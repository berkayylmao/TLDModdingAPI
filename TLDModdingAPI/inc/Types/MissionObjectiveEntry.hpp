// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Color.hpp"


namespace ModdingAPI::Exposed {
struct __MissionObjectiveEntry_Il2CppStaticFields {
};

struct __MissionObjectiveEntry_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __MissionObjectiveEntry_Il2CppClass {
  Il2CppClass_1 _1;
  __MissionObjectiveEntry_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MissionObjectiveEntry_Il2CppVtbl vtbl;
};

class MissionObjectiveEntry {
public:
  // Il2Cpp fields:
  __MissionObjectiveEntry_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UIWidget* m_Widget;
  ModdingAPI::Exposed::UISprite* m_CheckboxEntrySprite;
  ModdingAPI::Exposed::UILabel* m_ObjectiveDescLabel;
  ModdingAPI::Exposed::UnityEngine::Transform* m_ObjectiveDescOffset;
  float m_DescOffestFromCountOrTimer;
  ModdingAPI::Exposed::UISprite* m_BGSprite;
  float m_BGSpriteBaseHeight;
  ModdingAPI::Exposed::UISprite* m_ActiveSprite;
  ModdingAPI::Exposed::UISprite* m_SuccessSprite;
  ModdingAPI::Exposed::UISprite* m_FailSprite;
  ModdingAPI::Exposed::UISprite* m_TimerSprite;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_CountObject;
  ModdingAPI::Exposed::UILabel* m_CountLabel;
  ModdingAPI::Exposed::UISprite* m_CountFillSprite;
  float m_FillSpriteOffset;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TimerObject;
  ModdingAPI::Exposed::UILabel* m_TimerLabel;
  ModdingAPI::Exposed::UnityEngine::Transform* m_SubobjectivesParent;
  ModdingAPI::Exposed::MissionSubobjectiveEntry_array* m_Subobjectives;
  int32_t m_ObjectiveSpacing;
  int32_t m_OffsetPerIndent;
  float m_AlphaValWhenActive;
  float m_AlphaValWhenCompleted;
  ModdingAPI::Exposed::UnityEngine::Color m_TimerColorNormal;
  ModdingAPI::Exposed::UnityEngine::Color m_TimerColorLowTime;

  // Member methods:
  void SetObjectiveInfo(ModdingAPI::Exposed::StoryMissionObjective* objective, ModdingAPI::Exposed::MissionObjectiveEntry* prevEntry, bool skipSubobjectives) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MissionObjectiveEntry*, ModdingAPI::Exposed::StoryMissionObjective*, ModdingAPI::Exposed::MissionObjectiveEntry*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B04C30))(this, objective, prevEntry, skipSubobjectives);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MissionObjectiveEntry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }

  // Static methods:
  static inline bool MaybeUpdateTimerObjectiveUI(ModdingAPI::Exposed::StoryMissionObjective* objective, ModdingAPI::Exposed::UILabel* timerlabel, ModdingAPI::Exposed::UnityEngine::Color timerColorLowTime, ModdingAPI::Exposed::UnityEngine::Color timerColorNormal, ModdingAPI::Exposed::UISprite* timerSprite) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::StoryMissionObjective*, ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UnityEngine::Color, ModdingAPI::Exposed::UnityEngine::Color, ModdingAPI::Exposed::UISprite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B05960))(objective, timerlabel, timerColorLowTime, timerColorNormal, timerSprite);
  }
  static inline bool MaybeUpdateCounterUI(ModdingAPI::Exposed::StoryMissionObjective* objective, ModdingAPI::Exposed::UIWidget* widget, float alphaValueWhenCompleted, ModdingAPI::Exposed::UILabel* countLabel, ModdingAPI::Exposed::UISprite* countFillSprite, float fillSpriteOffset) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::StoryMissionObjective*, ModdingAPI::Exposed::UIWidget*, float, ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UISprite*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B05D50))(objective, widget, alphaValueWhenCompleted, countLabel, countFillSprite, fillSpriteOffset);
  }
  static inline void UpdateObjectiveUI(ModdingAPI::Exposed::StoryMissionObjective* objective, ModdingAPI::Exposed::UILabel* timerlabel, ModdingAPI::Exposed::UISprite* timerSprite, ModdingAPI::Exposed::UnityEngine::Color timerColorLowTime, ModdingAPI::Exposed::UnityEngine::Color timerColorNormal, ModdingAPI::Exposed::UIWidget* widget, float alphaValueWhenCompleted, ModdingAPI::Exposed::UILabel* countLabel, ModdingAPI::Exposed::UISprite* countFillSprite, float fillSpriteOffset, bool hasTimer, bool hasCounter) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::StoryMissionObjective*, ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UISprite*, ModdingAPI::Exposed::UnityEngine::Color, ModdingAPI::Exposed::UnityEngine::Color, ModdingAPI::Exposed::UIWidget*, float, ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UISprite*, float, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B062B0))(objective, timerlabel, timerSprite, timerColorLowTime, timerColorNormal, widget, alphaValueWhenCompleted, countLabel, countFillSprite, fillSpriteOffset, hasTimer, hasCounter);
  }
};
}