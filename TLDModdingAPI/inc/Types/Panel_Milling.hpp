// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed {
struct __Panel_Milling_Il2CppStaticFields {
};

struct __Panel_Milling_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Panel_Milling_Il2CppClass {
  Il2CppClass_1 _1;
  __Panel_Milling_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Panel_Milling_Il2CppVtbl vtbl;
};

class Panel_Milling {
public:
  // Il2Cpp fields:
  __Panel_Milling_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_ItemList;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Root;
  ModdingAPI::Exposed::UnityEngine::Color m_RedColorToUse;
  float m_RepairRealTimeSeconds;
  float m_SkillIncreaseChanceOnSuccess;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ScrollbarSpawner;
  ModdingAPI::Exposed::UILabel* m_ConditionLabel;
  ModdingAPI::Exposed::UISprite* m_ConditionIcon;
  ModdingAPI::Exposed::UILabel* m_NameLabel;
  ModdingAPI::Exposed::UILabel* m_RepairAmountLabel;
  ModdingAPI::Exposed::UILabel* m_RequiredMaterialHeaderLabel;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_RequiredMaterials;
  float m_RequiredMaterialCenteredX;
  float m_RequiredMaterialSpacing;
  ModdingAPI::Exposed::UITexture* m_SelectedImage;
  ModdingAPI::Exposed::UILabel* m_SkillLabel;
  ModdingAPI::Exposed::UILabel* m_SuccessLabel;
  ModdingAPI::Exposed::UILabel* m_TimeRequiredLabel;
  ModdingAPI::Exposed::UILabel* m_WeightLabel;
  ModdingAPI::Exposed::ButtonLegendContainer* m_ButtonLegendContainer;
  bool _m_MillingInProgress_k__BackingField;
  ModdingAPI::Exposed::MillingMachine* m_Machine;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Millables;
  int32_t m_SelectedIndex;
  int32_t m_DisplayOffset;
  uint32_t m_AudioPlayingId;
  float m_CompletionProgress;
  float m_RealTimeCraftingElapsed;
  bool m_RepairSuccess;
  float m_StoredDayLengthScale;
  ModdingAPI::Exposed::UISlider* m_Slider;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_SliderRoot;
  ModdingAPI::Exposed::UnityEngine::Color m_OriginalHeaderTint;
  ModdingAPI::Exposed::UnityEngine::Color m_OriginalConditionTint;

  // Member methods:
  bool get_m_MillingInProgress() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4AB30))(this);
  }
  void set_m_MillingInProgress(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xADEF70))(this, value);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4AB40))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4B080))(this);
  }
  void Disable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4B200))(this);
  }
  void Enable(ModdingAPI::Exposed::MillingMachine* machine) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*, ModdingAPI::Exposed::MillingMachine*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4B360))(this, machine);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x165DF10))(this);
  }
  void OnBack() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4B4D0))(this);
  }
  void OnCancel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4B570))(this);
  }
  void OnRepair() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4B590))(this);
  }
  void OnScrollbarChanged() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4B7B0))(this);
  }
  bool DetermineRepairables() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4B9C0))(this);
  }
  void OnGearItemDisplayClicked(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4BCF0))(this, index);
  }
  void ApplyCondition(float percent) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4BDB0))(this, percent);
  }
  void BeginRepair() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4C040))(this);
  }
  void CompleteRepair() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4C370))(this);
  }
  void ConsumeMaterials(float progress) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4C6D0))(this, progress);
  }
  float DetermineConditionImprovement(int32_t skill) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4C9B0))(this, skill);
  }
  void EndRepair() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4CAE0))(this);
  }
  void GetMaterials(ModdingAPI::Exposed::GearItem_array* mats, ModdingAPI::Exposed::System::Int32_array* units, bool adjustForProgress) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*, ModdingAPI::Exposed::GearItem_array*, ModdingAPI::Exposed::System::Int32_array*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4CC70))(this, mats, units, adjustForProgress);
  }
  ModdingAPI::Exposed::GearItem* GetSelected() {
    return reinterpret_cast<ModdingAPI::Exposed::GearItem*(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4D010))(this);
  }
  void HandleInput() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4D0D0))(this);
  }
  void HandleMenuMovement(float movement) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4D440))(this, movement);
  }
  bool HasEnoughMaterials() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4D600))(this);
  }
  void Interrupt() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4D860))(this);
  }
  void RefreshAll() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4DC00))(this);
  }
  void RefreshList() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4DC20))(this);
  }
  void RefreshSelected() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4DF00))(this);
  }
  void RefreshRequiredMaterials(ModdingAPI::Exposed::GearItem* gearItem) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4E8E0))(this, gearItem);
  }
  bool RollForRepairSuccess(int32_t skill) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4EF20))(this, skill);
  }
  void UpdateButtonLegend() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4F110))(this);
  }
  void UpdateRepair() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4F2A0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Milling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4F490))(this);
  }
};
}