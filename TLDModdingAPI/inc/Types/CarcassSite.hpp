// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.CarcassSite.CarcassSiteDataProxy.hpp"


namespace ModdingAPI::Exposed {
struct __CarcassSite_Il2CppStaticFields {
};

struct __CarcassSite_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __CarcassSite_Il2CppClass {
  Il2CppClass_1 _1;
  __CarcassSite_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CarcassSite_Il2CppVtbl vtbl;
};

class CarcassSite {
public:
  // Il2Cpp fields:
  __CarcassSite_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_SiteRadius;
  float m_LimitOtherCarrionsRadius;
  float m_PostHarvestMessDurationHours;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_PostHarvestMessFXPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_LegRearLeftPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_LegRearRightPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_LegFrontLeftPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_LegFrontLRightPrefab;
  float m_LegSpawnAngle;
  float m_LegSpawnRadius;
  ModdingAPI::Exposed::Carrion* m_Carrion;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_PostHarvestMessFX;
  bool m_IsQuarteringSite;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BodyParts;
  float m_LastHarvestTimeHours;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_BodyHarvestList;
  bool m_HasSpawnPostHarvestFX;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_LegRearLeftObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_LegRearRightObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_LegFrontLeftObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_LegFrontLRightObject;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CarcassSite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B7D3A0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CarcassSite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B7D500))(this);
  }
  void Refresh(float hoursAtRefresh) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CarcassSite*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B7D700))(this, hoursAtRefresh);
  }
  void SpawnQuarteringMess() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CarcassSite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B7D8B0))(this);
  }
  bool StickToGroundAndOrientOnSlope(ModdingAPI::Exposed::UnityEngine::Transform* modifiedTransform, ModdingAPI::Exposed::UnityEngine::Vector3 desiredPosition) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CarcassSite*, ModdingAPI::Exposed::UnityEngine::Transform*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B7D8C0))(this, modifiedTransform, desiredPosition);
  }
  void PlaceBodyPart(float spawnAngle, float startAngle, float spawnRadius, int32_t i, ModdingAPI::Exposed::UnityEngine::GameObject* legObject) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CarcassSite*, float, float, float, int32_t, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B7DC40))(this, spawnAngle, startAngle, spawnRadius, i, legObject);
  }
  void MaybeSpawnBodyParts() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CarcassSite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B7E170))(this);
  }
  void RandomRotateLeg(ModdingAPI::Exposed::UnityEngine::Transform* transform) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CarcassSite*, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B7E8A0))(this, transform);
  }
  void RefreshPostHarvestMessFX(float hoursAtRefresh) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CarcassSite*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B7EA70))(this, hoursAtRefresh);
  }
  ModdingAPI::Exposed::CarcassSite::CarcassSiteDataProxy Serialize() {
    return reinterpret_cast<ModdingAPI::Exposed::CarcassSite::CarcassSiteDataProxy(__fastcall*)(ModdingAPI::Exposed::CarcassSite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B7EC10))(this);
  }
  void Deserialize(ModdingAPI::Exposed::CarcassSite::CarcassSiteDataProxy dataProxy) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CarcassSite*, ModdingAPI::Exposed::CarcassSite::CarcassSiteDataProxy)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B7F570))(this, dataProxy);
  }
  void Initialize(ModdingAPI::Exposed::UnityEngine::Vector3 position, System_String* name, bool spawnPostHarvestFX, float timeHours) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CarcassSite*, ModdingAPI::Exposed::UnityEngine::Vector3, System_String*, bool, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B7FFF0))(this, position, name, spawnPostHarvestFX, timeHours);
  }
  void AddPostHarvestMessFx(ModdingAPI::Exposed::UnityEngine::Vector3 position, float postHarvestMessDurationHours) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CarcassSite*, ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B80240))(this, position, postHarvestMessDurationHours);
  }
  bool HasPostHarvestMessFxExpired() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CarcassSite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B80430))(this);
  }
  void UpdatePostHarvestMess() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CarcassSite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B80500))(this);
  }
  ModdingAPI::Exposed::BodyHarvest* TryGetBodyHarvestFromCollider(ModdingAPI::Exposed::UnityEngine::Collider* collider) {
    return reinterpret_cast<ModdingAPI::Exposed::BodyHarvest*(__fastcall*)(ModdingAPI::Exposed::CarcassSite*, ModdingAPI::Exposed::UnityEngine::Collider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B80600))(this, collider);
  }
  void SetCarrionActive(bool enabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CarcassSite*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B80910))(this, enabled);
  }
  bool IsCarrionActive() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CarcassSite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B809F0))(this);
  }
  void AddBodyHarvest(ModdingAPI::Exposed::BodyHarvest* bodyHarvest) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CarcassSite*, ModdingAPI::Exposed::BodyHarvest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B80B00))(this, bodyHarvest);
  }
  void ResetBodyHarvestOnSite() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CarcassSite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B80BD0))(this);
  }
  void AddBodyHarvestOnSite() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CarcassSite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B80C80))(this);
  }
  int32_t GetNumberOfNonDepletedItemsOnSite() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::CarcassSite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B80E70))(this);
  }
  void UpdateCarrion() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CarcassSite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B81130))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CarcassSite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B81240))(this);
  }
};
}