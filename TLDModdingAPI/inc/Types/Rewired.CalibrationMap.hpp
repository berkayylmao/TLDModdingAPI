// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.Rewired.AxisCalibrationData.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed::Rewired {
struct __CalibrationMap_Il2CppStaticFields {
};

struct __CalibrationMap_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __CalibrationMap_Il2CppClass {
  Il2CppClass_1 _1;
  __CalibrationMap_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CalibrationMap_Il2CppVtbl vtbl;
};

class CalibrationMap {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C87B50;
  static inline    __CalibrationMap_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __CalibrationMap_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__CalibrationMap_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __CalibrationMap_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::Rewired::AxisCalibration_array* ygKoSRPvlhFHNugDEHnHEFOaPysU;
  ModdingAPI::Exposed::System::Collections::Generic::IList_T_* MzyBmjFSpMxBhYCBdfhPqefSSGu;
  int32_t CtWHpgOaCVZYpcBzymhejPsalLW;

  // Member methods:
  ModdingAPI::Exposed::System::Collections::Generic::IList_T_* get_Axes() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IList_T_*(__fastcall*)(ModdingAPI::Exposed::Rewired::CalibrationMap*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  int32_t get_axisCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::CalibrationMap*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x323DC0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::CalibrationMap*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9F5620))(this);
  }
  void ::ctor(ModdingAPI::Exposed::Rewired::AxisCalibrationData_array* hardwareAxisCalibrationData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::CalibrationMap*, ModdingAPI::Exposed::Rewired::AxisCalibrationData_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9F56C0))(this, hardwareAxisCalibrationData);
  }
  void ::ctor(ModdingAPI::Exposed::Rewired::AxisCalibration_array* axisCalibrations) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::CalibrationMap*, ModdingAPI::Exposed::Rewired::AxisCalibration_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9F5B90))(this, axisCalibrations);
  }
  void Reset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::CalibrationMap*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9F5D00))(this);
  }
  ModdingAPI::Exposed::Rewired::AxisCalibration* GetAxis(int32_t index) {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::AxisCalibration*(__fastcall*)(ModdingAPI::Exposed::Rewired::CalibrationMap*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9F5E60))(this, index);
  }
  float GetCalibratedValue(int32_t axisIndex, float value) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::CalibrationMap*, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9F5FB0))(this, axisIndex, value);
  }
  bool SetAxisData(int32_t index, ModdingAPI::Exposed::Rewired::AxisCalibrationData data) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::CalibrationMap*, int32_t, ModdingAPI::Exposed::Rewired::AxisCalibrationData)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9F6120))(this, index, data);
  }
  ModdingAPI::Exposed::Rewired::AxisCalibrationData GetAxisData(int32_t index) {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::AxisCalibrationData(__fastcall*)(ModdingAPI::Exposed::Rewired::CalibrationMap*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9F6380))(this, index);
  }
  void CopyFrom(ModdingAPI::Exposed::Rewired::CalibrationMap* map, bool copyHardwareDeadzone) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::CalibrationMap*, ModdingAPI::Exposed::Rewired::CalibrationMap*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9F6630))(this, map, copyHardwareDeadzone);
  }
  System_String* ToXmlString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::CalibrationMap*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9F6860))(this);
  }
  System_String* ToJsonString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::CalibrationMap*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9F6A20))(this);
  }
  bool ImportXmlString(System_String* xmlString) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::CalibrationMap*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9F6B90))(this, xmlString);
  }
  bool ImportJsonString(System_String* jsonString) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::CalibrationMap*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9F6D40))(this, jsonString);
  }
  ModdingAPI::Exposed::Rewired::Utils::Classes::Data::SerializedObject* BWJHmDclXaLAPlHdWSoNLiIcUPd() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::Utils::Classes::Data::SerializedObject*(__fastcall*)(ModdingAPI::Exposed::Rewired::CalibrationMap*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9F6F10))(this);
  }
  void qjwhbudypLWHNslnAEFIBGmwqKO(ModdingAPI::Exposed::Rewired::Utils::Classes::Data::SerializedObject* ) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::CalibrationMap*, ModdingAPI::Exposed::Rewired::Utils::Classes::Data::SerializedObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9F7AD0))(this, );
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 GetCalibrated2DValue(int32_t xAxisIndex, int32_t yAxisIndex, float valueRawX, float valueRawY, int32_t deadZoneType, int32_t sensitivityType) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::Rewired::CalibrationMap*, int32_t, int32_t, float, float, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9F7DC0))(this, xAxisIndex, yAxisIndex, valueRawX, valueRawY, deadZoneType, sensitivityType);
  }
};
}