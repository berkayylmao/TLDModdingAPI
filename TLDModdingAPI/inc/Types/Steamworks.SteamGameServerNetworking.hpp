// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::Steamworks::CSteamID.hpp"
#include "ModdingAPI::Exposed::Steamworks::P2PSessionState_t.hpp"
#include "ModdingAPI.Exposed.Steamworks.SNetListenSocket_t.hpp"
#include "ModdingAPI.Exposed.Steamworks.SNetSocket_t.hpp"
#include "ModdingAPI::Exposed::Steamworks::SNetSocket_t.hpp"
#include "ModdingAPI::Exposed::Steamworks::SNetListenSocket_t.hpp"


namespace ModdingAPI::Exposed::Steamworks {
struct __SteamGameServerNetworking_Il2CppStaticFields {
};

struct __SteamGameServerNetworking_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SteamGameServerNetworking_Il2CppClass {
  Il2CppClass_1 _1;
  __SteamGameServerNetworking_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SteamGameServerNetworking_Il2CppVtbl vtbl;
};

class SteamGameServerNetworking {
public:
  // Il2Cpp fields:
  __SteamGameServerNetworking_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline bool SendP2PPacket(ModdingAPI::Exposed::Steamworks::CSteamID steamIDRemote, ModdingAPI::Exposed::System::Byte_array* pubData, uint32_t cubData, int32_t eP2PSendType, int32_t nChannel) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, ModdingAPI::Exposed::System::Byte_array*, uint32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EB5C0))(steamIDRemote, pubData, cubData, eP2PSendType, nChannel);
  }
  static inline bool IsP2PPacketAvailable(uint32_t pcubMsgSize, int32_t nChannel) {
    return reinterpret_cast<bool(__fastcall*)(uint32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EB630))(pcubMsgSize, nChannel);
  }
  static inline bool ReadP2PPacket(ModdingAPI::Exposed::System::Byte_array* pubDest, uint32_t cubDest, uint32_t pcubMsgSize, ModdingAPI::Exposed::Steamworks::CSteamID psteamIDRemote, int32_t nChannel) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, uint32_t, uint32_t, ModdingAPI::Exposed::Steamworks::CSteamID, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EB670))(pubDest, cubDest, pcubMsgSize, psteamIDRemote, nChannel);
  }
  static inline bool AcceptP2PSessionWithUser(ModdingAPI::Exposed::Steamworks::CSteamID steamIDRemote) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EB6E0))(steamIDRemote);
  }
  static inline bool CloseP2PSessionWithUser(ModdingAPI::Exposed::Steamworks::CSteamID steamIDRemote) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EB710))(steamIDRemote);
  }
  static inline bool CloseP2PChannelWithUser(ModdingAPI::Exposed::Steamworks::CSteamID steamIDRemote, int32_t nChannel) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EB740))(steamIDRemote, nChannel);
  }
  static inline bool GetP2PSessionState(ModdingAPI::Exposed::Steamworks::CSteamID steamIDRemote, ModdingAPI::Exposed::Steamworks::P2PSessionState_t pConnectionState) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, ModdingAPI::Exposed::Steamworks::P2PSessionState_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EB780))(steamIDRemote, pConnectionState);
  }
  static inline bool AllowP2PPacketRelay(bool bAllow) {
    return reinterpret_cast<bool(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EB7C0))(bAllow);
  }
  static inline ModdingAPI::Exposed::Steamworks::SNetListenSocket_t CreateListenSocket(int32_t nVirtualP2PPort, uint32_t nIP, uint16_t nPort, bool bAllowUseOfPacketRelay) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SNetListenSocket_t(__fastcall*)(int32_t, uint32_t, uint16_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EB7F0))(nVirtualP2PPort, nIP, nPort, bAllowUseOfPacketRelay);
  }
  static inline ModdingAPI::Exposed::Steamworks::SNetSocket_t CreateP2PConnectionSocket(ModdingAPI::Exposed::Steamworks::CSteamID steamIDTarget, int32_t nVirtualPort, int32_t nTimeoutSec, bool bAllowUseOfPacketRelay) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SNetSocket_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EB860))(steamIDTarget, nVirtualPort, nTimeoutSec, bAllowUseOfPacketRelay);
  }
  static inline ModdingAPI::Exposed::Steamworks::SNetSocket_t CreateConnectionSocket(uint32_t nIP, uint16_t nPort, int32_t nTimeoutSec) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SNetSocket_t(__fastcall*)(uint32_t, uint16_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EB8D0))(nIP, nPort, nTimeoutSec);
  }
  static inline bool DestroySocket(ModdingAPI::Exposed::Steamworks::SNetSocket_t hSocket, bool bNotifyRemoteEnd) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SNetSocket_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EB920))(hSocket, bNotifyRemoteEnd);
  }
  static inline bool DestroyListenSocket(ModdingAPI::Exposed::Steamworks::SNetListenSocket_t hSocket, bool bNotifyRemoteEnd) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SNetListenSocket_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EB960))(hSocket, bNotifyRemoteEnd);
  }
  static inline bool SendDataOnSocket(ModdingAPI::Exposed::Steamworks::SNetSocket_t hSocket, ModdingAPI::Exposed::System::Byte_array* pubData, uint32_t cubData, bool bReliable) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SNetSocket_t, ModdingAPI::Exposed::System::Byte_array*, uint32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EB9A0))(hSocket, pubData, cubData, bReliable);
  }
  static inline bool IsDataAvailableOnSocket(ModdingAPI::Exposed::Steamworks::SNetSocket_t hSocket, uint32_t pcubMsgSize) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SNetSocket_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EBA10))(hSocket, pcubMsgSize);
  }
  static inline bool RetrieveDataFromSocket(ModdingAPI::Exposed::Steamworks::SNetSocket_t hSocket, ModdingAPI::Exposed::System::Byte_array* pubDest, uint32_t cubDest, uint32_t pcubMsgSize) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SNetSocket_t, ModdingAPI::Exposed::System::Byte_array*, uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EBA50))(hSocket, pubDest, cubDest, pcubMsgSize);
  }
  static inline bool IsDataAvailable(ModdingAPI::Exposed::Steamworks::SNetListenSocket_t hListenSocket, uint32_t pcubMsgSize, ModdingAPI::Exposed::Steamworks::SNetSocket_t phSocket) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SNetListenSocket_t, uint32_t, ModdingAPI::Exposed::Steamworks::SNetSocket_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EBAB0))(hListenSocket, pcubMsgSize, phSocket);
  }
  static inline bool RetrieveData(ModdingAPI::Exposed::Steamworks::SNetListenSocket_t hListenSocket, ModdingAPI::Exposed::System::Byte_array* pubDest, uint32_t cubDest, uint32_t pcubMsgSize, ModdingAPI::Exposed::Steamworks::SNetSocket_t phSocket) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SNetListenSocket_t, ModdingAPI::Exposed::System::Byte_array*, uint32_t, uint32_t, ModdingAPI::Exposed::Steamworks::SNetSocket_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EBB00))(hListenSocket, pubDest, cubDest, pcubMsgSize, phSocket);
  }
  static inline bool GetSocketInfo(ModdingAPI::Exposed::Steamworks::SNetSocket_t hSocket, ModdingAPI::Exposed::Steamworks::CSteamID pSteamIDRemote, int32_t peSocketStatus, uint32_t punIPRemote, uint16_t punPortRemote) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SNetSocket_t, ModdingAPI::Exposed::Steamworks::CSteamID, int32_t, uint32_t, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EBB70))(hSocket, pSteamIDRemote, peSocketStatus, punIPRemote, punPortRemote);
  }
  static inline bool GetListenSocketInfo(ModdingAPI::Exposed::Steamworks::SNetListenSocket_t hListenSocket, uint32_t pnIP, uint16_t pnPort) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SNetListenSocket_t, uint32_t, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EBBE0))(hListenSocket, pnIP, pnPort);
  }
  static inline int32_t GetSocketConnectionType(ModdingAPI::Exposed::Steamworks::SNetSocket_t hSocket) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::SNetSocket_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EBC30))(hSocket);
  }
  static inline int32_t GetMaxPacketSize(ModdingAPI::Exposed::Steamworks::SNetSocket_t hSocket) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::SNetSocket_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EBC60))(hSocket);
  }
};
}