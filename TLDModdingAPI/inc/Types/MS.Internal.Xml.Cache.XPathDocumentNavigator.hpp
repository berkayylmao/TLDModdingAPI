// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::MS::Internal::Xml::Cache {
struct __XPathDocumentNavigator_Il2CppStaticFields {
};

struct __XPathDocumentNavigator_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_XmlType;
  VirtualInvokeData _5_get_Value;
  VirtualInvokeData _6_get_TypedValue;
  VirtualInvokeData _7_get_ValueType;
  VirtualInvokeData _8_get_ValueAsBoolean;
  VirtualInvokeData _9_get_ValueAsDateTime;
  VirtualInvokeData _10_get_ValueAsDouble;
  VirtualInvokeData _11_get_ValueAsInt;
  VirtualInvokeData _12_get_ValueAsLong;
  VirtualInvokeData _13_ValueAs;
  VirtualInvokeData _14_ValueAs;
  VirtualInvokeData _15_System_ICloneable_Clone;
  VirtualInvokeData _19_get_NameTable;
  VirtualInvokeData _20_LookupNamespace;
  VirtualInvokeData _21_LookupPrefix;
  VirtualInvokeData _22_GetNamespacesInScope;
  VirtualInvokeData _23_Clone;
  VirtualInvokeData _24_get_NodeType;
  VirtualInvokeData _25_get_LocalName;
  VirtualInvokeData _26_get_NamespaceURI;
  VirtualInvokeData _27_get_Prefix;
  VirtualInvokeData _28_get_UnderlyingObject;
  VirtualInvokeData _29_MoveToNamespace;
  VirtualInvokeData _30_MoveToFirstNamespace;
  VirtualInvokeData _31_MoveToNextNamespace;
  VirtualInvokeData _32_MoveToParent;
  VirtualInvokeData _33_IsSamePosition;
  VirtualInvokeData _34_get_SchemaInfo;
  VirtualInvokeData _35_get_LineNumber;
  VirtualInvokeData _36_get_LinePosition;
};

struct __XPathDocumentNavigator_Il2CppClass {
  Il2CppClass_1 _1;
  __XPathDocumentNavigator_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __XPathDocumentNavigator_Il2CppVtbl vtbl;
};

class XPathDocumentNavigator {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C64A50;
  static inline    __XPathDocumentNavigator_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __XPathDocumentNavigator_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__XPathDocumentNavigator_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __XPathDocumentNavigator_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathNode_array* pageCurrent;
  ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathNode_array* pageParent;
  int32_t idxCurrent;
  int32_t idxParent;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathNode_array* pageCurrent, int32_t idxCurrent, ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathNode_array* pageParent, int32_t idxParent) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathDocumentNavigator*, ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathNode_array*, int32_t, ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathNode_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD1E880))(this, pageCurrent, idxCurrent, pageParent, idxParent);
  }
  System_String* get_Value() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathDocumentNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD1E950))(this);
  }
  ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator* Clone() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathDocumentNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD1ED30))(this);
  }
  int32_t get_NodeType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathDocumentNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD1EF20))(this);
  }
  System_String* get_LocalName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathDocumentNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD1EF60))(this);
  }
  System_String* get_NamespaceURI() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathDocumentNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD1EFB0))(this);
  }
  System_String* get_Prefix() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathDocumentNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD1F000))(this);
  }
  ModdingAPI::Exposed::System::Xml::XmlNameTable* get_NameTable() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlNameTable*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathDocumentNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD1F050))(this);
  }
  bool MoveToFirstNamespace(int32_t namespaceScope) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathDocumentNavigator*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD1F0B0))(this, namespaceScope);
  }
  bool MoveToNextNamespace(int32_t scope) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathDocumentNavigator*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD1F310))(this, scope);
  }
  bool MoveToParent() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathDocumentNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD1F480))(this);
  }
  bool IsSamePosition(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator* other) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathDocumentNavigator*, ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD1F510))(this, other);
  }
  Il2CppObject* get_UnderlyingObject() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathDocumentNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9BA370))(this);
  }
  int32_t get_LineNumber() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathDocumentNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD1F5F0))(this);
  }
  int32_t get_LinePosition() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathDocumentNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD1F6B0))(this);
  }
  int32_t GetPositionHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::Cache::XPathDocumentNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD1F780))(this);
  }
};
}