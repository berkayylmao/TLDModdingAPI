// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::UnityStandardAssets::ImageEffects {
struct __DepthOfField_Il2CppStaticFields {
};

struct __DepthOfField_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_CheckResources;
};

struct __DepthOfField_Il2CppClass {
  Il2CppClass_1 _1;
  __DepthOfField_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __DepthOfField_Il2CppVtbl vtbl;
};

class DepthOfField {
public:
  // Il2Cpp fields:
  __DepthOfField_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool supportHDRTextures;
  bool supportDX11;
  bool isSupported;
  bool visualizeFocus;
  float focalLength;
  float focalSize;
  float aperture;
  ModdingAPI::Exposed::UnityEngine::Transform* focalTransform;
  float maxBlurSize;
  bool highResolution;
  int32_t blurType;
  int32_t blurSampleCount;
  bool nearBlur;
  float foregroundOverlap;
  ModdingAPI::Exposed::UnityEngine::Shader* dofHdrShader;
  ModdingAPI::Exposed::UnityEngine::Material* dofHdrMaterial;
  ModdingAPI::Exposed::UnityEngine::Shader* dx11BokehShader;
  ModdingAPI::Exposed::UnityEngine::Material* dx11bokehMaterial;
  float dx11BokehThreshold;
  float dx11SpawnHeuristic;
  ModdingAPI::Exposed::UnityEngine::Texture2D* dx11BokehTexture;
  float dx11BokehScale;
  float dx11BokehIntensity;
  float focalDistance01;
  ModdingAPI::Exposed::UnityEngine::ComputeBuffer* cbDrawArgs;
  ModdingAPI::Exposed::UnityEngine::ComputeBuffer* cbPoints;
  float internalBlurWidth;

  // Member methods:
  bool CheckResources() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfField*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF016E0))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfField*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF01760))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfField*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF01890))(this);
  }
  void ReleaseComputeResources() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfField*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF01B20))(this);
  }
  void CreateComputeResources() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfField*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF01C90))(this);
  }
  float FocalDistance01(float worldDist) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfField*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF01FC0))(this, worldDist);
  }
  void WriteCoc(ModdingAPI::Exposed::UnityEngine::RenderTexture* fromTo, bool fgDilate) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfField*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF02420))(this, fromTo, fgDilate);
  }
  void OnRenderImage(ModdingAPI::Exposed::UnityEngine::RenderTexture* source, ModdingAPI::Exposed::UnityEngine::RenderTexture* destination) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfField*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF02A10))(this, source, destination);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfField*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF04830))(this);
  }
};
}