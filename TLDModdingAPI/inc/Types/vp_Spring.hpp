// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __vp_Spring_Il2CppStaticFields {
};

struct __vp_Spring_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __vp_Spring_Il2CppClass {
  Il2CppClass_1 _1;
  __vp_Spring_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __vp_Spring_Il2CppVtbl vtbl;
};

class vp_Spring {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C76D58;
  static inline    __vp_Spring_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __vp_Spring_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__vp_Spring_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __vp_Spring_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t Modifier;
  ModdingAPI::Exposed::vp_Spring::TransformDelegate* m_TransformFunc;
  ModdingAPI::Exposed::UnityEngine::Vector3 State;
  int32_t m_CurrentTransformType;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_Velocity;
  ModdingAPI::Exposed::UnityEngine::Vector3 RestState;
  ModdingAPI::Exposed::UnityEngine::Vector3 Stiffness;
  ModdingAPI::Exposed::UnityEngine::Vector3 Damping;
  float m_VelocityFadeInCap;
  float m_VelocityFadeInEndTime;
  float m_VelocityFadeInLength;
  float MaxVelocity;
  float MinVelocity;
  ModdingAPI::Exposed::UnityEngine::Vector3 MaxState;
  ModdingAPI::Exposed::UnityEngine::Vector3 MinState;
  float RotationResetThreshold;
  ModdingAPI::Exposed::UnityEngine::Transform* m_Transform;

  // Member methods:
  void set_Transform(ModdingAPI::Exposed::UnityEngine::Transform* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_Spring*, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2010D10))(this, value);
  }
  void ::ctor(ModdingAPI::Exposed::UnityEngine::Transform* transform, int32_t modifier) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_Spring*, ModdingAPI::Exposed::UnityEngine::Transform*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2010D20))(this, transform, modifier);
  }
  void FixedUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_Spring*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2010EE0))(this);
  }
  void Position() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_Spring*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20110D0))(this);
  }
  void PositionAdditive() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_Spring*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2011160))(this);
  }
  void Rotation() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_Spring*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2011300))(this);
  }
  void RotationAdditive() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_Spring*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2011450))(this);
  }
  void Scale() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_Spring*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2011680))(this);
  }
  void ScaleAdditive() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_Spring*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2011710))(this);
  }
  void RefreshTransformType() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_Spring*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20118B0))(this);
  }
  void Calculate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_Spring*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2011F50))(this);
  }
  void AddForce(ModdingAPI::Exposed::UnityEngine::Vector3 force) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_Spring*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20121D0))(this, force);
  }
  void AddForce(float x, float y, float z) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_Spring*, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2012330))(this, x, y, z);
  }
  void Move() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_Spring*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2012360))(this);
  }
  void Reset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_Spring*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2012520))(this);
  }
  void Stop() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_Spring*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20125E0))(this);
  }
  void ForceVelocityFadeIn(float seconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_Spring*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2012690))(this, seconds);
  }
};
}