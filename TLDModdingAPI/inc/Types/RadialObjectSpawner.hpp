// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Quaternion.hpp"


namespace ModdingAPI::Exposed {
struct __RadialObjectSpawner_Il2CppStaticFields {
  ModdingAPI::Exposed::RadialObjectSpawnerSaveData* m_RadialObjectSpawnerSaveData;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_PositionsList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_RotationsList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_PrefabNamesList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_UnlockedForDetailMapList;
};

struct __RadialObjectSpawner_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __RadialObjectSpawner_Il2CppClass {
  Il2CppClass_1 _1;
  __RadialObjectSpawner_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __RadialObjectSpawner_Il2CppVtbl vtbl;
};

class RadialObjectSpawner {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C2F0E0;
  static inline    __RadialObjectSpawner_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __RadialObjectSpawner_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__RadialObjectSpawner_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __RadialObjectSpawner_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ObjectToSpawn;
  float m_MinRadius;
  float m_MaxRadius;
  int32_t m_MinToSpawn;
  int32_t m_MaxToSpawn;
  float m_MinRespawnTimeGameHours;
  float m_MaxRespawnTimeGameHours;
  bool m_AllowIndoorSpawn;
  float m_FloatHeight;
  bool m_AddRandomXRotation;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_RaycastOffset;
  ModdingAPI::Exposed::LootTable* m_LootTable;
  ModdingAPI::Exposed::Spline* m_Spline;
  bool m_InRadialSpawnManagerActiveList;
  float m_GameHourTimeToRespawn;
  int32_t m_NumToSpawn;
  bool m_StartHasBeenCalled;
  bool m_HasSpawned;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_NextPrefabToSpawn;
  float m_ObjectToSpawnBoundingRadius;
  int32_t m_NumSpawnAttemptsWithInvalidPositions;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_PendingSpawns;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Spawns;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* m_SplineSamplePoints;
  float m_SplineBoundingRadius;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_SplineCenter;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B503C0))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B504F0))(this);
  }
  void SpawnAttemptAllNoVisChecks() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B50840))(this);
  }
  bool SpawnAttemptOnceWithVisCheck() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B50880))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B50890))(this);
  }
  bool Deserialize(System_String* text) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B512C0))(this, text);
  }
  void RemoveFromSpawns(ModdingAPI::Exposed::UnityEngine::GameObject* go) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B514A0))(this, go);
  }
  void ReleaseSpawnedObjectsToPool() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B51570))(this);
  }
  bool ShouldDisable() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B517C0))(this);
  }
  bool CanPotentiallySpawn() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B51A40))(this);
  }
  bool ShouldAttemptSpawning() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B51B00))(this);
  }
  bool HasChildren() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B51C90))(this);
  }
  bool ShouldDisableDueToInvalidPosition() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B51D20))(this);
  }
  bool HasSpawned() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B51D30))(this);
  }
  int32_t NumToSpawn() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3839C0))(this);
  }
  bool SpawnObjectAttempt(bool doVisCheck) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B51D40))(this, doVisCheck);
  }
  ModdingAPI::Exposed::UnityEngine::GameObject* SpawnPending(int32_t index) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B52900))(this, index);
  }
  ModdingAPI::Exposed::UnityEngine::GameObject* GetNextPrefabToSpawn() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B52E50))(this);
  }
  ModdingAPI::Exposed::UnityEngine::GameObject* SpawnAtPosition(ModdingAPI::Exposed::UnityEngine::GameObject* prefabToSpawn, ModdingAPI::Exposed::UnityEngine::Vector3 posToSpawn, ModdingAPI::Exposed::UnityEngine::Quaternion orientToSpawn) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*, ModdingAPI::Exposed::UnityEngine::GameObject*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Quaternion)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B52F50))(this, prefabToSpawn, posToSpawn, orientToSpawn);
  }
  void SetRepawnTime(ModdingAPI::Exposed::UnityEngine::GameObject* spawnedObj) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B532A0))(this, spawnedObj);
  }
  void SetPendingSpawns(ModdingAPI::Exposed::System::String_array* prefabNames, ModdingAPI::Exposed::UnityEngine::Vector3_array* positions, ModdingAPI::Exposed::UnityEngine::Quaternion_array* rotations, ModdingAPI::Exposed::System::Boolean_array* detailMapUnlockStates) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*, ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::UnityEngine::Vector3_array*, ModdingAPI::Exposed::UnityEngine::Quaternion_array*, ModdingAPI::Exposed::System::Boolean_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B53440))(this, prefabNames, positions, rotations, detailMapUnlockStates);
  }
  void CreatePendingSpawn(System_String* prefabName, ModdingAPI::Exposed::UnityEngine::Vector3 pos, ModdingAPI::Exposed::UnityEngine::Quaternion rot, bool unlockedForDetailMap) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*, System_String*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Quaternion, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B53640))(this, prefabName, pos, rot, unlockedForDetailMap);
  }
  void DisableSplineMeshUpdating() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B537D0))(this);
  }
  void SetObjectToSpawnBoundingRadius() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B53950))(this);
  }
  void SetSplineBoundingRadius() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B53AF0))(this);
  }
  float GetDistanceFromOuterRadiusToCamera() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B53D10))(this);
  }
  void RollRandomNumToSpawn() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B53F20))(this);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B53F90))(this);
  }
  bool GetUnlockedForDetailMap(ModdingAPI::Exposed::UnityEngine::GameObject* go) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B54040))(this, go);
  }
  void SetUnlockedForDetailMap(ModdingAPI::Exposed::UnityEngine::GameObject* go, bool unlocked) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*, ModdingAPI::Exposed::UnityEngine::GameObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B54120))(this, go, unlocked);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadialObjectSpawner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B54200))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::RadialObjectSpawnerSaveData*> m_RadialObjectSpawnerSaveData = __CppStaticProperty<ModdingAPI::Exposed::RadialObjectSpawnerSaveData*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_RadialObjectSpawnerSaveData; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> m_PositionsList = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_PositionsList; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> m_RotationsList = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_RotationsList; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> m_PrefabNamesList = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_PrefabNamesList; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> m_UnlockedForDetailMapList = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_UnlockedForDetailMapList; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B54530))();
  }
};
}