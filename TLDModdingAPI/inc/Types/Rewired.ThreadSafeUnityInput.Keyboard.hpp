// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput {
struct __Keyboard_Il2CppStaticFields {
  int32_t keyValueIndex_Escape;
  int32_t keyValueIndex_Menu;
  int32_t keyValueIndex_F2;
  int32_t keyValueIndex_UpArrow;
  int32_t keyValueIndex_RightArrow;
  int32_t keyValueIndex_DownArrow;
  int32_t keyValueIndex_LeftArrow;
  ModdingAPI::Exposed::System::Int32_array* nzgtsdyLBehWJhNzZKXEFLHbsSDF;
};

struct __Keyboard_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Keyboard_Il2CppClass {
  Il2CppClass_1 _1;
  __Keyboard_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Keyboard_Il2CppVtbl vtbl;
};

class Keyboard {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C5D5B8;
  static inline    __Keyboard_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Keyboard_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Keyboard_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Keyboard_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t mEiikNgampktEyLjBrciJavnjYy;
  ModdingAPI::Exposed::System::Int32_array* oPJGTURgpkhPwdEuqrcSmndyfpIb;
  ModdingAPI::Exposed::System::Boolean_array* gBkoVumjaldjSecvwhnBsiIKTSv;
  bool yIozJzFkooRCrVDgMYuKERLjtKT;
  int32_t aiDJAceKdnynJfnTzPEzNZmSKPR;
  bool mUkSCxPtVVYohTNIUmrCImTyEHb;

  // Member methods:
  bool get_enabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3F0))(this);
  }
  void set_enabled(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput::Keyboard*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3C300))(this, value);
  }
  bool get_monitoring() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3C380))(this);
  }
  int32_t get_keyCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x302AC0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3C9A0))(this);
  }
  void Initialize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3CBF0))(this);
  }
  void PostInitialize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3CC40))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3CC50))(this);
  }
  void Monitor(bool state) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput::Keyboard*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3D110))(this, state);
  }
  bool GetKey(ModdingAPI::Exposed::UnityEngine::KeyCode keyCode) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput::Keyboard*, ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3D260))(this, keyCode);
  }
  void GetKeyValues(ModdingAPI::Exposed::System::Boolean_array* values) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput::Keyboard*, ModdingAPI::Exposed::System::Boolean_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3D2F0))(this, values);
  }
  void Clear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3D380))(this);
  }
  void GiGdsUYhSpdxLTvxONrvJhAQxxP() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3069C0))(this);
  }
  void vaUwmtessYPbEcXaAGcAXEfuiIC() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3D5C0))(this);
  }
  void ACOQMnXUaQxHcfIRwFTKtLWqwce() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void qFvyxKuMQCFpDNHDRllZloGJUUc() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3069C0))(this);
  }
  void dhyBWsDVAOiJGcOFGVASaewULqKS() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3D5D0))(this);
  }
  void FMWQdeTPgsLBMacvACvRQEMbLmz() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ThreadSafeUnityInput::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3D650))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<int32_t> keyValueIndex_Escape = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->keyValueIndex_Escape; }
  );
  static inline __CppStaticProperty<int32_t> keyValueIndex_Menu = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->keyValueIndex_Menu; }
  );
  static inline __CppStaticProperty<int32_t> keyValueIndex_F2 = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->keyValueIndex_F2; }
  );
  static inline __CppStaticProperty<int32_t> keyValueIndex_UpArrow = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->keyValueIndex_UpArrow; }
  );
  static inline __CppStaticProperty<int32_t> keyValueIndex_RightArrow = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->keyValueIndex_RightArrow; }
  );
  static inline __CppStaticProperty<int32_t> keyValueIndex_DownArrow = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->keyValueIndex_DownArrow; }
  );
  static inline __CppStaticProperty<int32_t> keyValueIndex_LeftArrow = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->keyValueIndex_LeftArrow; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*> nzgtsdyLBehWJhNzZKXEFLHbsSDF = __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->nzgtsdyLBehWJhNzZKXEFLHbsSDF; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3C390))();
  }
};
}