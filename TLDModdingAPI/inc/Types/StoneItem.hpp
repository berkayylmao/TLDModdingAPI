// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __StoneItem_Il2CppStaticFields {
};

struct __StoneItem_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __StoneItem_Il2CppClass {
  Il2CppClass_1 _1;
  __StoneItem_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __StoneItem_Il2CppVtbl vtbl;
};

class StoneItem {
public:
  // Il2Cpp fields:
  __StoneItem_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  System_String* m_CollideAudio;
  float m_AudioVelocityThreshold;
  float m_ThrowForce;
  float m_ThrowTorque;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_AdditionalGravity;
  float m_ThrowSpeedThreshold;
  float m_CollisionDamping;
  float m_ColliderScaleWhenThrown;
  bool m_CanThrow;
  ModdingAPI::Exposed::GearItem* m_GearItem;
  ModdingAPI::Exposed::UnityEngine::Rigidbody* m_RigidBody;
  ModdingAPI::Exposed::UnityEngine::BoxCollider* m_Collider;
  bool m_Thrown;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_DefaultColliderSize;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::StoneItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA16B0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::StoneItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA1880))(this);
  }
  void FixedUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::StoneItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA1A00))(this);
  }
  void PlayImpactEffects(System_String* surfaceTag, ModdingAPI::Exposed::UnityEngine::Vector3 collisionPoint, ModdingAPI::Exposed::UnityEngine::Vector3 normal) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::StoneItem*, System_String*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA1C40))(this, surfaceTag, collisionPoint, normal);
  }
  void OnCollisionEnter(ModdingAPI::Exposed::UnityEngine::Collision* collisionInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::StoneItem*, ModdingAPI::Exposed::UnityEngine::Collision*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA1F10))(this, collisionInfo);
  }
  void PrepareForThrow() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::StoneItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void PickedUp() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::StoneItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA2310))(this);
  }
  void Throw() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::StoneItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA2490))(this);
  }
  void ZoomStart() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::StoneItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA2640))(this);
  }
  void ZoomEnd() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::StoneItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA2810))(this);
  }
  void SetThrown(bool thrown) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::StoneItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA29C0))(this, thrown);
  }
  bool IsThrown() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::StoneItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x58F760))(this);
  }
  void OnAiming() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::StoneItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnAimingCancelled() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::StoneItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnThrowComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::StoneItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA2B90))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::StoneItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EA2CB0))(this);
  }
};
}