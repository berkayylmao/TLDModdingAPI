// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.Unity.Mathematics.float4.hpp"


namespace ModdingAPI::Exposed {
struct __AuroraElectrolizer_Il2CppStaticFields {
  int32_t s_EmissiveStrengthPropertyID;
  int32_t s_EmissiveTintPropertyID;
};

struct __AuroraElectrolizer_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __AuroraElectrolizer_Il2CppClass {
  Il2CppClass_1 _1;
  __AuroraElectrolizer_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AuroraElectrolizer_Il2CppVtbl vtbl;
};

class AuroraElectrolizer {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C3CBA8;
  static inline    __AuroraElectrolizer_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __AuroraElectrolizer_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__AuroraElectrolizer_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __AuroraElectrolizer_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::MinMax* m_AuroraThresholdActivate;
  ModdingAPI::Exposed::MinMax* m_AuroraThresholdStable;
  ModdingAPI::Exposed::UnityEngine::Light_array* m_LocalLights;
  ModdingAPI::Exposed::UnityEngine::GameObject_array* m_EmissiveObjects;
  ModdingAPI::Exposed::UnityEngine::Shader* m_EmissiveShader;
  float m_EmissiveMultiplier;
  ModdingAPI::Exposed::UnityEngine::ParticleSystem_array* m_LocalFX;
  System_String* m_Audio;
  int32_t m_LightFlickerType;
  ModdingAPI::Exposed::System::Single_array* m_LocalLightsIntensity;
  bool m_RelativeIntensity;
  bool m_FlaresUseLightColour;
  float m_UpdateThresholdPercent;
  ModdingAPI::Exposed::MinMax* m_FlickerChangeTime;
  ModdingAPI::Exposed::MinMax* m_LightPrimaryIntensity;
  ModdingAPI::Exposed::MinMax* m_LightSecondaryIntensity;
  ModdingAPI::Exposed::MinMax* m_LightPrimaryFrequency;
  ModdingAPI::Exposed::MinMax* m_LightSecondaryFrequency;
  ModdingAPI::Exposed::MinMax* m_LightNoiseFrequency;
  float m_LightMainlyPercentage;
  float m_MainlyUpdateSpeed;
  ModdingAPI::Exposed::ScaledCurve* m_LightCustomCurve;
  bool m_LightRandomizePerEvent;
  bool m_LightFadeWithAurora;
  float m_LightIntensityMultiplier;
  bool m_RandomAuroraColor;
  bool m_OverrideEmissiveColor;
  ModdingAPI::Exposed::UnityEngine::Color m_OverrideColor;
  bool m_LightExludeSteady;
  bool m_LightExludeSingle;
  bool m_LightExludeDouble;
  bool m_LightExludeCustom;
  bool m_LightExludeRandomLerp;
  bool m_LightExludeRandomSharp;
  bool m_LightExludeMainlyOn;
  bool m_LightExludeMainlyOff;
  bool m_RequiresAuroraField;
  bool m_ExternalPowerActive;
  ModdingAPI::Exposed::AuroraField* m_ActiveAuroraField;
  bool m_ParticlesScaleEmission;
  float m_MaximumDistanceFromCamera;
  float m_MaxConsoleDistanceFromCamera;
  float m_SwitchIndoorPercent;
  float m_XboxPs4IndoorPercent;
  float m_PcIndoorPercent;
  float m_FadeDistancePercent;
  bool m_ForceRefresh;
  float m_CurLowThreshold;
  float m_CurStableThreshold;
  float m_AuroraLightFade;
  float m_AuroraFXFade;
  float m_MainlyTimer;
  float m_MainlyRndVal;
  float m_NormalizedTimer;
  float m_NoiseTimer;
  float m_PhiTimer;
  float m_CurPriFreq;
  float m_CurSecFreq;
  float m_CurNoiFreq;
  float m_PriPeriod;
  float m_SecPeriod;
  float m_PhiPri;
  float m_PhiSec;
  float m_CurIntensity;
  float m_NewIntensity;
  float m_PrvIntensity;
  float m_StaticIntensity;
  ModdingAPI::Exposed::System::Single_array* m_FxInitialRate;
  uint32_t m_AudioInstanceID;
  bool m_IsInitialized;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_LightFlares;
  bool m_HasStopped;
  bool m_SetDistances;
  float m_MaximumSqrDistanceFromCamera;
  float m_MaximumSqrFadeFromCamera;
  float m_IntensitySentToWise;
  float m_FadeIntensity;
  float m_FlickerTime;
  float m_FlickerChangeTimer;
  ModdingAPI::Exposed::UnityEngine::Color m_Color;
  ModdingAPI::Exposed::System::Collections::Generic::HashSet_T_* m_Renderers;
  ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock* m_EmissivePropertyBlock;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC4390))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC45B0))(this);
  }
  void Initialize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC45F0))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC5800))(this);
  }
  void SetLocationDistances(bool useOutdoorValues) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC5830))(this, useOutdoorValues);
  }
  bool IsElectrolized() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC58A0))(this);
  }
  void SetAuroraField(ModdingAPI::Exposed::AuroraField* auroraField) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*, ModdingAPI::Exposed::AuroraField*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6012B0))(this, auroraField);
  }
  void ManualUpdate(float camDistSqr, float fadeIntensity, float auroraIntensity, float deltaTime, bool useLocalTimers) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*, float, float, float, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC58B0))(this, camDistSqr, fadeIntensity, auroraIntensity, deltaTime, useLocalTimers);
  }
  void JobUpdate(float camDistSqr, float fadeIntensity, float auroraIntensity, float deltaTime, ModdingAPI::Exposed::Unity::Mathematics::float4 timings, float priTimer) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*, float, float, float, float, ModdingAPI::Exposed::Unity::Mathematics::float4, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC5BF0))(this, camDistSqr, fadeIntensity, auroraIntensity, deltaTime, timings, priTimer);
  }
  void UpdateTimers(ModdingAPI::Exposed::Unity::Mathematics::float4 timers, float primaryTimer) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*, ModdingAPI::Exposed::Unity::Mathematics::float4, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC5C60))(this, timers, primaryTimer);
  }
  void UpdateIntensity(float deltaTime, bool useLocalTimers) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC5CA0))(this, deltaTime, useLocalTimers);
  }
  void UpdateEmissiveObjects(bool allOff) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC6270))(this, allOff);
  }
  void UpdateFX(bool allOff) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC6610))(this, allOff);
  }
  void UpdateLight(bool allOff) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC6940))(this, allOff);
  }
  void SetRandomType() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC6EA0))(this);
  }
  void SetRandomFlickerTime() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC7180))(this);
  }
  void StopAll() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC7200))(this);
  }
  float GetCurrentLowThreshold() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC7340))(this);
  }
  float GetCurrentStableThreshold() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC7350))(this);
  }
  float GetIntensityNormalized() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC7360))(this);
  }
  float GetLightIntensity() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x400700))(this);
  }
  void SetExternalPowerState(bool isActive) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC75A0))(this, isActive);
  }
  void UpdateAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC75B0))(this);
  }
  void StopAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC77E0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC78E0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<int32_t> s_EmissiveStrengthPropertyID = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_EmissiveStrengthPropertyID; }
  );
  static inline __CppStaticProperty<int32_t> s_EmissiveTintPropertyID = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_EmissiveTintPropertyID; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FC7F10))();
  }
};
}