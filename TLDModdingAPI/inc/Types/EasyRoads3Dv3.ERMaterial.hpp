// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::EasyRoads3Dv3 {
struct __ERMaterial_Il2CppStaticFields {
};

struct __ERMaterial_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ERMaterial_Il2CppClass {
  Il2CppClass_1 _1;
  __ERMaterial_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ERMaterial_Il2CppVtbl vtbl;
};

class ERMaterial {
public:
  // Il2Cpp fields:
  __ERMaterial_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  int32_t id;
  System_String* name;
  double roadType1ID;
  double roadType2ID;
  double roadType3ID;
  ModdingAPI::Exposed::UnityEngine::Material* road1Material;
  ModdingAPI::Exposed::UnityEngine::Material* road2Material;
  ModdingAPI::Exposed::UnityEngine::Material* road3Material;
  float connectorLength1;
  float connectorLength2;
  float connectorLength3;
  float road1Stretch;
  float road2Stretch;
  float road3Stretch;
  int32_t road1StretchType;
  int32_t road2StretchType;
  int32_t road3StretchType;
  int32_t subdivide1;
  int32_t subdivide2;
  int32_t subdivide3;
  float resolution;
  bool blend;
  float blendDistance;
  int32_t blendSection;
  bool triangleStrip;
  float triangleStripDistance;
  float triangleStripUVStart;
  float triangleStripUVEnd;
  ModdingAPI::Exposed::UnityEngine::Material* triangleStripMaterial;

  // Member methods:
  void Init(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularBase* scr) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERMaterial*, ModdingAPI::Exposed::EasyRoads3Dv3::ERModularBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4146A0))(this, scr);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERMaterial*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4155B0))(this);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::EasyRoads3Dv3::ERMaterial* CreateInstance(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularBase* scr) {
    return reinterpret_cast<ModdingAPI::Exposed::EasyRoads3Dv3::ERMaterial*(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4147C0))(scr);
  }
  static inline ModdingAPI::Exposed::System::String_array* OCODCDQCCO(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularBase* scr) {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x414960))(scr);
  }
  static inline ModdingAPI::Exposed::EasyRoads3Dv3::ERMaterial* OOCOCOOOOC(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularBase* scr, ModdingAPI::Exposed::EasyRoads3Dv3::ERIConnector* prefab, int32_t targetRoad, int32_t index) {
    return reinterpret_cast<ModdingAPI::Exposed::EasyRoads3Dv3::ERMaterial*(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularBase*, ModdingAPI::Exposed::EasyRoads3Dv3::ERIConnector*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x414C00))(scr, prefab, targetRoad, index);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Material* OCDOCCCOQQ(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularBase* scr, ModdingAPI::Exposed::EasyRoads3Dv3::ERIConnector* prefab) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularBase*, ModdingAPI::Exposed::EasyRoads3Dv3::ERIConnector*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x414E20))(scr, prefab);
  }
};
}