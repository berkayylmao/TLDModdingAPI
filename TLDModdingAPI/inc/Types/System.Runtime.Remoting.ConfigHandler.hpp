// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.TimeSpan.hpp"


namespace ModdingAPI::Exposed::System::Runtime::Remoting {
struct __ConfigHandler_Il2CppStaticFields {
};

struct __ConfigHandler_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_OnStartParsing;
  VirtualInvokeData _5_OnEndParsing;
  VirtualInvokeData _6_OnStartElement;
  VirtualInvokeData _7_OnEndElement;
  VirtualInvokeData _8_OnProcessingInstruction;
  VirtualInvokeData _9_OnChars;
  VirtualInvokeData _10_OnIgnorableWhitespace;
};

struct __ConfigHandler_Il2CppClass {
  Il2CppClass_1 _1;
  __ConfigHandler_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ConfigHandler_Il2CppVtbl vtbl;
};

class ConfigHandler {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C63830;
  static inline    __ConfigHandler_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ConfigHandler_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ConfigHandler_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ConfigHandler_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Collections::ArrayList* typeEntries;
  ModdingAPI::Exposed::System::Collections::ArrayList* channelInstances;
  ModdingAPI::Exposed::System::Runtime::Remoting::ChannelData* currentChannel;
  ModdingAPI::Exposed::System::Collections::Stack* currentProviderData;
  System_String* currentClientUrl;
  System_String* appName;
  System_String* currentXmlPath;
  bool onlyDelayedChannels;

  // Member methods:
  void ::ctor(bool onlyDelayedChannels) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x743760))(this, onlyDelayedChannels);
  }
  void ValidatePath(System_String* element, ModdingAPI::Exposed::System::String_array* paths) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, System_String*, ModdingAPI::Exposed::System::String_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x743990))(this, element, paths);
  }
  bool CheckPath(System_String* path) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x743AB0))(this, path);
  }
  void OnStartParsing(ModdingAPI::Exposed::Mono::Xml::SmallXmlParser* parser) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, parser);
  }
  void OnProcessingInstruction(System_String* name, System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, name, text);
  }
  void OnIgnorableWhitespace(System_String* s) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, s);
  }
  void OnStartElement(System_String* name, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList* attrs) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, System_String*, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x743C40))(this, name, attrs);
  }
  void ParseElement(System_String* name, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList* attrs) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, System_String*, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x743D90))(this, name, attrs);
  }
  void OnEndElement(System_String* name) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x745130))(this, name);
  }
  void ReadCustomProviderData(System_String* name, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList* attrs) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, System_String*, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7451D0))(this, name, attrs);
  }
  void ReadLifetine(ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList* attrs) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x745690))(this, attrs);
  }
  ModdingAPI::Exposed::System::TimeSpan ParseTime(System_String* s) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x745A60))(this, s);
  }
  void ReadChannel(ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList* attrs, bool isTemplate) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x745F00))(this, attrs, isTemplate);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::ProviderData* ReadProvider(System_String* name, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList* attrs, bool isTemplate) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::ProviderData*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, System_String*, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7465F0))(this, name, attrs, isTemplate);
  }
  void ReadClientActivated(ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList* attrs) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x746D70))(this, attrs);
  }
  void ReadServiceActivated(ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList* attrs) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x747090))(this, attrs);
  }
  void ReadClientWellKnown(ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList* attrs) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x747340))(this, attrs);
  }
  void ReadServiceWellKnown(ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList* attrs) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x747610))(this, attrs);
  }
  void ReadInteropXml(ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList* attrs, bool isElement) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7479D0))(this, attrs, isElement);
  }
  void ReadPreload(ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList* attrs) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x747C50))(this, attrs);
  }
  System_String* GetNotNull(ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList* attrs, System_String* name) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser::IAttrList*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x747F20))(this, attrs, name);
  }
  System_String* ExtractAssembly(System_String* type) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x748040))(this, type);
  }
  void OnChars(System_String* ch) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, ch);
  }
  void OnEndParsing(ModdingAPI::Exposed::Mono::Xml::SmallXmlParser* parser) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ConfigHandler*, ModdingAPI::Exposed::Mono::Xml::SmallXmlParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x748190))(this, parser);
  }
};
}