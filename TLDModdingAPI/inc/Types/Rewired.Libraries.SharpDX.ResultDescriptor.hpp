// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.aZFrxZQTjjOtfRxxgSmXednzJjM.hpp"
#include "ModdingAPI::Exposed::aZFrxZQTjjOtfRxxgSmXednzJjM.hpp"


namespace ModdingAPI::Exposed::Rewired::Libraries::SharpDX {
struct __ResultDescriptor_Il2CppStaticFields {
  Il2CppObject* LockDescriptor;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* RegisteredDescriptorProvider;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* Descriptors;
};

struct __ResultDescriptor_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ResultDescriptor_Il2CppClass {
  Il2CppClass_1 _1;
  __ResultDescriptor_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ResultDescriptor_Il2CppVtbl vtbl;
};

class ResultDescriptor {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C91BE0;
  static inline    ResultDescriptor* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C6BFA8;
  static inline    __ResultDescriptor_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline ResultDescriptor* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (ResultDescriptor**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __ResultDescriptor_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ResultDescriptor_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ResultDescriptor_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::aZFrxZQTjjOtfRxxgSmXednzJjM _Result_k__BackingField;
  System_String* _Module_k__BackingField;
  System_String* _NativeApiCode_k__BackingField;
  System_String* _ApiCode_k__BackingField;
  System_String* _Description_k__BackingField;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::aZFrxZQTjjOtfRxxgSmXednzJjM code, System_String* module, System_String* nativeApiCode, System_String* apiCode, System_String* description) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor*, ModdingAPI::Exposed::aZFrxZQTjjOtfRxxgSmXednzJjM, System_String*, System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3D2220))(this, code, module, nativeApiCode, apiCode, description);
  }
  ModdingAPI::Exposed::aZFrxZQTjjOtfRxxgSmXednzJjM get_Result() {
    return reinterpret_cast<ModdingAPI::Exposed::aZFrxZQTjjOtfRxxgSmXednzJjM(__fastcall*)(ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311060))(this);
  }
  void set_Result(ModdingAPI::Exposed::aZFrxZQTjjOtfRxxgSmXednzJjM value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor*, ModdingAPI::Exposed::aZFrxZQTjjOtfRxxgSmXednzJjM)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311070))(this, value);
  }
  System_String* get_Module() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  void set_Module(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3E0))(this, value);
  }
  System_String* get_NativeApiCode() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110A0))(this);
  }
  void set_NativeApiCode(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x310F00))(this, value);
  }
  System_String* get_ApiCode() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110B0))(this);
  }
  void set_ApiCode(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110C0))(this, value);
  }
  System_String* get_Description() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335370))(this);
  }
  void set_Description(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A410))(this, value);
  }
  bool Equals(ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor* other) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor*, ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3D2240))(this, other);
  }
  bool Equals(Il2CppObject* obj) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3D2260))(this, obj);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311060))(this);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3D2380))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<Il2CppObject*> LockDescriptor = __CppStaticProperty<Il2CppObject*>(
   []() { return &GetStaticClassInstance()->pStaticFields->LockDescriptor; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> RegisteredDescriptorProvider = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->RegisteredDescriptorProvider; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> Descriptors = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Descriptors; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor* Find(ModdingAPI::Exposed::aZFrxZQTjjOtfRxxgSmXednzJjM result) {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::Libraries::SharpDX::ResultDescriptor*(__fastcall*)(ModdingAPI::Exposed::aZFrxZQTjjOtfRxxgSmXednzJjM)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3D25E0))(result);
  }
  static inline void AddDescriptorsFromType(ModdingAPI::Exposed::System::Type* type) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3D2B40))(type);
  }
  static inline System_String* GetDescriptionFromResultCode(int32_t resultCode) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3D2DD0))(resultCode);
  }
  static inline uint32_t FormatMessageW(int32_t dwFlags, intptr_t lpSource, int32_t dwMessageId, int32_t dwLanguageId, intptr_t lpBuffer, int32_t nSize, intptr_t Arguments) {
    return reinterpret_cast<uint32_t(__fastcall*)(int32_t, intptr_t, int32_t, int32_t, intptr_t, int32_t, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3D2FA0))(dwFlags, lpSource, dwMessageId, dwLanguageId, lpBuffer, nSize, Arguments);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x3D3060))();
  }
};
}