// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::UnityEngine::RenderBuffer.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Quaternion.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Matrix4x4.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Internal_DrawTextureArguments.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Rect.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Color.hpp"


namespace ModdingAPI::Exposed::UnityEngine {
struct __Graphics_Il2CppStaticFields {
  int32_t kMaxDrawMeshInstanceCount;
};

struct __Graphics_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Graphics_Il2CppClass {
  Il2CppClass_1 _1;
  __Graphics_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Graphics_Il2CppVtbl vtbl;
};

class Graphics {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C46928;
  static inline    __Graphics_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Graphics_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Graphics_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Graphics_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<int32_t> kMaxDrawMeshInstanceCount = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->kMaxDrawMeshInstanceCount; }
  );

  // Static methods:
  static inline int32_t Internal_GetMaxDrawMeshInstanceCount() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x105AA70))();
  }
  static inline void Internal_SetNullRT() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x105AAC0))();
  }
  static inline void Internal_SetRTSimple(ModdingAPI::Exposed::UnityEngine::RenderBuffer color, ModdingAPI::Exposed::UnityEngine::RenderBuffer depth, int32_t mip, int32_t face, int32_t depthSlice) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::RenderBuffer, ModdingAPI::Exposed::UnityEngine::RenderBuffer, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105AB10))(color, depth, mip, face, depthSlice);
  }
  static inline void Internal_SetRandomWriteTargetBuffer(int32_t index, ModdingAPI::Exposed::UnityEngine::ComputeBuffer* uav, bool preserveCounterValue) {
    reinterpret_cast<void(__fastcall*)(int32_t, ModdingAPI::Exposed::UnityEngine::ComputeBuffer*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105AC20))(index, uav, preserveCounterValue);
  }
  static inline void ClearRandomWriteTargets() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x105AC90))();
  }
  static inline void CopyTexture_Region(ModdingAPI::Exposed::UnityEngine::Texture* src, int32_t srcElement, int32_t srcMip, int32_t srcX, int32_t srcY, int32_t srcWidth, int32_t srcHeight, ModdingAPI::Exposed::UnityEngine::Texture* dst, int32_t dstElement, int32_t dstMip, int32_t dstX, int32_t dstY) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture*, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Texture*, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105ACE0))(src, srcElement, srcMip, srcX, srcY, srcWidth, srcHeight, dst, dstElement, dstMip, dstX, dstY);
  }
  static inline void Internal_DrawMeshNow1(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, int32_t subsetIndex, ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::UnityEngine::Quaternion rotation) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Quaternion)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105AD70))(mesh, subsetIndex, position, rotation);
  }
  static inline void Internal_DrawMeshNow2(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, int32_t subsetIndex, ModdingAPI::Exposed::UnityEngine::Matrix4x4 matrix) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, ModdingAPI::Exposed::UnityEngine::Matrix4x4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105AE70))(mesh, subsetIndex, matrix);
  }
  static inline void Internal_DrawTexture(ModdingAPI::Exposed::UnityEngine::Internal_DrawTextureArguments args) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Internal_DrawTextureArguments)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105AF60))(args);
  }
  static inline void Internal_DrawMesh(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, int32_t submeshIndex, ModdingAPI::Exposed::UnityEngine::Matrix4x4 matrix, ModdingAPI::Exposed::UnityEngine::Material* material, int32_t layer, ModdingAPI::Exposed::UnityEngine::Camera* camera, ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock* properties, int32_t castShadows, bool receiveShadows, ModdingAPI::Exposed::UnityEngine::Transform* probeAnchor, int32_t lightProbeUsage, ModdingAPI::Exposed::UnityEngine::LightProbeProxyVolume* lightProbeProxyVolume) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, ModdingAPI::Exposed::UnityEngine::Matrix4x4, ModdingAPI::Exposed::UnityEngine::Material*, int32_t, ModdingAPI::Exposed::UnityEngine::Camera*, ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, bool, ModdingAPI::Exposed::UnityEngine::Transform*, int32_t, ModdingAPI::Exposed::UnityEngine::LightProbeProxyVolume*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105AFB0))(mesh, submeshIndex, matrix, material, layer, camera, properties, castShadows, receiveShadows, probeAnchor, lightProbeUsage, lightProbeProxyVolume);
  }
  static inline void Internal_DrawMeshInstanced(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, int32_t submeshIndex, ModdingAPI::Exposed::UnityEngine::Material* material, ModdingAPI::Exposed::UnityEngine::Matrix4x4_array* matrices, int32_t count, ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock* properties, int32_t castShadows, bool receiveShadows, int32_t layer, ModdingAPI::Exposed::UnityEngine::Camera* camera, int32_t lightProbeUsage, ModdingAPI::Exposed::UnityEngine::LightProbeProxyVolume* lightProbeProxyVolume) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, ModdingAPI::Exposed::UnityEngine::Material*, ModdingAPI::Exposed::UnityEngine::Matrix4x4_array*, int32_t, ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, bool, int32_t, ModdingAPI::Exposed::UnityEngine::Camera*, int32_t, ModdingAPI::Exposed::UnityEngine::LightProbeProxyVolume*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105B120))(mesh, submeshIndex, material, matrices, count, properties, castShadows, receiveShadows, layer, camera, lightProbeUsage, lightProbeProxyVolume);
  }
  static inline void Internal_DrawProceduralIndirect(int32_t topology, ModdingAPI::Exposed::UnityEngine::ComputeBuffer* bufferWithArgs, int32_t argsOffset) {
    reinterpret_cast<void(__fastcall*)(int32_t, ModdingAPI::Exposed::UnityEngine::ComputeBuffer*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105B1C0))(topology, bufferWithArgs, argsOffset);
  }
  static inline void Internal_BlitMaterial(ModdingAPI::Exposed::UnityEngine::Texture* source, ModdingAPI::Exposed::UnityEngine::RenderTexture* dest, ModdingAPI::Exposed::UnityEngine::Material* mat, int32_t pass, bool setRT) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, ModdingAPI::Exposed::UnityEngine::Material*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105B230))(source, dest, mat, pass, setRT);
  }
  static inline void Internal_BlitMultiTap(ModdingAPI::Exposed::UnityEngine::Texture* source, ModdingAPI::Exposed::UnityEngine::RenderTexture* dest, ModdingAPI::Exposed::UnityEngine::Material* mat, ModdingAPI::Exposed::UnityEngine::Vector2_array* offsets) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, ModdingAPI::Exposed::UnityEngine::Material*, ModdingAPI::Exposed::UnityEngine::Vector2_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105B2C0))(source, dest, mat, offsets);
  }
  static inline void Blit2(ModdingAPI::Exposed::UnityEngine::Texture* source, ModdingAPI::Exposed::UnityEngine::RenderTexture* dest) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105B340))(source, dest);
  }
  static inline void SetRenderTargetImpl(ModdingAPI::Exposed::UnityEngine::RenderBuffer colorBuffer, ModdingAPI::Exposed::UnityEngine::RenderBuffer depthBuffer, int32_t mipLevel, int32_t face, int32_t depthSlice) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::RenderBuffer, ModdingAPI::Exposed::UnityEngine::RenderBuffer, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105B3A0))(colorBuffer, depthBuffer, mipLevel, face, depthSlice);
  }
  static inline void SetRenderTargetImpl(ModdingAPI::Exposed::UnityEngine::RenderTexture* rt, int32_t mipLevel, int32_t face, int32_t depthSlice) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::RenderTexture*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105B550))(rt, mipLevel, face, depthSlice);
  }
  static inline void SetRenderTarget(ModdingAPI::Exposed::UnityEngine::RenderTexture* rt, int32_t mipLevel, int32_t face, int32_t depthSlice) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::RenderTexture*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105B8B0))(rt, mipLevel, face, depthSlice);
  }
  static inline void SetRandomWriteTarget(int32_t index, ModdingAPI::Exposed::UnityEngine::ComputeBuffer* uav, bool preserveCounterValue) {
    reinterpret_cast<void(__fastcall*)(int32_t, ModdingAPI::Exposed::UnityEngine::ComputeBuffer*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105B990))(index, uav, preserveCounterValue);
  }
  static inline void CopyTexture(ModdingAPI::Exposed::UnityEngine::Texture* src, int32_t srcElement, int32_t srcMip, int32_t srcX, int32_t srcY, int32_t srcWidth, int32_t srcHeight, ModdingAPI::Exposed::UnityEngine::Texture* dst, int32_t dstElement, int32_t dstMip, int32_t dstX, int32_t dstY) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture*, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Texture*, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105BB70))(src, srcElement, srcMip, srcX, srcY, srcWidth, srcHeight, dst, dstElement, dstMip, dstX, dstY);
  }
  static inline void DrawTextureImpl(ModdingAPI::Exposed::UnityEngine::Rect screenRect, ModdingAPI::Exposed::UnityEngine::Texture* texture, ModdingAPI::Exposed::UnityEngine::Rect sourceRect, int32_t leftBorder, int32_t rightBorder, int32_t topBorder, int32_t bottomBorder, ModdingAPI::Exposed::UnityEngine::Color color, ModdingAPI::Exposed::UnityEngine::Material* mat, int32_t pass) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect, ModdingAPI::Exposed::UnityEngine::Texture*, ModdingAPI::Exposed::UnityEngine::Rect, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Color, ModdingAPI::Exposed::UnityEngine::Material*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105BC80))(screenRect, texture, sourceRect, leftBorder, rightBorder, topBorder, bottomBorder, color, mat, pass);
  }
  static inline void DrawTexture(ModdingAPI::Exposed::UnityEngine::Rect screenRect, ModdingAPI::Exposed::UnityEngine::Texture* texture, ModdingAPI::Exposed::UnityEngine::Rect sourceRect, int32_t leftBorder, int32_t rightBorder, int32_t topBorder, int32_t bottomBorder, ModdingAPI::Exposed::UnityEngine::Material* mat, int32_t pass) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect, ModdingAPI::Exposed::UnityEngine::Texture*, ModdingAPI::Exposed::UnityEngine::Rect, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Material*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105BE20))(screenRect, texture, sourceRect, leftBorder, rightBorder, topBorder, bottomBorder, mat, pass);
  }
  static inline void DrawMeshNow(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::UnityEngine::Quaternion rotation, int32_t materialIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Quaternion, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105C070))(mesh, position, rotation, materialIndex);
  }
  static inline void DrawMeshNow(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, ModdingAPI::Exposed::UnityEngine::Matrix4x4 matrix, int32_t materialIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, ModdingAPI::Exposed::UnityEngine::Matrix4x4, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105C280))(mesh, matrix, materialIndex);
  }
  static inline void DrawMeshNow(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::UnityEngine::Quaternion rotation) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Quaternion)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105C480))(mesh, position, rotation);
  }
  static inline void DrawMeshNow(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, ModdingAPI::Exposed::UnityEngine::Matrix4x4 matrix) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, ModdingAPI::Exposed::UnityEngine::Matrix4x4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105C570))(mesh, matrix);
  }
  static inline void DrawMesh(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, ModdingAPI::Exposed::UnityEngine::Matrix4x4 matrix, ModdingAPI::Exposed::UnityEngine::Material* material, int32_t layer, ModdingAPI::Exposed::UnityEngine::Camera* camera, int32_t submeshIndex, ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock* properties, int32_t castShadows, bool receiveShadows, ModdingAPI::Exposed::UnityEngine::Transform* probeAnchor, int32_t lightProbeUsage, ModdingAPI::Exposed::UnityEngine::LightProbeProxyVolume* lightProbeProxyVolume) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, ModdingAPI::Exposed::UnityEngine::Matrix4x4, ModdingAPI::Exposed::UnityEngine::Material*, int32_t, ModdingAPI::Exposed::UnityEngine::Camera*, int32_t, ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, bool, ModdingAPI::Exposed::UnityEngine::Transform*, int32_t, ModdingAPI::Exposed::UnityEngine::LightProbeProxyVolume*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105C650))(mesh, matrix, material, layer, camera, submeshIndex, properties, castShadows, receiveShadows, probeAnchor, lightProbeUsage, lightProbeProxyVolume);
  }
  static inline void DrawMeshInstanced(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, int32_t submeshIndex, ModdingAPI::Exposed::UnityEngine::Material* material, ModdingAPI::Exposed::UnityEngine::Matrix4x4_array* matrices, int32_t count, ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock* properties, int32_t castShadows, bool receiveShadows, int32_t layer, ModdingAPI::Exposed::UnityEngine::Camera* camera, int32_t lightProbeUsage, ModdingAPI::Exposed::UnityEngine::LightProbeProxyVolume* lightProbeProxyVolume) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, ModdingAPI::Exposed::UnityEngine::Material*, ModdingAPI::Exposed::UnityEngine::Matrix4x4_array*, int32_t, ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, bool, int32_t, ModdingAPI::Exposed::UnityEngine::Camera*, int32_t, ModdingAPI::Exposed::UnityEngine::LightProbeProxyVolume*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105C8F0))(mesh, submeshIndex, material, matrices, count, properties, castShadows, receiveShadows, layer, camera, lightProbeUsage, lightProbeProxyVolume);
  }
  static inline void DrawProceduralIndirect(int32_t topology, ModdingAPI::Exposed::UnityEngine::ComputeBuffer* bufferWithArgs, int32_t argsOffset) {
    reinterpret_cast<void(__fastcall*)(int32_t, ModdingAPI::Exposed::UnityEngine::ComputeBuffer*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105CE50))(topology, bufferWithArgs, argsOffset);
  }
  static inline void Blit(ModdingAPI::Exposed::UnityEngine::Texture* source, ModdingAPI::Exposed::UnityEngine::RenderTexture* dest) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105CF70))(source, dest);
  }
  static inline void Blit(ModdingAPI::Exposed::UnityEngine::Texture* source, ModdingAPI::Exposed::UnityEngine::RenderTexture* dest, ModdingAPI::Exposed::UnityEngine::Material* mat, int32_t pass) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, ModdingAPI::Exposed::UnityEngine::Material*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105D060))(source, dest, mat, pass);
  }
  static inline void Blit(ModdingAPI::Exposed::UnityEngine::Texture* source, ModdingAPI::Exposed::UnityEngine::RenderTexture* dest, ModdingAPI::Exposed::UnityEngine::Material* mat) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105D170))(source, dest, mat);
  }
  static inline void BlitMultiTap(ModdingAPI::Exposed::UnityEngine::Texture* source, ModdingAPI::Exposed::UnityEngine::RenderTexture* dest, ModdingAPI::Exposed::UnityEngine::Material* mat, ModdingAPI::Exposed::UnityEngine::Vector2_array* offsets) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, ModdingAPI::Exposed::UnityEngine::Material*, ModdingAPI::Exposed::UnityEngine::Vector2_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105D240))(source, dest, mat, offsets);
  }
  static inline void DrawMesh(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, ModdingAPI::Exposed::UnityEngine::Matrix4x4 matrix, ModdingAPI::Exposed::UnityEngine::Material* material, int32_t layer, ModdingAPI::Exposed::UnityEngine::Camera* camera, int32_t submeshIndex, ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock* properties, bool castShadows, bool receiveShadows) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, ModdingAPI::Exposed::UnityEngine::Matrix4x4, ModdingAPI::Exposed::UnityEngine::Material*, int32_t, ModdingAPI::Exposed::UnityEngine::Camera*, int32_t, ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105D390))(mesh, matrix, material, layer, camera, submeshIndex, properties, castShadows, receiveShadows);
  }
  static inline void DrawMeshInstanced(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, int32_t submeshIndex, ModdingAPI::Exposed::UnityEngine::Material* material, ModdingAPI::Exposed::UnityEngine::Matrix4x4_array* matrices, int32_t count, ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock* properties, int32_t castShadows, bool receiveShadows) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, ModdingAPI::Exposed::UnityEngine::Material*, ModdingAPI::Exposed::UnityEngine::Matrix4x4_array*, int32_t, ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105D4F0))(mesh, submeshIndex, material, matrices, count, properties, castShadows, receiveShadows);
  }
  static inline void DrawTexture(ModdingAPI::Exposed::UnityEngine::Rect screenRect, ModdingAPI::Exposed::UnityEngine::Texture* texture, ModdingAPI::Exposed::UnityEngine::Rect sourceRect, int32_t leftBorder, int32_t rightBorder, int32_t topBorder, int32_t bottomBorder, ModdingAPI::Exposed::UnityEngine::Material* mat) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect, ModdingAPI::Exposed::UnityEngine::Texture*, ModdingAPI::Exposed::UnityEngine::Rect, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105D610))(screenRect, texture, sourceRect, leftBorder, rightBorder, topBorder, bottomBorder, mat);
  }
  static inline void SetRenderTarget(ModdingAPI::Exposed::UnityEngine::RenderTexture* rt) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::RenderTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105D740))(rt);
  }
  static inline void SetRandomWriteTarget(int32_t index, ModdingAPI::Exposed::UnityEngine::ComputeBuffer* uav) {
    reinterpret_cast<void(__fastcall*)(int32_t, ModdingAPI::Exposed::UnityEngine::ComputeBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105D870))(index, uav);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x105D920))();
  }
  static inline void Internal_SetRTSimple_Injected(ModdingAPI::Exposed::UnityEngine::RenderBuffer color, ModdingAPI::Exposed::UnityEngine::RenderBuffer depth, int32_t mip, int32_t face, int32_t depthSlice) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::RenderBuffer, ModdingAPI::Exposed::UnityEngine::RenderBuffer, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105D9E0))(color, depth, mip, face, depthSlice);
  }
  static inline void Internal_DrawMeshNow1_Injected(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, int32_t subsetIndex, ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::UnityEngine::Quaternion rotation) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Quaternion)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105DA70))(mesh, subsetIndex, position, rotation);
  }
  static inline void Internal_DrawMeshNow2_Injected(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, int32_t subsetIndex, ModdingAPI::Exposed::UnityEngine::Matrix4x4 matrix) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, ModdingAPI::Exposed::UnityEngine::Matrix4x4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105DAF0))(mesh, subsetIndex, matrix);
  }
  static inline void Internal_DrawMesh_Injected(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, int32_t submeshIndex, ModdingAPI::Exposed::UnityEngine::Matrix4x4 matrix, ModdingAPI::Exposed::UnityEngine::Material* material, int32_t layer, ModdingAPI::Exposed::UnityEngine::Camera* camera, ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock* properties, int32_t castShadows, bool receiveShadows, ModdingAPI::Exposed::UnityEngine::Transform* probeAnchor, int32_t lightProbeUsage, ModdingAPI::Exposed::UnityEngine::LightProbeProxyVolume* lightProbeProxyVolume) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, ModdingAPI::Exposed::UnityEngine::Matrix4x4, ModdingAPI::Exposed::UnityEngine::Material*, int32_t, ModdingAPI::Exposed::UnityEngine::Camera*, ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, bool, ModdingAPI::Exposed::UnityEngine::Transform*, int32_t, ModdingAPI::Exposed::UnityEngine::LightProbeProxyVolume*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105DB60))(mesh, submeshIndex, matrix, material, layer, camera, properties, castShadows, receiveShadows, probeAnchor, lightProbeUsage, lightProbeProxyVolume);
  }
};
}