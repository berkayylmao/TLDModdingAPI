// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t.hpp"
#include "ModdingAPI::Exposed::Steamworks::CSteamID.hpp"
#include "ModdingAPI::Exposed::Steamworks::SteamItemDef_t.hpp"
#include "ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t.hpp"
#include "ModdingAPI.Exposed.Steamworks.SteamAPICall_t.hpp"
#include "ModdingAPI.Exposed.Steamworks.SteamInventoryUpdateHandle_t.hpp"
#include "ModdingAPI::Exposed::Steamworks::SteamInventoryUpdateHandle_t.hpp"


namespace ModdingAPI::Exposed::Steamworks {
struct __SteamGameServerInventory_Il2CppStaticFields {
};

struct __SteamGameServerInventory_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SteamGameServerInventory_Il2CppClass {
  Il2CppClass_1 _1;
  __SteamGameServerInventory_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SteamGameServerInventory_Il2CppVtbl vtbl;
};

class SteamGameServerInventory {
public:
  // Il2Cpp fields:
  __SteamGameServerInventory_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline int32_t GetResultStatus(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t resultHandle) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9660))(resultHandle);
  }
  static inline bool GetResultItems(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t resultHandle, ModdingAPI::Exposed::Steamworks::SteamItemDetails_t_array* pOutItemsArray, uint32_t punOutItemsArraySize) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t, ModdingAPI::Exposed::Steamworks::SteamItemDetails_t_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9690))(resultHandle, pOutItemsArray, punOutItemsArraySize);
  }
  static inline bool GetResultItemProperty(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t resultHandle, uint32_t unItemIndex, System_String* pchPropertyName, System_String* pchValueBuffer, uint32_t punValueBufferSizeOut) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t, uint32_t, System_String*, System_String*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9790))(resultHandle, unItemIndex, pchPropertyName, pchValueBuffer, punValueBufferSizeOut);
  }
  static inline uint32_t GetResultTimestamp(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t resultHandle) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9A40))(resultHandle);
  }
  static inline bool CheckResultSteamID(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t resultHandle, ModdingAPI::Exposed::Steamworks::CSteamID steamIDExpected) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t, ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9A70))(resultHandle, steamIDExpected);
  }
  static inline void DestroyResult(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t resultHandle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9AB0))(resultHandle);
  }
  static inline bool GetAllItems(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t pResultHandle) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9AE0))(pResultHandle);
  }
  static inline bool GetItemsByID(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t pResultHandle, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t_array* pInstanceIDs, uint32_t unCountInstanceIDs) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9B10))(pResultHandle, pInstanceIDs, unCountInstanceIDs);
  }
  static inline bool SerializeResult(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t resultHandle, ModdingAPI::Exposed::System::Byte_array* pOutBuffer, uint32_t punOutBufferSize) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t, ModdingAPI::Exposed::System::Byte_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9B60))(resultHandle, pOutBuffer, punOutBufferSize);
  }
  static inline bool DeserializeResult(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t pOutResultHandle, ModdingAPI::Exposed::System::Byte_array* pBuffer, uint32_t unBufferSize, bool bRESERVED_MUST_BE_FALSE) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t, ModdingAPI::Exposed::System::Byte_array*, uint32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9BB0))(pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
  }
  static inline bool GenerateItems(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t pResultHandle, ModdingAPI::Exposed::Steamworks::SteamItemDef_t_array* pArrayItemDefs, ModdingAPI::Exposed::System::UInt32_array* punArrayQuantity, uint32_t unArrayLength) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t, ModdingAPI::Exposed::Steamworks::SteamItemDef_t_array*, ModdingAPI::Exposed::System::UInt32_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9C20))(pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
  }
  static inline bool GrantPromoItems(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t pResultHandle) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9C90))(pResultHandle);
  }
  static inline bool AddPromoItem(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t pResultHandle, ModdingAPI::Exposed::Steamworks::SteamItemDef_t itemDef) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t, ModdingAPI::Exposed::Steamworks::SteamItemDef_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9CC0))(pResultHandle, itemDef);
  }
  static inline bool AddPromoItems(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t pResultHandle, ModdingAPI::Exposed::Steamworks::SteamItemDef_t_array* pArrayItemDefs, uint32_t unArrayLength) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t, ModdingAPI::Exposed::Steamworks::SteamItemDef_t_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9D00))(pResultHandle, pArrayItemDefs, unArrayLength);
  }
  static inline bool ConsumeItem(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t pResultHandle, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t itemConsume, uint32_t unQuantity) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9D50))(pResultHandle, itemConsume, unQuantity);
  }
  static inline bool ExchangeItems(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t pResultHandle, ModdingAPI::Exposed::Steamworks::SteamItemDef_t_array* pArrayGenerate, ModdingAPI::Exposed::System::UInt32_array* punArrayGenerateQuantity, uint32_t unArrayGenerateLength, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t_array* pArrayDestroy, ModdingAPI::Exposed::System::UInt32_array* punArrayDestroyQuantity, uint32_t unArrayDestroyLength) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t, ModdingAPI::Exposed::Steamworks::SteamItemDef_t_array*, ModdingAPI::Exposed::System::UInt32_array*, uint32_t, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t_array*, ModdingAPI::Exposed::System::UInt32_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9DA0))(pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
  }
  static inline bool TransferItemQuantity(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t pResultHandle, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t itemIdSource, uint32_t unQuantity, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t itemIdDest) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t, uint32_t, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9E30))(pResultHandle, itemIdSource, unQuantity, itemIdDest);
  }
  static inline void SendItemDropHeartbeat() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9EA0))();
  }
  static inline bool TriggerItemDrop(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t pResultHandle, ModdingAPI::Exposed::Steamworks::SteamItemDef_t dropListDefinition) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t, ModdingAPI::Exposed::Steamworks::SteamItemDef_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9EC0))(pResultHandle, dropListDefinition);
  }
  static inline bool TradeItems(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t pResultHandle, ModdingAPI::Exposed::Steamworks::CSteamID steamIDTradePartner, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t_array* pArrayGive, ModdingAPI::Exposed::System::UInt32_array* pArrayGiveQuantity, uint32_t nArrayGiveLength, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t_array* pArrayGet, ModdingAPI::Exposed::System::UInt32_array* pArrayGetQuantity, uint32_t nArrayGetLength) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t, ModdingAPI::Exposed::Steamworks::CSteamID, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t_array*, ModdingAPI::Exposed::System::UInt32_array*, uint32_t, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t_array*, ModdingAPI::Exposed::System::UInt32_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9F00))(pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
  }
  static inline bool LoadItemDefinitions() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9FA0))();
  }
  static inline bool GetItemDefinitionIDs(ModdingAPI::Exposed::Steamworks::SteamItemDef_t_array* pItemDefIDs, uint32_t punItemDefIDsArraySize) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamItemDef_t_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E9FC0))(pItemDefIDs, punItemDefIDsArraySize);
  }
  static inline bool GetItemDefinitionProperty(ModdingAPI::Exposed::Steamworks::SteamItemDef_t iDefinition, System_String* pchPropertyName, System_String* pchValueBuffer, uint32_t punValueBufferSizeOut) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamItemDef_t, System_String*, System_String*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EA0B0))(iDefinition, pchPropertyName, pchValueBuffer, punValueBufferSizeOut);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t RequestEligiblePromoItemDefinitionsIDs(ModdingAPI::Exposed::Steamworks::CSteamID steamID) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EA350))(steamID);
  }
  static inline bool GetEligiblePromoItemDefinitionIDs(ModdingAPI::Exposed::Steamworks::CSteamID steamID, ModdingAPI::Exposed::Steamworks::SteamItemDef_t_array* pItemDefIDs, uint32_t punItemDefIDsArraySize) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, ModdingAPI::Exposed::Steamworks::SteamItemDef_t_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EA400))(steamID, pItemDefIDs, punItemDefIDsArraySize);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t StartPurchase(ModdingAPI::Exposed::Steamworks::SteamItemDef_t_array* pArrayItemDefs, ModdingAPI::Exposed::System::UInt32_array* punArrayQuantity, uint32_t unArrayLength) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamItemDef_t_array*, ModdingAPI::Exposed::System::UInt32_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EA500))(pArrayItemDefs, punArrayQuantity, unArrayLength);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t RequestPrices() {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EA5E0))();
  }
  static inline uint32_t GetNumItemsWithPrices() {
    return reinterpret_cast<uint32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EA690))();
  }
  static inline bool GetItemsWithPrices(ModdingAPI::Exposed::Steamworks::SteamItemDef_t_array* pArrayItemDefs, ModdingAPI::Exposed::System::UInt64_array* pCurrentPrices, ModdingAPI::Exposed::System::UInt64_array* pBasePrices, uint32_t unArrayLength) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamItemDef_t_array*, ModdingAPI::Exposed::System::UInt64_array*, ModdingAPI::Exposed::System::UInt64_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EA6B0))(pArrayItemDefs, pCurrentPrices, pBasePrices, unArrayLength);
  }
  static inline bool GetItemPrice(ModdingAPI::Exposed::Steamworks::SteamItemDef_t iDefinition, uint64_t pCurrentPrice, uint64_t pBasePrice) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamItemDef_t, uint64_t, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EA860))(iDefinition, pCurrentPrice, pBasePrice);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamInventoryUpdateHandle_t StartUpdateProperties() {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamInventoryUpdateHandle_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EA8B0))();
  }
  static inline bool RemoveProperty(ModdingAPI::Exposed::Steamworks::SteamInventoryUpdateHandle_t handle, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t nItemID, System_String* pchPropertyName) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryUpdateHandle_t, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EA960))(handle, nItemID, pchPropertyName);
  }
  static inline bool SetProperty(ModdingAPI::Exposed::Steamworks::SteamInventoryUpdateHandle_t handle, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t nItemID, System_String* pchPropertyName, System_String* pchPropertyValue) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryUpdateHandle_t, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EAB90))(handle, nItemID, pchPropertyName, pchPropertyValue);
  }
  static inline bool SetProperty(ModdingAPI::Exposed::Steamworks::SteamInventoryUpdateHandle_t handle, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t nItemID, System_String* pchPropertyName, bool bValue) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryUpdateHandle_t, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EAEE0))(handle, nItemID, pchPropertyName, bValue);
  }
  static inline bool SetProperty1(ModdingAPI::Exposed::Steamworks::SteamInventoryUpdateHandle_t handle, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t nItemID, System_String* pchPropertyName, int64_t nValue) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryUpdateHandle_t, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t, System_String*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EB110))(handle, nItemID, pchPropertyName, nValue);
  }
  static inline bool SetProperty2(ModdingAPI::Exposed::Steamworks::SteamInventoryUpdateHandle_t handle, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t nItemID, System_String* pchPropertyName, float flValue) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryUpdateHandle_t, ModdingAPI::Exposed::Steamworks::SteamItemInstanceID_t, System_String*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EB340))(handle, nItemID, pchPropertyName, flValue);
  }
  static inline bool SubmitUpdateProperties(ModdingAPI::Exposed::Steamworks::SteamInventoryUpdateHandle_t handle, ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t pResultHandle) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamInventoryUpdateHandle_t, ModdingAPI::Exposed::Steamworks::SteamInventoryResult_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26EB580))(handle, pResultHandle);
  }
};
}