// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __PrefabSpawn_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* s_SerializeSpawners;
};

struct __PrefabSpawn_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __PrefabSpawn_Il2CppClass {
  Il2CppClass_1 _1;
  __PrefabSpawn_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __PrefabSpawn_Il2CppVtbl vtbl;
};

class PrefabSpawn {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C54460;
  static inline    __PrefabSpawn_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __PrefabSpawn_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__PrefabSpawn_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __PrefabSpawn_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::PrefabSpawn::Element_array* m_PrefabList;
  ModdingAPI::Exposed::System::Single_array* m_LodHeights;
  int32_t m_NumToSpawnMin;
  int32_t m_NumToSpawnMax;
  int32_t m_ChanceOfNoSpawn;
  bool m_TakePrefabScale;
  ModdingAPI::Exposed::UnityEngine::GameObject_array* m_ArtSpawnedObjects;
  bool m_IsArtSpawnerPrefabExtractionDone;
  bool m_IsArtSpawnerInstanceConverted;
  System_String* m_GUIDAssignments;
  bool m_IsArtSpawner;
  bool m_SpawnComplete;
  bool m_UseSerialization;
  System_String* m_Guid;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PrefabSpawn*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C9F80))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PrefabSpawn*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17CA120))(this);
  }
  void BuildLODGroups(ModdingAPI::Exposed::UnityEngine::GameObject_array* objects) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PrefabSpawn*, ModdingAPI::Exposed::UnityEngine::GameObject_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17CA270))(this, objects);
  }
  void HandleGUIDAssignments() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PrefabSpawn*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17CA700))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Transform* CustomFind(System_String* name, int32_t index) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Transform*(__fastcall*)(ModdingAPI::Exposed::PrefabSpawn*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17CAC70))(this, name, index);
  }
  ModdingAPI::Exposed::UnityEngine::GameObject* SpawnObjects() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::PrefabSpawn*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17CB230))(this);
  }
  ModdingAPI::Exposed::UnityEngine::GameObject* SpawnObject(ModdingAPI::Exposed::PrefabSpawn::Element* spawnElement) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::PrefabSpawn*, ModdingAPI::Exposed::PrefabSpawn::Element*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17CBF20))(this, spawnElement);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PrefabSpawn*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17CCDE0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> s_SerializeSpawners = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_SerializeSpawners; }
  );

  // Static methods:
  static inline int32_t GetBuildPrefabSpawnGUIDDictionaryIndex(ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* dictIndices, System_String* fullname) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17CAB30))(dictIndices, fullname);
  }
  static inline System_String* GetNameFromValue(System_String* text) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17CC320))(text);
  }
  static inline int32_t GetIndexFromValue(System_String* text) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17CC440))(text);
  }
  static inline System_String* GetNewKeyFromNameAndIndex(System_String* text, int32_t index) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17CC570))(text, index);
  }
  static inline void DeserializeAll(System_String* serialized) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17CC630))(serialized);
  }
  static inline void ResetAll() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x17CC910))();
  }
  static inline System_String* SerializeAll() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x17CC9F0))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x17CCE00))();
  }
};
}