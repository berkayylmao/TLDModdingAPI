// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.DateTime.hpp"


namespace ModdingAPI::Exposed::System::Xml::XPath {
struct __XPathNavigator_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Xml::XPath::XPathNavigatorKeyComparer* comparer;
  ModdingAPI::Exposed::System::Char_array* NodeTypeLetter;
  ModdingAPI::Exposed::System::Char_array* UniqueIdTbl;
  ModdingAPI::Exposed::System::Int32_array* ContentKindMasks;
};

struct __XPathNavigator_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_XmlType;
  VirtualInvokeData _6_get_TypedValue;
  VirtualInvokeData _7_get_ValueType;
  VirtualInvokeData _8_get_ValueAsBoolean;
  VirtualInvokeData _9_get_ValueAsDateTime;
  VirtualInvokeData _10_get_ValueAsDouble;
  VirtualInvokeData _11_get_ValueAsInt;
  VirtualInvokeData _12_get_ValueAsLong;
  VirtualInvokeData _13_ValueAs;
  VirtualInvokeData _14_ValueAs;
  VirtualInvokeData _15_System_ICloneable_Clone;
  VirtualInvokeData _20_LookupNamespace;
  VirtualInvokeData _21_LookupPrefix;
  VirtualInvokeData _22_GetNamespacesInScope;
  VirtualInvokeData _28_get_UnderlyingObject;
  VirtualInvokeData _29_MoveToNamespace;
  VirtualInvokeData _34_get_SchemaInfo;
  VirtualInvokeData _65535__ctor;
};

struct __XPathNavigator_Il2CppClass {
  Il2CppClass_1 _1;
  __XPathNavigator_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __XPathNavigator_Il2CppVtbl vtbl;
};

class XPathNavigator {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C87870;
  static inline    XPathNavigator* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C64F08;
  static inline    __XPathNavigator_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline XPathNavigator* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (XPathNavigator**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __XPathNavigator_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__XPathNavigator_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __XPathNavigator_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member methods:
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B92C0))(this);
  }
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaType* get_XmlType() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaType*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B92E0))(this);
  }
  Il2CppObject* get_TypedValue() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B93A0))(this);
  }
  ModdingAPI::Exposed::System::Type* get_ValueType() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B95C0))(this);
  }
  bool get_ValueAsBoolean() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B96D0))(this);
  }
  ModdingAPI::Exposed::System::DateTime get_ValueAsDateTime() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B98E0))(this);
  }
  double get_ValueAsDouble() {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B9AF0))(this);
  }
  int32_t get_ValueAsInt() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B9D00))(this);
  }
  int64_t get_ValueAsLong() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B9F10))(this);
  }
  Il2CppObject* ValueAs(ModdingAPI::Exposed::System::Type* returnType, ModdingAPI::Exposed::System::Xml::IXmlNamespaceResolver* nsResolver) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*, ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Xml::IXmlNamespaceResolver*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9BA120))(this, returnType, nsResolver);
  }
  Il2CppObject* System::ICloneable::Clone() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9BA370))(this);
  }
  System_String* LookupNamespace(System_String* prefix) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9BA390))(this, prefix);
  }
  System_String* LookupPrefix(System_String* namespaceURI) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9BA580))(this, namespaceURI);
  }
  ModdingAPI::Exposed::System::Collections::Generic::IDictionary_TKey__TValue_* GetNamespacesInScope(int32_t scope) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IDictionary_TKey__TValue_*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9BA830))(this, scope);
  }
  Il2CppObject* get_UnderlyingObject() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this);
  }
  bool MoveToNamespace(System_String* name) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9BAB50))(this, name);
  }
  ModdingAPI::Exposed::System::Xml::Schema::IXmlSchemaInfo* get_SchemaInfo() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::IXmlSchemaInfo*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9BAC60))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XPath::XPathNavigator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathNavigatorKeyComparer*> comparer = __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathNavigatorKeyComparer*>(
   []() { return &GetStaticClassInstance()->pStaticFields->comparer; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*> NodeTypeLetter = __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->NodeTypeLetter; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*> UniqueIdTbl = __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->UniqueIdTbl; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*> ContentKindMasks = __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->ContentKindMasks; }
  );

  // Static methods:
  static inline bool IsText(int32_t type) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9BACE0))(type);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x9BACF0))();
  }
};
}