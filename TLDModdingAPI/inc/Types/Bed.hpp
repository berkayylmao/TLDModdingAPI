// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __Bed_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* s_StaticBeds;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* s_BedsToLinkToBodies;
  ModdingAPI::Exposed::BedSaveDataProxy* m_BedSaveDataProxy;
};

struct __Bed_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Bed_Il2CppClass {
  Il2CppClass_1 _1;
  __Bed_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Bed_Il2CppVtbl vtbl;
};

class Bed {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C5F4B8;
  static inline    __Bed_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Bed_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Bed_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Bed_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::LocalizedString* m_LocalizedDisplayName;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BedRollMesh;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BedRollPlacedMesh;
  float m_ConditionPercentGainPerHour;
  float m_WarmthBonusCelsius;
  float m_UinterruptedRestPercentGainPerHour;
  float m_PercentChanceReduceWolfAttackWhenSleeping;
  float m_PercentChanceReduceBearAttackWhenSleeping;
  System_String* m_OpenAudio;
  System_String* m_CloseAudio;
  ModdingAPI::Exposed::UnityEngine::Transform* m_BodyPlacementTransform;
  ModdingAPI::Exposed::GearItem* m_Bedroll;
  int32_t m_BedRollState;
  System_String* m_BodyGuid;
  ModdingAPI::Exposed::CarryableBody* m_Body;

  // Member methods:
  System_String* get_m_DisplayName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Bed*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E35A0))(this);
  }
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Bed*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE3000))(this);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Bed*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE3190))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Bed*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE3520))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Bed*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE3A20))(this, text);
  }
  void Degrade(float hoursUsed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Bed*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE3E10))(this, hoursUsed);
  }
  bool IsWornOut() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Bed*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE3F50))(this);
  }
  float GetWarmthBonusCelsius() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Bed*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE4020))(this);
  }
  void PlayOpenAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Bed*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE4100))(this);
  }
  void PlayCloseAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Bed*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE41F0))(this);
  }
  void SetState(int32_t state) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Bed*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE42E0))(this, state);
  }
  int32_t GetState() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Bed*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3839C0))(this);
  }
  bool IsOccupied() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Bed*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE4430))(this);
  }
  bool CanBodyBePlaced() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Bed*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE44D0))(this);
  }
  void PlaceBody(ModdingAPI::Exposed::CarryableBody* body) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Bed*, ModdingAPI::Exposed::CarryableBody*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE45B0))(this, body);
  }
  void RemoveBody(ModdingAPI::Exposed::CarryableBody* body) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Bed*, ModdingAPI::Exposed::CarryableBody*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE48E0))(this, body);
  }
  ModdingAPI::Exposed::CarryableBody* GetOccupant() {
    return reinterpret_cast<ModdingAPI::Exposed::CarryableBody*(__fastcall*)(ModdingAPI::Exposed::Bed*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319950))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Bed*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> s_StaticBeds = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_StaticBeds; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> s_BedsToLinkToBodies = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_BedsToLinkToBodies; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::BedSaveDataProxy*> m_BedSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::BedSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_BedSaveDataProxy; }
  );

  // Static methods:
  static inline System_String* SerializeAll() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE3250))();
  }
  static inline void DeserializeAll(System_String* text) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE3810))(text);
  }
  static inline void PostDeserialize() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE3B60))();
  }
  static inline ModdingAPI::Exposed::Bed* FindBedByGuid(System_String* guid) {
    return reinterpret_cast<ModdingAPI::Exposed::Bed*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE49C0))(guid);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BE4AC0))();
  }
};
}