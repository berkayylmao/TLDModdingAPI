// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed {
struct __Panel_Rest_Il2CppStaticFields {
};

struct __Panel_Rest_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Panel_Rest_Il2CppClass {
  Il2CppClass_1 _1;
  __Panel_Rest_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Panel_Rest_Il2CppVtbl vtbl;
};

class Panel_Rest {
public:
  // Il2Cpp fields:
  __Panel_Rest_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TimeWidgetPos;
  ModdingAPI::Exposed::ButtonLegendContainer* m_ButtonLegendContainer;
  int32_t m_MaxSleepHours;
  int32_t m_MinSleepHours;
  int32_t m_DefaultSleepHours;
  ModdingAPI::Exposed::UnityEngine::Transform* m_OffsetTransform;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_OffsetValueController;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_RestDurationLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_WakeTimeLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_EstimatedCaloriesBurnedLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_CurrentCaloriesLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_WarmthBonusLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_WarmthBonusValLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_RestOnlyObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_PassTimeOnlyObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_PassTimeNavButtons;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_PassTimeButtonObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_PassTimeCancelButtonObject;
  ModdingAPI::Exposed::UnityEngine::GameObject_array* m_ObjectsToDisableDuringPassTime;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_RestNavButtons;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_SleepButton;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_PickUpButton;
  ModdingAPI::Exposed::UIButton* m_DefaultSelectedButton;
  float m_AllowRestFatigueThreshold;
  ModdingAPI::Exposed::UILabel* m_TemperatureLabel;
  ModdingAPI::Exposed::UILabel* m_ConditionLabel;
  ModdingAPI::Exposed::UILabel* m_ConditionDebuffLabel;
  ModdingAPI::Exposed::UILabel* m_CalorieReservesLabel;
  ModdingAPI::Exposed::UnityEngine::Color m_NegativeTemperatureColor;
  int32_t m_SleepHours;
  int32_t m_CurrentTimeHours;
  int32_t m_CurrentTimeMinutes;
  ModdingAPI::Exposed::Bed* m_Bed;
  bool m_SkipRestoreItemInHandsOnExit;
  bool m_ShowPassTime;
  bool m_ShowPassTimeOnly;
  bool m_ShowUIDuringPassTime;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_SleepButtonOrigPos;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_SleepButtonCenteredPos;
  bool m_PassTimeIsAllowed;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ButtonIncrease;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ButtonDecrease;
  ModdingAPI::Exposed::UIPanel* m_Panel;
  ModdingAPI::Exposed::ButtonLegendConfigure_array* m_ButtonLegendConfigureArray_Rest;
  ModdingAPI::Exposed::ButtonLegendConfigure_array* m_ButtonLegendConfigureArray_PassTime;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1899800))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18998D0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1899B40))(this);
  }
  void UpdateVisuals() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189A030))(this);
  }
  void Start(ModdingAPI::Exposed::Bed* b) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*, ModdingAPI::Exposed::Bed*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189A870))(this, b);
  }
  void Enable(bool enable, bool passTimeOnly) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189A890))(this, enable, passTimeOnly);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x165DF10))(this);
  }
  void SetPassTimeAllowed(bool allowed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16F5DC0))(this, allowed);
  }
  bool GetPassTimeAllowed() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x79C740))(this);
  }
  void OnCancel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189B030))(this);
  }
  bool IsPassingTimeOnly() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189B150))(this);
  }
  void OnSelectRest() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189B220))(this);
  }
  void OnSelectPassTime() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189B380))(this);
  }
  void OnRest() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189B4E0))(this);
  }
  void OnFullRest() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnPassTime() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189B500))(this);
  }
  bool DoPassTime(float sleepHours) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189B520))(this, sleepHours);
  }
  void OnPickUp() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189B880))(this);
  }
  void OnIncreaseHours() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189BA80))(this);
  }
  void OnDecreaseHours() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189BB60))(this);
  }
  void UpdateRestDurationLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189BC40))(this);
  }
  void UpdateWakeTimeLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189BD10))(this);
  }
  void UpdateEstimatedCaloriesBurnedLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189BDC0))(this);
  }
  void UpdateCurrentCaloriesLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189C020))(this);
  }
  void UpdateFeelsLikeLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189C210))(this);
  }
  void UpdateWarmthBonusLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189C460))(this);
  }
  void DoRest(int32_t restAmount, bool wakeUpAtFullRest) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189C700))(this, restAmount, wakeUpAtFullRest);
  }
  void UpdateButtonLegend() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189CCA0))(this);
  }
  void RefreshButtonConfigure(ModdingAPI::Exposed::ButtonLegendConfigure_array* buttonLegendConfigureArray) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*, ModdingAPI::Exposed::ButtonLegendConfigure_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189D070))(this, buttonLegendConfigureArray);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x189D170))(this);
  }
};
}