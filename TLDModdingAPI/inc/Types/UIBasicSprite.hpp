// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector4.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Matrix4x4.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Rect.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color32.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Color.hpp"


namespace ModdingAPI::Exposed {
struct __UIBasicSprite_Il2CppStaticFields {
  ModdingAPI::Exposed::UnityEngine::Vector2_array* mTempPos;
  ModdingAPI::Exposed::UnityEngine::Vector2_array* mTempUVs;
};

struct __UIBasicSprite_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_isAnchoredHorizontally;
  VirtualInvokeData _5_get_isAnchoredVertically;
  VirtualInvokeData _6_get_canBeAnchored;
  VirtualInvokeData _7_get_alpha;
  VirtualInvokeData _8_set_alpha;
  VirtualInvokeData _9_CalculateFinalAlpha;
  VirtualInvokeData _10_get_localCorners;
  VirtualInvokeData _11_get_worldCorners;
  VirtualInvokeData _12_Invalidate;
  VirtualInvokeData _13_GetSides;
  VirtualInvokeData _14_OnEnable;
  VirtualInvokeData _15_OnInit;
  VirtualInvokeData _16_OnDisable;
  VirtualInvokeData _17_OnAnchor;
  VirtualInvokeData _18_SetRect;
  VirtualInvokeData _19_ParentHasChanged;
  VirtualInvokeData _20_OnStart;
  VirtualInvokeData _21_OnUpdate;
  VirtualInvokeData _22_get_localSize;
  VirtualInvokeData _23_get_drawingDimensions;
  VirtualInvokeData _24_get_material;
  VirtualInvokeData _25_set_material;
  VirtualInvokeData _26_get_mainTexture;
  VirtualInvokeData _27_set_mainTexture;
  VirtualInvokeData _28_get_shader;
  VirtualInvokeData _29_set_shader;
  VirtualInvokeData _30_MarkAsChanged;
  VirtualInvokeData _31_Awake;
  VirtualInvokeData _32_UpgradeFrom265;
  VirtualInvokeData _33_MakePixelPerfect;
  VirtualInvokeData _34_get_minWidth;
  VirtualInvokeData _35_get_minHeight;
  VirtualInvokeData _36_get_border;
  VirtualInvokeData _37_set_border;
  VirtualInvokeData _38_OnFill;
  VirtualInvokeData _39_get_type;
  VirtualInvokeData _40_set_type;
  VirtualInvokeData _41_get_premultipliedAlpha;
  VirtualInvokeData _42_get_pixelSize;
};

struct __UIBasicSprite_Il2CppClass {
  Il2CppClass_1 _1;
  __UIBasicSprite_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __UIBasicSprite_Il2CppVtbl vtbl;
};

class UIBasicSprite {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C82938;
  static inline    __UIBasicSprite_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __UIBasicSprite_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__UIBasicSprite_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __UIBasicSprite_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UIRect::AnchorPoint* leftAnchor;
  ModdingAPI::Exposed::UIRect::AnchorPoint* rightAnchor;
  ModdingAPI::Exposed::UIRect::AnchorPoint* bottomAnchor;
  ModdingAPI::Exposed::UIRect::AnchorPoint* topAnchor;
  int32_t updateAnchors;
  ModdingAPI::Exposed::UnityEngine::GameObject* mGo;
  ModdingAPI::Exposed::UnityEngine::Transform* mTrans;
  ModdingAPI::Exposed::BetterList_T_* mChildren;
  bool mChanged;
  bool mStarted;
  bool mParentFound;
  bool UIRect_mUpdateAnchors;
  int32_t UIRect_mUpdateFrame;
  bool UIRect_mAnchorsCached;
  ModdingAPI::Exposed::UIRoot* UIRect_mRoot;
  ModdingAPI::Exposed::UIRect* UIRect_mParent;
  bool UIRect_mRootSet;
  ModdingAPI::Exposed::UnityEngine::Camera* mCam;
  float finalAlpha;
  ModdingAPI::Exposed::UnityEngine::Color mColor;
  int32_t mPivot;
  int32_t mWidth;
  int32_t mHeight;
  int32_t mDepth;
  ModdingAPI::Exposed::UIWidget::OnDimensionsChanged* onChange;
  ModdingAPI::Exposed::UIWidget::OnPostFillCallback* onPostFill;
  ModdingAPI::Exposed::UIDrawCall::OnRenderCallback* mOnRender;
  bool autoResizeBoxCollider;
  bool hideIfOffScreen;
  int32_t keepAspectRatio;
  float aspectRatio;
  ModdingAPI::Exposed::UIWidget::HitCheck* hitCheck;
  ModdingAPI::Exposed::UIPanel* panel;
  ModdingAPI::Exposed::UIGeometry* geometry;
  bool fillGeometry;
  bool mPlayMode;
  ModdingAPI::Exposed::UnityEngine::Vector4 mDrawRegion;
  ModdingAPI::Exposed::UnityEngine::Matrix4x4 UIWidget_mLocalToPanel;
  bool UIWidget_mIsVisibleByAlpha;
  bool UIWidget_mIsVisibleByPanel;
  bool UIWidget_mIsInFront;
  float UIWidget_mLastAlpha;
  bool UIWidget_mMoved;
  ModdingAPI::Exposed::UIDrawCall* drawCall;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* mCorners;
  int32_t UIWidget_mAlphaFrameID;
  int32_t UIWidget_mMatrixFrame;
  ModdingAPI::Exposed::UnityEngine::Vector3 UIWidget_mOldV0;
  ModdingAPI::Exposed::UnityEngine::Vector3 UIWidget_mOldV1;
  int32_t mType;
  int32_t mFillDirection;
  float mFillAmount;
  bool mInvert;
  int32_t mFlip;
  ModdingAPI::Exposed::UnityEngine::Rect mInnerUV;
  ModdingAPI::Exposed::UnityEngine::Rect mOuterUV;
  int32_t centerType;
  int32_t leftType;
  int32_t rightType;
  int32_t bottomType;
  int32_t topType;

  // Member methods:
  int32_t get_type() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20BF500))(this);
  }
  void set_type(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20BF510))(this, value);
  }
  int32_t get_flip() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20BF530))(this);
  }
  void set_flip(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20BF540))(this, value);
  }
  int32_t get_fillDirection() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20BF560))(this);
  }
  void set_fillDirection(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20BF570))(this, value);
  }
  float get_fillAmount() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20BF590))(this);
  }
  void set_fillAmount(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20BF5A0))(this, value);
  }
  int32_t get_minWidth() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20BF680))(this);
  }
  int32_t get_minHeight() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20BF820))(this);
  }
  bool get_invert() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3D820))(this);
  }
  void set_invert(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20BF9C0))(this, value);
  }
  bool get_hasBorder() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20BF9E0))(this);
  }
  bool get_premultipliedAlpha() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this);
  }
  float get_pixelSize() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1622810))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector4 get_drawingUVs() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector4(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20BFA50))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Color32 get_drawingColor() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color32(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20BFB30))(this);
  }
  void Fill(ModdingAPI::Exposed::BetterList_T_* verts, ModdingAPI::Exposed::BetterList_T_* uvs, ModdingAPI::Exposed::BetterList_T_* cols, ModdingAPI::Exposed::UnityEngine::Rect outer, ModdingAPI::Exposed::UnityEngine::Rect inner) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::UnityEngine::Rect, ModdingAPI::Exposed::UnityEngine::Rect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20BFDC0))(this, verts, uvs, cols, outer, inner);
  }
  void SimpleFill(ModdingAPI::Exposed::BetterList_T_* verts, ModdingAPI::Exposed::BetterList_T_* uvs, ModdingAPI::Exposed::BetterList_T_* cols) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20BFED0))(this, verts, uvs, cols);
  }
  void SlicedFill(ModdingAPI::Exposed::BetterList_T_* verts, ModdingAPI::Exposed::BetterList_T_* uvs, ModdingAPI::Exposed::BetterList_T_* cols) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C0440))(this, verts, uvs, cols);
  }
  void TiledFill(ModdingAPI::Exposed::BetterList_T_* verts, ModdingAPI::Exposed::BetterList_T_* uvs, ModdingAPI::Exposed::BetterList_T_* cols) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C1670))(this, verts, uvs, cols);
  }
  void FilledFill(ModdingAPI::Exposed::BetterList_T_* verts, ModdingAPI::Exposed::BetterList_T_* uvs, ModdingAPI::Exposed::BetterList_T_* cols) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C1F10))(this, verts, uvs, cols);
  }
  void AdvancedFill(ModdingAPI::Exposed::BetterList_T_* verts, ModdingAPI::Exposed::BetterList_T_* uvs, ModdingAPI::Exposed::BetterList_T_* cols) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C3760))(this, verts, uvs, cols);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIBasicSprite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C6680))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector2_array*> mTempPos = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector2_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->mTempPos; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector2_array*> mTempUVs = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector2_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->mTempUVs; }
  );

  // Static methods:
  static inline bool RadialCut(ModdingAPI::Exposed::UnityEngine::Vector2_array* xy, ModdingAPI::Exposed::UnityEngine::Vector2_array* uv, float fill, bool invert, int32_t corner) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2_array*, ModdingAPI::Exposed::UnityEngine::Vector2_array*, float, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C56F0))(xy, uv, fill, invert, corner);
  }
  static inline void RadialCut(ModdingAPI::Exposed::UnityEngine::Vector2_array* xy, float cos, float sin, bool invert, int32_t corner) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2_array*, float, float, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C58C0))(xy, cos, sin, invert, corner);
  }
  static inline void Fill(ModdingAPI::Exposed::BetterList_T_* verts, ModdingAPI::Exposed::BetterList_T_* uvs, ModdingAPI::Exposed::BetterList_T_* cols, float v0x, float v1x, float v0y, float v1y, float u0x, float u1x, float u0y, float u1y, ModdingAPI::Exposed::UnityEngine::Color col) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*, float, float, float, float, float, float, float, float, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C6100))(verts, uvs, cols, v0x, v1x, v0y, v1y, u0x, u1x, u0y, u1y, col);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C66D0))();
  }
};
}