// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __EquipItemPopup_Il2CppStaticFields {
};

struct __EquipItemPopup_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __EquipItemPopup_Il2CppClass {
  Il2CppClass_1 _1;
  __EquipItemPopup_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __EquipItemPopup_Il2CppVtbl vtbl;
};

class EquipItemPopup {
public:
  // Il2Cpp fields:
  __EquipItemPopup_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::ButtonPrompt* m_ButtonPromptFire;
  ModdingAPI::Exposed::ButtonPrompt* m_ButtonPromptAltFire;
  ModdingAPI::Exposed::ButtonPrompt* m_ButtonPromptReload;
  ModdingAPI::Exposed::ButtonPrompt* m_ButtonPromptHolster;
  ModdingAPI::Exposed::UILabel* m_LabelDurationValue;
  ModdingAPI::Exposed::UISprite* m_SpriteFillDuration;
  float m_SpriteFillDurationOffset;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ObjectDuration;
  ModdingAPI::Exposed::UIWidget* m_EquipPopupWidget;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_EquipPopupTopLeft;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_EquipPopupBottom;
  ModdingAPI::Exposed::UIWidget* m_AmmoWidget;
  ModdingAPI::Exposed::UISprite_array* m_ListAmmoSprites;
  ModdingAPI::Exposed::UILabel* m_LabelAmmoReserve;
  ModdingAPI::Exposed::UILabel* m_LabelItemCount;
  float m_TimeToHidePopup;
  float m_TimeToHideAmmo;
  bool m_ShowingPlaceMeshIcons;
  System_String* m_FireText;
  System_String* m_AltFireText;
  bool m_ShowedAmmoCountForNoRoundsInClip;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_ButtonPromptFireOriginalPosition;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_ButtonPromptAltFireOriginalPosition;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_ButtonPromptCenteredOriginalPosition;
  bool m_HasInitialized;
  ModdingAPI::Exposed::GearItem* m_GearItem;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x194BEB0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x194BEE0))(this);
  }
  void InitializeValues() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x194CC00))(this);
  }
  bool IsHoveringInteractiveObject() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x194CEC0))(this);
  }
  void MaybeRepositionAltFireButtonPrompt(System_String* otherButtonText) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x194D020))(this, otherButtonText);
  }
  void MaybeRepositionFireButtonPrompt(System_String* otherButtonText) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x194D1E0))(this, otherButtonText);
  }
  void ShowPlaceMeshItem(ModdingAPI::Exposed::UnityEngine::GameObject* go) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x194D3A0))(this, go);
  }
  void ShowEquippedItem(ModdingAPI::Exposed::GearItem* gi) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x194D7C0))(this, gi);
  }
  void ShowGenericPopup(System_String* fireButtonStr, System_String* fireButtonAction, System_String* altFireButtonStr, System_String* altFireButtonAction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*, System_String*, System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x194E5E0))(this, fireButtonStr, fireButtonAction, altFireButtonStr, altFireButtonAction);
  }
  void ShowGenericPopupWithDefaultActions(System_String* fireButtonStr, System_String* altFireButtonStr) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x194E750))(this, fireButtonStr, altFireButtonStr);
  }
  void ShowAmmoForTime(float seconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x194E930))(this, seconds);
  }
  void HideEquipPopupWidget() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x194E9A0))(this);
  }
  void HideEquipPopup() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x194EA50))(this);
  }
  void HideAmmoPopup() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x194EB80))(this);
  }
  bool AllowedToHideAmmoPopup() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x194ECC0))(this);
  }
  void UpdateButtonStatus() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x194F200))(this);
  }
  void UpdateAmmoStatus() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x194F7E0))(this);
  }
  void ShowEquipPopupWidget() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1950850))(this);
  }
  void ShowItemIcons(System_String* fireButtonStr, System_String* altFireButtonStr, bool showAmmo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*, System_String*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1950970))(this, fireButtonStr, altFireButtonStr, showAmmo);
  }
  bool ControlModeAllowsInterface() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1950CC0))(this);
  }
  bool ShouldHideEquipPopup() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1950E40))(this);
  }
  bool ShouldHideAmmoPopup() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19510A0))(this);
  }
  void SetFillDurationAmount(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19511D0))(this, value);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EquipItemPopup*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19512C0))(this);
  }
};
}