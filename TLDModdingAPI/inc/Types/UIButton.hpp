// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed {
struct __UIButton_Il2CppStaticFields {
  ModdingAPI::Exposed::UIButton* current;
};

struct __UIButton_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_isEnabled;
  VirtualInvokeData _5_set_isEnabled;
  VirtualInvokeData _6_OnInit;
  VirtualInvokeData _7_OnEnable;
  VirtualInvokeData _8_OnDisable;
  VirtualInvokeData _9_OnHover;
  VirtualInvokeData _10_OnPress;
  VirtualInvokeData _11_OnDragOver;
  VirtualInvokeData _12_OnDragOut;
  VirtualInvokeData _13_OnSelect;
  VirtualInvokeData _14_SetState;
  VirtualInvokeData _15_OnClick;
};

struct __UIButton_Il2CppClass {
  Il2CppClass_1 _1;
  __UIButton_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __UIButton_Il2CppVtbl vtbl;
};

class UIButton {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C21380;
  static inline    __UIButton_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __UIButton_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__UIButton_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __UIButton_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::GameObject* tweenTarget;
  ModdingAPI::Exposed::UnityEngine::Color hover;
  ModdingAPI::Exposed::UnityEngine::Color pressed;
  ModdingAPI::Exposed::UnityEngine::Color disabledColor;
  float duration;
  ModdingAPI::Exposed::UnityEngine::Color mStartingColor;
  ModdingAPI::Exposed::UnityEngine::Color mDefaultColor;
  bool mInitDone;
  ModdingAPI::Exposed::UIWidget* mWidget;
  int32_t mState;
  bool dragHighlight;
  System_String* hoverSprite;
  System_String* pressedSprite;
  System_String* disabledSprite;
  ModdingAPI::Exposed::UnityEngine::Sprite* hoverSprite2D;
  ModdingAPI::Exposed::UnityEngine::Sprite* pressedSprite2D;
  ModdingAPI::Exposed::UnityEngine::Sprite* disabledSprite2D;
  bool pixelSnap;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* onClick;
  ModdingAPI::Exposed::UISprite* mSprite;
  ModdingAPI::Exposed::UI2DSprite* mSprite2D;
  System_String* mNormalSprite;
  ModdingAPI::Exposed::UnityEngine::Sprite* mNormalSprite2D;

  // Member methods:
  bool get_isEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIButton*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C6780))(this);
  }
  void set_isEnabled(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIButton*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C69A0))(this, value);
  }
  System_String* get_normalSprite() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UIButton*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C6C80))(this);
  }
  void set_normalSprite(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIButton*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C6CC0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Sprite* get_normalSprite2D() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Sprite*(__fastcall*)(ModdingAPI::Exposed::UIButton*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C6E50))(this);
  }
  void set_normalSprite2D(ModdingAPI::Exposed::UnityEngine::Sprite* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIButton*, ModdingAPI::Exposed::UnityEngine::Sprite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C6E90))(this, value);
  }
  void OnInit() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIButton*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C7020))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIButton*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C71E0))(this);
  }
  void OnDragOver() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIButton*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C73C0))(this);
  }
  void OnDragOut() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIButton*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C7610))(this);
  }
  void OnClick() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIButton*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C7860))(this);
  }
  void SetState(int32_t state, bool immediate) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIButton*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C7990))(this, state, immediate);
  }
  void SetSprite(System_String* sp) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIButton*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C7C10))(this, sp);
  }
  void SetSprite(ModdingAPI::Exposed::UnityEngine::Sprite* sp) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIButton*, ModdingAPI::Exposed::UnityEngine::Sprite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C7D60))(this, sp);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIButton*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20C7EF0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::UIButton*> current = __CppStaticProperty<ModdingAPI::Exposed::UIButton*>(
   []() { return &GetStaticClassInstance()->pStaticFields->current; }
  );
};
}