// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Touch.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector2.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Touch.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"


namespace ModdingAPI::Exposed::UnityEngine {
struct __Input_Il2CppStaticFields {
};

struct __Input_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Input_Il2CppClass {
  Il2CppClass_1 _1;
  __Input_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Input_Il2CppVtbl vtbl;
};

class Input {
public:
  // Il2Cpp fields:
  __Input_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline bool GetKeyInt(ModdingAPI::Exposed::UnityEngine::KeyCode key) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105DE80))(key);
  }
  static inline bool GetKeyUpInt(ModdingAPI::Exposed::UnityEngine::KeyCode key) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105DED0))(key);
  }
  static inline bool GetKeyDownInt(ModdingAPI::Exposed::UnityEngine::KeyCode key) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105DF20))(key);
  }
  static inline bool GetKeyDownString(System_String* name) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105DF70))(name);
  }
  static inline float GetAxis(System_String* axisName) {
    return reinterpret_cast<float(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105DFC0))(axisName);
  }
  static inline float GetAxisRaw(System_String* axisName) {
    return reinterpret_cast<float(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E010))(axisName);
  }
  static inline bool GetButton(System_String* buttonName) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E060))(buttonName);
  }
  static inline bool GetButtonDown(System_String* buttonName) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E0B0))(buttonName);
  }
  static inline bool GetButtonUp(System_String* buttonName) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E100))(buttonName);
  }
  static inline bool GetMouseButton(int32_t button) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E150))(button);
  }
  static inline bool GetMouseButtonDown(int32_t button) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E1A0))(button);
  }
  static inline bool GetMouseButtonUp(int32_t button) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E1F0))(button);
  }
  static inline void ResetInputAxes() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E240))();
  }
  static inline ModdingAPI::Exposed::System::String_array* GetJoystickNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E290))();
  }
  static inline ModdingAPI::Exposed::UnityEngine::Touch GetTouch(int32_t index) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Touch(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E2E0))(index);
  }
  static inline bool GetKey(ModdingAPI::Exposed::UnityEngine::KeyCode key) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105DE80))(key);
  }
  static inline bool GetKeyUp(ModdingAPI::Exposed::UnityEngine::KeyCode key) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105DED0))(key);
  }
  static inline bool GetKeyDown(ModdingAPI::Exposed::UnityEngine::KeyCode key) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105DF20))(key);
  }
  static inline bool GetKeyDown(System_String* name) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105DF70))(name);
  }
  static inline bool get_simulateMouseWithTouches() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x9AA040))();
  }
  static inline void set_simulateMouseWithTouches(bool value) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E3A0))(value);
  }
  static inline bool get_anyKeyDown() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E3F0))();
  }
  static inline System_String* get_inputString() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E440))();
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 get_mousePosition() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E490))();
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 get_mouseScrollDelta() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E510))();
  }
  static inline int32_t get_imeCompositionMode() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD1D70))();
  }
  static inline void set_imeCompositionMode(int32_t value) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E570))(value);
  }
  static inline System_String* get_compositionString() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD1D20))();
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 get_compositionCursorPos() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E5C0))();
  }
  static inline void set_compositionCursorPos(ModdingAPI::Exposed::UnityEngine::Vector2 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E620))(value);
  }
  static inline bool get_mousePresent() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD1ED0))();
  }
  static inline int32_t get_touchCount() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x9A9FE0))();
  }
  static inline bool get_touchPressureSupported() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E680))();
  }
  static inline bool get_touchSupported() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD2080))();
  }
  static inline bool get_multiTouchEnabled() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x9AA0E0))();
  }
  static inline void set_multiTouchEnabled(bool value) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E6D0))(value);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 get_acceleration() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E720))();
  }
  static inline ModdingAPI::Exposed::UnityEngine::Touch_array* get_touches() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Touch_array*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E7A0))();
  }
  static inline void GetTouch_Injected(int32_t index, ModdingAPI::Exposed::UnityEngine::Touch ret) {
    reinterpret_cast<void(__fastcall*)(int32_t, ModdingAPI::Exposed::UnityEngine::Touch)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E970))(index, ret);
  }
  static inline void get_mousePosition_Injected(ModdingAPI::Exposed::UnityEngine::Vector3 ret) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105E9D0))(ret);
  }
  static inline void get_mouseScrollDelta_Injected(ModdingAPI::Exposed::UnityEngine::Vector2 ret) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105EA20))(ret);
  }
  static inline void get_compositionCursorPos_Injected(ModdingAPI::Exposed::UnityEngine::Vector2 ret) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105EA70))(ret);
  }
  static inline void set_compositionCursorPos_Injected(ModdingAPI::Exposed::UnityEngine::Vector2 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105EAC0))(value);
  }
  static inline void get_acceleration_Injected(ModdingAPI::Exposed::UnityEngine::Vector3 ret) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x105EB10))(ret);
  }
};
}