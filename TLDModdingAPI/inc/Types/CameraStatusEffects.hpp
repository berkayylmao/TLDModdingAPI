// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed {
struct __CameraStatusEffects_Il2CppStaticFields {
};

struct __CameraStatusEffects_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __CameraStatusEffects_Il2CppClass {
  Il2CppClass_1 _1;
  __CameraStatusEffects_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CameraStatusEffects_Il2CppVtbl vtbl;
};

class CameraStatusEffects {
public:
  // Il2Cpp fields:
  __CameraStatusEffects_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool m_LowConditionBlurOverride;
  float m_LowConditionBlurValue;
  float m_LowConditionVignetteScalar;
  float m_LowConditionChromaticAberrationScalar;
  float m_PainAmount;
  float m_PainColorGradingBlend;
  bool m_TriggerPainPulse;
  float m_PainTarget;
  float m_StimAmount;
  float m_StimChromaticAberration;
  float m_StimColorGradingBlend;
  bool m_TriggerStimPulse;
  float m_StimTarget;
  float m_BoostEffectAmount;
  float m_BoostEffectChromaticAberration;
  float m_BoostEffectVignetteIntensity;
  ModdingAPI::Exposed::UnityEngine::Color m_BoostEffectVignetteColor;
  float m_BoostEffectColorGradingBlend;
  bool m_TriggerBoostEffectPulse;
  float m_BoostEffectTarget;
  float m_HeadacheAmount;
  float m_HeadacheAmountSin;
  float m_HeadacheSinSpeed;
  float m_HeadacheChromaticAberration;
  float m_HeadacheVignetteIntensity;
  ModdingAPI::Exposed::UnityEngine::Color m_HeadacheVignetteColor;
  float m_HeadacheColorGradingBlend;
  bool m_TriggerHeadachePulse;
  float m_HeadacheTarget;
  float m_SprainAmount;
  float m_SprainAmountSin;
  float m_SprainSinSpeed;
  float m_SprainVignetteIntensity;
  ModdingAPI::Exposed::UnityEngine::Color m_SprainVignetteColor;
  bool m_TriggerSprainPulse;
  float m_SprainTarget;
  float m_ElectrocutionAmount;
  float m_ElectrocutionColorGradingBlend;
  ModdingAPI::Exposed::UnityEngine::Light* m_ElectrocutionLight;
  float m_ElectrocutionChromaticAberration;
  float m_ElectrocutionTarget;
  bool m_TriggerElectrocutionPulse;
  float m_FlickeringElectrocutionAmount;
  float m_WaterAmount;
  bool m_TriggerWaterPulse;
  float m_WaterTarget;
  float m_AimingAmount;
  bool m_IsAiming;
  float m_AimingTarget;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGrading* m_NewColorGrading;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraStatusEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B75BE0))(this);
  }
  void PainPulse(float newPain) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraStatusEffects*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B75C90))(this, newPain);
  }
  void StimPulse(float newStim) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraStatusEffects*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B75D60))(this, newStim);
  }
  void BoostEffectPulse(float newBoostEffect) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraStatusEffects*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B75E30))(this, newBoostEffect);
  }
  void HeadachePulse(float newHeadache) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraStatusEffects*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B75F00))(this, newHeadache);
  }
  void ElectrocutionPulse(float newElectrocution) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraStatusEffects*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B75FD0))(this, newElectrocution);
  }
  void WaterPulse(float newWater) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraStatusEffects*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B760A0))(this, newWater);
  }
  void SprainPulse(float newSprain) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraStatusEffects*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B76170))(this, newSprain);
  }
  void StartAiming() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraStatusEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B76240))(this);
  }
  void StopAiming() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraStatusEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B76250))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraStatusEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B76260))(this);
  }
  void UpdateImage() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraStatusEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B775E0))(this);
  }
  void ResetEffects() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraStatusEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B77A50))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraStatusEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B77AA0))(this);
  }
};
}