// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::UnityPluginLog {
struct __PluginLogManager_Il2CppStaticFields {
  ModdingAPI::Exposed::UnityPluginLog::PluginLogManager::LogCallback* OnLog;
};

struct __PluginLogManager_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __PluginLogManager_Il2CppClass {
  Il2CppClass_1 _1;
  __PluginLogManager_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __PluginLogManager_Il2CppVtbl vtbl;
};

class PluginLogManager {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C493C8;
  static inline    __PluginLogManager_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __PluginLogManager_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__PluginLogManager_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __PluginLogManager_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityPluginLog::PluginLogManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityPluginLog::PluginLogManager::LogCallback*> OnLog = __CppStaticProperty<ModdingAPI::Exposed::UnityPluginLog::PluginLogManager::LogCallback*>(
   []() { return &GetStaticClassInstance()->pStaticFields->OnLog; }
  );

  // Static methods:
  static inline void add_OnLog(ModdingAPI::Exposed::UnityPluginLog::PluginLogManager::LogCallback* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityPluginLog::PluginLogManager::LogCallback*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E22A90))(value);
  }
  static inline void remove_OnLog(ModdingAPI::Exposed::UnityPluginLog::PluginLogManager::LogCallback* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityPluginLog::PluginLogManager::LogCallback*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E22B90))(value);
  }
  static inline void Create(System_String* logPath) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E22C90))(logPath);
  }
  static inline System_String* ResolveSystemMessage(int32_t hresult) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E22FA0))(hresult);
  }
  static inline void SetLogVerbosity(int32_t target, uint32_t verbosity) {
    reinterpret_cast<void(__fastcall*)(int32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E231C0))(target, verbosity);
  }
  static inline void SetLogChannels(int32_t target, int32_t channels) {
    reinterpret_cast<void(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E23260))(target, channels);
  }
  static inline int32_t GetLogVerbosity(int32_t target) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E23300))(target);
  }
  static inline int32_t GetLogChannels(int32_t target) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E233A0))(target);
  }
  static inline void SetLogPath(System_String* path) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E23440))(path);
  }
  static inline void LogException(System_String* module, uint32_t hresult, System_String* message, System_String* fileAndLine) {
    reinterpret_cast<void(__fastcall*)(System_String*, uint32_t, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E234E0))(module, hresult, message, fileAndLine);
  }
  static inline void LogError(System_String* module, System_String* message, System_String* fileAndLine) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E234F0))(module, message, fileAndLine);
  }
  static inline void Log(System_String* module, System_String* message, System_String* fileAndLine) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E23500))(module, message, fileAndLine);
  }
  static inline void Trace(System_String* module, System_String* message, System_String* fileAndLine) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E23510))(module, message, fileAndLine);
  }
  static inline void LogException(uint32_t hresult, System_String* message) {
    reinterpret_cast<void(__fastcall*)(uint32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E23520))(hresult, message);
  }
  static inline void LogError(System_String* message) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E235C0))(message);
  }
  static inline void Log(System_String* message) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E23650))(message);
  }
  static inline void Trace(System_String* message) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E236E0))(message);
  }
  static inline void GetMetadata(int32_t stackDepth, System_String* fileAndLine, System_String* method, System_String* module) {
    reinterpret_cast<void(__fastcall*)(int32_t, System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E23770))(stackDepth, fileAndLine, method, module);
  }
  static inline void PluginLogThunk(int32_t channel, System_String* message) {
    reinterpret_cast<void(__fastcall*)(int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E23820))(channel, message);
  }
};
}