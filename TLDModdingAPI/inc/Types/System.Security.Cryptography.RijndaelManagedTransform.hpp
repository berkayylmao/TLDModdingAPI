// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Security::Cryptography {
struct __RijndaelManagedTransform_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Byte_array* s_Sbox;
  ModdingAPI::Exposed::System::Int32_array* s_Rcon;
  ModdingAPI::Exposed::System::Int32_array* s_T;
  ModdingAPI::Exposed::System::Int32_array* s_TF;
  ModdingAPI::Exposed::System::Int32_array* s_iT;
  ModdingAPI::Exposed::System::Int32_array* s_iTF;
};

struct __RijndaelManagedTransform_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_InputBlockSize;
  VirtualInvokeData _5_get_OutputBlockSize;
  VirtualInvokeData _6_get_CanTransformMultipleBlocks;
  VirtualInvokeData _7_TransformBlock;
  VirtualInvokeData _8_TransformFinalBlock;
  VirtualInvokeData _9_Dispose;
};

struct __RijndaelManagedTransform_Il2CppClass {
  Il2CppClass_1 _1;
  __RijndaelManagedTransform_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __RijndaelManagedTransform_Il2CppVtbl vtbl;
};

class RijndaelManagedTransform {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C6A240;
  static inline    __RijndaelManagedTransform_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __RijndaelManagedTransform_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__RijndaelManagedTransform_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __RijndaelManagedTransform_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t m_cipherMode;
  int32_t m_paddingValue;
  int32_t m_transformMode;
  int32_t m_blockSizeBits;
  int32_t m_blockSizeBytes;
  int32_t m_inputBlockSize;
  int32_t m_outputBlockSize;
  ModdingAPI::Exposed::System::Int32_array* m_encryptKeyExpansion;
  ModdingAPI::Exposed::System::Int32_array* m_decryptKeyExpansion;
  int32_t m_Nr;
  int32_t m_Nb;
  int32_t m_Nk;
  ModdingAPI::Exposed::System::Int32_array* m_encryptindex;
  ModdingAPI::Exposed::System::Int32_array* m_decryptindex;
  ModdingAPI::Exposed::System::Int32_array* m_IV;
  ModdingAPI::Exposed::System::Int32_array* m_lastBlockBuffer;
  ModdingAPI::Exposed::System::Byte_array* m_depadBuffer;
  ModdingAPI::Exposed::System::Byte_array* m_shiftRegister;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Byte_array* rgbKey, int32_t mode, ModdingAPI::Exposed::System::Byte_array* rgbIV, int32_t blockSize, int32_t feedbackSize, int32_t PaddingValue, int32_t transformMode) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::RijndaelManagedTransform*, ModdingAPI::Exposed::System::Byte_array*, int32_t, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDE36A0))(this, rgbKey, mode, rgbIV, blockSize, feedbackSize, PaddingValue, transformMode);
  }
  void Dispose() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::RijndaelManagedTransform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDE3D90))(this);
  }
  void Dispose(bool disposing) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::RijndaelManagedTransform*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDE3E50))(this, disposing);
  }
  int32_t get_InputBlockSize() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::RijndaelManagedTransform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x37AAF0))(this);
  }
  int32_t get_OutputBlockSize() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::RijndaelManagedTransform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36F810))(this);
  }
  bool get_CanTransformMultipleBlocks() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::RijndaelManagedTransform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x403F70))(this);
  }
  int32_t TransformBlock(ModdingAPI::Exposed::System::Byte_array* inputBuffer, int32_t inputOffset, int32_t inputCount, ModdingAPI::Exposed::System::Byte_array* outputBuffer, int32_t outputOffset) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::RijndaelManagedTransform*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, ModdingAPI::Exposed::System::Byte_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDE3F20))(this, inputBuffer, inputOffset, inputCount, outputBuffer, outputOffset);
  }
  ModdingAPI::Exposed::System::Byte_array* TransformFinalBlock(ModdingAPI::Exposed::System::Byte_array* inputBuffer, int32_t inputOffset, int32_t inputCount) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::RijndaelManagedTransform*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDE42C0))(this, inputBuffer, inputOffset, inputCount);
  }
  void Reset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::RijndaelManagedTransform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDE4600))(this);
  }
  int32_t EncryptData(ModdingAPI::Exposed::System::Byte_array* inputBuffer, int32_t inputOffset, int32_t inputCount, ModdingAPI::Exposed::System::Byte_array* outputBuffer, int32_t outputOffset, int32_t paddingMode, bool fLast) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::RijndaelManagedTransform*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDE4670))(this, inputBuffer, inputOffset, inputCount, outputBuffer, outputOffset, paddingMode, fLast);
  }
  int32_t DecryptData(ModdingAPI::Exposed::System::Byte_array* inputBuffer, int32_t inputOffset, int32_t inputCount, ModdingAPI::Exposed::System::Byte_array* outputBuffer, int32_t outputOffset, int32_t paddingMode, bool fLast) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::RijndaelManagedTransform*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDE5590))(this, inputBuffer, inputOffset, inputCount, outputBuffer, outputOffset, paddingMode, fLast);
  }
  void Enc(int32_t* encryptindex, int32_t* encryptKeyExpansion, int32_t* T, int32_t* TF, int32_t* work, int32_t* temp) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::RijndaelManagedTransform*, int32_t*, int32_t*, int32_t*, int32_t*, int32_t*, int32_t*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDE65C0))(this, encryptindex, encryptKeyExpansion, T, TF, work, temp);
  }
  void Dec(int32_t* decryptindex, int32_t* decryptKeyExpansion, int32_t* iT, int32_t* iTF, int32_t* work, int32_t* temp) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::RijndaelManagedTransform*, int32_t*, int32_t*, int32_t*, int32_t*, int32_t*, int32_t*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDE67C0))(this, decryptindex, decryptKeyExpansion, iT, iTF, work, temp);
  }
  void GenerateKeyExpansion(ModdingAPI::Exposed::System::Byte_array* rgbKey) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::RijndaelManagedTransform*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDE6A00))(this, rgbKey);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*> s_Sbox = __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_Sbox; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*> s_Rcon = __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_Rcon; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*> s_T = __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_T; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*> s_TF = __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_TF; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*> s_iT = __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_iT; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*> s_iTF = __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_iTF; }
  );

  // Static methods:
  static inline int32_t rot1(int32_t val) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDE71C0))(val);
  }
  static inline int32_t rot2(int32_t val) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDE71D0))(val);
  }
  static inline int32_t rot3(int32_t val) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDE71E0))(val);
  }
  static inline int32_t SubWord(int32_t a) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDE71F0))(a);
  }
  static inline int32_t MulX(int32_t x) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDE7380))(x);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xDE73B0))();
  }
};
}