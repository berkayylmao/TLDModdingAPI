// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Newtonsoft::Json::Converters {
struct __XmlNodeConverter_Il2CppStaticFields {
};

struct __XmlNodeConverter_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_WriteJson;
  VirtualInvokeData _5_ReadJson;
  VirtualInvokeData _6_CanConvert;
  VirtualInvokeData _7_get_CanRead;
  VirtualInvokeData _8_get_CanWrite;
};

struct __XmlNodeConverter_Il2CppClass {
  Il2CppClass_1 _1;
  __XmlNodeConverter_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __XmlNodeConverter_Il2CppVtbl vtbl;
};

class XmlNodeConverter {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C91EB0;
  static inline    __XmlNodeConverter_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __XmlNodeConverter_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__XmlNodeConverter_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __XmlNodeConverter_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  System_String* _DeserializeRootElementName_k__BackingField;
  bool _WriteArrayAttribute_k__BackingField;
  bool _OmitRootObject_k__BackingField;

  // Member methods:
  System_String* get_DeserializeRootElementName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  bool get_WriteArrayAttribute() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x318510))(this);
  }
  bool get_OmitRootObject() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x580F70))(this);
  }
  void WriteJson(ModdingAPI::Exposed::Newtonsoft::Json::JsonWriter* writer, Il2CppObject* value, ModdingAPI::Exposed::Newtonsoft::Json::JsonSerializer* serializer) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::Newtonsoft::Json::JsonWriter*, Il2CppObject*, ModdingAPI::Exposed::Newtonsoft::Json::JsonSerializer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9DFA80))(this, writer, value, serializer);
  }
  ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode* WrapXml(Il2CppObject* value) {
    return reinterpret_cast<ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode*(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9DFD40))(this, value);
  }
  void PushParentNamespaces(ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode* node, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager* manager) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode*, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9DFF10))(this, node, manager);
  }
  System_String* ResolveFullName(ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode* node, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager* manager) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode*, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E0530))(this, node, manager);
  }
  System_String* GetPropertyName(ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode* node, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager* manager) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode*, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E0750))(this, node, manager);
  }
  bool IsArray(ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode* node) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E0A90))(this, node);
  }
  void SerializeGroupedNodes(ModdingAPI::Exposed::Newtonsoft::Json::JsonWriter* writer, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode* node, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager* manager, bool writePropertyName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::Newtonsoft::Json::JsonWriter*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode*, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E0D20))(this, writer, node, manager, writePropertyName);
  }
  void SerializeNode(ModdingAPI::Exposed::Newtonsoft::Json::JsonWriter* writer, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode* node, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager* manager, bool writePropertyName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::Newtonsoft::Json::JsonWriter*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode*, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E1350))(this, writer, node, manager, writePropertyName);
  }
  Il2CppObject* ReadJson(ModdingAPI::Exposed::Newtonsoft::Json::JsonReader* reader, ModdingAPI::Exposed::System::Type* objectType, Il2CppObject* existingValue, ModdingAPI::Exposed::Newtonsoft::Json::JsonSerializer* serializer) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::Newtonsoft::Json::JsonReader*, ModdingAPI::Exposed::System::Type*, Il2CppObject*, ModdingAPI::Exposed::Newtonsoft::Json::JsonSerializer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E2260))(this, reader, objectType, existingValue, serializer);
  }
  void DeserializeValue(ModdingAPI::Exposed::Newtonsoft::Json::JsonReader* reader, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument* document, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager* manager, System_String* propertyName, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode* currentNode) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::Newtonsoft::Json::JsonReader*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument*, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager*, System_String*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E2C00))(this, reader, document, manager, propertyName, currentNode);
  }
  void ReadElement(ModdingAPI::Exposed::Newtonsoft::Json::JsonReader* reader, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument* document, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode* currentNode, System_String* propertyName, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager* manager) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::Newtonsoft::Json::JsonReader*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode*, System_String*, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E3160))(this, reader, document, currentNode, propertyName, manager);
  }
  void CreateElement(ModdingAPI::Exposed::Newtonsoft::Json::JsonReader* reader, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument* document, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode* currentNode, System_String* elementName, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager* manager, System_String* elementPrefix, ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* attributeNameValues) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::Newtonsoft::Json::JsonReader*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode*, System_String*, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager*, System_String*, ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E34B0))(this, reader, document, currentNode, elementName, manager, elementPrefix, attributeNameValues);
  }
  System_String* ConvertTokenToXmlValue(ModdingAPI::Exposed::Newtonsoft::Json::JsonReader* reader) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::Newtonsoft::Json::JsonReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E3B90))(this, reader);
  }
  void ReadArrayElements(ModdingAPI::Exposed::Newtonsoft::Json::JsonReader* reader, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument* document, System_String* propertyName, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode* currentNode, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager* manager) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::Newtonsoft::Json::JsonReader*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument*, System_String*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode*, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E4350))(this, reader, document, propertyName, currentNode, manager);
  }
  void AddJsonArrayAttribute(ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlElement* element, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument* document) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlElement*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E4650))(this, element, document);
  }
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* ReadAttributeElements(ModdingAPI::Exposed::Newtonsoft::Json::JsonReader* reader, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager* manager) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::Newtonsoft::Json::JsonReader*, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E47D0))(this, reader, manager);
  }
  void CreateInstruction(ModdingAPI::Exposed::Newtonsoft::Json::JsonReader* reader, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument* document, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode* currentNode, System_String* propertyName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::Newtonsoft::Json::JsonReader*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E4F40))(this, reader, document, currentNode, propertyName);
  }
  void CreateDocumentType(ModdingAPI::Exposed::Newtonsoft::Json::JsonReader* reader, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument* document, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode* currentNode) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::Newtonsoft::Json::JsonReader*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E5380))(this, reader, document, currentNode);
  }
  ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlElement* CreateElement(System_String* elementName, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument* document, System_String* elementPrefix, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager* manager) {
    return reinterpret_cast<ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlElement*(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, System_String*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument*, System_String*, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E57E0))(this, elementName, document, elementPrefix, manager);
  }
  void DeserializeNode(ModdingAPI::Exposed::Newtonsoft::Json::JsonReader* reader, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument* document, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager* manager, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode* currentNode) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::Newtonsoft::Json::JsonReader*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument*, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E5950))(this, reader, document, manager, currentNode);
  }
  bool IsNamespaceAttribute(System_String* attributeName, System_String* prefix) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E6150))(this, attributeName, prefix);
  }
  bool ValueAttributes(ModdingAPI::Exposed::System::Collections::Generic::List_T_* c) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E6310))(this, c);
  }
  bool CanConvert(ModdingAPI::Exposed::System::Type* valueType) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E64D0))(this, valueType);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::XmlNodeConverter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static methods:
  static inline bool AllSameName(ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode* node) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E2060))(node);
  }
  static inline void AddAttribute(ModdingAPI::Exposed::Newtonsoft::Json::JsonReader* reader, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument* document, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode* currentNode, System_String* attributeName, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager* manager, System_String* attributePrefix) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::JsonReader*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlDocument*, ModdingAPI::Exposed::Newtonsoft::Json::Converters::IXmlNode*, System_String*, ModdingAPI::Exposed::System::Xml::XmlNamespaceManager*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E3990))(reader, document, currentNode, attributeName, manager, attributePrefix);
  }
};
}