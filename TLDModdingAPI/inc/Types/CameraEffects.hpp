// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __CameraEffects_Il2CppStaticFields {
};

struct __CameraEffects_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __CameraEffects_Il2CppClass {
  Il2CppClass_1 _1;
  __CameraEffects_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CameraEffects_Il2CppVtbl vtbl;
};

class CameraEffects {
public:
  // Il2Cpp fields:
  __CameraEffects_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::CameraEffects::SSAOParams_array* m_SSAO_Configurations;
  float m_InteriorContrastEnhanceIntensity;
  float m_IndoorVignetteIntensity;
  float m_IndoorChromaticAberration;
  float m_DefaultMatteBlend;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessVolume* m_FPSCameraPostProcessVolume;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessVolume* m_EffectCameraPostProcessVolume;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessVolume* m_WeaponCameraPostProcessVolume;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::Bloom* m_Bloom;
  float m_ColorScalar;
  float m_CurrentSaturationUnscaled;
  float m_CurrentContrastEnhanceIntensityUnscaled;
  float m_SSAO_IntensityScalar;
  int32_t m_SSAO_QualityOffset;
  int32_t m_SSAO_QualityOffsetDefault;
  ModdingAPI::Exposed::CameraEffects::SSAOParams* m_CurrentSettings;
  int32_t m_CurrentMode;
  ModdingAPI::Exposed::CameraStatusEffects* m_CameraStatusEffects;
  ModdingAPI::Exposed::UnsharpMask* m_UnsharpMask;
  ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::BlurOptimized* m_Blur;
  ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::Antialiasing_array* m_AntiAliasing;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::Vignette* m_Vignette;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ChromaticAberration* m_ChromaticAberration;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::DepthOfField* m_DepthOfField;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::AmbientOcclusion* m_AmbientOcclusion;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::AmbientOcclusion* m_AmbientOcclusionWeapon;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGrading* m_NewColorGrading;
  ModdingAPI::Exposed::MaskedBlurEffect* m_MaskedBlur;
  bool m_DOFTurnedOnThisFrame;
  bool m_DOFWaterOverridden;
  ModdingAPI::Exposed::System::Single_array* m_ColorScalars;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC7450))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC78F0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC7BE0))(this);
  }
  void SetColorScalar(int32_t source, float scalar) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC7E60))(this, source, scalar);
  }
  void ConfigureContrastEnhance(float intensity) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC7EA0))(this, intensity);
  }
  void DepthOfFieldTurnOn(float focalPoint) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC80C0))(this, focalPoint);
  }
  void DepthOfFieldTurnOn() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8190))(this);
  }
  void DepthOfFieldTurnOff(bool forceOff) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC81A0))(this, forceOff);
  }
  bool IsDepthOfFieldEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC81E0))(this);
  }
  void BlurSetSize(float blurSize) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8200))(this, blurSize);
  }
  void BlurTurnOff() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8370))(this);
  }
  void BloomEnable(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC83E0))(this, enable);
  }
  bool GetContrastEnhanceEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8400))(this);
  }
  void ContrastEnhanceEnable(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8420))(this, enable);
  }
  void VignettingEnable(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8440))(this, enable);
  }
  void AntiAliasingEnable(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8460))(this, enable);
  }
  void SetAntiAliasingMode(int32_t aaMode) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8550))(this, aaMode);
  }
  void PainPulse(float amount) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC85D0))(this, amount);
  }
  void StimPulse(float amount) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC85F0))(this, amount);
  }
  void BoostEffectPulse(float amount) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8610))(this, amount);
  }
  void HeadachePulse(float amount) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8630))(this, amount);
  }
  void ElectrocutionPulse(float amount) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8650))(this, amount);
  }
  void WaterPulse(float amount) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8670))(this, amount);
  }
  void SprainPulse(float amount) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8690))(this, amount);
  }
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::Vignette* Vignette() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::Vignette*(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319850))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ChromaticAberration* ChromaticAberration() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ChromaticAberration*(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3BC850))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGrading* ColorGrading() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGrading*(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F1BE0))(this);
  }
  void Configure() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC86B0))(this);
  }
  void ConfigureForInterior() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC87B0))(this);
  }
  void ConfigureForExterior() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC87F0))(this);
  }
  void SetSSAOQualityOffset(int32_t offset) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8810))(this, offset);
  }
  void DisableSSAO() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8820))(this);
  }
  bool IsSSAOEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8840))(this);
  }
  void EnableSSAO() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8850))(this);
  }
  void RefreshSSAOSettings() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8870))(this);
  }
  void UpdateEffectParameters() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC8890))(this);
  }
  void AdaptSSAOByViewAngle() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC9590))(this);
  }
  void ConfigureSSAO(int32_t mode) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC97F0))(this, mode);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraEffects*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EC9AD0))(this);
  }
};
}