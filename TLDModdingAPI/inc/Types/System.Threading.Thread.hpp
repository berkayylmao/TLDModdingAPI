// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Threading.ExecutionContext.Reader.hpp"
#include "ModdingAPI::Exposed::System::Threading::AsyncLocalValueChangedArgs_T_.hpp"


namespace ModdingAPI::Exposed::System::Threading {
struct __Thread_Il2CppStaticFields {
  ModdingAPI::Exposed::System::LocalDataStoreMgr* s_LocalDataStoreMgr;
  ModdingAPI::Exposed::System::LocalDataStoreHolder* s_LocalDataStore;
  ModdingAPI::Exposed::System::Globalization::CultureInfo* m_CurrentCulture;
  ModdingAPI::Exposed::System::Globalization::CultureInfo* m_CurrentUICulture;
  ModdingAPI::Exposed::System::Threading::AsyncLocal_T_* s_asyncLocalCurrentCulture;
  ModdingAPI::Exposed::System::Threading::AsyncLocal_T_* s_asyncLocalCurrentUICulture;
  ModdingAPI::Exposed::System::Threading::Thread* current_thread;
};

struct __Thread_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Thread_Il2CppClass {
  Il2CppClass_1 _1;
  __Thread_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Thread_Il2CppVtbl vtbl;
};

class Thread {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C3F4E0;
  static inline    __Thread_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Thread_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Thread_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Thread_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Threading::InternalThread* internal_thread;
  Il2CppObject* m_ThreadStartArg;
  Il2CppObject* pending_exception;
  ModdingAPI::Exposed::System::Security::Principal::IPrincipal* principal;
  int32_t principal_version;
  ModdingAPI::Exposed::System::MulticastDelegate* m_Delegate;
  ModdingAPI::Exposed::System::Threading::ExecutionContext* m_ExecutionContext;
  bool m_ExecutionContextBelongsToOuterScope;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Threading::ThreadStart* start) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, ModdingAPI::Exposed::System::Threading::ThreadStart*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD994E0))(this, start);
  }
  void ::ctor(ModdingAPI::Exposed::System::Threading::ParameterizedThreadStart* start) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, ModdingAPI::Exposed::System::Threading::ParameterizedThreadStart*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD995B0))(this, start);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD99680))(this);
  }
  void Start(Il2CppObject* parameter) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD996A0))(this, parameter);
  }
  void Start(int32_t stackMark) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD997A0))(this, stackMark);
  }
  ModdingAPI::Exposed::System::Threading::ExecutionContext::Reader GetExecutionContextReader() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::ExecutionContext::Reader(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319960))(this);
  }
  bool get_ExecutionContextBelongsToCurrentScope() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD999B0))(this);
  }
  void set_ExecutionContextBelongsToCurrentScope(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD999C0))(this, value);
  }
  ModdingAPI::Exposed::System::Threading::ExecutionContext* GetMutableExecutionContext() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::ExecutionContext*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD999D0))(this);
  }
  void SetExecutionContext(ModdingAPI::Exposed::System::Threading::ExecutionContext* value, bool belongsToCurrentScope) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, ModdingAPI::Exposed::System::Threading::ExecutionContext*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD99B40))(this, value, belongsToCurrentScope);
  }
  void SetExecutionContext(ModdingAPI::Exposed::System::Threading::ExecutionContext::Reader value, bool belongsToCurrentScope) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, ModdingAPI::Exposed::System::Threading::ExecutionContext::Reader, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD99B40))(this, value, belongsToCurrentScope);
  }
  void set_Priority(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD99B50))(this, value);
  }
  void SetPriorityNative(int32_t priority) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD99B50))(this, priority);
  }
  bool JoinInternal(int32_t millisecondsTimeout) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD99B60))(this, millisecondsTimeout);
  }
  bool Join(int32_t millisecondsTimeout) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD99C60))(this, millisecondsTimeout);
  }
  void SetStartHelper(ModdingAPI::Exposed::System::Delegate* start, int32_t maxStackSize) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, ModdingAPI::Exposed::System::Delegate*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9A040))(this, start, maxStackSize);
  }
  ModdingAPI::Exposed::System::Globalization::CultureInfo* get_CurrentUICulture() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9A470))(this);
  }
  void set_CurrentUICulture(ModdingAPI::Exposed::System::Globalization::CultureInfo* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9A480))(this, value);
  }
  ModdingAPI::Exposed::System::Globalization::CultureInfo* GetCurrentUICultureNoAppX() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9A900))(this);
  }
  ModdingAPI::Exposed::System::Globalization::CultureInfo* get_CurrentCulture() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9AB70))(this);
  }
  void set_CurrentCulture(ModdingAPI::Exposed::System::Globalization::CultureInfo* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9AB80))(this, value);
  }
  ModdingAPI::Exposed::System::Globalization::CultureInfo* GetCurrentCultureNoAppX() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9AF30))(this);
  }
  void ConstructInternalThread() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B2E0))(this);
  }
  ModdingAPI::Exposed::System::Threading::InternalThread* get_Internal() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::InternalThread*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B2F0))(this);
  }
  intptr_t Thread_internal(ModdingAPI::Exposed::System::MulticastDelegate* start) {
    return reinterpret_cast<intptr_t(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, ModdingAPI::Exposed::System::MulticastDelegate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B490))(this, start);
  }
  void Finalize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD83680))(this);
  }
  bool get_IsThreadPoolThread() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B4A0))(this);
  }
  bool get_IsThreadPoolThreadInternal() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B4A0))(this);
  }
  bool get_IsAlive() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B4E0))(this);
  }
  void set_IsBackground(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B540))(this, value);
  }
  void set_Name(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B7C0))(this, value);
  }
  int32_t get_ThreadState() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B8F0))(this);
  }
  void Abort() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B960))(this);
  }
  void StartInternal(ModdingAPI::Exposed::System::Security::Principal::IPrincipal* principal, int32_t stackMark) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, ModdingAPI::Exposed::System::Security::Principal::IPrincipal*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B9A0))(this, principal, stackMark);
  }
  void SetStart(ModdingAPI::Exposed::System::MulticastDelegate* start, int32_t maxStackSize) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, ModdingAPI::Exposed::System::MulticastDelegate*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9BC40))(this, start, maxStackSize);
  }
  int32_t get_ManagedThreadId() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9BC90))(this);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9BC90))(this);
  }
  int32_t ValidateThreadState() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9BD90))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::LocalDataStoreMgr*> s_LocalDataStoreMgr = __CppStaticProperty<ModdingAPI::Exposed::System::LocalDataStoreMgr*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_LocalDataStoreMgr; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::LocalDataStoreHolder*> s_LocalDataStore = __CppStaticProperty<ModdingAPI::Exposed::System::LocalDataStoreHolder*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_LocalDataStore; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::CultureInfo*> m_CurrentCulture = __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::CultureInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_CurrentCulture; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::CultureInfo*> m_CurrentUICulture = __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::CultureInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_CurrentUICulture; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Threading::AsyncLocal_T_*> s_asyncLocalCurrentCulture = __CppStaticProperty<ModdingAPI::Exposed::System::Threading::AsyncLocal_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_asyncLocalCurrentCulture; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Threading::AsyncLocal_T_*> s_asyncLocalCurrentUICulture = __CppStaticProperty<ModdingAPI::Exposed::System::Threading::AsyncLocal_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_asyncLocalCurrentUICulture; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Threading::Thread*> current_thread = __CppStaticProperty<ModdingAPI::Exposed::System::Threading::Thread*>(
   []() { return &GetStaticClassInstance()->pStaticFields->current_thread; }
  );

  // Static methods:
  static inline void AsyncLocalSetCurrentCulture(ModdingAPI::Exposed::System::Threading::AsyncLocalValueChangedArgs_T_ args) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::AsyncLocalValueChangedArgs_T_)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD99360))(args);
  }
  static inline void AsyncLocalSetCurrentUICulture(ModdingAPI::Exposed::System::Threading::AsyncLocalValueChangedArgs_T_ args) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::AsyncLocalValueChangedArgs_T_)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD99420))(args);
  }
  static inline void SleepInternal(int32_t millisecondsTimeout) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD99E00))(millisecondsTimeout);
  }
  static inline void Sleep(int32_t millisecondsTimeout) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD99EC0))(millisecondsTimeout);
  }
  static inline bool YieldInternal() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9A020))();
  }
  static inline bool Yield() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9A020))();
  }
  static inline void nativeInitCultureAccessors() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B1A0))();
  }
  static inline void MemoryBarrier() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B2D0))();
  }
  static inline ModdingAPI::Exposed::System::Runtime::Remoting::Contexts::Context* get_CurrentContext() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::Contexts::Context*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x7484E0))();
  }
  static inline ModdingAPI::Exposed::System::Threading::Thread* GetCurrentThread() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Thread*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B320))();
  }
  static inline ModdingAPI::Exposed::System::Threading::Thread* get_CurrentThread() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Thread*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B350))();
  }
  static inline int32_t get_CurrentThreadId() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B430))();
  }
  static inline int32_t GetDomainID() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B460))();
  }
  static inline void SetName_internal(ModdingAPI::Exposed::System::Threading::InternalThread* thread, System_String* name) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::InternalThread*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B6A0))(thread, name);
  }
  static inline void Abort_internal(ModdingAPI::Exposed::System::Threading::InternalThread* thread, Il2CppObject* stateInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::InternalThread*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B950))(thread, stateInfo);
  }
  static inline void SpinWait_nop() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))();
  }
  static inline void SpinWait(int32_t iterations) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9B990))(iterations);
  }
  static inline void SetState(ModdingAPI::Exposed::System::Threading::InternalThread* thread, int32_t set) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::InternalThread*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9BA60))(thread, set);
  }
  static inline void ClrState(ModdingAPI::Exposed::System::Threading::InternalThread* thread, int32_t clr) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::InternalThread*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9BAB0))(thread, clr);
  }
  static inline int32_t GetState(ModdingAPI::Exposed::System::Threading::InternalThread* thread) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Threading::InternalThread*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9BB00))(thread);
  }
  static inline int32_t SystemMaxStackStize() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9BB50))();
  }
  static inline int32_t GetProcessDefaultStackSize(int32_t maxStackSize) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9BB60))(maxStackSize);
  }
  static inline void BeginCriticalRegion() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9BCD0))();
  }
  static inline void EndCriticalRegion() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD9BD30))();
  }
};
}