// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::UnityStandardAssets::ImageEffects {
struct __DepthOfFieldDeprecated_Il2CppStaticFields {
  int32_t SMOOTH_DOWNSAMPLE_PASS;
  float BOKEH_EXTRA_BLUR;
};

struct __DepthOfFieldDeprecated_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_CheckResources;
};

struct __DepthOfFieldDeprecated_Il2CppClass {
  Il2CppClass_1 _1;
  __DepthOfFieldDeprecated_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __DepthOfFieldDeprecated_Il2CppVtbl vtbl;
};

class DepthOfFieldDeprecated {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C47840;
  static inline    __DepthOfFieldDeprecated_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __DepthOfFieldDeprecated_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__DepthOfFieldDeprecated_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __DepthOfFieldDeprecated_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool supportHDRTextures;
  bool supportDX11;
  bool isSupported;
  int32_t quality;
  int32_t resolution;
  bool simpleTweakMode;
  float focalPoint;
  float smoothness;
  float focalZDistance;
  float focalZStartCurve;
  float focalZEndCurve;
  float focalStartCurve;
  float focalEndCurve;
  float focalDistance01;
  ModdingAPI::Exposed::UnityEngine::Transform* objectFocus;
  float focalSize;
  int32_t bluriness;
  float maxBlurSpread;
  float foregroundBlurExtrude;
  ModdingAPI::Exposed::UnityEngine::Shader* dofBlurShader;
  ModdingAPI::Exposed::UnityEngine::Material* dofBlurMaterial;
  ModdingAPI::Exposed::UnityEngine::Shader* dofShader;
  ModdingAPI::Exposed::UnityEngine::Material* dofMaterial;
  bool visualize;
  int32_t bokehDestination;
  float widthOverHeight;
  float oneOverBaseSize;
  bool bokeh;
  bool bokehSupport;
  ModdingAPI::Exposed::UnityEngine::Shader* bokehShader;
  ModdingAPI::Exposed::UnityEngine::Texture2D* bokehTexture;
  float bokehScale;
  float bokehIntensity;
  float bokehThresholdContrast;
  float bokehThresholdLuminance;
  int32_t bokehDownsample;
  ModdingAPI::Exposed::UnityEngine::Material* bokehMaterial;
  ModdingAPI::Exposed::UnityEngine::Camera* _camera;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* foregroundTexture;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* mediumRezWorkTexture;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* finalDefocus;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* lowRezWorkTexture;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* bokehSource;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* bokehSource2;

  // Member methods:
  void CreateMaterials() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfFieldDeprecated*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF048A0))(this);
  }
  bool CheckResources() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfFieldDeprecated*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF04A10))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfFieldDeprecated*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF04BB0))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfFieldDeprecated*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF04C40))(this);
  }
  float FocalDistance01(float worldDist) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfFieldDeprecated*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF04D70))(this, worldDist);
  }
  int32_t GetDividerBasedOnQuality() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfFieldDeprecated*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF05180))(this);
  }
  int32_t GetLowResolutionDividerBasedOnQuality(int32_t baseDivider) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfFieldDeprecated*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF051A0))(this, baseDivider);
  }
  void OnRenderImage(ModdingAPI::Exposed::UnityEngine::RenderTexture* source, ModdingAPI::Exposed::UnityEngine::RenderTexture* destination) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfFieldDeprecated*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF051C0))(this, source, destination);
  }
  void Blur(ModdingAPI::Exposed::UnityEngine::RenderTexture* from, ModdingAPI::Exposed::UnityEngine::RenderTexture* to, int32_t iterations, int32_t blurPass, float spread) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfFieldDeprecated*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, int32_t, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF05F50))(this, from, to, iterations, blurPass, spread);
  }
  void BlurFg(ModdingAPI::Exposed::UnityEngine::RenderTexture* from, ModdingAPI::Exposed::UnityEngine::RenderTexture* to, int32_t iterations, int32_t blurPass, float spread) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfFieldDeprecated*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, int32_t, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF06260))(this, from, to, iterations, blurPass, spread);
  }
  void BlurHex(ModdingAPI::Exposed::UnityEngine::RenderTexture* from, ModdingAPI::Exposed::UnityEngine::RenderTexture* to, int32_t blurPass, float spread, ModdingAPI::Exposed::UnityEngine::RenderTexture* tmp) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfFieldDeprecated*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, int32_t, float, ModdingAPI::Exposed::UnityEngine::RenderTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF06590))(this, from, to, blurPass, spread, tmp);
  }
  void Downsample(ModdingAPI::Exposed::UnityEngine::RenderTexture* from, ModdingAPI::Exposed::UnityEngine::RenderTexture* to) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfFieldDeprecated*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF06800))(this, from, to);
  }
  void AddBokeh(ModdingAPI::Exposed::UnityEngine::RenderTexture* bokehInfo, ModdingAPI::Exposed::UnityEngine::RenderTexture* tempTex, ModdingAPI::Exposed::UnityEngine::RenderTexture* finalTarget) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfFieldDeprecated*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF069C0))(this, bokehInfo, tempTex, finalTarget);
  }
  void ReleaseTextures() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfFieldDeprecated*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF07030))(this);
  }
  void AllocateTextures(bool blurForeground, ModdingAPI::Exposed::UnityEngine::RenderTexture* source, int32_t divider, int32_t lowTexDivider) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfFieldDeprecated*, bool, ModdingAPI::Exposed::UnityEngine::RenderTexture*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF073B0))(this, blurForeground, source, divider, lowTexDivider);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::DepthOfFieldDeprecated*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF07BA0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<int32_t> SMOOTH_DOWNSAMPLE_PASS = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->SMOOTH_DOWNSAMPLE_PASS; }
  );
  static inline __CppStaticProperty<float> BOKEH_EXTRA_BLUR = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->BOKEH_EXTRA_BLUR; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF07C60))();
  }
};
}