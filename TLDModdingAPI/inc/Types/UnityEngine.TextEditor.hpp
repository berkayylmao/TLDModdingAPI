// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed::UnityEngine {
struct __TextEditor_Il2CppStaticFields {
};

struct __TextEditor_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_OnCursorIndexChange;
  VirtualInvokeData _5_OnSelectIndexChange;
};

struct __TextEditor_Il2CppClass {
  Il2CppClass_1 _1;
  __TextEditor_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TextEditor_Il2CppVtbl vtbl;
};

class TextEditor {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C7FB20;
  static inline    __TextEditor_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __TextEditor_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__TextEditor_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __TextEditor_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::UnityEngine::TouchScreenKeyboard* keyboardOnScreen;
  int32_t controlID;
  ModdingAPI::Exposed::UnityEngine::GUIStyle* style;
  bool multiline;
  bool hasHorizontalCursorPos;
  bool isPasswordField;
  bool m_HasFocus;
  ModdingAPI::Exposed::UnityEngine::Vector2 scrollOffset;
  ModdingAPI::Exposed::UnityEngine::GUIContent* m_Content;
  int32_t m_CursorIndex;
  int32_t m_SelectIndex;
  bool m_RevealCursor;
  bool m_MouseDragSelectsWholeWords;
  int32_t m_DblClickInitPos;
  uint8_t m_DblClickSnap;
  bool m_bJustSelected;
  int32_t m_iAltCursorPos;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1406F00))(this);
  }
  System_String* get_text() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14070E0))(this);
  }
  int32_t get_cursorIndex() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFF7DF0))(this);
  }
  void set_cursorIndex(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1407100))(this, value);
  }
  int32_t get_selectIndex() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA4FC0))(this);
  }
  void set_selectIndex(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1407150))(this, value);
  }
  void ClearCursorPos() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14071A0))(this);
  }
  void OnFocus() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14071B0))(this);
  }
  void SelectAll() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14072E0))(this);
  }
  bool DeleteSelection() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1407390))(this);
  }
  void ReplaceSelection(System_String* replace) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1407570))(this, replace);
  }
  void Copy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1407670))(this);
  }
  bool Paste() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1407830))(this);
  }
  void OnCursorIndexChange() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnSelectIndexChange() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void ClampTextIndex(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1407AE0))(this, index);
  }
  void EnsureValidCodePointIndex(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1407BD0))(this, index);
  }
  bool IsValidCodePointIndex(int32_t index) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1407F00))(this, index);
  }
  int32_t NextCodePointIndex(int32_t index) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextEditor*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1408030))(this, index);
  }

  // Static methods:
  static inline System_String* ReplaceNewlinesWithSpaces(System_String* value) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1407750))(value);
  }
};
}