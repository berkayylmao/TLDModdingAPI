// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.Rewired.TouchInfo.hpp"

namespace ModdingAPI::Exposed::Rewired {
struct __TouchInfo_Il2CppObject {
  bool UoXkAnIJxXijBfrPZfnpCsonNFA;
  int32_t cwQBhlGWfYoAkFbltSazWKciRugt;
  ModdingAPI::Exposed::UnityEngine::Vector2 WlBTmvQZRFcmozLfcZqTsShoWUy;
  ModdingAPI::Exposed::UnityEngine::Vector2 sFhFSMhvxQxKEAkqaoiccMizohO;
  ModdingAPI::Exposed::UnityEngine::Vector2 kEgXCCsfrZJzMGbvnJyqjpYGBLA;
  ModdingAPI::Exposed::UnityEngine::Vector2 edBEMOKCsEBtBhUxFxJQWRlogzD;
  float csDQRVaxycEfLMkcuCjKYEJvvlX;
  int32_t mhtVPeINcCuofrvBGRlVqeAdSHX;
};
struct __TouchInfo_Il2CppStaticFields {
};

struct __TouchInfo_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __TouchInfo_Il2CppClass {
  Il2CppClass_1 _1;
  __TouchInfo_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TouchInfo_Il2CppVtbl vtbl;
};

class TouchInfo {
public:
  // Member fields:
  bool UoXkAnIJxXijBfrPZfnpCsonNFA;
  int32_t cwQBhlGWfYoAkFbltSazWKciRugt;
  ModdingAPI::Exposed::UnityEngine::Vector2 WlBTmvQZRFcmozLfcZqTsShoWUy;
  ModdingAPI::Exposed::UnityEngine::Vector2 sFhFSMhvxQxKEAkqaoiccMizohO;
  ModdingAPI::Exposed::UnityEngine::Vector2 kEgXCCsfrZJzMGbvnJyqjpYGBLA;
  ModdingAPI::Exposed::UnityEngine::Vector2 edBEMOKCsEBtBhUxFxJQWRlogzD;
  float csDQRVaxycEfLMkcuCjKYEJvvlX;
  int32_t mhtVPeINcCuofrvBGRlVqeAdSHX;

  // Member methods:
  bool get_isValid() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::TouchInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B020))(this);
  }
  void set_isValid(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::TouchInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B030))(this, value);
  }
  int32_t get_touchId() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::TouchInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5A20))(this);
  }
  void set_touchId(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::TouchInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE720))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_touchPos() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::Rewired::TouchInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x29930))(this);
  }
  void set_touchPos(ModdingAPI::Exposed::UnityEngine::Vector2 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::TouchInfo*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x29950))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_touchPosRaw() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::Rewired::TouchInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x29970))(this);
  }
  void set_touchPosRaw(ModdingAPI::Exposed::UnityEngine::Vector2 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::TouchInfo*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x29990))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_deltaPos() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::Rewired::TouchInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x299B0))(this);
  }
  void set_deltaPos(ModdingAPI::Exposed::UnityEngine::Vector2 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::TouchInfo*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x299D0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_deltaPosRaw() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::Rewired::TouchInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x299F0))(this);
  }
  void set_deltaPosRaw(ModdingAPI::Exposed::UnityEngine::Vector2 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::TouchInfo*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x29A10))(this, value);
  }
  float get_deltaTime() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::TouchInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xBD00))(this);
  }
  void set_deltaTime(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::TouchInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EB0))(this, value);
  }
  int32_t get_tapCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::TouchInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A6D0))(this);
  }
  void set_tapCount(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::TouchInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A6E0))(this, value);
  }
  void ::ctor(bool isValid, int32_t touchId, ModdingAPI::Exposed::UnityEngine::Vector2 touchPos, ModdingAPI::Exposed::UnityEngine::Vector2 touchPosRaw, ModdingAPI::Exposed::UnityEngine::Vector2 deltaPos, ModdingAPI::Exposed::UnityEngine::Vector2 deltaPosRaw, float deltaTime, int32_t tapCount) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::TouchInfo*, bool, int32_t, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x29A30))(this, isValid, touchId, touchPos, touchPosRaw, deltaPos, deltaPosRaw, deltaTime, tapCount);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::Rewired::TouchInfo get_Invalid() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::TouchInfo(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3E250))();
  }

};
}