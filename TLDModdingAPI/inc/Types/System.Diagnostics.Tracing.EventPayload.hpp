// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Collections.Generic.KeyValuePair_TKey__TValue_.hpp"


namespace ModdingAPI::Exposed::System::Diagnostics::Tracing {
struct __EventPayload_Il2CppStaticFields {
};

struct __EventPayload_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_Item;
  VirtualInvokeData _5_set_Item;
  VirtualInvokeData _6_get_Keys;
  VirtualInvokeData _7_get_Values;
  VirtualInvokeData _8_ContainsKey;
  VirtualInvokeData _9_Add;
  VirtualInvokeData _10_Remove;
  VirtualInvokeData _11_TryGetValue;
  VirtualInvokeData _12_get_Count;
  VirtualInvokeData _13_get_IsReadOnly;
  VirtualInvokeData _14_Add;
  VirtualInvokeData _15_Clear;
  VirtualInvokeData _16_Contains;
  VirtualInvokeData _17_CopyTo;
  VirtualInvokeData _18_Remove;
  VirtualInvokeData _19_GetEnumerator;
  VirtualInvokeData _20_System_Collections_IEnumerable_GetEnumerator;
};

struct __EventPayload_Il2CppClass {
  Il2CppClass_1 _1;
  __EventPayload_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __EventPayload_Il2CppVtbl vtbl;
};

class EventPayload {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C8B570;
  static inline    __EventPayload_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __EventPayload_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__EventPayload_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __EventPayload_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_names;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_values;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Collections::Generic::List_T_* payloadNames, ModdingAPI::Exposed::System::Collections::Generic::List_T_* payloadValues) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventPayload*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F0E70))(this, payloadNames, payloadValues);
  }
  ModdingAPI::Exposed::System::Collections::Generic::ICollection_T_* get_Keys() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::ICollection_T_*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventPayload*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::ICollection_T_* get_Values() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::ICollection_T_*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventPayload*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  Il2CppObject* get_Item(System_String* key) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventPayload*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EE680))(this, key);
  }
  void set_Item(System_String* key, Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventPayload*, System_String*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EE8D0))(this, key, value);
  }
  void Add(System_String* key, Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventPayload*, System_String*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EE920))(this, key, value);
  }
  void Add(ModdingAPI::Exposed::System::Collections::Generic::KeyValuePair_TKey__TValue_ payloadEntry) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventPayload*, ModdingAPI::Exposed::System::Collections::Generic::KeyValuePair_TKey__TValue_)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EE970))(this, payloadEntry);
  }
  void Clear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventPayload*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EE9C0))(this);
  }
  bool Contains(ModdingAPI::Exposed::System::Collections::Generic::KeyValuePair_TKey__TValue_ entry) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventPayload*, ModdingAPI::Exposed::System::Collections::Generic::KeyValuePair_TKey__TValue_)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EEA10))(this, entry);
  }
  bool ContainsKey(System_String* key) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventPayload*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EEAA0))(this, key);
  }
  int32_t get_Count() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventPayload*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EEC80))(this);
  }
  bool get_IsReadOnly() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventPayload*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x403F70))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::IEnumerator_T_* GetEnumerator() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IEnumerator_T_*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventPayload*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EED10))(this);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* System::Collections::IEnumerable::GetEnumerator() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventPayload*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EEE60))(this);
  }
  void CopyTo(ModdingAPI::Exposed::System::Collections::Generic::KeyValuePair_TKey__TValue__array* payloadEntries, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventPayload*, ModdingAPI::Exposed::System::Collections::Generic::KeyValuePair_TKey__TValue__array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EEEF0))(this, payloadEntries, count);
  }
  bool Remove(System_String* key) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventPayload*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EEF40))(this, key);
  }
  bool Remove(ModdingAPI::Exposed::System::Collections::Generic::KeyValuePair_TKey__TValue_ entry) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventPayload*, ModdingAPI::Exposed::System::Collections::Generic::KeyValuePair_TKey__TValue_)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EEF90))(this, entry);
  }
  bool TryGetValue(System_String* key, Il2CppObject* value) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventPayload*, System_String*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EEFE0))(this, key, value);
  }
};
}