// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::TMPro {
struct __TMPro_EventManager_Il2CppStaticFields {
  ModdingAPI::Exposed::TMPro::FastAction_A__B_* COMPUTE_DT_EVENT;
  ModdingAPI::Exposed::TMPro::FastAction_A__B_* MATERIAL_PROPERTY_EVENT;
  ModdingAPI::Exposed::TMPro::FastAction_A__B_* FONT_PROPERTY_EVENT;
  ModdingAPI::Exposed::TMPro::FastAction_A__B_* SPRITE_ASSET_PROPERTY_EVENT;
  ModdingAPI::Exposed::TMPro::FastAction_A__B_* TEXTMESHPRO_PROPERTY_EVENT;
  ModdingAPI::Exposed::TMPro::FastAction_A__B__C_* DRAG_AND_DROP_MATERIAL_EVENT;
  ModdingAPI::Exposed::TMPro::FastAction_A_* TEXT_STYLE_PROPERTY_EVENT;
  ModdingAPI::Exposed::TMPro::FastAction_A_* COLOR_GRADIENT_PROPERTY_EVENT;
  ModdingAPI::Exposed::TMPro::FastAction* TMP_SETTINGS_PROPERTY_EVENT;
  ModdingAPI::Exposed::TMPro::FastAction* RESOURCE_LOAD_EVENT;
  ModdingAPI::Exposed::TMPro::FastAction_A__B_* TEXTMESHPRO_UGUI_PROPERTY_EVENT;
  ModdingAPI::Exposed::TMPro::FastAction* OnPreRenderObject_Event;
  ModdingAPI::Exposed::TMPro::FastAction_A_* TEXT_CHANGED_EVENT;
};

struct __TMPro_EventManager_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __TMPro_EventManager_Il2CppClass {
  Il2CppClass_1 _1;
  __TMPro_EventManager_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TMPro_EventManager_Il2CppVtbl vtbl;
};

class TMPro_EventManager {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C27130;
  static inline    __TMPro_EventManager_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __TMPro_EventManager_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__TMPro_EventManager_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __TMPro_EventManager_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A__B_*> COMPUTE_DT_EVENT = __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A__B_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->COMPUTE_DT_EVENT; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A__B_*> MATERIAL_PROPERTY_EVENT = __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A__B_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->MATERIAL_PROPERTY_EVENT; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A__B_*> FONT_PROPERTY_EVENT = __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A__B_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->FONT_PROPERTY_EVENT; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A__B_*> SPRITE_ASSET_PROPERTY_EVENT = __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A__B_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->SPRITE_ASSET_PROPERTY_EVENT; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A__B_*> TEXTMESHPRO_PROPERTY_EVENT = __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A__B_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->TEXTMESHPRO_PROPERTY_EVENT; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A__B__C_*> DRAG_AND_DROP_MATERIAL_EVENT = __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A__B__C_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->DRAG_AND_DROP_MATERIAL_EVENT; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A_*> TEXT_STYLE_PROPERTY_EVENT = __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->TEXT_STYLE_PROPERTY_EVENT; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A_*> COLOR_GRADIENT_PROPERTY_EVENT = __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->COLOR_GRADIENT_PROPERTY_EVENT; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction*> TMP_SETTINGS_PROPERTY_EVENT = __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction*>(
   []() { return &GetStaticClassInstance()->pStaticFields->TMP_SETTINGS_PROPERTY_EVENT; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction*> RESOURCE_LOAD_EVENT = __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction*>(
   []() { return &GetStaticClassInstance()->pStaticFields->RESOURCE_LOAD_EVENT; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A__B_*> TEXTMESHPRO_UGUI_PROPERTY_EVENT = __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A__B_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->TEXTMESHPRO_UGUI_PROPERTY_EVENT; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction*> OnPreRenderObject_Event = __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction*>(
   []() { return &GetStaticClassInstance()->pStaticFields->OnPreRenderObject_Event; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A_*> TEXT_CHANGED_EVENT = __CppStaticProperty<ModdingAPI::Exposed::TMPro::FastAction_A_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->TEXT_CHANGED_EVENT; }
  );

  // Static methods:
  static inline void ON_PRE_RENDER_OBJECT_CHANGED() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB17C0))();
  }
  static inline void ON_MATERIAL_PROPERTY_CHANGED(bool isChanged, ModdingAPI::Exposed::UnityEngine::Material* mat) {
    reinterpret_cast<void(__fastcall*)(bool, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB1870))(isChanged, mat);
  }
  static inline void ON_FONT_PROPERTY_CHANGED(bool isChanged, ModdingAPI::Exposed::TMPro::TMP_FontAsset* font) {
    reinterpret_cast<void(__fastcall*)(bool, ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB1940))(isChanged, font);
  }
  static inline void ON_SPRITE_ASSET_PROPERTY_CHANGED(bool isChanged, ModdingAPI::Exposed::UnityEngine::Object* obj) {
    reinterpret_cast<void(__fastcall*)(bool, ModdingAPI::Exposed::UnityEngine::Object*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB1A10))(isChanged, obj);
  }
  static inline void ON_TEXTMESHPRO_PROPERTY_CHANGED(bool isChanged, ModdingAPI::Exposed::TMPro::TextMeshPro* obj) {
    reinterpret_cast<void(__fastcall*)(bool, ModdingAPI::Exposed::TMPro::TextMeshPro*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB1AE0))(isChanged, obj);
  }
  static inline void ON_DRAG_AND_DROP_MATERIAL_CHANGED(ModdingAPI::Exposed::UnityEngine::GameObject* sender, ModdingAPI::Exposed::UnityEngine::Material* currentMaterial, ModdingAPI::Exposed::UnityEngine::Material* newMaterial) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*, ModdingAPI::Exposed::UnityEngine::Material*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB1BB0))(sender, currentMaterial, newMaterial);
  }
  static inline void ON_TEXT_STYLE_PROPERTY_CHANGED(bool isChanged) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB1D40))(isChanged);
  }
  static inline void ON_COLOR_GRAIDENT_PROPERTY_CHANGED(ModdingAPI::Exposed::TMPro::TMP_ColorGradient* gradient) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_ColorGradient*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB1EB0))(gradient);
  }
  static inline void ON_TEXT_CHANGED(ModdingAPI::Exposed::UnityEngine::Object* obj) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Object*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB1F70))(obj);
  }
  static inline void ON_TMP_SETTINGS_CHANGED() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB2030))();
  }
  static inline void ON_RESOURCES_LOADED() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB20E0))();
  }
  static inline void ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED(bool isChanged, ModdingAPI::Exposed::TMPro::TextMeshProUGUI* obj) {
    reinterpret_cast<void(__fastcall*)(bool, ModdingAPI::Exposed::TMPro::TextMeshProUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB2190))(isChanged, obj);
  }
  static inline void ON_COMPUTE_DT_EVENT(Il2CppObject* Sender, ModdingAPI::Exposed::TMPro::Compute_DT_EventArgs* e) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*, ModdingAPI::Exposed::TMPro::Compute_DT_EventArgs*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB2260))(Sender, e);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB23E0))();
  }
};
}