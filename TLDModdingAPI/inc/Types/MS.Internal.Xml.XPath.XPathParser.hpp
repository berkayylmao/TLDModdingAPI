// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::MS::Internal::Xml::XPath {
struct __XPathParser_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array* temparray1;
  ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array* temparray2;
  ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array* temparray3;
  ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array* temparray4;
  ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array* temparray5;
  ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array* temparray6;
  ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array* temparray7;
  ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array* temparray8;
  ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array* temparray9;
  ModdingAPI::Exposed::System::Collections::Hashtable* functionTable;
  ModdingAPI::Exposed::System::Collections::Hashtable* AxesTable;
};

struct __XPathParser_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __XPathParser_Il2CppClass {
  Il2CppClass_1 _1;
  __XPathParser_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __XPathParser_Il2CppVtbl vtbl;
};

class XPathParser {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C89498;
  static inline    __XPathParser_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __XPathParser_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__XPathParser_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __XPathParser_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathScanner* scanner;
  int32_t parseDepth;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathScanner* scanner) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathScanner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, scanner);
  }
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParseExpresion(ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* qyInput) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD21100))(this, qyInput);
  }
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParseOrExpr(ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* qyInput) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD211C0))(this, qyInput);
  }
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParseAndExpr(ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* qyInput) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD213F0))(this, qyInput);
  }
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParseEqualityExpr(ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* qyInput) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD21620))(this, qyInput);
  }
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParseRelationalExpr(ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* qyInput) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD21820))(this, qyInput);
  }
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParseAdditiveExpr(ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* qyInput) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD21A30))(this, qyInput);
  }
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParseMultiplicativeExpr(ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* qyInput) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD21C30))(this, qyInput);
  }
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParseUnaryExpr(ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* qyInput) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD21EF0))(this, qyInput);
  }
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParseUnionExpr(ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* qyInput) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD22220))(this, qyInput);
  }
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParsePathExpr(ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* qyInput) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD225D0))(this, qyInput);
  }
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParseFilterExpr(ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* qyInput) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD22890))(this, qyInput);
  }
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParsePredicate(ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* qyInput) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD22A80))(this, qyInput);
  }
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParseLocationPath(ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* qyInput) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD22B30))(this, qyInput);
  }
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParseRelativeLocationPath(ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* qyInput) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD22ED0))(this, qyInput);
  }
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParseStep(ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* qyInput) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD230E0))(this, qyInput);
  }
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParseNodeTest(ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* qyInput, int32_t axisType, int32_t nodeType) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD23650))(this, qyInput, axisType, nodeType);
  }
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParsePrimaryExpr(ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* qyInput) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD23BF0))(this, qyInput);
  }
  ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParseMethod(ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* qyInput) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD24170))(this, qyInput);
  }
  void CheckToken(int32_t t) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD24ED0))(this, t);
  }
  void PassToken(int32_t t) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD24FB0))(this, t);
  }
  void NextLex() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD24FE0))(this);
  }
  bool TestOp(System_String* op) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD25000))(this, op);
  }
  void CheckNodeSet(int32_t t) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD25070))(this, t);
  }
  int32_t GetAxis(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathScanner* scaner) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathParser*, ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathScanner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD27150))(this, scaner);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array*> temparray1 = __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->temparray1; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array*> temparray2 = __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->temparray2; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array*> temparray3 = __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->temparray3; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array*> temparray4 = __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->temparray4; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array*> temparray5 = __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->temparray5; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array*> temparray6 = __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->temparray6; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array*> temparray7 = __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->temparray7; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array*> temparray8 = __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->temparray8; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array*> temparray9 = __CppStaticProperty<ModdingAPI::Exposed::System::Xml::XPath::XPathResultType_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->temparray9; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Hashtable*> functionTable = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Hashtable*>(
   []() { return &GetStaticClassInstance()->pStaticFields->functionTable; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Hashtable*> AxesTable = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Hashtable*>(
   []() { return &GetStaticClassInstance()->pStaticFields->AxesTable; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode* ParseXPathExpresion(System_String* xpathExpresion) {
    return reinterpret_cast<ModdingAPI::Exposed::MS::Internal::Xml::XPath::AstNode*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD20DE0))(xpathExpresion);
  }
  static inline bool IsNodeType(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathScanner* scaner) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathScanner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD22450))(scaner);
  }
  static inline bool IsStep(int32_t lexKind) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD230B0))(lexKind);
  }
  static inline bool IsPrimaryExpr(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathScanner* scanner) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MS::Internal::Xml::XPath::XPathScanner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD23B10))(scanner);
  }
  static inline ModdingAPI::Exposed::System::Collections::Hashtable* CreateFunctionTable() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Hashtable*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD25140))();
  }
  static inline ModdingAPI::Exposed::System::Collections::Hashtable* CreateAxesTable() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Hashtable*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD26D40))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD272A0))();
  }
};
}