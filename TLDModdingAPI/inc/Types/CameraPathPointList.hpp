// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __CameraPathPointList_Il2CppStaticFields {
};

struct __CameraPathPointList_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Init;
  VirtualInvokeData _5_CleanUp;
  VirtualInvokeData _6_RecalculatePoints;
};

struct __CameraPathPointList_Il2CppClass {
  Il2CppClass_1 _1;
  __CameraPathPointList_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CameraPathPointList_Il2CppVtbl vtbl;
};

class CameraPathPointList {
public:
  // Il2Cpp fields:
  __CameraPathPointList_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* _points;
  ModdingAPI::Exposed::CameraPath* cameraPath;
  System_String* pointTypeName;
  bool initialised;

  // Member methods:
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B73A50))(this);
  }
  void Init(ModdingAPI::Exposed::CameraPath* _cameraPath) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*, ModdingAPI::Exposed::CameraPath*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE2760))(this, _cameraPath);
  }
  void CleanUp() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE3160))(this);
  }
  ModdingAPI::Exposed::CameraPathPoint* get_Item(int32_t index) {
    return reinterpret_cast<ModdingAPI::Exposed::CameraPathPoint*(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE39C0))(this, index);
  }
  int32_t get_numberOfPoints() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE3B30))(this);
  }
  int32_t get_realNumberOfPoints() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE3C00))(this);
  }
  int32_t IndexOf(ModdingAPI::Exposed::CameraPathPoint* point) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*, ModdingAPI::Exposed::CameraPathPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE3C90))(this, point);
  }
  void AddPoint(ModdingAPI::Exposed::CameraPathPoint* newPoint, ModdingAPI::Exposed::CameraPathControlPoint* curvePointA, ModdingAPI::Exposed::CameraPathControlPoint* curvePointB, float curvePercetage) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*, ModdingAPI::Exposed::CameraPathPoint*, ModdingAPI::Exposed::CameraPathControlPoint*, ModdingAPI::Exposed::CameraPathControlPoint*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE3D50))(this, newPoint, curvePointA, curvePointB, curvePercetage);
  }
  void AddPoint(ModdingAPI::Exposed::CameraPathPoint* newPoint, float fixPercent) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*, ModdingAPI::Exposed::CameraPathPoint*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE3E50))(this, newPoint, fixPercent);
  }
  void AddPoint(ModdingAPI::Exposed::CameraPathPoint* newPoint, ModdingAPI::Exposed::CameraPathControlPoint* atPoint) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*, ModdingAPI::Exposed::CameraPathPoint*, ModdingAPI::Exposed::CameraPathControlPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE3F30))(this, newPoint, atPoint);
  }
  void RemovePoint(ModdingAPI::Exposed::CameraPathPoint* newPoint) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*, ModdingAPI::Exposed::CameraPathPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE4000))(this, newPoint);
  }
  void PathPointAddedEvent(ModdingAPI::Exposed::CameraPathControlPoint* addedPoint) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*, ModdingAPI::Exposed::CameraPathControlPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE40B0))(this, addedPoint);
  }
  void PathPointRemovedEvent(ModdingAPI::Exposed::CameraPathControlPoint* removedPathPoint) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*, ModdingAPI::Exposed::CameraPathControlPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE4290))(this, removedPathPoint);
  }
  void CheckPointCullEventFromStart(float percent) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE4530))(this, percent);
  }
  void CheckPointCullEventFromEnd(float percent) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE46A0))(this, percent);
  }
  int32_t GetNextPointIndex(float percent) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE4810))(this, percent);
  }
  int32_t GetLastPointIndex(float percent) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE49E0))(this, percent);
  }
  ModdingAPI::Exposed::CameraPathPoint* GetPoint(int32_t index) {
    return reinterpret_cast<ModdingAPI::Exposed::CameraPathPoint*(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE4BF0))(this, index);
  }
  ModdingAPI::Exposed::CameraPathPoint* GetPoint(ModdingAPI::Exposed::CameraPathControlPoint* atPoint) {
    return reinterpret_cast<ModdingAPI::Exposed::CameraPathPoint*(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*, ModdingAPI::Exposed::CameraPathControlPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE5060))(this, atPoint);
  }
  void Clear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE5250))(this);
  }
  ModdingAPI::Exposed::CameraPathPoint* DuplicatePointCheck() {
    return reinterpret_cast<ModdingAPI::Exposed::CameraPathPoint*(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE5300))(this);
  }
  void RecalculatePoints() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE5610))(this);
  }
  void ReassignCP(ModdingAPI::Exposed::CameraPathControlPoint* from, ModdingAPI::Exposed::CameraPathControlPoint* to) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*, ModdingAPI::Exposed::CameraPathControlPoint*, ModdingAPI::Exposed::CameraPathControlPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE6160))(this, from, to);
  }
  void CheckListIsNull() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE6380))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CameraPathPointList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EE64E0))(this);
  }
};
}