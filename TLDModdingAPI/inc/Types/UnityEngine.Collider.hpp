// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Bounds.hpp"
#include "ModdingAPI.Exposed.UnityEngine.RaycastHit.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Ray.hpp"


namespace ModdingAPI::Exposed::UnityEngine {
struct __Collider_Il2CppStaticFields {
};

struct __Collider_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Collider_Il2CppClass {
  Il2CppClass_1 _1;
  __Collider_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Collider_Il2CppVtbl vtbl;
};

class Collider {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C24430;
  static inline    Collider* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C86C28;
  static inline    __Collider_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline Collider* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (Collider**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __Collider_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Collider_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Collider_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }
  bool get_enabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x152FC40))(this);
  }
  void set_enabled(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x152FC90))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Rigidbody* get_attachedRigidbody() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rigidbody*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x152FCF0))(this);
  }
  bool get_isTrigger() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x152FD40))(this);
  }
  void set_isTrigger(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x152FD90))(this, value);
  }
  float get_contactOffset() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x152FDF0))(this);
  }
  void set_contactOffset(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x152FE40))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 ClosestPoint(ModdingAPI::Exposed::UnityEngine::Vector3 position) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x152FEA0))(this, position);
  }
  ModdingAPI::Exposed::UnityEngine::Bounds get_bounds() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Bounds(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x152FF30))(this);
  }
  ModdingAPI::Exposed::UnityEngine::PhysicMaterial* get_sharedMaterial() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::PhysicMaterial*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x152FFC0))(this);
  }
  void set_sharedMaterial(ModdingAPI::Exposed::UnityEngine::PhysicMaterial* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*, ModdingAPI::Exposed::UnityEngine::PhysicMaterial*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1530010))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::PhysicMaterial* get_material() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::PhysicMaterial*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1530070))(this);
  }
  void set_material(ModdingAPI::Exposed::UnityEngine::PhysicMaterial* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*, ModdingAPI::Exposed::UnityEngine::PhysicMaterial*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15300C0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::RaycastHit Raycast(ModdingAPI::Exposed::UnityEngine::Ray ray, float maxDistance, bool hasHit) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::RaycastHit(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*, ModdingAPI::Exposed::UnityEngine::Ray, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1530120))(this, ray, maxDistance, hasHit);
  }
  bool Raycast(ModdingAPI::Exposed::UnityEngine::Ray ray, ModdingAPI::Exposed::UnityEngine::RaycastHit hitInfo, float maxDistance) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*, ModdingAPI::Exposed::UnityEngine::Ray, ModdingAPI::Exposed::UnityEngine::RaycastHit, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1530200))(this, ray, hitInfo, maxDistance);
  }
  void Internal_ClosestPointOnBounds(ModdingAPI::Exposed::UnityEngine::Vector3 point, ModdingAPI::Exposed::UnityEngine::Vector3 outPos, float distance) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15302F0))(this, point, outPos, distance);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 ClosestPointOnBounds(ModdingAPI::Exposed::UnityEngine::Vector3 position) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1530370))(this, position);
  }
  void ClosestPoint_Injected(ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::UnityEngine::Vector3 ret) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15304C0))(this, position, ret);
  }
  void get_bounds_Injected(ModdingAPI::Exposed::UnityEngine::Bounds ret) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*, ModdingAPI::Exposed::UnityEngine::Bounds)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1530530))(this, ret);
  }
  void Raycast_Injected(ModdingAPI::Exposed::UnityEngine::Ray ray, float maxDistance, bool hasHit, ModdingAPI::Exposed::UnityEngine::RaycastHit ret) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*, ModdingAPI::Exposed::UnityEngine::Ray, float, bool, ModdingAPI::Exposed::UnityEngine::RaycastHit)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1530590))(this, ray, maxDistance, hasHit, ret);
  }
  void Internal_ClosestPointOnBounds_Injected(ModdingAPI::Exposed::UnityEngine::Vector3 point, ModdingAPI::Exposed::UnityEngine::Vector3 outPos, float distance) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1530620))(this, point, outPos, distance);
  }
};
}