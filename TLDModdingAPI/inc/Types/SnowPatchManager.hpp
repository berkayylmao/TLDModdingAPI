// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Matrix4x4.hpp"
#include "ModdingAPI.Exposed.SnowImprint.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Bounds.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __SnowPatchManager_Il2CppStaticFields {
  bool m_Active;
  ModdingAPI::Exposed::UnityEngine::Mesh* m_ImprintMesh;
  ModdingAPI::Exposed::SnowPatchManager* m_Instance;
  ModdingAPI::Exposed::UnityEngine::Matrix4x4 m_WorkMat;
};

struct __SnowPatchManager_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SnowPatchManager_Il2CppClass {
  Il2CppClass_1 _1;
  __SnowPatchManager_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SnowPatchManager_Il2CppVtbl vtbl;
};

class SnowPatchManager {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C200D8;
  static inline    __SnowPatchManager_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __SnowPatchManager_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__SnowPatchManager_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __SnowPatchManager_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool m_DebugSkipHeightMapRendering;
  bool m_DebugSkipBumppedDecalRendering;
  float m_DebugForcedImprintDepth;
  bool m_DebugShowBounds;
  bool m_DebugShowPatches;
  float m_MaxImprintDepth;
  float m_BumpedDecalFillInRateScalar;
  float m_NormalPowLow;
  float m_NormalPowHigh;
  float m_TopBlendScalarLow;
  float m_TopBlendScalarHigh;
  float m_FadeBandForHeightMap;
  float m_FadeStartBumpDist;
  float m_FadeEndBumpDist;
  float m_DecalIntensity;
  float m_MaxImprintDistanceFromPatch;
  float m_SnowDepthPerHour;
  float m_WindDepthPerHour;
  float m_PatchDeviationForInvalidCheck;
  float m_HeightMapInvalidThreshold;
  float m_HMTangentInvalidThreshold;
  float m_BumpDecalInvalidThreshold;
  float m_BumpDecalNormalThreshold;
  float m_DrawDistanceLow;
  int32_t m_ImprintsPerPatchLow;
  float m_PassiveDepthPerHourLow;
  float m_DrawDistanceMedium;
  int32_t m_ImprintsPerPatchMedium;
  float m_PassiveDepthPerHourMedium;
  float m_DrawDistanceHigh;
  int32_t m_ImprintsPerPatchHigh;
  float m_PassiveDepthPerHourHigh;
  float m_DrawDistanceUltra;
  int32_t m_ImprintsPerPatchUltra;
  float m_PassiveDepthPerHourUltra;
  ModdingAPI::Exposed::UnityEngine::Material* m_PatchHeightMaterial;
  ModdingAPI::Exposed::UnityEngine::Material* m_HeightMapImprintMaterial;
  ModdingAPI::Exposed::UnityEngine::Material* m_SnowPatchHoleCutterMaterial;
  ModdingAPI::Exposed::UnityEngine::Material* m_SnowPatchFinalMaterial;
  ModdingAPI::Exposed::UnityEngine::Material* m_NormalMapDecalMaterial;
  ModdingAPI::Exposed::UvList* m_HeightMapUvInfo;
  ModdingAPI::Exposed::UvList* m_NormalMapUvInfo;
  ModdingAPI::Exposed::UnityEngine::Mesh* m_CubeMesh;
  ModdingAPI::Exposed::UnityEngine::Mesh_array* m_HeightMapGridMesh_High;
  ModdingAPI::Exposed::UnityEngine::Mesh_array* m_HeightMapGridMesh_Medium;
  ModdingAPI::Exposed::UnityEngine::Mesh_array* m_HeightMapGridMesh_Low;
  ModdingAPI::Exposed::UnityEngine::Mesh_array* m_PatchHeightMapGridMeshes;
  ModdingAPI::Exposed::UnityEngine::RenderTexture_array* m_HeightMapRenderTextures;
  float m_RenderCaptureDistance;
  ModdingAPI::Exposed::System::Collections::Generic::Stack_T_* m_AvailablePatches;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_ActivePatches;
  ModdingAPI::Exposed::OctreeBounds_T_* m_Octree;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_PatchDict;
  ModdingAPI::Exposed::System::Collections::Generic::List_T__array* m_CaptureLists;
  int32_t m_CaptureTick;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_GetCollidingResults;
  ModdingAPI::Exposed::UnityEngine::Bounds_array* m_ImprintBounds;
  ModdingAPI::Exposed::System::Int32_array* m_HeightMapRenderTextureTypes;
  ModdingAPI::Exposed::UnityEngine::Rendering::CommandBuffer* m_HeightMapCommandBuffer;
  ModdingAPI::Exposed::UnityEngine::Rendering::CommandBuffer* m_MainCamCommandBuffer1;
  ModdingAPI::Exposed::UnityEngine::Rendering::CommandBuffer* m_MainCamCommandBuffer2;
  ModdingAPI::Exposed::UnityEngine::Rendering::CommandBuffer* m_MainCamCommandBuffer3;
  ModdingAPI::Exposed::System::Int32_array* m_CoeffIds;
  int32_t m_ImprintInfoId;
  int32_t m_HeightMapUvInfoId;
  int32_t m_ConfigId;
  int32_t m_CamZId;
  int32_t m_LimitsId;
  int32_t m_PatchFadeId;
  int32_t m_HeightMapId;
  int32_t m_NormalsId;
  int32_t m_MainTexUvId;
  int32_t m_BumpMapUvId;
  int32_t m_LocalNormalId;
  int32_t m_DeviationWeightId;
  int32_t m_DecalParamsId;
  ModdingAPI::Exposed::SnowfallManager* m_SnowfallManager;
  float m_PassiveDepthPerHour;
  bool m_StartHasBeenCalled;
  ModdingAPI::Exposed::UnityEngine::Rendering::RenderTargetIdentifier_array* m_RenderTargetIdentifiers;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SnowPatchManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CE42F0))(this);
  }
  void AllocatePatches(int32_t num) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SnowPatchManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CE55C0))(this, num);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SnowPatchManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CE5940))(this);
  }
  void AllocateResources(int32_t quality) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SnowPatchManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CE5B70))(this, quality);
  }
  System_String* SerializeGlobal() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::SnowPatchManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CE6510))(this);
  }
  void DeserializeGlobal(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SnowPatchManager*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CE6540))(this, text);
  }
  void AdjustSnowDepthRecord(float baseDepth) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SnowPatchManager*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CE6580))(this, baseDepth);
  }
  void OnQualityChange(int32_t quality) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SnowPatchManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CE6670))(this, quality);
  }
  void RemovePatchRef(int32_t id) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SnowPatchManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CE6680))(this, id);
  }
  void AddImprint(ModdingAPI::Exposed::SnowImprint imprint, float imprintSize, ModdingAPI::Exposed::System::Collections::Generic::HashSet_T_* referencedPatches) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SnowPatchManager*, ModdingAPI::Exposed::SnowImprint, float, ModdingAPI::Exposed::System::Collections::Generic::HashSet_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CE6860))(this, imprint, imprintSize, referencedPatches);
  }
  int32_t GetOverlappedBoundsForImprint(ModdingAPI::Exposed::UnityEngine::Bounds imprintBounds) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::SnowPatchManager*, ModdingAPI::Exposed::UnityEngine::Bounds)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CE6DA0))(this, imprintBounds);
  }
  ModdingAPI::Exposed::SnowPatch* AddPatch(ModdingAPI::Exposed::UnityEngine::Vector3 centre) {
    return reinterpret_cast<ModdingAPI::Exposed::SnowPatch*(__fastcall*)(ModdingAPI::Exposed::SnowPatchManager*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CE7810))(this, centre);
  }
  void RemovePatch(ModdingAPI::Exposed::SnowPatch* sp) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SnowPatchManager*, ModdingAPI::Exposed::SnowPatch*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CE79B0))(this, sp);
  }
  float GetLocalSnowDepth() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::SnowPatchManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CE7AF0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SnowPatchManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CE7B30))(this);
  }
  void LateUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SnowPatchManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CE7F00))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SnowPatchManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CEAA10))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<bool> m_Active = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_Active; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Mesh*> m_ImprintMesh = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Mesh*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_ImprintMesh; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::SnowPatchManager*> m_Instance = __CppStaticProperty<ModdingAPI::Exposed::SnowPatchManager*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_Instance; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Matrix4x4> m_WorkMat = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Matrix4x4>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_WorkMat; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CEAB50))();
  }
};
}