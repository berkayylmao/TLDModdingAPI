// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __Panel_TorchLight_Il2CppStaticFields {
};

struct __Panel_TorchLight_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Panel_TorchLight_Il2CppClass {
  Il2CppClass_1 _1;
  __Panel_TorchLight_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Panel_TorchLight_Il2CppVtbl vtbl;
};

class Panel_TorchLight {
public:
  // Il2Cpp fields:
  __Panel_TorchLight_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::ButtonLegendContainer* m_ButtonLegendContainer;
  float m_LightTorchDistanceXZ;
  ModdingAPI::Exposed::ScrollList* m_ScrollList;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ButtonLeft;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ButtonRight;
  ModdingAPI::Exposed::TweenAlpha* m_LabelTween;
  ModdingAPI::Exposed::UILabel* m_UseLabel;
  ModdingAPI::Exposed::UILabel* m_ToolNameLabel;
  ModdingAPI::Exposed::UIButton* m_ButtonUseFireOnly;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_AllButtonsObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FireOnlyObject;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_AvailableTools;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_CoverflowItems;
  ModdingAPI::Exposed::GearItem* m_Matches;
  ModdingAPI::Exposed::GearItem* m_Flint;
  ModdingAPI::Exposed::GearItem* m_Striker;
  float m_LastUseTime;
  ModdingAPI::Exposed::Fire* m_FireSourceToLightTorch;
  ModdingAPI::Exposed::FlareItem* m_FlareSourceToLightTorch;
  ModdingAPI::Exposed::TorchItem* m_TorchSourceToLightTorch;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E1FE0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E2130))(this);
  }
  void Enable(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E23E0))(this, enable);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x165DF10))(this);
  }
  void OnCancel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E2940))(this);
  }
  void OnUseSelectedItem() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E2AB0))(this);
  }
  void NextTool() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E2D10))(this);
  }
  void PrevTool() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E2E90))(this);
  }
  void SelectToolByIndex(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E3010))(this, index);
  }
  void SetFireSourceToLightTorch(ModdingAPI::Exposed::Fire* fire) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*, ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E3170))(this, fire);
  }
  void SetFlareSourceToLightTorch(ModdingAPI::Exposed::FlareItem* flare) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*, ModdingAPI::Exposed::FlareItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E3190))(this, flare);
  }
  void SetTorchSourceToLightTorch(ModdingAPI::Exposed::TorchItem* torch) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*, ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E31B0))(this, torch);
  }
  void OnUseMatches(bool consumeResource) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E31D0))(this, consumeResource);
  }
  void OnUseFlintAndSteel(bool consumeResource) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E3440))(this, consumeResource);
  }
  void OnUseFireStriker(bool consumeResource) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E3660))(this, consumeResource);
  }
  ModdingAPI::Exposed::UnityEngine::GameObject* GetTargetFireSource() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E3880))(this);
  }
  void OnUseFire() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E3A70))(this);
  }
  void SetupScrollList() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E3C80))(this);
  }
  void RefreshVisuals() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E4220))(this);
  }
  bool FireInRangeCanLightTorch() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E4480))(this);
  }
  void StartTorchIgnite(float delaySeconds, System_String* igniteAudio, bool isFire) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*, float, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E4620))(this, delaySeconds, igniteAudio, isFire);
  }
  void UpdateButtonLegend() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E4810))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_TorchLight*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19E4930))(this);
  }
};
}