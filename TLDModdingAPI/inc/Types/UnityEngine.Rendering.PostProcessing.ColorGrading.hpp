// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing {
struct __ColorGrading_Il2CppStaticFields {
};

struct __ColorGrading_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_IsEnabledAndSupported;
};

struct __ColorGrading_Il2CppClass {
  Il2CppClass_1 _1;
  __ColorGrading_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ColorGrading_Il2CppVtbl vtbl;
};

class ColorGrading {
public:
  // Il2Cpp fields:
  __ColorGrading_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool active;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::BoolParameter* enabled;
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* parameters;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::GradingModeParameter* gradingMode;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TextureParameter* externalLut;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TonemapperParameter* tonemapper;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* toneCurveToeStrength;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* toneCurveToeLength;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* toneCurveShoulderStrength;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* toneCurveShoulderLength;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* toneCurveShoulderAngle;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* toneCurveGamma;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TextureParameter* ldrLut;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* ldrLutContribution;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* temperature;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* tint;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorParameter* colorFilter;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* hueShift;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* saturation;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* brightness;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* postExposure;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* contrast;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* mixerRedOutRedIn;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* mixerRedOutGreenIn;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* mixerRedOutBlueIn;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* mixerGreenOutRedIn;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* mixerGreenOutGreenIn;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* mixerGreenOutBlueIn;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* mixerBlueOutRedIn;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* mixerBlueOutGreenIn;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* mixerBlueOutBlueIn;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::Vector4Parameter* lift;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::Vector4Parameter* gamma;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::Vector4Parameter* gain;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::SplineParameter* masterCurve;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::SplineParameter* redCurve;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::SplineParameter* greenCurve;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::SplineParameter* blueCurve;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::SplineParameter* hueVsHueCurve;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::SplineParameter* hueVsSatCurve;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::SplineParameter* satVsSatCurve;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::SplineParameter* lumVsSatCurve;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingSettingsParameter* settings1A;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingSettingsParameter* settings1B;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingSettingsParameter* settings2A;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingSettingsParameter* settings2B;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::Vector4Parameter* blendRecord;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* blendGamma;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* blendGammaLimitLow;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* blendGammaLimitHigh;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* blendColorScalar;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* blendHdrScalar;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingSettingsParameter* stimSettings;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* stimEffectIntensity;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* stimEffectIntensityTarget;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingSettingsParameter* electrocutionSettings;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* electrocutionEffectIntensity;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* electrocutionEffectIntensityTarget;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingSettingsParameter* painSettings;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* painEffectIntensity;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* painEffectIntensityTarget;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingSettingsParameter* boostEffectSettings;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* boostEffectIntensity;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* boostEffectIntensityTarget;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingSettingsParameter* headacheSettings;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* headacheEffectIntensity;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::FloatParameter* headacheEffectIntensityTarget;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::TextureParameter* noiseTexture;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::Vector4Parameter* noiseParams;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::BoolParameter* noiseRandomize;

  // Member methods:
  bool IsEnabledAndSupported(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext* context) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGrading*, ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2494DA0))(this, context);
  }
  float GetBlendGammaForBrightness(float brightness) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGrading*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2494E70))(this, brightness);
  }
  void ConfigureLutForInterior(ModdingAPI::Exposed::ColorGradingSettings* customLUT) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGrading*, ModdingAPI::Exposed::ColorGradingSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2495120))(this, customLUT);
  }
  void UpdateLutForTimeOfDay(ModdingAPI::Exposed::ColorGradingSettings* settings1A, ModdingAPI::Exposed::ColorGradingSettings* settings1B, ModdingAPI::Exposed::ColorGradingSettings* settings2A, ModdingAPI::Exposed::ColorGradingSettings* settings2B, float blend1, float blend2, float blendCombine) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGrading*, ModdingAPI::Exposed::ColorGradingSettings*, ModdingAPI::Exposed::ColorGradingSettings*, ModdingAPI::Exposed::ColorGradingSettings*, ModdingAPI::Exposed::ColorGradingSettings*, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2495240))(this, settings1A, settings1B, settings2A, settings2B, blend1, blend2, blendCombine);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGrading*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24953B0))(this);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessVolume* ApplyTempLut(ModdingAPI::Exposed::ColorGradingSettings* temp) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessVolume*(__fastcall*)(ModdingAPI::Exposed::ColorGradingSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2494FA0))(temp);
  }
};
}