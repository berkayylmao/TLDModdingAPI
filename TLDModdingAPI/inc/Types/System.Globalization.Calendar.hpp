// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.DateTime.hpp"


namespace ModdingAPI::Exposed::System::Globalization {
struct __Calendar_Il2CppStaticFields {
};

struct __Calendar_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _5_get_MinSupportedDateTime;
  VirtualInvokeData _6_get_MaxSupportedDateTime;
  VirtualInvokeData _7_get_ID;
  VirtualInvokeData _8_get_BaseCalendarID;
  VirtualInvokeData _9_Clone;
  VirtualInvokeData _10_get_CurrentEraValue;
  VirtualInvokeData _19_IsLeapYear;
  VirtualInvokeData _21_ToDateTime;
  VirtualInvokeData _23_TryToDateTime;
  VirtualInvokeData _24_IsValidYear;
  VirtualInvokeData _25_IsValidMonth;
  VirtualInvokeData _26_IsValidDay;
  VirtualInvokeData _27_get_TwoDigitYearMax;
  VirtualInvokeData _28_ToFourDigitYear;
  VirtualInvokeData _65535__ctor;
};

struct __Calendar_Il2CppClass {
  Il2CppClass_1 _1;
  __Calendar_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Calendar_Il2CppVtbl vtbl;
};

class Calendar {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C23F98;
  static inline    __Calendar_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Calendar_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Calendar_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Calendar_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t m_currentEraValue;
  bool m_isReadOnly;
  int32_t twoDigitYearMax;

  // Member methods:
  ModdingAPI::Exposed::System::DateTime get_MinSupportedDateTime() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::Globalization::Calendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65F360))(this);
  }
  ModdingAPI::Exposed::System::DateTime get_MaxSupportedDateTime() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::Globalization::Calendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65F400))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::Calendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65F4A0))(this);
  }
  int32_t get_ID() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::Calendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65F4B0))(this);
  }
  int32_t get_BaseCalendarID() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::Calendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65F4C0))(this);
  }
  Il2CppObject* Clone() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::Calendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65F4E0))(this);
  }
  void SetReadOnlyState(bool readOnly) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::Calendar*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65F680))(this, readOnly);
  }
  int32_t get_CurrentEraValue() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::Calendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65F690))(this);
  }
  bool IsLeapYear(int32_t year) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::Calendar*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65F770))(this, year);
  }
  ModdingAPI::Exposed::System::DateTime ToDateTime(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::Globalization::Calendar*, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65F790))(this, year, month, day, hour, minute, second, millisecond);
  }
  bool TryToDateTime(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, int32_t era, ModdingAPI::Exposed::System::DateTime result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::Calendar*, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65F7F0))(this, year, month, day, hour, minute, second, millisecond, era, result);
  }
  bool IsValidYear(int32_t year, int32_t era) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::Calendar*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65F930))(this, year, era);
  }
  bool IsValidMonth(int32_t year, int32_t month, int32_t era) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::Calendar*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65F9C0))(this, year, month, era);
  }
  bool IsValidDay(int32_t year, int32_t month, int32_t day, int32_t era) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::Calendar*, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65FA40))(this, year, month, day, era);
  }
  int32_t get_TwoDigitYearMax() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::Calendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FED20))(this);
  }
  int32_t ToFourDigitYear(int32_t year) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::Calendar*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65FAD0))(this, year);
  }

  // Static methods:
  static inline int32_t GetSystemTwoDigitYearSetting(int32_t CalID, int32_t defaultYearValue) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65FC20))(CalID, defaultYearValue);
  }
};
}