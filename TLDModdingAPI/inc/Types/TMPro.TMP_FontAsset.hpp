// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.TextCore.FaceInfo.hpp"
#include "ModdingAPI.Exposed.TMPro.FontAssetCreationSettings.hpp"


namespace ModdingAPI::Exposed::TMPro {
struct __TMP_FontAsset_Il2CppStaticFields {
  ModdingAPI::Exposed::System::UInt32_array* s_GlyphIndexArray;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* s_MissingCharacterList;
};

struct __TMP_FontAsset_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __TMP_FontAsset_Il2CppClass {
  Il2CppClass_1 _1;
  __TMP_FontAsset_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TMP_FontAsset_Il2CppVtbl vtbl;
};

class TMP_FontAsset {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C269B0;
  static inline    __TMP_FontAsset_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __TMP_FontAsset_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__TMP_FontAsset_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __TMP_FontAsset_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  int32_t hashCode;
  ModdingAPI::Exposed::UnityEngine::Material* material;
  int32_t materialHashCode;
  System_String* m_Version;
  System_String* m_SourceFontFileGUID;
  ModdingAPI::Exposed::UnityEngine::Font* m_SourceFontFile;
  int32_t m_AtlasPopulationMode;
  ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo m_FaceInfo;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_GlyphTable;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_GlyphLookupDictionary;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_CharacterTable;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_CharacterLookupDictionary;
  ModdingAPI::Exposed::UnityEngine::Texture2D* m_AtlasTexture;
  ModdingAPI::Exposed::UnityEngine::Texture2D_array* m_AtlasTextures;
  int32_t m_AtlasTextureIndex;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_UsedGlyphRects;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_FreeGlyphRects;
  ModdingAPI::Exposed::TMPro::FaceInfo_Legacy* m_fontInfo;
  ModdingAPI::Exposed::UnityEngine::Texture2D* atlas;
  int32_t m_AtlasWidth;
  int32_t m_AtlasHeight;
  int32_t m_AtlasPadding;
  int32_t m_AtlasRenderMode;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_glyphInfoList;
  ModdingAPI::Exposed::TMPro::KerningTable* m_KerningTable;
  ModdingAPI::Exposed::TMPro::TMP_FontFeatureTable* m_FontFeatureTable;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* fallbackFontAssets;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_FallbackFontAssetTable;
  ModdingAPI::Exposed::TMPro::FontAssetCreationSettings m_CreationSettings;
  ModdingAPI::Exposed::TMPro::TMP_FontWeightPair_array* m_FontWeightTable;
  ModdingAPI::Exposed::TMPro::TMP_FontWeightPair_array* fontWeights;
  float normalStyle;
  float normalSpacingOffset;
  float boldStyle;
  float boldSpacing;
  uint8_t italicStyle;
  uint8_t tabSize;
  uint8_t m_oldTabSize;
  bool m_IsFontAssetLookupTablesDirty;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_GlyphsToPack;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_GlyphsPacked;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_GlyphsToRender;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_GlyphIndexList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_CharactersToAdd;

  // Member methods:
  System_String* get_version() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335370))(this);
  }
  void set_version(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A410))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Font* get_sourceFontFile() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Font*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319960))(this);
  }
  void set_sourceFontFile(ModdingAPI::Exposed::UnityEngine::Font* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, ModdingAPI::Exposed::UnityEngine::Font*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x31F420))(this, value);
  }
  int32_t get_atlasPopulationMode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383900))(this);
  }
  void set_atlasPopulationMode(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383910))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo get_faceInfo() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F0FD0))(this);
  }
  void set_faceInfo(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1010))(this, value);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* get_glyphTable() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30F140))(this);
  }
  void set_glyphTable(ModdingAPI::Exposed::System::Collections::Generic::List_T_* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1050))(this, value);
  }
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* get_glyphLookupTable() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1060))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* get_characterTable() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1090))(this);
  }
  void set_characterTable(ModdingAPI::Exposed::System::Collections::Generic::List_T_* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F10A0))(this, value);
  }
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* get_characterLookupTable() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F10B0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Texture2D* get_atlasTexture() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Texture2D*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F10E0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Texture2D_array* get_atlasTextures() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Texture2D_array*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F11D0))(this);
  }
  void set_atlasTextures(ModdingAPI::Exposed::UnityEngine::Texture2D_array* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, ModdingAPI::Exposed::UnityEngine::Texture2D_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F11E0))(this, value);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* get_usedGlyphRects() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3EBFF0))(this);
  }
  void set_usedGlyphRects(ModdingAPI::Exposed::System::Collections::Generic::List_T_* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F11F0))(this, value);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* get_freeGlyphRects() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30F200))(this);
  }
  void set_freeGlyphRects(ModdingAPI::Exposed::System::Collections::Generic::List_T_* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E060))(this, value);
  }
  ModdingAPI::Exposed::TMPro::FaceInfo_Legacy* get_fontInfo() {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::FaceInfo_Legacy*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077C0))(this);
  }
  int32_t get_atlasWidth() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3EC090))(this);
  }
  void set_atlasWidth(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1200))(this, value);
  }
  int32_t get_atlasHeight() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1210))(this);
  }
  void set_atlasHeight(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1220))(this, value);
  }
  int32_t get_atlasPadding() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1230))(this);
  }
  void set_atlasPadding(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1240))(this, value);
  }
  int32_t get_atlasRenderMode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1250))(this);
  }
  void set_atlasRenderMode(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1260))(this, value);
  }
  ModdingAPI::Exposed::TMPro::TMP_FontFeatureTable* get_fontFeatureTable() {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_FontFeatureTable*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E120))(this);
  }
  void set_fontFeatureTable(ModdingAPI::Exposed::TMPro::TMP_FontFeatureTable* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, ModdingAPI::Exposed::TMPro::TMP_FontFeatureTable*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E130))(this, value);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* get_fallbackFontAssetTable() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E160))(this);
  }
  void set_fallbackFontAssetTable(ModdingAPI::Exposed::System::Collections::Generic::List_T_* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E170))(this, value);
  }
  ModdingAPI::Exposed::TMPro::FontAssetCreationSettings get_creationSettings() {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::FontAssetCreationSettings(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1270))(this);
  }
  void set_creationSettings(ModdingAPI::Exposed::TMPro::FontAssetCreationSettings value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, ModdingAPI::Exposed::TMPro::FontAssetCreationSettings)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F12C0))(this, value);
  }
  ModdingAPI::Exposed::TMPro::TMP_FontWeightPair_array* get_fontWeightTable() {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_FontWeightPair_array*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1310))(this);
  }
  void set_fontWeightTable(ModdingAPI::Exposed::TMPro::TMP_FontWeightPair_array* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, ModdingAPI::Exposed::TMPro::TMP_FontWeightPair_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1320))(this, value);
  }
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F2150))(this);
  }
  void InitializeDictionaryLookupTables() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F2220))(this);
  }
  void ReadFontAssetDefinition() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F2CC0))(this);
  }
  void SortCharacterTable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F3D30))(this);
  }
  void SortGlyphTable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F3F40))(this);
  }
  void SortGlyphAndCharacterTables() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F4150))(this);
  }
  bool HasCharacter(int32_t character) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F4170))(this, character);
  }
  bool HasCharacter(wchar_t character) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F4230))(this, character);
  }
  bool HasCharacter(wchar_t character, bool searchFallbacks) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, wchar_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F42F0))(this, character, searchFallbacks);
  }
  bool HasCharacter_Internal(wchar_t character, bool searchFallbacks) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, wchar_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F48D0))(this, character, searchFallbacks);
  }
  bool HasCharacters(System_String* text, ModdingAPI::Exposed::System::Collections::Generic::List_T_* missingCharacters) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, System_String*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F4AB0))(this, text, missingCharacters);
  }
  bool HasCharacters(System_String* text) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F4E00))(this, text);
  }
  bool TryAddCharacters(ModdingAPI::Exposed::System::UInt32_array* unicodes) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, ModdingAPI::Exposed::System::UInt32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F52C0))(this, unicodes);
  }
  bool TryAddCharacters(ModdingAPI::Exposed::System::UInt32_array* unicodes, ModdingAPI::Exposed::System::UInt32_array* missingUnicodes) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, ModdingAPI::Exposed::System::UInt32_array*, ModdingAPI::Exposed::System::UInt32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F52E0))(this, unicodes, missingUnicodes);
  }
  bool TryAddCharacters(System_String* characters) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F5E60))(this, characters);
  }
  bool TryAddCharacters(System_String* characters, System_String* missingCharacters) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F5E80))(this, characters, missingCharacters);
  }
  bool TryAddCharacter_Internal(uint32_t unicode) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F6810))(this, unicode);
  }
  ModdingAPI::Exposed::TMPro::TMP_Character* AddCharacter_Internal(uint32_t unicode, ModdingAPI::Exposed::UnityEngine::TextCore::Glyph* glyph) {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_Character*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, uint32_t, ModdingAPI::Exposed::UnityEngine::TextCore::Glyph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F6ED0))(this, unicode, glyph);
  }
  bool TryAddCharacterInternal(uint32_t unicode, ModdingAPI::Exposed::TMPro::TMP_Character* character) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, uint32_t, ModdingAPI::Exposed::TMPro::TMP_Character*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F7430))(this, unicode, character);
  }
  uint32_t GetGlyphIndex(uint32_t unicode) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F7E30))(this, unicode);
  }
  void UpdateAtlasTexture() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F7F60))(this);
  }
  void UpdateGlyphAdjustmentRecords(uint32_t unicode, uint32_t glyphIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F8420))(this, unicode, glyphIndex);
  }
  void ClearFontAssetData(bool setAtlasSizeToZero) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F8A60))(this, setAtlasSizeToZero);
  }
  void UpgradeFontAsset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F9270))(this);
  }
  void UpgradeGlyphAdjustmentTableToFontFeatureTable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3FA4F0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3FAB00))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::UInt32_array*> s_GlyphIndexArray = __CppStaticProperty<ModdingAPI::Exposed::System::UInt32_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_GlyphIndexArray; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> s_MissingCharacterList = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_MissingCharacterList; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::TMPro::TMP_FontAsset* CreateFontAsset(ModdingAPI::Exposed::UnityEngine::Font* font) {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_FontAsset*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Font*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1330))(font);
  }
  static inline ModdingAPI::Exposed::TMPro::TMP_FontAsset* CreateFontAsset(ModdingAPI::Exposed::UnityEngine::Font* font, int32_t samplingPointSize, int32_t atlasPadding, int32_t renderMode, int32_t atlasWidth, int32_t atlasHeight, int32_t atlasPopulationMode) {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_FontAsset*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Font*, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1400))(font, samplingPointSize, atlasPadding, renderMode, atlasWidth, atlasHeight, atlasPopulationMode);
  }
  static inline System_String* GetCharacters(ModdingAPI::Exposed::TMPro::TMP_FontAsset* fontAsset) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F4F00))(fontAsset);
  }
  static inline ModdingAPI::Exposed::System::Int32_array* GetCharactersArray(ModdingAPI::Exposed::TMPro::TMP_FontAsset* fontAsset) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Int32_array*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F5180))(fontAsset);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x3FB4B0))();
  }
};
}