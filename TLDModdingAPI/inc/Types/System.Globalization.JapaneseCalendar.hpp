// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.DateTime.hpp"


namespace ModdingAPI::Exposed::System::Globalization {
struct __JapaneseCalendar_Il2CppStaticFields {
  ModdingAPI::Exposed::System::DateTime calendarMinValue;
  ModdingAPI::Exposed::System::Globalization::EraInfo_array* japaneseEraInfo;
  ModdingAPI::Exposed::System::Globalization::Calendar* s_defaultInstance;
};

struct __JapaneseCalendar_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _5_get_MinSupportedDateTime;
  VirtualInvokeData _6_get_MaxSupportedDateTime;
  VirtualInvokeData _7_get_ID;
  VirtualInvokeData _8_get_BaseCalendarID;
  VirtualInvokeData _9_Clone;
  VirtualInvokeData _10_get_CurrentEraValue;
  VirtualInvokeData _11_GetDayOfMonth;
  VirtualInvokeData _12_GetDayOfWeek;
  VirtualInvokeData _13_GetDaysInMonth;
  VirtualInvokeData _14_GetEra;
  VirtualInvokeData _15_get_Eras;
  VirtualInvokeData _16_GetMonth;
  VirtualInvokeData _17_GetMonthsInYear;
  VirtualInvokeData _18_GetYear;
  VirtualInvokeData _19_IsLeapYear;
  VirtualInvokeData _20_IsLeapYear;
  VirtualInvokeData _21_ToDateTime;
  VirtualInvokeData _22_ToDateTime;
  VirtualInvokeData _23_TryToDateTime;
  VirtualInvokeData _24_IsValidYear;
  VirtualInvokeData _25_IsValidMonth;
  VirtualInvokeData _26_IsValidDay;
  VirtualInvokeData _27_get_TwoDigitYearMax;
  VirtualInvokeData _28_ToFourDigitYear;
};

struct __JapaneseCalendar_Il2CppClass {
  Il2CppClass_1 _1;
  __JapaneseCalendar_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __JapaneseCalendar_Il2CppVtbl vtbl;
};

class JapaneseCalendar {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C6B350;
  static inline    JapaneseCalendar* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C26470;
  static inline    __JapaneseCalendar_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline JapaneseCalendar* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (JapaneseCalendar**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __JapaneseCalendar_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__JapaneseCalendar_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __JapaneseCalendar_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t m_currentEraValue;
  bool Calendar_m_isReadOnly;
  int32_t twoDigitYearMax;
  ModdingAPI::Exposed::System::Globalization::GregorianCalendarHelper* helper;

  // Member methods:
  ModdingAPI::Exposed::System::DateTime get_MinSupportedDateTime() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::Globalization::JapaneseCalendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA13A0))(this);
  }
  ModdingAPI::Exposed::System::DateTime get_MaxSupportedDateTime() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::Globalization::JapaneseCalendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA1440))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::JapaneseCalendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA1E40))(this);
  }
  int32_t get_ID() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::JapaneseCalendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x32CAF0))(this);
  }
  int32_t GetDaysInMonth(int32_t year, int32_t month, int32_t era) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::JapaneseCalendar*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA86F20))(this, year, month, era);
  }
  int32_t GetDayOfMonth(ModdingAPI::Exposed::System::DateTime time) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::JapaneseCalendar*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA86F50))(this, time);
  }
  int32_t GetDayOfWeek(ModdingAPI::Exposed::System::DateTime time) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::JapaneseCalendar*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA86F90))(this, time);
  }
  int32_t GetMonthsInYear(int32_t year, int32_t era) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::JapaneseCalendar*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA87000))(this, year, era);
  }
  int32_t GetEra(ModdingAPI::Exposed::System::DateTime time) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::JapaneseCalendar*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA87030))(this, time);
  }
  int32_t GetMonth(ModdingAPI::Exposed::System::DateTime time) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::JapaneseCalendar*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA87050))(this, time);
  }
  int32_t GetYear(ModdingAPI::Exposed::System::DateTime time) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::JapaneseCalendar*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA87090))(this, time);
  }
  bool IsLeapYear(int32_t year, int32_t era) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::JapaneseCalendar*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA870B0))(this, year, era);
  }
  ModdingAPI::Exposed::System::DateTime ToDateTime(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, int32_t era) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::Globalization::JapaneseCalendar*, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA870D0))(this, year, month, day, hour, minute, second, millisecond, era);
  }
  int32_t ToFourDigitYear(int32_t year) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::JapaneseCalendar*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA2100))(this, year);
  }
  ModdingAPI::Exposed::System::Int32_array* get_Eras() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Int32_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::JapaneseCalendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA87100))(this);
  }
  bool IsValidYear(int32_t year, int32_t era) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::JapaneseCalendar*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA2720))(this, year, era);
  }
  int32_t get_TwoDigitYearMax() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::JapaneseCalendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA87120))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::DateTime> calendarMinValue = __CppStaticProperty<ModdingAPI::Exposed::System::DateTime>(
   []() { return &GetStaticClassInstance()->pStaticFields->calendarMinValue; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::EraInfo_array*> japaneseEraInfo = __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::EraInfo_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->japaneseEraInfo; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::Calendar*> s_defaultInstance = __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::Calendar*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_defaultInstance; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::System::Globalization::EraInfo_array* GetEraInfo() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::EraInfo_array*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA14E0))();
  }
  static inline ModdingAPI::Exposed::System::Globalization::EraInfo_array* GetErasFromRegistry() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::EraInfo_array*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))();
  }
  static inline ModdingAPI::Exposed::System::Globalization::Calendar* GetDefaultInstance() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::Calendar*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA1C50))();
  }
  static inline ModdingAPI::Exposed::System::String_array* EraNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA22D0))();
  }
  static inline ModdingAPI::Exposed::System::String_array* AbbrevEraNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA2440))();
  }
  static inline ModdingAPI::Exposed::System::String_array* EnglishEraNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA25B0))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA2820))();
  }
};
}