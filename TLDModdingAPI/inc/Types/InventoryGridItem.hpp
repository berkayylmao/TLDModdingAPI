// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed {
struct __InventoryGridItem_Il2CppStaticFields {
};

struct __InventoryGridItem_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __InventoryGridItem_Il2CppClass {
  Il2CppClass_1 _1;
  __InventoryGridItem_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __InventoryGridItem_Il2CppVtbl vtbl;
};

class InventoryGridItem {
public:
  // Il2Cpp fields:
  __InventoryGridItem_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UIButton* m_Button;
  ModdingAPI::Exposed::TweenScale* m_TweenScale;
  ModdingAPI::Exposed::UITexture* m_GearSprite;
  ModdingAPI::Exposed::UISprite* m_EquippedSprite;
  ModdingAPI::Exposed::UISprite* m_RuinedSprite;
  ModdingAPI::Exposed::UILabel* m_LiquidLabel;
  ModdingAPI::Exposed::UILabel* m_StackLabel;
  ModdingAPI::Exposed::UILabel* m_ConditionLabel;
  ModdingAPI::Exposed::UILabel* m_WeightLabel;
  ModdingAPI::Exposed::UILabel* m_NameLabel;
  ModdingAPI::Exposed::UISprite* m_ConditionSprite;
  ModdingAPI::Exposed::UISprite* m_SelectedSprite;
  ModdingAPI::Exposed::UISprite* m_FavoritedSprite;
  ModdingAPI::Exposed::UnityEngine::Color m_BlueGreenColor;
  ModdingAPI::Exposed::UnityEngine::Color m_WhiteColor;
  ModdingAPI::Exposed::UnityEngine::Color m_GoodConditionSpriteColor;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ItemElements;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_HoverEffect;
  int32_t m_SelectionIndex;
  ModdingAPI::Exposed::GearItem* m_GearItem;
  float m_previousItemNormalizedCondition;
  bool m_previousItemIsWornOut;
  bool m_IsInContainer;
  bool m_IsInHoverState;
  bool m_IsSelected;
  ModdingAPI::Exposed::UILabel* m_UnitLabel;
  ModdingAPI::Exposed::UISprite* m_UnitSprite;
  bool m_EmptyItemEnabled;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InventoryGridItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x186C000))(this);
  }
  void RefreshEmptyItem(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InventoryGridItem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x186C020))(this, index);
  }
  void Refresh(ModdingAPI::Exposed::GearItem* gi, int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InventoryGridItem*, ModdingAPI::Exposed::GearItem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x186C5D0))(this, gi, index);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InventoryGridItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x186D780))(this);
  }
  void OnClick() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InventoryGridItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x186D930))(this);
  }
  void OnHover(bool isOver) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InventoryGridItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x186DB90))(this, isOver);
  }
  void ToggleSelection(bool toggleVal) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InventoryGridItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x186DD90))(this, toggleVal);
  }
  int32_t GetSelectionIndex() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::InventoryGridItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x307740))(this);
  }
  void MarkAsContainerItem() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InventoryGridItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x186E5E0))(this);
  }
  System_String* GetDisplayName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::InventoryGridItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x186E5F0))(this);
  }
  ModdingAPI::Exposed::GearItem* GetGearItem() {
    return reinterpret_cast<ModdingAPI::Exposed::GearItem*(__fastcall*)(ModdingAPI::Exposed::InventoryGridItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F4090))(this);
  }
  void DoubleClick() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InventoryGridItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x186E6D0))(this);
  }
  bool IsSelected() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::InventoryGridItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x186E930))(this);
  }
  void UpdateConditionDisplay() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InventoryGridItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x186E940))(this);
  }
  void DisableButton() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InventoryGridItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x186EF80))(this);
  }
  void DeselectItem() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InventoryGridItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x186F0C0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::InventoryGridItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }
};
}