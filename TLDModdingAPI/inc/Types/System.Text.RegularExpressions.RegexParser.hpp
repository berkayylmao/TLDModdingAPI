// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Text::RegularExpressions {
struct __RegexParser_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Byte_array* _category;
};

struct __RegexParser_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __RegexParser_Il2CppClass {
  Il2CppClass_1 _1;
  __RegexParser_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __RegexParser_Il2CppVtbl vtbl;
};

class RegexParser {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C5AB18;
  static inline    __RegexParser_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __RegexParser_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__RegexParser_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __RegexParser_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode* _stack;
  ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode* _group;
  ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode* _alternation;
  ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode* _concatenation;
  ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode* _unit;
  System_String* _pattern;
  int32_t _currentPos;
  ModdingAPI::Exposed::System::Globalization::CultureInfo* _culture;
  int32_t _autocap;
  int32_t _capcount;
  int32_t _captop;
  int32_t _capsize;
  ModdingAPI::Exposed::System::Collections::Hashtable* _caps;
  ModdingAPI::Exposed::System::Collections::Hashtable* _capnames;
  ModdingAPI::Exposed::System::Int32_array* _capnumlist;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* _capnamelist;
  int32_t _options;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* _optionsStack;
  bool _ignoreNextParen;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Globalization::CultureInfo* culture) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF4ED70))(this, culture);
  }
  void SetPattern(System_String* Re) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF4EFA0))(this, Re);
  }
  void Reset(int32_t topopts) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF4F060))(this, topopts);
  }
  ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode* ScanRegex() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode*(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF4F1A0))(this);
  }
  ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode* ScanReplacement() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode*(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF4FB80))(this);
  }
  ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass* ScanCharClass(bool caseInsensitive) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF4FDC0))(this, caseInsensitive);
  }
  ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass* ScanCharClass(bool caseInsensitive, bool scanOnly) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF4FDD0))(this, caseInsensitive, scanOnly);
  }
  ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode* ScanGroupOpen() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode*(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF50850))(this);
  }
  void ScanBlank() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF51A70))(this);
  }
  ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode* ScanBackslash() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode*(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF51F70))(this);
  }
  ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode* ScanBasicBackslash() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode*(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF52CF0))(this);
  }
  ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode* ScanDollar() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode*(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF536E0))(this);
  }
  System_String* ScanCapname() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF53EA0))(this);
  }
  wchar_t ScanOctal() {
    return reinterpret_cast<wchar_t(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF53FB0))(this);
  }
  int32_t ScanDecimal() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF54060))(this);
  }
  wchar_t ScanHex(int32_t c) {
    return reinterpret_cast<wchar_t(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF54180))(this, c);
  }
  wchar_t ScanControl() {
    return reinterpret_cast<wchar_t(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF54310))(this);
  }
  bool IsOnlyTopOption(int32_t option) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF54430))(this, option);
  }
  void ScanOptions() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF54450))(this);
  }
  wchar_t ScanCharEscape() {
    return reinterpret_cast<wchar_t(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF545A0))(this);
  }
  System_String* ParseProperty() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF54A20))(this);
  }
  int32_t TypeFromCode(wchar_t ch) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF54C50))(this, ch);
  }
  void CountCaptures() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF54D70))(this);
  }
  void NoteCaptureSlot(int32_t i, int32_t pos) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF551A0))(this, i, pos);
  }
  void NoteCaptureName(System_String* name, int32_t pos) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF552F0))(this, name, pos);
  }
  void NoteCaptures(ModdingAPI::Exposed::System::Collections::Hashtable* caps, int32_t capsize, ModdingAPI::Exposed::System::Collections::Hashtable* capnames) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, ModdingAPI::Exposed::System::Collections::Hashtable*, int32_t, ModdingAPI::Exposed::System::Collections::Hashtable*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF555B0))(this, caps, capsize, capnames);
  }
  void AssignNameSlots() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF555C0))(this);
  }
  int32_t CaptureSlotFromName(System_String* capname) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF560B0))(this, capname);
  }
  bool IsCaptureSlot(int32_t i) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF56180))(this, i);
  }
  bool IsCaptureName(System_String* capname) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF56270))(this, capname);
  }
  bool UseOptionN() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF56290))(this);
  }
  bool UseOptionI() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF562A0))(this);
  }
  bool UseOptionM() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF562B0))(this);
  }
  bool UseOptionS() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF562C0))(this);
  }
  bool UseOptionX() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF562D0))(this);
  }
  bool UseOptionE() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF562E0))(this);
  }
  bool IsTrueQuantifier() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF56590))(this);
  }
  void AddConcatenate(int32_t pos, int32_t cch, bool isReplacement) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF56950))(this, pos, cch, isReplacement);
  }
  void PushGroup() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF56DC0))(this);
  }
  void PopGroup() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF56E20))(this);
  }
  bool EmptyStack() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF56F50))(this);
  }
  void StartGroup(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode* openGroup) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF56F60))(this, openGroup);
  }
  void AddAlternate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF57180))(this);
  }
  void AddConcatenate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF57370))(this);
  }
  void AddConcatenate(bool lazy, int32_t min, int32_t max) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, bool, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF573B0))(this, lazy, min, max);
  }
  ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode* Unit() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode*(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335370))(this);
  }
  void AddUnitOne(wchar_t ch) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF57410))(this, ch);
  }
  void AddUnitNotone(wchar_t ch) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF575B0))(this, ch);
  }
  void AddUnitSet(System_String* cc) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF57750))(this, cc);
  }
  void AddUnitNode(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, ModdingAPI::Exposed::System::Text::RegularExpressions::RegexNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A410))(this, node);
  }
  void AddUnitType(int32_t type) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF578B0))(this, type);
  }
  void AddGroup() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF57A10))(this);
  }
  void PushOptions() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF57BE0))(this);
  }
  void PopOptions() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF57C80))(this);
  }
  bool EmptyOptionsStack() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF57D80))(this);
  }
  void PopKeepOptions() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF57E10))(this);
  }
  ModdingAPI::Exposed::System::ArgumentException* MakeException(System_String* message) {
    return reinterpret_cast<ModdingAPI::Exposed::System::ArgumentException*(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF57EF0))(this, message);
  }
  int32_t Textpos() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8E0))(this);
  }
  void Textto(int32_t pos) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8F0))(this, pos);
  }
  wchar_t MoveRightGetChar() {
    return reinterpret_cast<wchar_t(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF58120))(this);
  }
  void MoveRight() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF58150))(this);
  }
  void MoveRight(int32_t i) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF58160))(this, i);
  }
  void MoveLeft() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF58170))(this);
  }
  wchar_t CharAt(int32_t i) {
    return reinterpret_cast<wchar_t(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF58180))(this, i);
  }
  wchar_t RightChar() {
    return reinterpret_cast<wchar_t(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF581A0))(this);
  }
  wchar_t RightChar(int32_t i) {
    return reinterpret_cast<wchar_t(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF581D0))(this, i);
  }
  int32_t CharsRight() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF58200))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*> _category = __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->_category; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::System::Text::RegularExpressions::RegexTree* Parse(System_String* re, int32_t op) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::RegularExpressions::RegexTree*(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF4E380))(re, op);
  }
  static inline ModdingAPI::Exposed::System::Text::RegularExpressions::RegexReplacement* ParseReplacement(System_String* rep, ModdingAPI::Exposed::System::Collections::Hashtable* caps, int32_t capsize, ModdingAPI::Exposed::System::Collections::Hashtable* capnames, int32_t op) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::RegularExpressions::RegexReplacement*(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Collections::Hashtable*, int32_t, ModdingAPI::Exposed::System::Collections::Hashtable*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF4E7A0))(rep, caps, capsize, capnames, op);
  }
  static inline System_String* Escape(System_String* input) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF4EA90))(input);
  }
  static inline int32_t HexDigit(wchar_t ch) {
    return reinterpret_cast<int32_t(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF542E0))(ch);
  }
  static inline int32_t OptionFromCode(wchar_t ch) {
    return reinterpret_cast<int32_t(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF54CD0))(ch);
  }
  static inline bool IsSpecial(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF562F0))(ch);
  }
  static inline bool IsStopperX(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF563D0))(ch);
  }
  static inline bool IsQuantifier(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF564B0))(ch);
  }
  static inline bool IsSpace(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF56790))(ch);
  }
  static inline bool IsMetachar(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF56870))(ch);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF58220))();
  }
};
}