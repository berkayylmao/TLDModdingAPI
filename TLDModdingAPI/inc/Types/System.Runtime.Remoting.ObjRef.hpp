// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Runtime.Serialization.StreamingContext.hpp"


namespace ModdingAPI::Exposed::System::Runtime::Remoting {
struct __ObjRef_Il2CppStaticFields {
  int32_t MarshalledObjectRef;
  int32_t WellKnowObjectRef;
};

struct __ObjRef_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _6_get_ChannelInfo;
  VirtualInvokeData _7_get_EnvoyInfo;
  VirtualInvokeData _8_set_EnvoyInfo;
  VirtualInvokeData _9_get_TypeInfo;
  VirtualInvokeData _10_set_TypeInfo;
  VirtualInvokeData _11_get_URI;
  VirtualInvokeData _12_set_URI;
  VirtualInvokeData _13_GetObjectData;
  VirtualInvokeData _14_GetRealObject;
};

struct __ObjRef_Il2CppClass {
  Il2CppClass_1 _1;
  __ObjRef_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ObjRef_Il2CppVtbl vtbl;
};

class ObjRef {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C63328;
  static inline    ObjRef* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C568D0;
  static inline    __ObjRef_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline ObjRef* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (ObjRef**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __ObjRef_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ObjRef_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ObjRef_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Runtime::Remoting::IChannelInfo* channel_info;
  System_String* uri;
  ModdingAPI::Exposed::System::Runtime::Remoting::IRemotingTypeInfo* typeInfo;
  ModdingAPI::Exposed::System::Runtime::Remoting::IEnvoyInfo* envoyInfo;
  int32_t flags;
  ModdingAPI::Exposed::System::Type* _serverType;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6F530))(this);
  }
  void ::ctor(System_String* uri, ModdingAPI::Exposed::System::Runtime::Remoting::IChannelInfo* cinfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*, System_String*, ModdingAPI::Exposed::System::Runtime::Remoting::IChannelInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6F540))(this, uri, cinfo);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef* DeserializeInTheCurrentDomain(int32_t domainId, ModdingAPI::Exposed::System::Byte_array* tInfo) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*, int32_t, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6F550))(this, domainId, tInfo);
  }
  ModdingAPI::Exposed::System::Byte_array* SerializeType() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6F890))(this);
  }
  void ::ctor(ModdingAPI::Exposed::System::Type* type, System_String* url, Il2CppObject* remoteChannelData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*, ModdingAPI::Exposed::System::Type*, System_String*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6F960))(this, type, url, remoteChannelData);
  }
  void ::ctor(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo* info, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*, ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6FBD0))(this, info, context);
  }
  bool get_IsReferenceToWellKnow() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF70000))(this);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::IChannelInfo* get_ChannelInfo() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::IChannelInfo*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::IEnvoyInfo* get_EnvoyInfo() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::IEnvoyInfo*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110B0))(this);
  }
  void set_EnvoyInfo(ModdingAPI::Exposed::System::Runtime::Remoting::IEnvoyInfo* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*, ModdingAPI::Exposed::System::Runtime::Remoting::IEnvoyInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110C0))(this, value);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::IRemotingTypeInfo* get_TypeInfo() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::IRemotingTypeInfo*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110A0))(this);
  }
  void set_TypeInfo(ModdingAPI::Exposed::System::Runtime::Remoting::IRemotingTypeInfo* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*, ModdingAPI::Exposed::System::Runtime::Remoting::IRemotingTypeInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x310F00))(this, value);
  }
  System_String* get_URI() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  void set_URI(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3E0))(this, value);
  }
  void GetObjectData(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo* info, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*, ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF700B0))(this, info, context);
  }
  Il2CppObject* GetRealObject(ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext context) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF70250))(this, context);
  }
  void UpdateChannelInfo() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF70340))(this);
  }
  ModdingAPI::Exposed::System::Type* get_ServerType() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF70500))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<int32_t> MarshalledObjectRef = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->MarshalledObjectRef; }
  );
  static inline __CppStaticProperty<int32_t> WellKnowObjectRef = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->WellKnowObjectRef; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF70610))();
  }
};
}