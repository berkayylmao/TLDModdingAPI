// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Runtime.Serialization.StreamingContext.hpp"


namespace ModdingAPI::Exposed::System::Text {
struct __EncoderNLS_Il2CppStaticFields {
};

struct __EncoderNLS_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Reset;
  VirtualInvokeData _5_GetByteCount;
  VirtualInvokeData _6_GetByteCount;
  VirtualInvokeData _7_GetBytes;
  VirtualInvokeData _8_GetBytes;
  VirtualInvokeData _9_Convert;
  VirtualInvokeData _10_Convert;
  VirtualInvokeData _11_System_Runtime_Serialization_ISerializable_GetObjectData;
  VirtualInvokeData _12_get_HasState;
};

struct __EncoderNLS_Il2CppClass {
  Il2CppClass_1 _1;
  __EncoderNLS_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __EncoderNLS_Il2CppVtbl vtbl;
};

class EncoderNLS {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C33718;
  static inline    __EncoderNLS_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __EncoderNLS_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__EncoderNLS_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __EncoderNLS_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Text::EncoderFallback* m_fallback;
  ModdingAPI::Exposed::System::Text::EncoderFallbackBuffer* m_fallbackBuffer;
  wchar_t charLeftOver;
  ModdingAPI::Exposed::System::Text::Encoding* m_encoding;
  bool m_mustFlush;
  bool m_throwOnOverflow;
  int32_t m_charsUsed;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo* info, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::EncoderNLS*, ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA5F10))(this, info, context);
  }
  void System::Runtime::Serialization::ISerializable::GetObjectData(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo* info, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::EncoderNLS*, ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA6010))(this, info, context);
  }
  void ::ctor(ModdingAPI::Exposed::System::Text::Encoding* encoding) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::EncoderNLS*, ModdingAPI::Exposed::System::Text::Encoding*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA6180))(this, encoding);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::EncoderNLS*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA61B0))(this);
  }
  void Reset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::EncoderNLS*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA61D0))(this);
  }
  int32_t GetByteCount(ModdingAPI::Exposed::System::Char_array* chars, int32_t index, int32_t count, bool flush) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Text::EncoderNLS*, ModdingAPI::Exposed::System::Char_array*, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA6200))(this, chars, index, count, flush);
  }
  int32_t GetByteCount(wchar_t* chars, int32_t count, bool flush) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Text::EncoderNLS*, wchar_t*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA63F0))(this, chars, count, flush);
  }
  int32_t GetBytes(ModdingAPI::Exposed::System::Char_array* chars, int32_t charIndex, int32_t charCount, ModdingAPI::Exposed::System::Byte_array* bytes, int32_t byteIndex, bool flush) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Text::EncoderNLS*, ModdingAPI::Exposed::System::Char_array*, int32_t, int32_t, ModdingAPI::Exposed::System::Byte_array*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA6560))(this, chars, charIndex, charCount, bytes, byteIndex, flush);
  }
  int32_t GetBytes(wchar_t* chars, int32_t charCount, uint8_t* bytes, int32_t byteCount, bool flush) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Text::EncoderNLS*, wchar_t*, int32_t, uint8_t*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA6820))(this, chars, charCount, bytes, byteCount, flush);
  }
  void Convert(ModdingAPI::Exposed::System::Char_array* chars, int32_t charIndex, int32_t charCount, ModdingAPI::Exposed::System::Byte_array* bytes, int32_t byteIndex, int32_t byteCount, bool flush, int32_t charsUsed, int32_t bytesUsed, bool completed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::EncoderNLS*, ModdingAPI::Exposed::System::Char_array*, int32_t, int32_t, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, bool, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA69C0))(this, chars, charIndex, charCount, bytes, byteIndex, byteCount, flush, charsUsed, bytesUsed, completed);
  }
  void Convert(wchar_t* chars, int32_t charCount, uint8_t* bytes, int32_t byteCount, bool flush, int32_t charsUsed, int32_t bytesUsed, bool completed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::EncoderNLS*, wchar_t*, int32_t, uint8_t*, int32_t, bool, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA6D10))(this, chars, charCount, bytes, byteCount, flush, charsUsed, bytesUsed, completed);
  }
  ModdingAPI::Exposed::System::Text::Encoding* get_Encoding() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::Encoding*(__fastcall*)(ModdingAPI::Exposed::System::Text::EncoderNLS*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110B0))(this);
  }
  bool get_MustFlush() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::EncoderNLS*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x57C620))(this);
  }
  bool get_HasState() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::EncoderNLS*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xEA6F20))(this);
  }
  void ClearMustFlush() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::EncoderNLS*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCAA370))(this);
  }
};
}