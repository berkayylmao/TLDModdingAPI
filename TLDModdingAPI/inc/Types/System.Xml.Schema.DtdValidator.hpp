// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Xml::Schema {
struct __DtdValidator_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Xml::Schema::DtdValidator::NamespaceManager* namespaceManager;
};

struct __DtdValidator_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_PreserveWhitespace;
  VirtualInvokeData _5_Validate;
  VirtualInvokeData _6_CompleteValidation;
  VirtualInvokeData _7_FindId;
};

struct __DtdValidator_Il2CppClass {
  Il2CppClass_1 _1;
  __DtdValidator_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __DtdValidator_Il2CppVtbl vtbl;
};

class DtdValidator {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C81CC8;
  static inline    __DtdValidator_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __DtdValidator_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__DtdValidator_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __DtdValidator_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaCollection* BaseValidator_schemaCollection;
  ModdingAPI::Exposed::System::Xml::IValidationEventHandling* BaseValidator_eventHandling;
  ModdingAPI::Exposed::System::Xml::XmlNameTable* BaseValidator_nameTable;
  ModdingAPI::Exposed::System::Xml::Schema::SchemaNames* BaseValidator_schemaNames;
  ModdingAPI::Exposed::System::Xml::PositionInfo* BaseValidator_positionInfo;
  ModdingAPI::Exposed::System::Xml::XmlResolver* BaseValidator_xmlResolver;
  ModdingAPI::Exposed::System::Uri* BaseValidator_baseUri;
  ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo* schemaInfo;
  ModdingAPI::Exposed::System::Xml::XmlValidatingReaderImpl* reader;
  ModdingAPI::Exposed::System::Xml::XmlQualifiedName* elementName;
  ModdingAPI::Exposed::System::Xml::Schema::ValidationState* context;
  ModdingAPI::Exposed::System::Text::StringBuilder* textValue;
  System_String* textString;
  bool hasSibling;
  bool checkDatatype;
  ModdingAPI::Exposed::System::Xml::HWStack* validationStack;
  ModdingAPI::Exposed::System::Collections::Hashtable* attPresence;
  ModdingAPI::Exposed::System::Xml::XmlQualifiedName* name;
  ModdingAPI::Exposed::System::Collections::Hashtable* IDs;
  ModdingAPI::Exposed::System::Xml::Schema::IdRefNode* idRefListHead;
  bool processIdentityConstraints;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Xml::XmlValidatingReaderImpl* reader, ModdingAPI::Exposed::System::Xml::IValidationEventHandling* eventHandling, bool processIdentityConstraints) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*, ModdingAPI::Exposed::System::Xml::XmlValidatingReaderImpl*, ModdingAPI::Exposed::System::Xml::IValidationEventHandling*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD79D00))(this, reader, eventHandling, processIdentityConstraints);
  }
  void Init() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD79E00))(this);
  }
  void Validate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7A210))(this);
  }
  bool MeetsStandAloneConstraint() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7A720))(this);
  }
  void ValidatePIComment() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7A820))(this);
  }
  void ValidateElement() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7A920))(this);
  }
  void ValidateChildElement() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7AAE0))(this);
  }
  void ValidateStartElement() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7ACE0))(this);
  }
  void ValidateEndStartElement() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7B330))(this);
  }
  void ProcessElement() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7B560))(this);
  }
  void CompleteValidation() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7B6F0))(this);
  }
  void ValidateEndElement() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7B750))(this);
  }
  bool get_PreserveWhitespace() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89F290))(this);
  }
  void ProcessTokenizedType(int32_t ttype, System_String* name) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7B9B0))(this, ttype, name);
  }
  void CheckValue(System_String* value, ModdingAPI::Exposed::System::Xml::Schema::SchemaAttDef* attdef) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*, System_String*, ModdingAPI::Exposed::System::Xml::Schema::SchemaAttDef*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7BCE0))(this, value, attdef);
  }
  void AddID(System_String* name, Il2CppObject* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*, System_String*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7C240))(this, name, node);
  }
  Il2CppObject* FindId(System_String* name) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7C3E0))(this, name);
  }
  bool GenEntity(ModdingAPI::Exposed::System::Xml::XmlQualifiedName* qname) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7C400))(this, qname);
  }
  ModdingAPI::Exposed::System::Xml::Schema::SchemaEntity* GetEntity(ModdingAPI::Exposed::System::Xml::XmlQualifiedName* qname, bool fParameterEntity) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::SchemaEntity*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7C5F0))(this, qname, fParameterEntity);
  }
  void CheckForwardRefs() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7C7A0))(this);
  }
  void Push(ModdingAPI::Exposed::System::Xml::XmlQualifiedName* elementName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7C9B0))(this, elementName);
  }
  bool Pop() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::DtdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7CBE0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Xml::Schema::DtdValidator::NamespaceManager*> namespaceManager = __CppStaticProperty<ModdingAPI::Exposed::System::Xml::Schema::DtdValidator::NamespaceManager*>(
   []() { return &GetStaticClassInstance()->pStaticFields->namespaceManager; }
  );

  // Static methods:
  static inline void SetDefaultTypedValue(ModdingAPI::Exposed::System::Xml::Schema::SchemaAttDef* attdef, ModdingAPI::Exposed::System::Xml::IDtdParserAdapter* readerAdapter) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaAttDef*, ModdingAPI::Exposed::System::Xml::IDtdParserAdapter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7CD40))(attdef, readerAdapter);
  }
  static inline void CheckDefaultValue(ModdingAPI::Exposed::System::Xml::Schema::SchemaAttDef* attdef, ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo* sinfo, ModdingAPI::Exposed::System::Xml::IValidationEventHandling* eventHandling, System_String* baseUriStr) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaAttDef*, ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*, ModdingAPI::Exposed::System::Xml::IValidationEventHandling*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7D010))(attdef, sinfo, eventHandling, baseUriStr);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7D4A0))();
  }
};
}