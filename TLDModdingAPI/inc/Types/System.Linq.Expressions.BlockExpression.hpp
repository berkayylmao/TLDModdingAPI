// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Linq::Expressions {
struct __BlockExpression_Il2CppStaticFields {
};

struct __BlockExpression_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_NodeType;
  VirtualInvokeData _5_get_Type;
  VirtualInvokeData _6_get_CanReduce;
  VirtualInvokeData _7_Reduce;
  VirtualInvokeData _8_VisitChildren;
  VirtualInvokeData _9_Accept;
  VirtualInvokeData _10_GetExpression;
  VirtualInvokeData _11_get_ExpressionCount;
  VirtualInvokeData _12_GetOrMakeVariables;
  VirtualInvokeData _13_Rewrite;
};

struct __BlockExpression_Il2CppClass {
  Il2CppClass_1 _1;
  __BlockExpression_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __BlockExpression_Il2CppVtbl vtbl;
};

class BlockExpression {
public:
  // Il2Cpp fields:
  __BlockExpression_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member methods:
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* get_Variables() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_*(__fastcall*)(ModdingAPI::Exposed::System::Linq::Expressions::BlockExpression*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB13430))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Linq::Expressions::BlockExpression*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11DBB00))(this);
  }
  ModdingAPI::Exposed::System::Linq::Expressions::Expression* Accept(ModdingAPI::Exposed::System::Linq::Expressions::ExpressionVisitor* visitor) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Linq::Expressions::Expression*(__fastcall*)(ModdingAPI::Exposed::System::Linq::Expressions::BlockExpression*, ModdingAPI::Exposed::System::Linq::Expressions::ExpressionVisitor*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11DBB90))(this, visitor);
  }
  int32_t get_NodeType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Linq::Expressions::BlockExpression*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC9BE30))(this);
  }
  ModdingAPI::Exposed::System::Type* get_Type() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::Linq::Expressions::BlockExpression*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11DBBC0))(this);
  }
  ModdingAPI::Exposed::System::Linq::Expressions::Expression* GetExpression(int32_t index) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Linq::Expressions::Expression*(__fastcall*)(ModdingAPI::Exposed::System::Linq::Expressions::BlockExpression*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11DBC20))(this, index);
  }
  int32_t get_ExpressionCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Linq::Expressions::BlockExpression*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11DBC60))(this);
  }
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* GetOrMakeVariables() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_*(__fastcall*)(ModdingAPI::Exposed::System::Linq::Expressions::BlockExpression*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11DBCA0))(this);
  }
  ModdingAPI::Exposed::System::Linq::Expressions::BlockExpression* Rewrite(ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* variables, ModdingAPI::Exposed::System::Linq::Expressions::Expression_array* args) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Linq::Expressions::BlockExpression*(__fastcall*)(ModdingAPI::Exposed::System::Linq::Expressions::BlockExpression*, ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_*, ModdingAPI::Exposed::System::Linq::Expressions::Expression_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11DBD40))(this, variables, args);
  }
};
}