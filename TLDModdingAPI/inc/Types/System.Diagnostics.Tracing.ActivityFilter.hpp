// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Guid.hpp"
#include "ModdingAPI::Exposed::System::Guid.hpp"


namespace ModdingAPI::Exposed::System::Diagnostics::Tracing {
struct __ActivityFilter_Il2CppStaticFields {
};

struct __ActivityFilter_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Dispose;
};

struct __ActivityFilter_Il2CppClass {
  Il2CppClass_1 _1;
  __ActivityFilter_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ActivityFilter_Il2CppVtbl vtbl;
};

class ActivityFilter {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C426B0;
  static inline    __ActivityFilter_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ActivityFilter_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ActivityFilter_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ActivityFilter_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Collections::Concurrent::ConcurrentDictionary_TKey__TValue_* m_activeActivities;
  ModdingAPI::Exposed::System::Collections::Concurrent::ConcurrentDictionary_TKey__TValue_* m_rootActiveActivities;
  ModdingAPI::Exposed::System::Guid m_providerGuid;
  int32_t m_eventId;
  int32_t m_samplingFreq;
  int32_t m_curSampleCount;
  int32_t m_perEventSourceSessionId;
  ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter* m_next;
  ModdingAPI::Exposed::System::Action_T_* m_myActivityDelegate;

  // Member methods:
  ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_* GetFilterAsTuple(ModdingAPI::Exposed::System::Guid sourceGuid) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter*, ModdingAPI::Exposed::System::Guid)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6E5C30))(this, sourceGuid);
  }
  void Dispose() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6E5DD0))(this);
  }
  void ::ctor(ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource* source, int32_t perEventSourceSessionId, int32_t eventId, int32_t samplingFreq, ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter* existingFilter) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter*, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource*, int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6E5ED0))(this, source, perEventSourceSessionId, eventId, samplingFreq, existingFilter);
  }

  // Static methods:
  static inline void DisableFilter(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter* filterList, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource* source) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter*, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6E4A40))(filterList, source);
  }
  static inline void UpdateFilter(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter* filterList, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource* source, int32_t perEventSourceSessionId, System_String* startEvents) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter*, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource*, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6E4E70))(filterList, source, perEventSourceSessionId, startEvents);
  }
  static inline bool PassesActivityFilter(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter* filterList, ModdingAPI::Exposed::System::Guid* childActivityID, bool triggeringEvent, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource* source, int32_t eventId) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter*, ModdingAPI::Exposed::System::Guid*, bool, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6E5360))(filterList, childActivityID, triggeringEvent, source, eventId);
  }
  static inline void FlowActivityIfNeeded(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter* filterList, ModdingAPI::Exposed::System::Guid* currentActivityId, ModdingAPI::Exposed::System::Guid* childActivityID) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter*, ModdingAPI::Exposed::System::Guid*, ModdingAPI::Exposed::System::Guid*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6E5840))(filterList, currentActivityId, childActivityID);
  }
  static inline void UpdateKwdTriggers(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter* activityFilter, ModdingAPI::Exposed::System::Guid sourceGuid, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource* source, int64_t sessKeywords) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter*, ModdingAPI::Exposed::System::Guid, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6E5A50))(activityFilter, sourceGuid, source, sessKeywords);
  }
  static inline void EnsureActivityCleanupDelegate(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter* filterList) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6E6380))(filterList);
  }
  static inline ModdingAPI::Exposed::System::Action_T_* GetActivityDyingDelegate(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter* filterList) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Action_T_*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6E64C0))(filterList);
  }
  static inline bool EnableFilter(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter* filterList, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource* source, int32_t perEventSourceSessionId, int32_t eventId, int32_t samplingFreq) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter*, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventSource*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6E66E0))(filterList, source, perEventSourceSessionId, eventId, samplingFreq);
  }
  static inline void TrimActiveActivityStore(ModdingAPI::Exposed::System::Collections::Concurrent::ConcurrentDictionary_TKey__TValue_* activities) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::Concurrent::ConcurrentDictionary_TKey__TValue_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6E68D0))(activities);
  }
  static inline ModdingAPI::Exposed::System::Collections::Concurrent::ConcurrentDictionary_TKey__TValue_* GetActiveActivities(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter* filterList) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Concurrent::ConcurrentDictionary_TKey__TValue_*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ActivityFilter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6E6CB0))(filterList);
  }
};
}