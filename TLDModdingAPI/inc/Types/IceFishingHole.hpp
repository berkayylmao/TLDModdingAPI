// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __IceFishingHole_Il2CppStaticFields {
  float CAUGHT_FISH_INTERFACE_COOLDOWN;
  ModdingAPI::Exposed::IceFishingHoleSaveData* m_IceFishingHoleSaveData;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_IceFishingHoles;
};

struct __IceFishingHole_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __IceFishingHole_Il2CppClass {
  Il2CppClass_1 _1;
  __IceFishingHole_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __IceFishingHole_Il2CppVtbl vtbl;
};

class IceFishingHole {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C44A10;
  static inline    __IceFishingHole_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __IceFishingHole_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__IceFishingHole_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __IceFishingHole_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::LocalizedString* m_LocalizedDisplayName;
  float m_MinutesBeforeFreezingStartsAfterClearing;
  float m_FreezePercentPerGameHour;
  float m_MinGameMinutesCatchFish;
  float m_MaxGameMinutesCatchFish;
  System_String* m_FishingProgressAudio;
  System_String* m_CatchFishAudio;
  System_String* m_FreeFishAudio;
  System_String* m_BreakThroughIceAudio;
  ModdingAPI::Exposed::LootTable* m_LootTablePrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ClosedHoleMesh;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_PartialHoleMesh;
  float m_MinutesSinceLastClearing;
  float m_NormalizedFrozen;
  bool m_FishingInProgress;
  float m_ElapsedFishingTimeMinutes;
  float m_NextCatchTimeMinutes;
  ModdingAPI::Exposed::GearItem* m_FishingGearUsed;
  bool m_StartHasBeenCalled;
  float m_JustCaughtCancelCooldown;

  // Member methods:
  System_String* get_m_DisplayName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E35A0))(this);
  }
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1759840))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1759960))(this);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17599A0))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17599A0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17599B0))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1759DC0))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175A090))(this, text);
  }
  void OnClick() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175A980))(this);
  }
  System_String* GetHoverText() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175AC50))(this);
  }
  float GetNormalizedFrozen() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175AE00))(this);
  }
  void SetNormalizedFrozen(float normalized) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175AE10))(this, normalized);
  }
  void ClearHole() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175B000))(this);
  }
  void StartFishing(float seconds, float minutes) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175B110))(this, seconds, minutes);
  }
  void OnFishingComplete(bool success, bool playerCancel, float progress) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*, bool, bool, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175B360))(this, success, playerCancel, progress);
  }
  void CancelFishing(bool fromInputManager) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175B370))(this, fromInputManager);
  }
  bool IsFishingInProgress() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C1CD0))(this);
  }
  void MaybeExitFishing() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175B4E0))(this);
  }
  void MaybeCatchFish() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175B610))(this);
  }
  bool RollForLineBreak() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175BAB0))(this);
  }
  void LineBreak() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175BC10))(this);
  }
  void CatchFish() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175BE50))(this);
  }
  void RevealFishInInspectMode(ModdingAPI::Exposed::UnityEngine::GameObject* go) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175C000))(this, go);
  }
  void UpdateFrozenState() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175C6B0))(this);
  }
  void SetFishingInProgress(bool inProgress) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175C920))(this, inProgress);
  }
  void SetNextCatchTime() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175CA20))(this);
  }
  void UpdateFishingTime(float realtimeSeconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175CC90))(this, realtimeSeconds);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::IceFishingHole*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<float> CAUGHT_FISH_INTERFACE_COOLDOWN = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->CAUGHT_FISH_INTERFACE_COOLDOWN; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::IceFishingHoleSaveData*> m_IceFishingHoleSaveData = __CppStaticProperty<ModdingAPI::Exposed::IceFishingHoleSaveData*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_IceFishingHoleSaveData; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> m_IceFishingHoles = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_IceFishingHoles; }
  );

  // Static methods:
  static inline void Reset() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x175A280))();
  }
  static inline System_String* SerializeAll() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x175A360))();
  }
  static inline void DeserializeAll(System_String* text) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175A710))(text);
  }
  static inline ModdingAPI::Exposed::IceFishingHole* FindIceFishingHoleByPosition(ModdingAPI::Exposed::IceFishingHoleSaveData* proxy) {
    return reinterpret_cast<ModdingAPI::Exposed::IceFishingHole*(__fastcall*)(ModdingAPI::Exposed::IceFishingHoleSaveData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175CDE0))(proxy);
  }
  static inline ModdingAPI::Exposed::IceFishingHole* FindIceFishingHoleByGuid(System_String* guid) {
    return reinterpret_cast<ModdingAPI::Exposed::IceFishingHole*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x175D0E0))(guid);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x175D1D0))();
  }
};
}