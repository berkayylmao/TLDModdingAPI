// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Globalization.TimeSpanFormat.FormatLiterals.hpp"
#include "ModdingAPI.Exposed.System.Globalization.TimeSpanParse.TimeSpanToken.hpp"
#include "ModdingAPI.Exposed.System.Globalization.TimeSpanParse.TimeSpanResult.hpp"

namespace ModdingAPI::Exposed::System::Globalization::TimeSpanParse {
struct __TimeSpanRawInfo_Il2CppObject {
  int32_t lastSeenTTT;
  int32_t tokenCount;
  int32_t SepCount;
  int32_t NumCount;
  ModdingAPI::Exposed::System::String_array* literals;
  ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanToken_array* numbers;
  ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals m_posLoc;
  ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals m_negLoc;
  bool m_posLocInit;
  bool m_negLocInit;
  System_String* m_fullPosPattern;
  System_String* m_fullNegPattern;
};
struct __TimeSpanRawInfo_Il2CppStaticFields {
};

struct __TimeSpanRawInfo_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __TimeSpanRawInfo_Il2CppClass {
  Il2CppClass_1 _1;
  __TimeSpanRawInfo_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TimeSpanRawInfo_Il2CppVtbl vtbl;
};

class TimeSpanRawInfo {
public:
  // Member fields:
  int32_t lastSeenTTT;
  int32_t tokenCount;
  int32_t SepCount;
  int32_t NumCount;
  ModdingAPI::Exposed::System::String_array* literals;
  ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanToken_array* numbers;
  ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals m_posLoc;
  ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals m_negLoc;
  bool m_posLocInit;
  bool m_negLocInit;
  System_String* m_fullPosPattern;
  System_String* m_fullNegPattern;

  // Member methods:
  ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals get_PositiveInvariant() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals(__fastcall*)(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanRawInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26280))(this);
  }
  ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals get_NegativeInvariant() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals(__fastcall*)(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanRawInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x262C0))(this);
  }
  ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals get_PositiveLocalized() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals(__fastcall*)(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanRawInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26300))(this);
  }
  ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals get_NegativeLocalized() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals(__fastcall*)(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanRawInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26370))(this);
  }
  bool FullAppCompatMatch(ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals pattern) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanRawInfo*, ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals)>(Helpers::Memory::GetInstance().MakeAbsolute(0x263E0))(this, pattern);
  }
  bool PartialAppCompatMatch(ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals pattern) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanRawInfo*, ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26420))(this, pattern);
  }
  bool FullMatch(ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals pattern) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanRawInfo*, ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26460))(this, pattern);
  }
  bool FullDMatch(ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals pattern) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanRawInfo*, ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals)>(Helpers::Memory::GetInstance().MakeAbsolute(0x264A0))(this, pattern);
  }
  bool FullHMMatch(ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals pattern) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanRawInfo*, ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals)>(Helpers::Memory::GetInstance().MakeAbsolute(0x264E0))(this, pattern);
  }
  bool FullDHMMatch(ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals pattern) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanRawInfo*, ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26520))(this, pattern);
  }
  bool FullHMSMatch(ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals pattern) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanRawInfo*, ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26560))(this, pattern);
  }
  bool FullDHMSMatch(ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals pattern) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanRawInfo*, ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals)>(Helpers::Memory::GetInstance().MakeAbsolute(0x265A0))(this, pattern);
  }
  bool FullHMSFMatch(ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals pattern) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanRawInfo*, ModdingAPI::Exposed::System::Globalization::TimeSpanFormat::FormatLiterals)>(Helpers::Memory::GetInstance().MakeAbsolute(0x265E0))(this, pattern);
  }
  void Init(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanRawInfo*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26620))(this, dtfi);
  }
  bool ProcessToken(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanToken tok, ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanResult result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanRawInfo*, ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanToken, ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanResult)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26630))(this, tok, result);
  }
  bool AddSep(System_String* sep, ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanResult result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanRawInfo*, System_String*, ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanResult)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26640))(this, sep, result);
  }
  bool AddNum(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanToken num, ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanResult result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanRawInfo*, ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanToken, ModdingAPI::Exposed::System::Globalization::TimeSpanParse::TimeSpanResult)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26650))(this, num, result);
  }

};
}