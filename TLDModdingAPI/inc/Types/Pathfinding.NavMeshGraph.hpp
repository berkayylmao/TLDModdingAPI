// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Matrix4x4.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.Pathfinding.Int3.hpp"
#include "ModdingAPI.Exposed.Pathfinding.NNInfo.hpp"
#include "ModdingAPI.Exposed.Pathfinding.GraphHitInfo.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"
#include "ModdingAPI::Exposed::Pathfinding::GraphHitInfo.hpp"


namespace ModdingAPI::Exposed::Pathfinding {
struct __NavMeshGraph_Il2CppStaticFields {
};

struct __NavMeshGraph_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_CountNodes;
  VirtualInvokeData _5_GetNodes;
  VirtualInvokeData _6_RelocateNodes;
  VirtualInvokeData _7_GetNearest;
  VirtualInvokeData _8_GetNearestForce;
  VirtualInvokeData _9_Awake;
  VirtualInvokeData _10_OnDestroy;
  VirtualInvokeData _11_ScanInternal;
  VirtualInvokeData _12_NodeColor;
  VirtualInvokeData _13_SerializeExtraInfo;
  VirtualInvokeData _14_DeserializeExtraInfo;
  VirtualInvokeData _15_PostDeserialization;
  VirtualInvokeData _16_SerializeSettings;
  VirtualInvokeData _17_DeserializeSettings;
  VirtualInvokeData _18_OnDrawGizmos;
  VirtualInvokeData _19_UnloadGizmoMeshes;
  VirtualInvokeData _21_UpdateArea;
  VirtualInvokeData _22_UpdateAreaInit;
  VirtualInvokeData _23_CanUpdateAsync;
  VirtualInvokeData _24_GetVertex;
  VirtualInvokeData _25_GetVertexArrayIndex;
  VirtualInvokeData _26_GetTileCoordinates;
  VirtualInvokeData _27_Linecast;
  VirtualInvokeData _28_Linecast;
  VirtualInvokeData _29_Linecast;
  VirtualInvokeData _30_Linecast;
};

struct __NavMeshGraph_Il2CppClass {
  Il2CppClass_1 _1;
  __NavMeshGraph_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __NavMeshGraph_Il2CppVtbl vtbl;
};

class NavMeshGraph {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C4EF40;
  static inline    NavMeshGraph* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C39558;
  static inline    __NavMeshGraph_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline NavMeshGraph* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (NavMeshGraph**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __NavMeshGraph_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__NavMeshGraph_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __NavMeshGraph_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Byte_array* _sguid;
  ModdingAPI::Exposed::AstarPath* active;
  uint32_t initialPenalty;
  bool open;
  uint32_t graphIndex;
  System_String* name;
  bool drawGizmos;
  bool infoScreenOpen;
  ModdingAPI::Exposed::UnityEngine::Matrix4x4 matrix;
  ModdingAPI::Exposed::UnityEngine::Matrix4x4 inverseMatrix;
  ModdingAPI::Exposed::UnityEngine::Mesh* sourceMesh;
  ModdingAPI::Exposed::UnityEngine::Vector3 offset;
  ModdingAPI::Exposed::UnityEngine::Vector3 rotation;
  float scale;
  bool accurateNearestNode;
  ModdingAPI::Exposed::Pathfinding::TriangleMeshNode_array* nodes;
  ModdingAPI::Exposed::Pathfinding::BBTree* _bbTree;
  ModdingAPI::Exposed::Pathfinding::Int3_array* _vertices;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* originalVertices;
  ModdingAPI::Exposed::System::Int32_array* triangles;

  // Member methods:
  ModdingAPI::Exposed::Pathfinding::TriangleMeshNode_array* get_TriNodes() {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::TriangleMeshNode_array*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30F200))(this);
  }
  void GetNodes(ModdingAPI::Exposed::Pathfinding::GraphNodeDelegateCancelable* del) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::Pathfinding::GraphNodeDelegateCancelable*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25CC970))(this, del);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25CCA20))(this);
  }
  ModdingAPI::Exposed::Pathfinding::Int3 GetVertex(int32_t index) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::Int3(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25CCAF0))(this, index);
  }
  int32_t GetVertexArrayIndex(int32_t index) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30ED00))(this, index);
  }
  void GetTileCoordinates(int32_t tileIndex, int32_t x, int32_t z) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25CCB50))(this, tileIndex, x, z);
  }
  ModdingAPI::Exposed::Pathfinding::BBTree* get_bbTree() {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::BBTree*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077C0))(this);
  }
  void set_bbTree(ModdingAPI::Exposed::Pathfinding::BBTree* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::Pathfinding::BBTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E070))(this, value);
  }
  ModdingAPI::Exposed::Pathfinding::Int3_array* get_vertices() {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::Int3_array*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E080))(this);
  }
  void set_vertices(ModdingAPI::Exposed::Pathfinding::Int3_array* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::Pathfinding::Int3_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E090))(this, value);
  }
  void GenerateMatrix() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25CCB60))(this);
  }
  void RelocateNodes(ModdingAPI::Exposed::UnityEngine::Matrix4x4 oldMatrix, ModdingAPI::Exposed::UnityEngine::Matrix4x4 newMatrix) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::UnityEngine::Matrix4x4, ModdingAPI::Exposed::UnityEngine::Matrix4x4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25CCE20))(this, oldMatrix, newMatrix);
  }
  ModdingAPI::Exposed::Pathfinding::NNInfo GetNearest(ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint, ModdingAPI::Exposed::Pathfinding::GraphNode* hint) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::NNInfo(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::NNConstraint*, ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25CD900))(this, position, constraint, hint);
  }
  ModdingAPI::Exposed::Pathfinding::NNInfo GetNearestForce(ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::NNInfo(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::NNConstraint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25CD980))(this, position, constraint);
  }
  bool Linecast(ModdingAPI::Exposed::UnityEngine::Vector3 origin, ModdingAPI::Exposed::UnityEngine::Vector3 end) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x219C370))(this, origin, end);
  }
  bool Linecast(ModdingAPI::Exposed::UnityEngine::Vector3 origin, ModdingAPI::Exposed::UnityEngine::Vector3 end, ModdingAPI::Exposed::Pathfinding::GraphNode* hint, ModdingAPI::Exposed::Pathfinding::GraphHitInfo hit) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::Pathfinding::GraphHitInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x219C490))(this, origin, end, hint, hit);
  }
  bool Linecast(ModdingAPI::Exposed::UnityEngine::Vector3 origin, ModdingAPI::Exposed::UnityEngine::Vector3 end, ModdingAPI::Exposed::Pathfinding::GraphNode* hint) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x219C4F0))(this, origin, end, hint);
  }
  bool Linecast(ModdingAPI::Exposed::UnityEngine::Vector3 origin, ModdingAPI::Exposed::UnityEngine::Vector3 end, ModdingAPI::Exposed::Pathfinding::GraphNode* hint, ModdingAPI::Exposed::Pathfinding::GraphHitInfo hit, ModdingAPI::Exposed::System::Collections::Generic::List_T_* trace) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::Pathfinding::GraphHitInfo, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x219C570))(this, origin, end, hint, hit, trace);
  }
  int32_t CanUpdateAsync(ModdingAPI::Exposed::Pathfinding::GraphUpdateObject* o) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::Pathfinding::GraphUpdateObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this, o);
  }
  void UpdateAreaInit(ModdingAPI::Exposed::Pathfinding::GraphUpdateObject* o) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::Pathfinding::GraphUpdateObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, o);
  }
  void UpdateArea(ModdingAPI::Exposed::Pathfinding::GraphUpdateObject* o) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::Pathfinding::GraphUpdateObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25CEE60))(this, o);
  }
  bool ContainsPoint(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode* node, ModdingAPI::Exposed::UnityEngine::Vector3 pos) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25CF680))(this, node, pos);
  }
  void ScanInternal(System_String* objMeshPath) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25CFF10))(this, objMeshPath);
  }
  void ScanInternal(ModdingAPI::Exposed::OnScanStatus* statusCallback) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::OnScanStatus*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25D0040))(this, statusCallback);
  }
  void GenerateNodes(ModdingAPI::Exposed::UnityEngine::Vector3_array* vectorVertices, ModdingAPI::Exposed::System::Int32_array* triangles, ModdingAPI::Exposed::UnityEngine::Vector3_array* originalVertices, ModdingAPI::Exposed::Pathfinding::Int3_array* vertices) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::UnityEngine::Vector3_array*, ModdingAPI::Exposed::System::Int32_array*, ModdingAPI::Exposed::UnityEngine::Vector3_array*, ModdingAPI::Exposed::Pathfinding::Int3_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25D01E0))(this, vectorVertices, triangles, originalVertices, vertices);
  }
  void PostProcess() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnDrawGizmos(bool drawNodes) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25D1FF0))(this, drawNodes);
  }
  void DeserializeExtraInfo(ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext* ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25D2E00))(this, ctx);
  }
  void SerializeExtraInfo(ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext* ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25D3570))(this, ctx);
  }
  void SerializeSettings(ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext* ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25D39B0))(this, ctx);
  }
  void DeserializeSettings(ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext* ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25D3AA0))(this, ctx);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25D3CF0))(this);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::Pathfinding::NNInfo GetNearest(ModdingAPI::Exposed::Pathfinding::NavMeshGraph* graph, ModdingAPI::Exposed::Pathfinding::GraphNode_array* nodes, ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint, bool accurateNearestNode) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::NNInfo(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*, ModdingAPI::Exposed::Pathfinding::GraphNode_array*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::NNConstraint*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25CD2E0))(graph, nodes, position, constraint, accurateNearestNode);
  }
  static inline ModdingAPI::Exposed::Pathfinding::NNInfo GetNearestForce(ModdingAPI::Exposed::Pathfinding::NavGraph* graph, ModdingAPI::Exposed::Pathfinding::INavmeshHolder* navmesh, ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint, bool accurateNearestNode) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::NNInfo(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavGraph*, ModdingAPI::Exposed::Pathfinding::INavmeshHolder*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::NNConstraint*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25CDA50))(graph, navmesh, position, constraint, accurateNearestNode);
  }
  static inline ModdingAPI::Exposed::Pathfinding::NNInfo GetNearestForceBoth(ModdingAPI::Exposed::Pathfinding::NavGraph* graph, ModdingAPI::Exposed::Pathfinding::INavmeshHolder* navmesh, ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint, bool accurateNearestNode) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::NNInfo(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavGraph*, ModdingAPI::Exposed::Pathfinding::INavmeshHolder*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::NNConstraint*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25CDB30))(graph, navmesh, position, constraint, accurateNearestNode);
  }
  static inline bool Linecast(ModdingAPI::Exposed::Pathfinding::INavmesh* graph, ModdingAPI::Exposed::UnityEngine::Vector3 tmp_origin, ModdingAPI::Exposed::UnityEngine::Vector3 tmp_end, ModdingAPI::Exposed::Pathfinding::GraphNode* hint, ModdingAPI::Exposed::Pathfinding::GraphHitInfo hit) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::INavmesh*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::Pathfinding::GraphHitInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x219C490))(graph, tmp_origin, tmp_end, hint, hit);
  }
  static inline bool Linecast(ModdingAPI::Exposed::Pathfinding::INavmesh* graph, ModdingAPI::Exposed::UnityEngine::Vector3 tmp_origin, ModdingAPI::Exposed::UnityEngine::Vector3 tmp_end, ModdingAPI::Exposed::Pathfinding::GraphNode* hint, ModdingAPI::Exposed::Pathfinding::GraphHitInfo hit, ModdingAPI::Exposed::System::Collections::Generic::List_T_* trace) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::INavmesh*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::Pathfinding::GraphHitInfo, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25CE040))(graph, tmp_origin, tmp_end, hint, hit, trace);
  }
  static inline void UpdateArea(ModdingAPI::Exposed::Pathfinding::GraphUpdateObject* o, ModdingAPI::Exposed::Pathfinding::INavmesh* graph) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphUpdateObject*, ModdingAPI::Exposed::Pathfinding::INavmesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25CEE80))(o, graph);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 ClosestPointOnNode(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode* node, ModdingAPI::Exposed::Pathfinding::Int3_array* vertices, ModdingAPI::Exposed::UnityEngine::Vector3 pos) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*, ModdingAPI::Exposed::Pathfinding::Int3_array*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25CF3B0))(node, vertices, pos);
  }
  static inline bool ContainsPoint(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode* node, ModdingAPI::Exposed::UnityEngine::Vector3 pos, ModdingAPI::Exposed::Pathfinding::Int3_array* vertices) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::Int3_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25CFA30))(node, pos, vertices);
  }
  static inline void RebuildBBTree(ModdingAPI::Exposed::Pathfinding::NavMeshGraph* graph) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::NavMeshGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25D1E60))(graph);
  }
};
}