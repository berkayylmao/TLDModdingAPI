// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Steamworks {
struct __SteamMusicRemote_Il2CppStaticFields {
};

struct __SteamMusicRemote_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SteamMusicRemote_Il2CppClass {
  Il2CppClass_1 _1;
  __SteamMusicRemote_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SteamMusicRemote_Il2CppVtbl vtbl;
};

class SteamMusicRemote {
public:
  // Il2Cpp fields:
  __SteamMusicRemote_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline bool RegisterSteamMusicRemote(System_String* pchName) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2811BF0))(pchName);
  }
  static inline bool DeregisterSteamMusicRemote() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2811ED0))();
  }
  static inline bool BIsCurrentMusicRemote() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2811F80))();
  }
  static inline bool BActivationSuccess(bool bValue) {
    return reinterpret_cast<bool(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2812030))(bValue);
  }
  static inline bool SetDisplayName(System_String* pchDisplayName) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28120F0))(pchDisplayName);
  }
  static inline bool SetPNGIcon_64x64(ModdingAPI::Exposed::System::Byte_array* pvBuffer, uint32_t cbBufferLength) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28123D0))(pvBuffer, cbBufferLength);
  }
  static inline bool EnablePlayPrevious(bool bValue) {
    return reinterpret_cast<bool(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28124A0))(bValue);
  }
  static inline bool EnablePlayNext(bool bValue) {
    return reinterpret_cast<bool(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2812560))(bValue);
  }
  static inline bool EnableShuffled(bool bValue) {
    return reinterpret_cast<bool(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2812620))(bValue);
  }
  static inline bool EnableLooped(bool bValue) {
    return reinterpret_cast<bool(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28126E0))(bValue);
  }
  static inline bool EnableQueue(bool bValue) {
    return reinterpret_cast<bool(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28127A0))(bValue);
  }
  static inline bool EnablePlaylists(bool bValue) {
    return reinterpret_cast<bool(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2812860))(bValue);
  }
  static inline bool UpdatePlaybackStatus(int32_t nStatus) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2812920))(nStatus);
  }
  static inline bool UpdateShuffled(bool bValue) {
    return reinterpret_cast<bool(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28129E0))(bValue);
  }
  static inline bool UpdateLooped(bool bValue) {
    return reinterpret_cast<bool(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2812AA0))(bValue);
  }
  static inline bool UpdateVolume(float flValue) {
    return reinterpret_cast<bool(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2812B60))(flValue);
  }
  static inline bool CurrentEntryWillChange() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2812C20))();
  }
  static inline bool CurrentEntryIsAvailable(bool bAvailable) {
    return reinterpret_cast<bool(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2812CD0))(bAvailable);
  }
  static inline bool UpdateCurrentEntryText(System_String* pchText) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2812D90))(pchText);
  }
  static inline bool UpdateCurrentEntryElapsedSeconds(int32_t nValue) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2813070))(nValue);
  }
  static inline bool UpdateCurrentEntryCoverArt(ModdingAPI::Exposed::System::Byte_array* pvBuffer, uint32_t cbBufferLength) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2813130))(pvBuffer, cbBufferLength);
  }
  static inline bool CurrentEntryDidChange() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2813200))();
  }
  static inline bool QueueWillChange() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x28132B0))();
  }
  static inline bool ResetQueueEntries() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2813360))();
  }
  static inline bool SetQueueEntry(int32_t nID, int32_t nPosition, System_String* pchEntryText) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2813410))(nID, nPosition, pchEntryText);
  }
  static inline bool SetCurrentQueueEntry(int32_t nID) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2813710))(nID);
  }
  static inline bool QueueDidChange() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x28137D0))();
  }
  static inline bool PlaylistWillChange() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2813880))();
  }
  static inline bool ResetPlaylistEntries() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2813930))();
  }
  static inline bool SetPlaylistEntry(int32_t nID, int32_t nPosition, System_String* pchEntryText) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28139E0))(nID, nPosition, pchEntryText);
  }
  static inline bool SetCurrentPlaylistEntry(int32_t nID) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2813CE0))(nID);
  }
  static inline bool PlaylistDidChange() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2813DA0))();
  }
};
}