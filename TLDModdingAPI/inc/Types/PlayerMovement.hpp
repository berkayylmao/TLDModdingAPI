// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __PlayerMovement_Il2CppStaticFields {
  bool m_UnlimitedSprint;
  ModdingAPI::Exposed::PlayerMovementSaveDataProxy* m_PlayerMovementSaveDataProxy;
};

struct __PlayerMovement_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __PlayerMovement_Il2CppClass {
  Il2CppClass_1 _1;
  __PlayerMovement_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __PlayerMovement_Il2CppVtbl vtbl;
};

class PlayerMovement {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C2C740;
  static inline    __PlayerMovement_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __PlayerMovement_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__PlayerMovement_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __PlayerMovement_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_MaxSlopeOutdoors;
  float m_MaxSlopeIndoors;
  float m_IndoorMovementSpeedMultiplier;
  float m_RoadMovementSpeedMultiplier;
  float m_WindMovementSpeedMultiplierMin;
  float m_WindMovementSpeedMultiplierMax;
  float m_MinWindSpeedToAffectMovement;
  float m_ShallowSnowSpeedMultiplier;
  float m_DeepSnowSpeedMultiplierMin;
  float m_DeepSnowSpeedMultiplierMax;
  float m_SlowLimpSpeedMultiplier;
  float m_SlowBodyCarrySpeedMultiplier;
  float m_DetectionRangeScaleWhenCrouched;
  float m_FootStepRangeScaleWhenCrouched;
  float m_FootStepRangeScaleWhenWalking;
  float m_CrouchToStandPerceptionDelaySeconds;
  float m_SprintStaminaRecoverPerHour;
  float m_SprintStaminaUsagePerSecond;
  float m_SecondsNotSprintingBeforeRecovery;
  float m_MinFatigueToScaleStaminaRecovery;
  float m_SprintStaminaRecoveryFatigueScale;
  float m_SprintDisableWhenForwardInputBelow;
  float m_SprintDisableWhenStrafeInputAbove;
  float m_MaxSprintStamina;
  float m_SprintStamina;
  float m_LastCrouchedTime;
  float m_SecondsSprinting;
  float m_SecondsNotSprinting;
  float m_DistanceAccumulator;
  ModdingAPI::Exposed::FootstepTrail* m_FootstepTrail;
  bool m_StartHasBeenCalled;
  bool m_StaminaRechargeDisabled;
  int32_t m_ForcedMovement;
  bool m_ForceNoRandomSprain;
  bool m_IsCrouching;
  float m_AccumulatedDistance;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AD570))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AD7C0))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17ADFF0))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE140))(this, text);
  }
  void SetForceCrouch(bool enabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE2B0))(this, enabled);
  }
  bool IsCrouchForced() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE3A0))(this);
  }
  void SetForceWalk(bool enabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE3B0))(this, enabled);
  }
  bool IsWalkForced() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE3E0))(this);
  }
  bool IsCrouchOrLimpOrWalkForced() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE3F0))(this);
  }
  void SetForceLimp(bool enabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE410))(this, enabled);
  }
  bool IsLimpForced() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE440))(this);
  }
  void SetForceLimpSlow(bool enabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE450))(this, enabled);
  }
  bool IsLimpSlowForced() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE480))(this);
  }
  bool IsNoRandomSprainForced() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319870))(this);
  }
  void SetForceNoRandomSprain(bool isNoRandomSprainForced) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319880))(this, isNoRandomSprainForced);
  }
  float GetSprintStaminaRemainingAsPercentage() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE490))(this);
  }
  float GetModifiedMaxSprintStamina() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE560))(this);
  }
  float GetSecondsSprinting() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x169B5F0))(this);
  }
  float GetSecondsNotSprinting() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE6B0))(this);
  }
  float GetIndoorMovementSlowdownMultiplier() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE6C0))(this);
  }
  float GetMaterialMovementMultiplier() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE790))(this);
  }
  float GetLimpMovementMultiplier() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE8E0))(this);
  }
  float GetBodyCarryMovementMultiplier() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE900))(this);
  }
  float GetSnowDepthMovementMultiplier() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE9D0))(this);
  }
  float GetWindMovementMultiplier() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AEBD0))(this);
  }
  void MovedDistance(ModdingAPI::Exposed::UnityEngine::Vector3 delta, bool wasStopped) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*, ModdingAPI::Exposed::UnityEngine::Vector3, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AF050))(this, delta, wasStopped);
  }
  void UpdateDistanceTravelled(float dist) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AF7B0))(this, dist);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetVelocity() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AF900))(this);
  }
  float GetDetectionRangeScale() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AF9D0))(this);
  }
  float GetFootStepsRangeScale() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AFB20))(this);
  }
  void AddSprintStamina(float stamina) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AFC30))(this, stamina);
  }
  float GetSprintStamina() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AFD30))(this);
  }
  void DisableStaminaRecharge(bool disabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AFD40))(this, disabled);
  }
  bool IsStaminaRechargeDisabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AFD50))(this);
  }
  bool StaminaUsedForClimbing() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AFD60))(this);
  }
  bool AllowStaminaToRecover() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AFEA0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerMovement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AFFE0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<bool> m_UnlimitedSprint = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_UnlimitedSprint; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::PlayerMovementSaveDataProxy*> m_PlayerMovementSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::PlayerMovementSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_PlayerMovementSaveDataProxy; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AFFF0))();
  }
};
}