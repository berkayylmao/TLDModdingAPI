// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Quaternion.hpp"


namespace ModdingAPI::Exposed {
struct __Panel_Map_Il2CppStaticFields {
  int32_t OBJECT_POOL_SIZE;
  int32_t DETAIL_POOL_SIZE;
  int32_t AREA_POOL_SIZE;
  float MAP_RADIUS;
  float FOGOFWAR_RADIUS_MULTIPLIER;
  bool s_ForceShowPlayerIcon;
};

struct __Panel_Map_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Panel_Map_Il2CppClass {
  Il2CppClass_1 _1;
  __Panel_Map_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Panel_Map_Il2CppVtbl vtbl;
};

class Panel_Map {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C627D8;
  static inline    __Panel_Map_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Panel_Map_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Panel_Map_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Panel_Map_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_SurvivalTabs;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_StoryTabs;
  ModdingAPI::Exposed::ButtonLegendContainer* m_ButtonLegendContainer;
  ModdingAPI::Exposed::GenericButtonMouseSpawner* m_WorldMapButtonObj;
  ModdingAPI::Exposed::UILabel* m_HeaderLabel;
  ModdingAPI::Exposed::UnityEngine::Transform* m_MapElementsTransform;
  ModdingAPI::Exposed::MapCrosshair* m_Crosshair;
  ModdingAPI::Exposed::UnityEngine::Transform* m_PlayerIcon;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BigSpritePrefab;
  ModdingAPI::Exposed::UnityEngine::Transform* m_BigSpritePoolParent;
  ModdingAPI::Exposed::UnityEngine::Transform* m_BigSpriteActiveObjects;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_SmallSpritePrefab;
  ModdingAPI::Exposed::UnityEngine::Transform* m_SmallSpritePoolParent;
  ModdingAPI::Exposed::UnityEngine::Transform* m_SmallSpriteActiveObjects;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_DetailEntryPrefab;
  ModdingAPI::Exposed::UnityEngine::Transform* m_DetailEntryPoolParent;
  ModdingAPI::Exposed::UnityEngine::Transform* m_DetailEntryActiveObjects;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TextPrefab;
  ModdingAPI::Exposed::UnityEngine::Transform* m_TextPoolParent;
  ModdingAPI::Exposed::UnityEngine::Transform* m_TextActiveObjects;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_AreaPrefab;
  ModdingAPI::Exposed::UnityEngine::Transform* m_AreaPoolParent;
  ModdingAPI::Exposed::UnityEngine::Transform* m_AreaActiveObjects;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_RegionSelectObject;
  ModdingAPI::Exposed::UILabel* m_LastUpdatedLabel;
  float m_DetailSurveyRadiusMeters;
  float m_RangeToShowMapIcons;
  float m_ZoomedInSize;
  float m_GamepadMoveSpeed;
  float m_MagnetizeSpeed;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_MapObjects;
  ModdingAPI::Exposed::RegionMap* m_WorldMapObject;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_LocationsToUseBigSprite;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_OutdoorLocationLabelsToIgnore;
  bool m_DoMapCondense;
  float m_MapCondenseDistance;
  bool m_DoMapIconSpacing;
  float m_MapIconSpacingDistance;
  bool m_MergeMissionIconsWithLocations;
  float m_MapIconLocationSpacingDistance;
  int32_t m_ScreenTopOffset;
  int32_t m_ScreenBottomOffset;
  int32_t m_ScreenLeftOffset;
  int32_t m_ScreenRightOffset;
  System_String* m_OpenMapAudio;
  System_String* m_CloseMapAudio;
  System_String* m_ChangeMapAudio;
  float m_HoursThresholdJustNow;
  float m_HoursThresholdHoursAgo;
  float m_HoursThresholdToday;
  float m_HoursThresholdYesterday;
  ModdingAPI::Exposed::TweenAlpha* m_ObjectiveTween;
  ModdingAPI::Exposed::UILabel* m_ObjectiveLabel;
  ModdingAPI::Exposed::UILabel* m_ObjectiveDesc;
  ModdingAPI::Exposed::UISprite* m_ObjectiveIcon;
  ModdingAPI::Exposed::System::String_array* m_LocationNames;
  ModdingAPI::Exposed::System::String_array* m_SpriteAssignments;
  bool m_HasBeenUpdated;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_MapElementData;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_TransformToMapData;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_DetailSurveyPositions;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_DetailSurveyLastUpdateTimes;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_FogOfWar;
  bool m_IsZoomed;
  int32_t m_HoverState;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_MapElementsOrigPos;
  ModdingAPI::Exposed::MapIcon* m_MapIconBeingHovered;
  ModdingAPI::Exposed::UIWidget* m_CrosshairWidget;
  bool m_StartHasBeenCalled;
  System_String* m_RegionNameOfLoadedObjects;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_UnlockedRegionNames;
  int32_t m_RegionSelectedIndex;
  ModdingAPI::Exposed::MissionMapMarkerInfo_array* m_MarkerInfoFromResources;
  uint32_t m_OpenCloseAudioID;
  bool m_DoMapCondenseInternal;
  bool m_DoMapIconSpacingInternal;
  bool m_MergeMissionIconsWithLocationsInternal;
  ModdingAPI::Exposed::GamepadButtonSprite_array* m_GamepadButtonSprites;
  ModdingAPI::Exposed::MapElementSaveData* m_ObjectIconMapData;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A37940))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A38330))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A385D0))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A38F20))(this, text);
  }
  void ClearData() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A39990))(this);
  }
  void DoDetailSurvey() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A39C20))(this);
  }
  void DoNearbyDetailsCheck(float radius) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A39C50))(this, radius);
  }
  void RevealFogForScene(System_String* sceneName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3A2F0))(this, sceneName);
  }
  void Enable(bool enable, bool cameFromDetailSurvey) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3A600))(this, enable, cameFromDetailSurvey);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x165DF10))(this);
  }
  void OnCancel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3ADA0))(this);
  }
  void OnInventoryNav() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3AF00))(this);
  }
  void OnClothingNav() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3B000))(this);
  }
  void OnFirstAidNav() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3B0F0))(this);
  }
  void OnJournalNav() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3B1E0))(this);
  }
  void OnCraftingNav() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3B2E0))(this);
  }
  void OnMissionsNav() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3B3D0))(this);
  }
  void ToggleWorldMap() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3B4D0))(this);
  }
  void OnNextRegion() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3B7C0))(this);
  }
  void OnPrevRegion() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3B9A0))(this);
  }
  void SetRegion(System_String* regionName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3BB80))(this, regionName);
  }
  void UnlockMapCurrentScene() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3BCD0))(this);
  }
  void UnlockRegionMap(System_String* regionName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3BD20))(this, regionName);
  }
  void RevealCurrentScene() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3BF90))(this);
  }
  void LoadMapElementsForScene(System_String* sceneName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3C130))(this, sceneName);
  }
  void AddMapDetailToMap(ModdingAPI::Exposed::MapDetail* mapDetail) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, ModdingAPI::Exposed::MapDetail*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3CEC0))(this, mapDetail);
  }
  void RemoveMapDetailFromMap(ModdingAPI::Exposed::MapDetail* mapDetail) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, ModdingAPI::Exposed::MapDetail*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3D0A0))(this, mapDetail);
  }
  void AddIndoorSpaceTrigger(System_String* triggerID, ModdingAPI::Exposed::UnityEngine::Vector3 worldPos, bool nameIsKnown) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*, ModdingAPI::Exposed::UnityEngine::Vector3, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3D1B0))(this, triggerID, worldPos, nameIsKnown);
  }
  void AddLoadScene(System_String* sceneName, ModdingAPI::Exposed::UnityEngine::Vector3 worldPos, bool nameIsKnown) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*, ModdingAPI::Exposed::UnityEngine::Vector3, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3D330))(this, sceneName, worldPos, nameIsKnown);
  }
  void AddDisplayLocationLabel(System_String* locationLocID, ModdingAPI::Exposed::UnityEngine::Vector3 worldPos) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3D4C0))(this, locationLocID, worldPos);
  }
  bool AddMapMarkerToMap(System_String* markerID) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3D610))(this, markerID);
  }
  void RemoveMapMarkerFromMap(System_String* markerID) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3D930))(this, markerID);
  }
  void AddMapIconFromFSM(System_String* markerID, bool nameIsKnown) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3DD20))(this, markerID, nameIsKnown);
  }
  float GetDetailLevelAlpha() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3E110))(this);
  }
  bool NoMapsUnlocked() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3E240))(this);
  }
  void ShowNoMapsUnlockedMessage() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3E300))(this);
  }
  bool CheckRegionForAchievement(System_String* sceneName, int32_t numTopLevelIconsRequired, int32_t numLocationTriggersRequired) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3E3D0))(this, sceneName, numTopLevelIconsRequired, numLocationTriggersRequired);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* GetLocIdsOfUnlockedMapElements(System_String* sceneName) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3E610))(this, sceneName);
  }
  System_String* GetSelectedMission() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3E840))(this);
  }
  void CenterOn(System_String* missionId) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3E910))(this, missionId);
  }
  void AddMapElementCurrentRegion(System_String* locationLocID, System_String* spriteName, bool bigSprite, bool nameIsKnown, ModdingAPI::Exposed::UnityEngine::Vector3 worldPos, bool isDetail, bool isArea, bool showDirectional, float directionalAngle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*, System_String*, bool, bool, ModdingAPI::Exposed::UnityEngine::Vector3, bool, bool, bool, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3EDE0))(this, locationLocID, spriteName, bigSprite, nameIsKnown, worldPos, isDetail, isArea, showDirectional, directionalAngle);
  }
  void RemoveMapElementCurrentRegion(System_String* locationLocID, ModdingAPI::Exposed::UnityEngine::Vector3 worldPos) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3EEC0))(this, locationLocID, worldPos);
  }
  void RemoveMapElement(System_String* regionName, System_String* locationLocID, ModdingAPI::Exposed::UnityEngine::Vector3 worldPos) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*, System_String*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3F080))(this, regionName, locationLocID, worldPos);
  }
  void AddMapElement(System_String* regionName, System_String* locationLocID, System_String* spriteName, bool bigSprite, bool nameIsKnown, ModdingAPI::Exposed::UnityEngine::Vector3 worldPos, bool isDetail, bool isArea, bool showDirectional, float directionalAngle, ModdingAPI::Exposed::UnityEngine::Vector2 areaZoneSize) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*, System_String*, System_String*, bool, bool, ModdingAPI::Exposed::UnityEngine::Vector3, bool, bool, bool, float, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3F230))(this, regionName, locationLocID, spriteName, bigSprite, nameIsKnown, worldPos, isDetail, isArea, showDirectional, directionalAngle, areaZoneSize);
  }
  void UpdateButtonLegend() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3F750))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 WorldPositionToMapPosition(System_String* regionName, ModdingAPI::Exposed::UnityEngine::Vector3 worldPos) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3FAB0))(this, regionName, worldPos);
  }
  ModdingAPI::Exposed::UnityEngine::Quaternion WorldRotationToMapRotation(System_String* regionName, ModdingAPI::Exposed::UnityEngine::Quaternion worldRotation) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Quaternion(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*, ModdingAPI::Exposed::UnityEngine::Quaternion)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A3FE80))(this, regionName, worldRotation);
  }
  void CreateObjectPools() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A40490))(this);
  }
  void UnloadMapElements() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A40B40))(this);
  }
  System_String* GetSpriteNameForLocation(System_String* location) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A41390))(this, location);
  }
  bool MapElementExists(System_String* regionName, System_String* locationNameLocID, ModdingAPI::Exposed::UnityEngine::Vector3 worldPos) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*, System_String*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A41530))(this, regionName, locationNameLocID, worldPos);
  }
  bool MapDataIsMatch(ModdingAPI::Exposed::MapElementSaveData* mapData, System_String* locationNameLocID, ModdingAPI::Exposed::UnityEngine::Vector3 worldPos, System_String* regionName) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, ModdingAPI::Exposed::MapElementSaveData*, System_String*, ModdingAPI::Exposed::UnityEngine::Vector3, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A41820))(this, mapData, locationNameLocID, worldPos, regionName);
  }
  bool MissionMapDataIsMatch(ModdingAPI::Exposed::MapElementSaveData* mapData, System_String* missionNameLocID, ModdingAPI::Exposed::UnityEngine::Vector3 worldPos, System_String* regionName) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, ModdingAPI::Exposed::MapElementSaveData*, System_String*, ModdingAPI::Exposed::UnityEngine::Vector3, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A419A0))(this, mapData, missionNameLocID, worldPos, regionName);
  }
  void DoGamepadControls() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A41B20))(this);
  }
  void DoMouseControls() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A421A0))(this);
  }
  void ToggleZoom() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A42390))(this);
  }
  void CheckForHoverState() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A42810))(this);
  }
  void UpdateCrosshairState() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A43470))(this);
  }
  void SetMapIconBeingHovered(ModdingAPI::Exposed::MapIcon* newMapIcon) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, ModdingAPI::Exposed::MapIcon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A43530))(this, newMapIcon);
  }
  void RefreshHoverIconText(ModdingAPI::Exposed::MapIcon* hoverIcon) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, ModdingAPI::Exposed::MapIcon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A437C0))(this, hoverIcon);
  }
  void UpdateObjectiveGroup(ModdingAPI::Exposed::MapElementSaveData* mapData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, ModdingAPI::Exposed::MapElementSaveData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A43DE0))(this, mapData);
  }
  void ResetToNormal(int32_t opts) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A44230))(this, opts);
  }
  void MagnetTowardsHoveredIcon() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A44EA0))(this);
  }
  void CheckForExpiredMissionTimers() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A45190))(this);
  }
  void MaybeFollowMouseWithCrosshair() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A45BC0))(this);
  }
  int32_t GetIndexOfCurrentScene() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A46330))(this);
  }
  void LoadMarkerDataFromResources() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A46750))(this);
  }
  int32_t GetMapMarkerIndex(System_String* markerID) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A467E0))(this, markerID);
  }
  void AddMarkerToWorldPos(ModdingAPI::Exposed::MissionMapMarkerInfo* markerInfo, ModdingAPI::Exposed::StoryMissionInfo* missionInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, ModdingAPI::Exposed::MissionMapMarkerInfo*, ModdingAPI::Exposed::StoryMissionInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A468C0))(this, markerInfo, missionInfo);
  }
  void AddMarkerToLocation(ModdingAPI::Exposed::MissionMapMarkerInfo* markerInfo, ModdingAPI::Exposed::StoryMissionInfo* missionInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, ModdingAPI::Exposed::MissionMapMarkerInfo*, ModdingAPI::Exposed::StoryMissionInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A47230))(this, markerInfo, missionInfo);
  }
  void RemoveMarkerFromWorldPos(ModdingAPI::Exposed::MissionMapMarkerInfo* markerInfo, ModdingAPI::Exposed::StoryMissionInfo* missionInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, ModdingAPI::Exposed::MissionMapMarkerInfo*, ModdingAPI::Exposed::StoryMissionInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A480B0))(this, markerInfo, missionInfo);
  }
  void RemoveMarkerFromLocation(ModdingAPI::Exposed::MissionMapMarkerInfo* markerInfo, ModdingAPI::Exposed::StoryMissionInfo* missionInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, ModdingAPI::Exposed::MissionMapMarkerInfo*, ModdingAPI::Exposed::StoryMissionInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A48360))(this, markerInfo, missionInfo);
  }
  void RefreshLastUpdateTimeLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A48700))(this);
  }
  bool SceneCanBeMapped(System_String* sceneName) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A48CD0))(this, sceneName);
  }
  void DoMapCondense(ModdingAPI::Exposed::UnityEngine::Transform* mapIconParent) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A48E40))(this, mapIconParent);
  }
  void DoMapIconSpacing(ModdingAPI::Exposed::UnityEngine::Transform* mapIconParentStatic, ModdingAPI::Exposed::UnityEngine::Transform* mapIconParentMoveable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, ModdingAPI::Exposed::UnityEngine::Transform*, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A493C0))(this, mapIconParentStatic, mapIconParentMoveable);
  }
  void MergeNearbyMissionMapIconsWithLocations(ModdingAPI::Exposed::UnityEngine::Transform* mapIconMissionParent, ModdingAPI::Exposed::UnityEngine::Transform* mapIconLocationParent) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, ModdingAPI::Exposed::UnityEngine::Transform*, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A49900))(this, mapIconMissionParent, mapIconLocationParent);
  }
  bool ShouldAlwaysBeZoomed() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A49DB0))(this);
  }
  System_String* GetMapNameOfScene(System_String* sceneName) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A49EC0))(this, sceneName);
  }
  System_String* GetMapNameOfCurrentScene() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A49FA0))(this);
  }
  void UpdateIconsForOffscreenMissionMarkers() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4A050))(this);
  }
  void EnableNavigationTabs(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4A800))(this, enable);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Map*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4A910))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<int32_t> OBJECT_POOL_SIZE = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->OBJECT_POOL_SIZE; }
  );
  static inline __CppStaticProperty<int32_t> DETAIL_POOL_SIZE = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->DETAIL_POOL_SIZE; }
  );
  static inline __CppStaticProperty<int32_t> AREA_POOL_SIZE = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->AREA_POOL_SIZE; }
  );
  static inline __CppStaticProperty<float> MAP_RADIUS = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->MAP_RADIUS; }
  );
  static inline __CppStaticProperty<float> FOGOFWAR_RADIUS_MULTIPLIER = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->FOGOFWAR_RADIUS_MULTIPLIER; }
  );
  static inline __CppStaticProperty<bool> s_ForceShowPlayerIcon = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_ForceShowPlayerIcon; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4AA60))();
  }
};
}