// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Xml::Schema {
struct __XsdValidator_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* dtCDATA;
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* dtQName;
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* dtStringArray;
};

struct __XsdValidator_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_PreserveWhitespace;
  VirtualInvokeData _5_Validate;
  VirtualInvokeData _6_CompleteValidation;
  VirtualInvokeData _7_FindId;
};

struct __XsdValidator_Il2CppClass {
  Il2CppClass_1 _1;
  __XsdValidator_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __XsdValidator_Il2CppVtbl vtbl;
};

class XsdValidator {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C8A508;
  static inline    __XsdValidator_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __XsdValidator_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__XsdValidator_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __XsdValidator_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaCollection* BaseValidator_schemaCollection;
  ModdingAPI::Exposed::System::Xml::IValidationEventHandling* BaseValidator_eventHandling;
  ModdingAPI::Exposed::System::Xml::XmlNameTable* BaseValidator_nameTable;
  ModdingAPI::Exposed::System::Xml::Schema::SchemaNames* BaseValidator_schemaNames;
  ModdingAPI::Exposed::System::Xml::PositionInfo* BaseValidator_positionInfo;
  ModdingAPI::Exposed::System::Xml::XmlResolver* BaseValidator_xmlResolver;
  ModdingAPI::Exposed::System::Uri* BaseValidator_baseUri;
  ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo* schemaInfo;
  ModdingAPI::Exposed::System::Xml::XmlValidatingReaderImpl* reader;
  ModdingAPI::Exposed::System::Xml::XmlQualifiedName* elementName;
  ModdingAPI::Exposed::System::Xml::Schema::ValidationState* context;
  ModdingAPI::Exposed::System::Text::StringBuilder* textValue;
  System_String* textString;
  bool hasSibling;
  bool checkDatatype;
  int32_t startIDConstraint;
  ModdingAPI::Exposed::System::Xml::HWStack* validationStack;
  ModdingAPI::Exposed::System::Collections::Hashtable* attPresence;
  ModdingAPI::Exposed::System::Xml::XmlNamespaceManager* nsManager;
  bool bManageNamespaces;
  ModdingAPI::Exposed::System::Collections::Hashtable* IDs;
  ModdingAPI::Exposed::System::Xml::Schema::IdRefNode* idRefListHead;
  ModdingAPI::Exposed::System::Xml::Schema::Parser* inlineSchemaParser;
  int32_t processContents;
  System_String* NsXmlNs;
  System_String* NsXs;
  System_String* NsXsi;
  System_String* XsiType;
  System_String* XsiNil;
  System_String* XsiSchemaLocation;
  System_String* XsiNoNamespaceSchemaLocation;
  System_String* XsdSchema;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Xml::Schema::BaseValidator* validator) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*, ModdingAPI::Exposed::System::Xml::Schema::BaseValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89B310))(this, validator);
  }
  void ::ctor(ModdingAPI::Exposed::System::Xml::XmlValidatingReaderImpl* reader, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaCollection* schemaCollection, ModdingAPI::Exposed::System::Xml::IValidationEventHandling* eventHandling) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*, ModdingAPI::Exposed::System::Xml::XmlValidatingReaderImpl*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaCollection*, ModdingAPI::Exposed::System::Xml::IValidationEventHandling*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89B380))(this, reader, schemaCollection, eventHandling);
  }
  void Init() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89B3B0))(this);
  }
  void Validate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89BA50))(this);
  }
  void CompleteValidation() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89BB30))(this);
  }
  bool get_IsInlineSchemaStarted() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89BB40))(this);
  }
  void ProcessInlineSchema() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89BB50))(this);
  }
  void ValidateElement() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89BEC0))(this);
  }
  Il2CppObject* ValidateChildElement() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89C160))(this);
  }
  void ProcessElement(Il2CppObject* particle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89C420))(this, particle);
  }
  void ProcessXsiAttributes(ModdingAPI::Exposed::System::Xml::XmlQualifiedName* xsiType, System_String* xsiNil) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89C860))(this, xsiType, xsiNil);
  }
  void ValidateEndElement() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89CFF0))(this);
  }
  ModdingAPI::Exposed::System::Xml::Schema::SchemaElementDecl* FastGetElementDecl(Il2CppObject* particle) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::SchemaElementDecl*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89D2E0))(this, particle);
  }
  ModdingAPI::Exposed::System::Xml::Schema::SchemaElementDecl* ThoroughGetElementDecl(ModdingAPI::Exposed::System::Xml::Schema::SchemaElementDecl* elementDecl, ModdingAPI::Exposed::System::Xml::XmlQualifiedName* xsiType, System_String* xsiNil) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::SchemaElementDecl*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*, ModdingAPI::Exposed::System::Xml::Schema::SchemaElementDecl*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89D400))(this, elementDecl, xsiType, xsiNil);
  }
  void ValidateStartElement() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89D9A0))(this);
  }
  void ValidateEndStartElement() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89E3E0))(this);
  }
  void LoadSchemaFromLocation(System_String* uri, System_String* url) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89E870))(this, uri, url);
  }
  void LoadSchema(System_String* uri, System_String* url) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89F040))(this, uri, url);
  }
  bool get_HasSchema() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89F270))(this);
  }
  bool get_PreserveWhitespace() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89F290))(this);
  }
  void ProcessTokenizedType(int32_t ttype, System_String* name) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89F2F0))(this, ttype, name);
  }
  void CheckValue(System_String* value, ModdingAPI::Exposed::System::Xml::Schema::SchemaAttDef* attdef) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*, System_String*, ModdingAPI::Exposed::System::Xml::Schema::SchemaAttDef*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89F600))(this, value, attdef);
  }
  void AddID(System_String* name, Il2CppObject* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*, System_String*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89FA80))(this, name, node);
  }
  Il2CppObject* FindId(System_String* name) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89FC20))(this, name);
  }
  bool IsXSDRoot(System_String* localName, System_String* ns) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89FC40))(this, localName, ns);
  }
  void Push(ModdingAPI::Exposed::System::Xml::XmlQualifiedName* elementName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89FC60))(this, elementName);
  }
  void Pop() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x89FEE0))(this);
  }
  void CheckForwardRefs() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8A0060))(this);
  }
  void ValidateStartElementIdentityConstraints() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8A0270))(this);
  }
  bool get_HasIdentityConstraints() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8A02D0))(this);
  }
  void AddIdentityConstraints() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8A02E0))(this);
  }
  void ElementIdentityConstraints() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8A0B80))(this);
  }
  void AttributeIdentityConstraints(System_String* name, System_String* ns, Il2CppObject* obj, System_String* sobj, ModdingAPI::Exposed::System::Xml::Schema::SchemaAttDef* attdef) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*, System_String*, System_String*, Il2CppObject*, System_String*, ModdingAPI::Exposed::System::Xml::Schema::SchemaAttDef*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8A1030))(this, name, ns, obj, sobj, attdef);
  }
  Il2CppObject* UnWrapUnion(Il2CppObject* typedValue) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8A1470))(this, typedValue);
  }
  void EndElementIdentityConstraints() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::XsdValidator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8A1540))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*> dtCDATA = __CppStaticProperty<ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*>(
   []() { return &GetStaticClassInstance()->pStaticFields->dtCDATA; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*> dtQName = __CppStaticProperty<ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*>(
   []() { return &GetStaticClassInstance()->pStaticFields->dtQName; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*> dtStringArray = __CppStaticProperty<ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*>(
   []() { return &GetStaticClassInstance()->pStaticFields->dtStringArray; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x8A2900))();
  }
};
}