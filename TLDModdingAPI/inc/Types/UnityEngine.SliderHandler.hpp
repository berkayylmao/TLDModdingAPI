// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Rect.hpp"

namespace ModdingAPI::Exposed::UnityEngine {
struct __SliderHandler_Il2CppObject {
  ModdingAPI::Exposed::UnityEngine::Rect position;
  float currentValue;
  float size;
  float start;
  float end;
  ModdingAPI::Exposed::UnityEngine::GUIStyle* slider;
  ModdingAPI::Exposed::UnityEngine::GUIStyle* thumb;
  bool horiz;
  int32_t id;
};
struct __SliderHandler_Il2CppStaticFields {
};

struct __SliderHandler_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SliderHandler_Il2CppClass {
  Il2CppClass_1 _1;
  __SliderHandler_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SliderHandler_Il2CppVtbl vtbl;
};

class SliderHandler {
public:
  // Member fields:
  ModdingAPI::Exposed::UnityEngine::Rect position;
  float currentValue;
  float size;
  float start;
  float end;
  ModdingAPI::Exposed::UnityEngine::GUIStyle* slider;
  ModdingAPI::Exposed::UnityEngine::GUIStyle* thumb;
  bool horiz;
  int32_t id;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::UnityEngine::Rect position, float currentValue, float size, float start, float end, ModdingAPI::Exposed::UnityEngine::GUIStyle* slider, ModdingAPI::Exposed::UnityEngine::GUIStyle* thumb, bool horiz, int32_t id) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*, ModdingAPI::Exposed::UnityEngine::Rect, float, float, float, float, ModdingAPI::Exposed::UnityEngine::GUIStyle*, ModdingAPI::Exposed::UnityEngine::GUIStyle*, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4DEE0))(this, position, currentValue, size, start, end, slider, thumb, horiz, id);
  }
  float Handle() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4DF30))(this);
  }
  float OnMouseDown() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4DF40))(this);
  }
  float OnMouseDrag() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4DF50))(this);
  }
  float OnMouseUp() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4DF60))(this);
  }
  float OnRepaint() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4DF70))(this);
  }
  int32_t CurrentEventType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4DF80))(this);
  }
  int32_t CurrentScrollTroughSide() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4DF90))(this);
  }
  bool IsEmptySlider() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4DFA0))(this);
  }
  bool SupportsPageMovements() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4DFC0))(this);
  }
  float PageMovementValue() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4DFD0))(this);
  }
  float PageUpMovementBound() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4DFE0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Event* CurrentEvent() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Event*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E040))(this);
  }
  float ValueForCurrentMousePosition() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E050))(this);
  }
  float Clamp(float value) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E060))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Rect ThumbSelectionRect() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E070))(this);
  }
  void StartDraggingWithValue(float dragStartValue) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E0C0))(this, dragStartValue);
  }
  ModdingAPI::Exposed::UnityEngine::SliderState* SliderState() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::SliderState*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E120))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Rect ThumbRect() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E070))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Rect VerticalThumbRect() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E130))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Rect HorizontalThumbRect() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E160))(this);
  }
  float ClampedCurrentValue() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E190))(this);
  }
  float MousePosition() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E1A0))(this);
  }
  float ValuesPerPixel() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E1B0))(this);
  }
  float ThumbSize() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E1C0))(this);
  }
  float MaxValue() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E1D0))(this);
  }
  float MinValue() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SliderHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4E1E0))(this);
  }

};
}