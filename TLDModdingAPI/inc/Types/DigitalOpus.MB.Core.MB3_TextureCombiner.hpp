// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::DigitalOpus::MB::Core {
struct __MB3_TextureCombiner_Il2CppStaticFields {
  bool _RunCorutineWithoutPauseIsRunning;
};

struct __MB3_TextureCombiner_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_maxAtlasWidthOverride;
  VirtualInvokeData _5_set_maxAtlasWidthOverride;
  VirtualInvokeData _6_get_maxAtlasHeightOverride;
  VirtualInvokeData _7_set_maxAtlasHeightOverride;
  VirtualInvokeData _8_get_useMaxAtlasWidthOverride;
  VirtualInvokeData _9_set_useMaxAtlasWidthOverride;
  VirtualInvokeData _10_get_useMaxAtlasHeightOverride;
  VirtualInvokeData _11_set_useMaxAtlasHeightOverride;
};

struct __MB3_TextureCombiner_Il2CppClass {
  Il2CppClass_1 _1;
  __MB3_TextureCombiner_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MB3_TextureCombiner_Il2CppVtbl vtbl;
};

class MB3_TextureCombiner {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C49578;
  static inline    __MB3_TextureCombiner_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __MB3_TextureCombiner_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__MB3_TextureCombiner_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __MB3_TextureCombiner_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t LOG_LEVEL;
  ModdingAPI::Exposed::MB2_TextureBakeResults* _textureBakeResults;
  int32_t _atlasPadding;
  int32_t _maxAtlasSize;
  int32_t _maxAtlasWidthOverride;
  int32_t _maxAtlasHeightOverride;
  bool _useMaxAtlasWidthOverride;
  bool _useMaxAtlasHeightOverride;
  bool _resizePowerOfTwoTextures;
  bool _fixOutOfBoundsUVs;
  int32_t _maxTilingBakeSize;
  bool _saveAtlasesAsAssets;
  int32_t _packingAlgorithm;
  bool _meshBakerTexturePackerForcePowerOfTwo;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* _customShaderPropNames;
  bool _normalizeTexelDensity;
  bool _considerNonTextureProperties;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* _temporaryTextures;

  // Member methods:
  ModdingAPI::Exposed::MB2_TextureBakeResults* get_textureBakeResults() {
    return reinterpret_cast<ModdingAPI::Exposed::MB2_TextureBakeResults*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  void set_textureBakeResults(ModdingAPI::Exposed::MB2_TextureBakeResults* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, ModdingAPI::Exposed::MB2_TextureBakeResults*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3E0))(this, value);
  }
  int32_t get_atlasPadding() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x37AAE0))(this);
  }
  void set_atlasPadding(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3838E0))(this, value);
  }
  int32_t get_maxAtlasSize() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x37AAF0))(this);
  }
  void set_maxAtlasSize(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3838F0))(this, value);
  }
  int32_t get_maxAtlasWidthOverride() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36F810))(this);
  }
  void set_maxAtlasWidthOverride(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x31DD50))(this, value);
  }
  int32_t get_maxAtlasHeightOverride() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36F820))(this);
  }
  void set_maxAtlasHeightOverride(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x31DD60))(this, value);
  }
  bool get_useMaxAtlasWidthOverride() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x57C620))(this);
  }
  void set_useMaxAtlasWidthOverride(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x57C630))(this, value);
  }
  bool get_useMaxAtlasHeightOverride() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8B1290))(this);
  }
  void set_useMaxAtlasHeightOverride(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE2ADA0))(this, value);
  }
  bool get_resizePowerOfTwoTextures() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1151D00))(this);
  }
  void set_resizePowerOfTwoTextures(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1151D10))(this, value);
  }
  bool get_fixOutOfBoundsUVs() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26195A0))(this);
  }
  void set_fixOutOfBoundsUVs(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26195B0))(this, value);
  }
  int32_t get_maxTilingBakeSize() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D880))(this);
  }
  void set_maxTilingBakeSize(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D890))(this, value);
  }
  bool get_saveAtlasesAsAssets() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5F6810))(this);
  }
  void set_saveAtlasesAsAssets(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6CE3F0))(this, value);
  }
  int32_t get_packingAlgorithm() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8C0))(this);
  }
  void set_packingAlgorithm(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8D0))(this, value);
  }
  bool get_meshBakerTexturePackerForcePowerOfTwo() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE420))(this);
  }
  void set_meshBakerTexturePackerForcePowerOfTwo(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD5550))(this, value);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* get_customShaderPropNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319980))(this);
  }
  void set_customShaderPropNames(ModdingAPI::Exposed::System::Collections::Generic::List_T_* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A430))(this, value);
  }
  bool get_considerNonTextureProperties() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6F260))(this);
  }
  void set_considerNonTextureProperties(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21B1510))(this, value);
  }
  bool CombineTexturesIntoAtlases(ModdingAPI::Exposed::DigitalOpus::MB::Core::ProgressUpdateDelegate* progressInfo, ModdingAPI::Exposed::MB_AtlasesAndRects* resultAtlasesAndRects, ModdingAPI::Exposed::UnityEngine::Material* resultMaterial, ModdingAPI::Exposed::System::Collections::Generic::List_T_* objsToMesh, ModdingAPI::Exposed::System::Collections::Generic::List_T_* allowedMaterialsFilter, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* textureEditorMethods, ModdingAPI::Exposed::System::Collections::Generic::List_T_* packingResults, bool onlyPackRects, bool splitAtlasWhenPackingIfTooBig) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, ModdingAPI::Exposed::DigitalOpus::MB::Core::ProgressUpdateDelegate*, ModdingAPI::Exposed::MB_AtlasesAndRects*, ModdingAPI::Exposed::UnityEngine::Material*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26197F0))(this, progressInfo, resultAtlasesAndRects, resultMaterial, objsToMesh, allowedMaterialsFilter, textureEditorMethods, packingResults, onlyPackRects, splitAtlasWhenPackingIfTooBig);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* CombineTexturesIntoAtlasesCoroutine(ModdingAPI::Exposed::DigitalOpus::MB::Core::ProgressUpdateDelegate* progressInfo, ModdingAPI::Exposed::MB_AtlasesAndRects* resultAtlasesAndRects, ModdingAPI::Exposed::UnityEngine::Material* resultMaterial, ModdingAPI::Exposed::System::Collections::Generic::List_T_* objsToMesh, ModdingAPI::Exposed::System::Collections::Generic::List_T_* allowedMaterialsFilter, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* textureEditorMethods, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner::CombineTexturesIntoAtlasesCoroutineResult* coroutineResult, float maxTimePerFrame, ModdingAPI::Exposed::System::Collections::Generic::List_T_* packingResults, bool onlyPackRects, bool splitAtlasWhenPackingIfTooBig) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, ModdingAPI::Exposed::DigitalOpus::MB::Core::ProgressUpdateDelegate*, ModdingAPI::Exposed::MB_AtlasesAndRects*, ModdingAPI::Exposed::UnityEngine::Material*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner::CombineTexturesIntoAtlasesCoroutineResult*, float, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26199F0))(this, progressInfo, resultAtlasesAndRects, resultMaterial, objsToMesh, allowedMaterialsFilter, textureEditorMethods, coroutineResult, maxTimePerFrame, packingResults, onlyPackRects, splitAtlasWhenPackingIfTooBig);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* _CombineTexturesIntoAtlases(ModdingAPI::Exposed::DigitalOpus::MB::Core::ProgressUpdateDelegate* progressInfo, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner::CombineTexturesIntoAtlasesCoroutineResult* result, ModdingAPI::Exposed::MB_AtlasesAndRects* resultAtlasesAndRects, ModdingAPI::Exposed::UnityEngine::Material* resultMaterial, ModdingAPI::Exposed::System::Collections::Generic::List_T_* objsToMesh, ModdingAPI::Exposed::System::Collections::Generic::List_T_* allowedMaterialsFilter, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* textureEditorMethods, ModdingAPI::Exposed::System::Collections::Generic::List_T_* atlasPackingResult, bool onlyPackRects, bool splitAtlasWhenPackingIfTooBig) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, ModdingAPI::Exposed::DigitalOpus::MB::Core::ProgressUpdateDelegate*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner::CombineTexturesIntoAtlasesCoroutineResult*, ModdingAPI::Exposed::MB_AtlasesAndRects*, ModdingAPI::Exposed::UnityEngine::Material*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2619BD0))(this, progressInfo, result, resultAtlasesAndRects, resultMaterial, objsToMesh, allowedMaterialsFilter, textureEditorMethods, atlasPackingResult, onlyPackRects, splitAtlasWhenPackingIfTooBig);
  }
  ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData* LoadPipelineData(ModdingAPI::Exposed::UnityEngine::Material* resultMaterial, ModdingAPI::Exposed::System::Collections::Generic::List_T_* texPropertyNames, ModdingAPI::Exposed::System::Collections::Generic::List_T_* objsToMesh, ModdingAPI::Exposed::System::Collections::Generic::List_T_* allowedMaterialsFilter, ModdingAPI::Exposed::System::Collections::Generic::List_T_* distinctMaterialTextures) {
    return reinterpret_cast<ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, ModdingAPI::Exposed::UnityEngine::Material*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2619DA0))(this, resultMaterial, texPropertyNames, objsToMesh, allowedMaterialsFilter, distinctMaterialTextures);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* __CombineTexturesIntoAtlases(ModdingAPI::Exposed::DigitalOpus::MB::Core::ProgressUpdateDelegate* progressInfo, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner::CombineTexturesIntoAtlasesCoroutineResult* result, ModdingAPI::Exposed::MB_AtlasesAndRects* resultAtlasesAndRects, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData* data, bool splitAtlasWhenPackingIfTooBig, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* textureEditorMethods) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, ModdingAPI::Exposed::DigitalOpus::MB::Core::ProgressUpdateDelegate*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner::CombineTexturesIntoAtlasesCoroutineResult*, ModdingAPI::Exposed::MB_AtlasesAndRects*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData*, bool, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x261A1D0))(this, progressInfo, result, resultAtlasesAndRects, data, splitAtlasWhenPackingIfTooBig, textureEditorMethods);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* __RunTexturePackerOnly(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner::CombineTexturesIntoAtlasesCoroutineResult* result, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData* data, bool splitAtlasWhenPackingIfTooBig, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* textureEditorMethods, ModdingAPI::Exposed::System::Collections::Generic::List_T_* packingResult) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner::CombineTexturesIntoAtlasesCoroutineResult*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData*, bool, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x261A370))(this, result, data, splitAtlasWhenPackingIfTooBig, textureEditorMethods, packingResult);
  }
  int32_t _getNumTemporaryTextures() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x261A500))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Texture2D* _createTemporaryTexture(System_String* propertyName, int32_t w, int32_t h, int32_t texFormat, bool mipMaps) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Texture2D*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, System_String*, int32_t, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x261A590))(this, propertyName, w, h, texFormat, mipMaps);
  }
  ModdingAPI::Exposed::UnityEngine::Texture2D* _createTextureCopy(System_String* propertyName, ModdingAPI::Exposed::UnityEngine::Texture2D* t) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Texture2D*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, System_String*, ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x261A8F0))(this, propertyName, t);
  }
  ModdingAPI::Exposed::UnityEngine::Texture2D* _resizeTexture(System_String* propertyName, ModdingAPI::Exposed::UnityEngine::Texture2D* t, int32_t w, int32_t h) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Texture2D*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, System_String*, ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x261ABA0))(this, propertyName, t, w, h);
  }
  void _destroyAllTemporaryTextures() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x261AE40))(this);
  }
  void _destroyTemporaryTextures(System_String* propertyName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x261B010))(this, propertyName);
  }
  void _restoreProceduralMaterials() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void SuggestTreatment(ModdingAPI::Exposed::System::Collections::Generic::List_T_* objsToMesh, ModdingAPI::Exposed::UnityEngine::Material_array* resultMaterials, ModdingAPI::Exposed::System::Collections::Generic::List_T_* _customShaderPropNames) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::UnityEngine::Material_array*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x261B470))(this, objsToMesh, resultMaterials, _customShaderPropNames);
  }
  System_String* PrintList(ModdingAPI::Exposed::System::Collections::Generic::List_T_* gos) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x261CD50))(this, gos);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x261CF20))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<bool> _RunCorutineWithoutPauseIsRunning = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->_RunCorutineWithoutPauseIsRunning; }
  );

  // Static methods:
  static inline void RunCorutineWithoutPause(ModdingAPI::Exposed::System::Collections::IEnumerator* cor, int32_t recursionDepth) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::IEnumerator*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26195C0))(cor, recursionDepth);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))();
  }
};
}