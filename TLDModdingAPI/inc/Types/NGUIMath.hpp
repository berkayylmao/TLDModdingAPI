// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::UnityEngine::Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Rect.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Rect.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Bounds.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Matrix4x4.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Quaternion.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Quaternion.hpp"


namespace ModdingAPI::Exposed {
struct __NGUIMath_Il2CppStaticFields {
};

struct __NGUIMath_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __NGUIMath_Il2CppClass {
  Il2CppClass_1 _1;
  __NGUIMath_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __NGUIMath_Il2CppVtbl vtbl;
};

class NGUIMath {
public:
  // Il2Cpp fields:
  __NGUIMath_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline float Lerp(float from, float to, float factor) {
    return reinterpret_cast<float(__fastcall*)(float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8D520))(from, to, factor);
  }
  static inline int32_t ClampIndex(int32_t val, int32_t max) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8D540))(val, max);
  }
  static inline int32_t RepeatIndex(int32_t val, int32_t max) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8D560))(val, max);
  }
  static inline float WrapAngle(float angle) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8D590))(angle);
  }
  static inline float Wrap01(float val) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8D5D0))(val);
  }
  static inline int32_t HexToDecimal(wchar_t ch) {
    return reinterpret_cast<int32_t(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAAE810))(ch);
  }
  static inline wchar_t DecimalToHexChar(int32_t num) {
    return reinterpret_cast<wchar_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8D680))(num);
  }
  static inline System_String* DecimalToHex8(int32_t num) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8D6A0))(num);
  }
  static inline System_String* DecimalToHex24(int32_t num) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8D740))(num);
  }
  static inline System_String* DecimalToHex32(int32_t num) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8D7E0))(num);
  }
  static inline int32_t ColorToInt(ModdingAPI::Exposed::UnityEngine::Color c) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8D880))(c);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Color IntToColor(int32_t val) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8D9A0))(val);
  }
  static inline System_String* IntToBinary(int32_t val, int32_t bits) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8DA20))(val, bits);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Color HexToColor(uint32_t val) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8DB30))(val);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Rect ConvertToTexCoords(ModdingAPI::Exposed::UnityEngine::Rect rect, int32_t width, int32_t height) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8DBB0))(rect, width, height);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Rect ConvertToPixels(ModdingAPI::Exposed::UnityEngine::Rect rect, int32_t width, int32_t height, bool round) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8DC70))(rect, width, height, round);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Rect MakePixelPerfect(ModdingAPI::Exposed::UnityEngine::Rect rect) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8DE90))(rect);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Rect MakePixelPerfect(ModdingAPI::Exposed::UnityEngine::Rect rect, int32_t width, int32_t height) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8E000))(rect, width, height);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 ConstrainRect(ModdingAPI::Exposed::UnityEngine::Vector2 minRect, ModdingAPI::Exposed::UnityEngine::Vector2 maxRect, ModdingAPI::Exposed::UnityEngine::Vector2 minArea, ModdingAPI::Exposed::UnityEngine::Vector2 maxArea) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8E260))(minRect, maxRect, minArea, maxArea);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Bounds CalculateAbsoluteWidgetBounds(ModdingAPI::Exposed::UnityEngine::Transform* trans) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Bounds(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8E420))(trans);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Bounds CalculateRelativeWidgetBounds(ModdingAPI::Exposed::UnityEngine::Transform* trans) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Bounds(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8EA40))(trans);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Bounds CalculateRelativeWidgetBounds(ModdingAPI::Exposed::UnityEngine::Transform* trans, bool considerInactive) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Bounds(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Transform*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8EA80))(trans, considerInactive);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Bounds CalculateRelativeWidgetBounds(ModdingAPI::Exposed::UnityEngine::Transform* relativeTo, ModdingAPI::Exposed::UnityEngine::Transform* content) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Bounds(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Transform*, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8EAD0))(relativeTo, content);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Bounds CalculateRelativeWidgetBounds(ModdingAPI::Exposed::UnityEngine::Transform* relativeTo, ModdingAPI::Exposed::UnityEngine::Transform* content, bool considerInactive, bool considerParents) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Bounds(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Transform*, ModdingAPI::Exposed::UnityEngine::Transform*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8EB10))(relativeTo, content, considerInactive, considerParents);
  }
  static inline void CalculateRelativeWidgetBounds(ModdingAPI::Exposed::UnityEngine::Transform* content, bool considerInactive, bool isRoot, ModdingAPI::Exposed::UnityEngine::Matrix4x4 toLocal, ModdingAPI::Exposed::UnityEngine::Vector3 vMin, ModdingAPI::Exposed::UnityEngine::Vector3 vMax, bool isSet, bool considerParents) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Transform*, bool, bool, ModdingAPI::Exposed::UnityEngine::Matrix4x4, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8EF60))(content, considerInactive, isRoot, toLocal, vMin, vMax, isSet, considerParents);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 SpringDampen(ModdingAPI::Exposed::UnityEngine::Vector3 velocity, float strength, float deltaTime) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8F5C0))(velocity, strength, deltaTime);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 SpringDampen(ModdingAPI::Exposed::UnityEngine::Vector2 velocity, float strength, float deltaTime) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8F7A0))(velocity, strength, deltaTime);
  }
  static inline float SpringLerp(float strength, float deltaTime) {
    return reinterpret_cast<float(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8F930))(strength, deltaTime);
  }
  static inline float SpringLerp(float from, float to, float strength, float deltaTime) {
    return reinterpret_cast<float(__fastcall*)(float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8FA70))(from, to, strength, deltaTime);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 SpringLerp(ModdingAPI::Exposed::UnityEngine::Vector2 from, ModdingAPI::Exposed::UnityEngine::Vector2 to, float strength, float deltaTime) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8FBB0))(from, to, strength, deltaTime);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 SpringLerp(ModdingAPI::Exposed::UnityEngine::Vector3 from, ModdingAPI::Exposed::UnityEngine::Vector3 to, float strength, float deltaTime) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8FCA0))(from, to, strength, deltaTime);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Quaternion SpringLerp(ModdingAPI::Exposed::UnityEngine::Quaternion from, ModdingAPI::Exposed::UnityEngine::Quaternion to, float strength, float deltaTime) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Quaternion(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Quaternion, ModdingAPI::Exposed::UnityEngine::Quaternion, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D8FE90))(from, to, strength, deltaTime);
  }
  static inline float RotateTowards(float from, float to, float maxAngle) {
    return reinterpret_cast<float(__fastcall*)(float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D90060))(from, to, maxAngle);
  }
  static inline float DistancePointToLineSegment(ModdingAPI::Exposed::UnityEngine::Vector2 point, ModdingAPI::Exposed::UnityEngine::Vector2 a, ModdingAPI::Exposed::UnityEngine::Vector2 b) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D901C0))(point, a, b);
  }
  static inline float DistanceToRectangle(ModdingAPI::Exposed::UnityEngine::Vector2_array* screenPoints, ModdingAPI::Exposed::UnityEngine::Vector2 mousePos) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2_array*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D90470))(screenPoints, mousePos);
  }
  static inline float DistanceToRectangle(ModdingAPI::Exposed::UnityEngine::Vector3_array* worldPoints, ModdingAPI::Exposed::UnityEngine::Vector2 mousePos, ModdingAPI::Exposed::UnityEngine::Camera* cam) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3_array*, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Camera*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D90780))(worldPoints, mousePos, cam);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 GetPivotOffset(int32_t pv) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D90970))(pv);
  }
  static inline int32_t GetPivot(ModdingAPI::Exposed::UnityEngine::Vector2 offset) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D90A90))(offset);
  }
  static inline void MoveWidget(ModdingAPI::Exposed::UIRect* w, float x, float y) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIRect*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D90B30))(w, x, y);
  }
  static inline void MoveRect(ModdingAPI::Exposed::UIRect* rect, float x, float y) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIRect*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D90B40))(rect, x, y);
  }
  static inline void ResizeWidget(ModdingAPI::Exposed::UIWidget* w, int32_t pivot, float x, float y, int32_t minWidth, int32_t minHeight) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIWidget*, int32_t, float, float, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D90F10))(w, pivot, x, y, minWidth, minHeight);
  }
  static inline void ResizeWidget(ModdingAPI::Exposed::UIWidget* w, int32_t pivot, float x, float y, int32_t minWidth, int32_t minHeight, int32_t maxWidth, int32_t maxHeight) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIWidget*, int32_t, float, float, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D90F50))(w, pivot, x, y, minWidth, minHeight, maxWidth, maxHeight);
  }
  static inline void AdjustWidget(ModdingAPI::Exposed::UIWidget* w, float left, float bottom, float right, float top) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIWidget*, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D913E0))(w, left, bottom, right, top);
  }
  static inline void AdjustWidget(ModdingAPI::Exposed::UIWidget* w, float left, float bottom, float right, float top, int32_t minWidth, int32_t minHeight) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIWidget*, float, float, float, float, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D91430))(w, left, bottom, right, top, minWidth, minHeight);
  }
  static inline void AdjustWidget(ModdingAPI::Exposed::UIWidget* w, float left, float bottom, float right, float top, int32_t minWidth, int32_t minHeight, int32_t maxWidth, int32_t maxHeight) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIWidget*, float, float, float, float, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D91480))(w, left, bottom, right, top, minWidth, minHeight, maxWidth, maxHeight);
  }
  static inline int32_t AdjustByDPI(float height) {
    return reinterpret_cast<int32_t(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D92150))(height);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 ScreenToPixels(ModdingAPI::Exposed::UnityEngine::Vector2 pos, ModdingAPI::Exposed::UnityEngine::Transform* relativeTo) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D922D0))(pos, relativeTo);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 ScreenToParentPixels(ModdingAPI::Exposed::UnityEngine::Vector2 pos, ModdingAPI::Exposed::UnityEngine::Transform* relativeTo) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D92600))(pos, relativeTo);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 WorldToLocalPoint(ModdingAPI::Exposed::UnityEngine::Vector3 worldPos, ModdingAPI::Exposed::UnityEngine::Camera* worldCam, ModdingAPI::Exposed::UnityEngine::Camera* uiCam, ModdingAPI::Exposed::UnityEngine::Transform* relativeTo) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Camera*, ModdingAPI::Exposed::UnityEngine::Camera*, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D92A60))(worldPos, worldCam, uiCam, relativeTo);
  }
  static inline void OverlayPosition(ModdingAPI::Exposed::UnityEngine::Transform* trans, ModdingAPI::Exposed::UnityEngine::Vector3 worldPos, ModdingAPI::Exposed::UnityEngine::Camera* worldCam, ModdingAPI::Exposed::UnityEngine::Camera* myCam) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Transform*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Camera*, ModdingAPI::Exposed::UnityEngine::Camera*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D92D50))(trans, worldPos, worldCam, myCam);
  }
  static inline void OverlayPosition(ModdingAPI::Exposed::UnityEngine::Transform* trans, ModdingAPI::Exposed::UnityEngine::Vector3 worldPos, ModdingAPI::Exposed::UnityEngine::Camera* worldCam) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Transform*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Camera*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D93040))(trans, worldPos, worldCam);
  }
  static inline void OverlayPosition(ModdingAPI::Exposed::UnityEngine::Transform* trans, ModdingAPI::Exposed::UnityEngine::Transform* target) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Transform*, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D93210))(trans, target);
  }
};
}