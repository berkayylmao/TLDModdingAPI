// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Guid.hpp"


namespace ModdingAPI::Exposed::System::Diagnostics::Tracing {
struct __ManifestBuilder_Il2CppStaticFields {
};

struct __ManifestBuilder_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ManifestBuilder_Il2CppClass {
  Il2CppClass_1 _1;
  __ManifestBuilder_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ManifestBuilder_Il2CppVtbl vtbl;
};

class ManifestBuilder {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C43250;
  static inline    __ManifestBuilder_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ManifestBuilder_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ManifestBuilder_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ManifestBuilder_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* opcodeTab;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* taskTab;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* keywordTab;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* mapsTab;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* stringTab;
  ModdingAPI::Exposed::System::Text::StringBuilder* sb;
  ModdingAPI::Exposed::System::Text::StringBuilder* events;
  ModdingAPI::Exposed::System::Text::StringBuilder* templates;
  ModdingAPI::Exposed::System::Resources::ResourceManager* resources;
  int32_t flags;
  ModdingAPI::Exposed::System::Collections::Generic::IList_T_* errors;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* perEventByteArrayArgIndices;
  System_String* eventName;
  int32_t numParams;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* byteArrArgIndices;

  // Member methods:
  void ::ctor(System_String* providerName, ModdingAPI::Exposed::System::Guid providerGuid, System_String* dllName, ModdingAPI::Exposed::System::Resources::ResourceManager* resources, int32_t flags) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*, System_String*, ModdingAPI::Exposed::System::Guid, System_String*, ModdingAPI::Exposed::System::Resources::ResourceManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x640B80))(this, providerName, providerGuid, dllName, resources, flags);
  }
  void AddOpcode(System_String* name, int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6414F0))(this, name, value);
  }
  void AddTask(System_String* name, int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x641920))(this, name, value);
  }
  void AddKeyword(System_String* name, uint64_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*, System_String*, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x641DF0))(this, name, value);
  }
  void StartEvent(System_String* eventName, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventAttribute* eventAttribute) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*, System_String*, ModdingAPI::Exposed::System::Diagnostics::Tracing::EventAttribute*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6425B0))(this, eventName, eventAttribute);
  }
  void AddEventParameter(ModdingAPI::Exposed::System::Type* type, System_String* name) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*, ModdingAPI::Exposed::System::Type*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x642A60))(this, type, name);
  }
  void EndEvent() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6432C0))(this);
  }
  ModdingAPI::Exposed::System::Byte_array* CreateManifest() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x643590))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::IList_T_* get_Errors() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IList_T_*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3199C0))(this);
  }
  void ManifestError(System_String* msg, bool runtimeCritical) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6435D0))(this, msg, runtimeCritical);
  }
  System_String* CreateManifestString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6436C0))(this);
  }
  void WriteNameAndMessageAttribs(ModdingAPI::Exposed::System::Text::StringBuilder* stringBuilder, System_String* elementName, System_String* name) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*, ModdingAPI::Exposed::System::Text::StringBuilder*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x645800))(this, stringBuilder, elementName, name);
  }
  void WriteMessageAttrib(ModdingAPI::Exposed::System::Text::StringBuilder* stringBuilder, System_String* elementName, System_String* name, System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*, ModdingAPI::Exposed::System::Text::StringBuilder*, System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x645910))(this, stringBuilder, elementName, name, value);
  }
  System_String* GetLocalizedMessage(System_String* key, ModdingAPI::Exposed::System::Globalization::CultureInfo* ci, bool etwFormat) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*, System_String*, ModdingAPI::Exposed::System::Globalization::CultureInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x645C00))(this, key, ci, etwFormat);
  }
  System_String* GetTaskName(int32_t task, System_String* eventName) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x646160))(this, task, eventName);
  }
  System_String* GetOpcodeName(int32_t opcode, System_String* eventName) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6463C0))(this, opcode, eventName);
  }
  System_String* GetKeywords(uint64_t keywords, System_String* eventName) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*, uint64_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x646670))(this, keywords, eventName);
  }
  System_String* GetTypeName(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x646960))(this, type);
  }
  System_String* TranslateToManifestConvention(System_String* eventMessage, System_String* evtName) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x646F50))(this, eventMessage, evtName);
  }
  int32_t TranslateIndexToManifestConvention(int32_t idx, System_String* evtName) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::Tracing::ManifestBuilder*, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x647EC0))(this, idx, evtName);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::System::Collections::Generic::List_T_* GetSupportedCultures(ModdingAPI::Exposed::System::Resources::ResourceManager* resources) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::System::Resources::ResourceManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x645DC0))(resources);
  }
  static inline System_String* GetLevelName(int32_t level) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x646090))(level);
  }
  static inline void UpdateStringBuilder(ModdingAPI::Exposed::System::Text::StringBuilder* stringBuilder, System_String* eventMessage, int32_t startIndex, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::StringBuilder*, System_String*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x646DB0))(stringBuilder, eventMessage, startIndex, count);
  }
};
}