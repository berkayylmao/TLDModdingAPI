// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __Fire_Il2CppStaticFields {
  ModdingAPI::Exposed::FireSaveDataProxy* m_FireSaveDataProxy;
  bool m_IsStartingFireUIInProgress;
  ModdingAPI::Exposed::UnityEngine::Collider_array* s_CookableColliderCandidates;
};

struct __Fire_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Fire_Il2CppClass {
  Il2CppClass_1 _1;
  __Fire_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Fire_Il2CppVtbl vtbl;
};

class Fire {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C44EF0;
  static inline    __Fire_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Fire_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Fire_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Fire_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::EffectsControllerFire* m_FX;
  bool m_StartLit;
  bool m_IsPerpetual;
  ModdingAPI::Exposed::FuelSourceItem* m_FuelPrefabIfLit;
  float m_BurnMinutesIfLit;
  System_String* m_ChimneyGuid;
  int32_t m_NumStartingCharcoalPieces;
  float m_NumCharcoalPiecesGeneratedPerHour;
  int32_t m_MaxNumCharcoal;
  System_String* m_FireAudioString;
  bool m_ApplyToHeatSource;
  float m_LightIntensityMultiplier;
  bool m_BreakdownEnabled;
  float m_BreakdownRealSecondsElapsed;
  float m_BreakdownGameMinutes;
  System_String* m_BreakdownAudio;
  ModdingAPI::Exposed::HeatSource* m_HeatSource;
  int32_t m_FireState;
  int32_t m_FireStartingState;
  float m_FireStageDurationSeconds;
  float m_FireStarterUseSeconds;
  float m_TinderSmolderSeconds;
  float m_TinderSmallFlameSeconds;
  float m_TinderMediumBurnSeconds;
  float m_DurationSecondsToReduceToEmbers;
  float m_EmberDurationSecondsTOD;
  float m_EmberTimer;
  bool m_UseEmbers;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_DestroyOnFailure;
  float m_ElapsedOnTODSeconds;
  float m_ElapsedOnTODSecondsUnmodified;
  float m_MaxOnTODSeconds;
  float m_UsableFuelRemaining;
  uint32_t m_FireStarterLoop;
  uint32_t m_FireLoop;
  float m_FuelHeatIncrease;
  ModdingAPI::Exposed::DamageTrigger* m_DamageTrigger;
  ModdingAPI::Exposed::Campfire* m_Campfire;
  ModdingAPI::Exposed::UnityEngine::AI::NavMeshObstacle* m_NavMeshObstacle;
  ModdingAPI::Exposed::FuelSourceItem* m_FuelUsedToStart;
  bool m_FullBurnTriggered;
  bool m_StartedByPlayer;
  float m_TimeOffSeconds;
  ModdingAPI::Exposed::SmokeTrail* m_SmokeTrail;
  bool m_StartHasBeenCalled;
  int32_t m_NumGeneratedCharcoalPieces;
  bool m_HasCollectedCharcoal;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_TrackedBurntItems;
  float m_BurningTimeTODHours;
  bool m_TriggerStageRequested;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1835390))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1835630))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1835660))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1835CC0))(this, text);
  }
  float GetWeatherAdjustedElapsedDuration(float realtimeSeconds) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Fire*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1836B80))(this, realtimeSeconds);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1836E00))(this);
  }
  void MaybeUpdateLongestBurningFireStat(float burnTimeInHours) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1837390))(this, burnTimeInHours);
  }
  int32_t GetFireState() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x307620))(this);
  }
  void OnFuelBurnt(ModdingAPI::Exposed::GearItem* fuel) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1837580))(this, fuel);
  }
  void AddFuel(ModdingAPI::Exposed::GearItem* fuel, bool inForge) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*, ModdingAPI::Exposed::GearItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18376C0))(this, fuel, inForge);
  }
  float GetRemainingLifeTimeSeconds() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1837BB0))(this);
  }
  float GetRemainingLifeTimeHours() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1837CE0))(this);
  }
  float GetIgnitionTotalGameTimeSeconds() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1837D00))(this);
  }
  void PlayerBeginCreate(bool attemptSuccessful, float startTimeSeconds, ModdingAPI::Exposed::FireStarterItem* starter, ModdingAPI::Exposed::FuelSourceItem* fuel, ModdingAPI::Exposed::FireStarterItem* accelerant, bool destoryOnFailure) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*, bool, float, ModdingAPI::Exposed::FireStarterItem*, ModdingAPI::Exposed::FuelSourceItem*, ModdingAPI::Exposed::FireStarterItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1837E30))(this, attemptSuccessful, startTimeSeconds, starter, fuel, accelerant, destoryOnFailure);
  }
  void ExitFireStarting(bool success, bool playerCancel, float progress) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*, bool, bool, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1838270))(this, success, playerCancel, progress);
  }
  bool CanFeedFire() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1838FA0))(this);
  }
  bool IsBurning() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1838FB0))(this);
  }
  float GetMinutesBurning() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1838FC0))(this);
  }
  float GetUnmodifiedMinutesBurning() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1838FE0))(this);
  }
  float GetBurningTimeTODHours() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA07170))(this);
  }
  bool IsEmbers() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1839000))(this);
  }
  void FireStateSet(int32_t stage) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1839020))(this, stage);
  }
  void PlayFireLoop(float blend) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1839560))(this, blend);
  }
  void StopFireLoop() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18397E0))(this);
  }
  void StopFireLoopImmediate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18398A0))(this);
  }
  void TurnOn(ModdingAPI::Exposed::FuelSourceItem* fuel, bool maskTempIncrease) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*, ModdingAPI::Exposed::FuelSourceItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1839960))(this, fuel, maskTempIncrease);
  }
  void TurnOff() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1839BE0))(this);
  }
  void TurnOffImmediate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1839D40))(this);
  }
  void ReduceDurationByTODSeconds(float seconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1839E30))(this, seconds);
  }
  void ReduceHeatByDegrees(float degreesCelsius) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1839E50))(this, degreesCelsius);
  }
  float GetCurrentTempIncrease() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1839F50))(this);
  }
  System_String* GetHeatIncreaseText() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1839F70))(this);
  }
  void ForceBurnTimeInMinutes(float minutes) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183A1D0))(this, minutes);
  }
  void SetSmokeTrail(ModdingAPI::Exposed::SmokeTrail* st) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*, ModdingAPI::Exposed::SmokeTrail*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183A1F0))(this, st);
  }
  bool FireShouldBlowOutFromWind() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183A340))(this);
  }
  bool StartedByPlayer() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183A5A0))(this);
  }
  bool CanBreakdownFire() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183A5B0))(this);
  }
  bool CanTakeTorch() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183A5F0))(this);
  }
  int32_t GetAvailableCharcoalPieces() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183A6D0))(this);
  }
  void RemoveAllCharcoal() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183A7A0))(this);
  }
  bool HasBurntItem(System_String* itemName) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Fire*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183A7C0))(this, itemName);
  }
  void CalculateStageDurations(float fireStarterUseTimeSeconds, float fireStartTimeSeconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183A9A0))(this, fireStarterUseTimeSeconds, fireStartTimeSeconds);
  }
  void UpdateFireStage() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183A9D0))(this);
  }
  void MaybeBlowOutFromWind() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183ACF0))(this);
  }
  void UpdateFireAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183AED0))(this);
  }
  float GetFireOuterRadiusScale() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183B1E0))(this);
  }
  void StartFireLit() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183B2D0))(this);
  }
  void PlayStartingFireVoiceEvent(bool successful) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183B470))(this, successful);
  }
  uint32_t GetStartFireUrgencySwitch() {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183B6D0))(this);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183B8E0))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183BA80))(this);
  }
  void AttachToNearbyCookables() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183BA90))(this);
  }
  bool HasAttachedCookables() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183C0B0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183C660))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::FireSaveDataProxy*> m_FireSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::FireSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_FireSaveDataProxy; }
  );
  static inline __CppStaticProperty<bool> m_IsStartingFireUIInProgress = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_IsStartingFireUIInProgress; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Collider_array*> s_CookableColliderCandidates = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Collider_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_CookableColliderCandidates; }
  );

  // Static methods:
  static inline bool IsStartingFireUIInProgress() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x183A860))();
  }
  static inline void Reset() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x183A900))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x183C800))();
  }
};
}