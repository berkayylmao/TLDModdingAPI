// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.Steamworks.InputActionSetHandle_t.hpp"
#include "ModdingAPI::Exposed::Steamworks::InputHandle_t.hpp"
#include "ModdingAPI::Exposed::Steamworks::InputActionSetHandle_t.hpp"
#include "ModdingAPI.Exposed.Steamworks.InputDigitalActionHandle_t.hpp"
#include "ModdingAPI.Exposed.Steamworks.InputDigitalActionData_t.hpp"
#include "ModdingAPI::Exposed::Steamworks::InputDigitalActionHandle_t.hpp"
#include "ModdingAPI.Exposed.Steamworks.InputAnalogActionHandle_t.hpp"
#include "ModdingAPI.Exposed.Steamworks.InputAnalogActionData_t.hpp"
#include "ModdingAPI::Exposed::Steamworks::InputAnalogActionHandle_t.hpp"
#include "ModdingAPI.Exposed.Steamworks.InputMotionData_t.hpp"
#include "ModdingAPI.Exposed.Steamworks.InputHandle_t.hpp"


namespace ModdingAPI::Exposed::Steamworks {
struct __SteamInput_Il2CppStaticFields {
};

struct __SteamInput_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SteamInput_Il2CppClass {
  Il2CppClass_1 _1;
  __SteamInput_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SteamInput_Il2CppVtbl vtbl;
};

class SteamInput {
public:
  // Il2Cpp fields:
  __SteamInput_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline bool Init() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2807A90))();
  }
  static inline bool Shutdown() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2807B40))();
  }
  static inline void RunFrame() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2807BF0))();
  }
  static inline int32_t GetConnectedControllers(ModdingAPI::Exposed::Steamworks::InputHandle_t_array* handlesOut) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2807CA0))(handlesOut);
  }
  static inline ModdingAPI::Exposed::Steamworks::InputActionSetHandle_t GetActionSetHandle(System_String* pszActionSetName) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::InputActionSetHandle_t(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2807E00))(pszActionSetName);
  }
  static inline void ActivateActionSet(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle, ModdingAPI::Exposed::Steamworks::InputActionSetHandle_t actionSetHandle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t, ModdingAPI::Exposed::Steamworks::InputActionSetHandle_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28080E0))(inputHandle, actionSetHandle);
  }
  static inline ModdingAPI::Exposed::Steamworks::InputActionSetHandle_t GetCurrentActionSet(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::InputActionSetHandle_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28081B0))(inputHandle);
  }
  static inline void ActivateActionSetLayer(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle, ModdingAPI::Exposed::Steamworks::InputActionSetHandle_t actionSetLayerHandle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t, ModdingAPI::Exposed::Steamworks::InputActionSetHandle_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2808270))(inputHandle, actionSetLayerHandle);
  }
  static inline void DeactivateActionSetLayer(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle, ModdingAPI::Exposed::Steamworks::InputActionSetHandle_t actionSetLayerHandle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t, ModdingAPI::Exposed::Steamworks::InputActionSetHandle_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2808340))(inputHandle, actionSetLayerHandle);
  }
  static inline void DeactivateAllActionSetLayers(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2808410))(inputHandle);
  }
  static inline int32_t GetActiveActionSetLayers(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle, ModdingAPI::Exposed::Steamworks::InputActionSetHandle_t_array* handlesOut) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t, ModdingAPI::Exposed::Steamworks::InputActionSetHandle_t_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28084D0))(inputHandle, handlesOut);
  }
  static inline ModdingAPI::Exposed::Steamworks::InputDigitalActionHandle_t GetDigitalActionHandle(System_String* pszActionName) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::InputDigitalActionHandle_t(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2808640))(pszActionName);
  }
  static inline ModdingAPI::Exposed::Steamworks::InputDigitalActionData_t GetDigitalActionData(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle, ModdingAPI::Exposed::Steamworks::InputDigitalActionHandle_t digitalActionHandle) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::InputDigitalActionData_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t, ModdingAPI::Exposed::Steamworks::InputDigitalActionHandle_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2808920))(inputHandle, digitalActionHandle);
  }
  static inline int32_t GetDigitalActionOrigins(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle, ModdingAPI::Exposed::Steamworks::InputActionSetHandle_t actionSetHandle, ModdingAPI::Exposed::Steamworks::InputDigitalActionHandle_t digitalActionHandle, ModdingAPI::Exposed::Steamworks::EInputActionOrigin_array* originsOut) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t, ModdingAPI::Exposed::Steamworks::InputActionSetHandle_t, ModdingAPI::Exposed::Steamworks::InputDigitalActionHandle_t, ModdingAPI::Exposed::Steamworks::EInputActionOrigin_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28089F0))(inputHandle, actionSetHandle, digitalActionHandle, originsOut);
  }
  static inline ModdingAPI::Exposed::Steamworks::InputAnalogActionHandle_t GetAnalogActionHandle(System_String* pszActionName) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::InputAnalogActionHandle_t(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2808B90))(pszActionName);
  }
  static inline ModdingAPI::Exposed::Steamworks::InputAnalogActionData_t GetAnalogActionData(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle, ModdingAPI::Exposed::Steamworks::InputAnalogActionHandle_t analogActionHandle) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::InputAnalogActionData_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t, ModdingAPI::Exposed::Steamworks::InputAnalogActionHandle_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2808E70))(inputHandle, analogActionHandle);
  }
  static inline int32_t GetAnalogActionOrigins(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle, ModdingAPI::Exposed::Steamworks::InputActionSetHandle_t actionSetHandle, ModdingAPI::Exposed::Steamworks::InputAnalogActionHandle_t analogActionHandle, ModdingAPI::Exposed::Steamworks::EInputActionOrigin_array* originsOut) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t, ModdingAPI::Exposed::Steamworks::InputActionSetHandle_t, ModdingAPI::Exposed::Steamworks::InputAnalogActionHandle_t, ModdingAPI::Exposed::Steamworks::EInputActionOrigin_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2808F60))(inputHandle, actionSetHandle, analogActionHandle, originsOut);
  }
  static inline System_String* GetGlyphForActionOrigin(int32_t eOrigin) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2809100))(eOrigin);
  }
  static inline System_String* GetStringForActionOrigin(int32_t eOrigin) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28091C0))(eOrigin);
  }
  static inline void StopAnalogActionMomentum(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle, ModdingAPI::Exposed::Steamworks::InputAnalogActionHandle_t eAction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t, ModdingAPI::Exposed::Steamworks::InputAnalogActionHandle_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2809280))(inputHandle, eAction);
  }
  static inline ModdingAPI::Exposed::Steamworks::InputMotionData_t GetMotionData(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::InputMotionData_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2809350))(inputHandle);
  }
  static inline void TriggerVibration(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle, uint16_t usLeftSpeed, uint16_t usRightSpeed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t, uint16_t, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2809430))(inputHandle, usLeftSpeed, usRightSpeed);
  }
  static inline void SetLEDColor(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle, uint8_t nColorR, uint8_t nColorG, uint8_t nColorB, uint32_t nFlags) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t, uint8_t, uint8_t, uint8_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2809510))(inputHandle, nColorR, nColorG, nColorB, nFlags);
  }
  static inline void TriggerHapticPulse(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle, int32_t eTargetPad, uint16_t usDurationMicroSec) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t, int32_t, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2809610))(inputHandle, eTargetPad, usDurationMicroSec);
  }
  static inline void TriggerRepeatedHapticPulse(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle, int32_t eTargetPad, uint16_t usDurationMicroSec, uint16_t usOffMicroSec, uint16_t unRepeat, uint32_t nFlags) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t, int32_t, uint16_t, uint16_t, uint16_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28096F0))(inputHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
  }
  static inline bool ShowBindingPanel(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2809800))(inputHandle);
  }
  static inline int32_t GetInputTypeForHandle(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28098C0))(inputHandle);
  }
  static inline ModdingAPI::Exposed::Steamworks::InputHandle_t GetControllerForGamepadIndex(int32_t nIndex) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::InputHandle_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2809980))(nIndex);
  }
  static inline int32_t GetGamepadIndexForController(ModdingAPI::Exposed::Steamworks::InputHandle_t ulinputHandle) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2809A30))(ulinputHandle);
  }
  static inline System_String* GetStringForXboxOrigin(int32_t eOrigin) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2809AF0))(eOrigin);
  }
  static inline System_String* GetGlyphForXboxOrigin(int32_t eOrigin) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2809BB0))(eOrigin);
  }
  static inline int32_t GetActionOriginFromXboxOrigin(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle, int32_t eOrigin) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2809C70))(inputHandle, eOrigin);
  }
  static inline int32_t TranslateActionOrigin(int32_t eDestinationInputType, int32_t eSourceOrigin) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2809D40))(eDestinationInputType, eSourceOrigin);
  }
  static inline bool GetDeviceBindingRevision(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle, int32_t pMajor, int32_t pMinor) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2809E00))(inputHandle, pMajor, pMinor);
  }
  static inline uint32_t GetRemotePlaySessionID(ModdingAPI::Exposed::Steamworks::InputHandle_t inputHandle) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::InputHandle_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2809EE0))(inputHandle);
  }
};
}