// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.EventSystems.RaycastResult.hpp"


namespace ModdingAPI::Exposed::UnityEngine::EventSystems {
struct __BaseInputModule_Il2CppStaticFields {
};

struct __BaseInputModule_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Awake;
  VirtualInvokeData _5_OnEnable;
  VirtualInvokeData _6_Start;
  VirtualInvokeData _7_OnDisable;
  VirtualInvokeData _8_OnDestroy;
  VirtualInvokeData _9_IsActive;
  VirtualInvokeData _10_OnRectTransformDimensionsChange;
  VirtualInvokeData _11_OnBeforeTransformParentChanged;
  VirtualInvokeData _12_OnTransformParentChanged;
  VirtualInvokeData _13_OnDidApplyAnimationProperties;
  VirtualInvokeData _14_OnCanvasGroupChanged;
  VirtualInvokeData _15_OnCanvasHierarchyChanged;
  VirtualInvokeData _16_IsDestroyed;
  VirtualInvokeData _18_GetAxisEventData;
  VirtualInvokeData _19_GetBaseEventData;
  VirtualInvokeData _20_IsPointerOverGameObject;
  VirtualInvokeData _21_ShouldActivateModule;
  VirtualInvokeData _22_DeactivateModule;
  VirtualInvokeData _23_ActivateModule;
  VirtualInvokeData _24_UpdateModule;
  VirtualInvokeData _25_IsModuleSupported;
  VirtualInvokeData _65535__ctor;
};

struct __BaseInputModule_Il2CppClass {
  Il2CppClass_1 _1;
  __BaseInputModule_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __BaseInputModule_Il2CppVtbl vtbl;
};

class BaseInputModule {
public:
  // Il2Cpp fields:
  __BaseInputModule_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_RaycastResultCache;
  ModdingAPI::Exposed::UnityEngine::EventSystems::AxisEventData* m_AxisEventData;
  ModdingAPI::Exposed::UnityEngine::EventSystems::EventSystem* m_EventSystem;
  ModdingAPI::Exposed::UnityEngine::EventSystems::BaseEventData* m_BaseEventData;
  ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput* m_InputOverride;
  ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput* m_DefaultInput;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInputModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD2170))(this);
  }
  ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput* get_input() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInputModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD2380))(this);
  }
  ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput* get_inputOverride() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInputModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD25D0))(this);
  }
  void set_inputOverride(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInputModule*, ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A420))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::EventSystems::EventSystem* get_eventSystem() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::EventSystems::EventSystem*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInputModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD25E0))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInputModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD25F0))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInputModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD2690))(this);
  }
  void HandlePointerExitAndEnter(ModdingAPI::Exposed::UnityEngine::EventSystems::PointerEventData* currentPointerData, ModdingAPI::Exposed::UnityEngine::GameObject* newEnterTarget) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInputModule*, ModdingAPI::Exposed::UnityEngine::EventSystems::PointerEventData*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD2C30))(this, currentPointerData, newEnterTarget);
  }
  ModdingAPI::Exposed::UnityEngine::EventSystems::AxisEventData* GetAxisEventData(float x, float y, float moveDeadZone) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::EventSystems::AxisEventData*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInputModule*, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD31C0))(this, x, y, moveDeadZone);
  }
  ModdingAPI::Exposed::UnityEngine::EventSystems::BaseEventData* GetBaseEventData() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::EventSystems::BaseEventData*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInputModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD3450))(this);
  }
  bool IsPointerOverGameObject(int32_t pointerId) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInputModule*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x67FC90))(this, pointerId);
  }
  bool ShouldActivateModule() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInputModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD35D0))(this);
  }
  void DeactivateModule() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInputModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void ActivateModule() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInputModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void UpdateModule() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInputModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  bool IsModuleSupported() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInputModule*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x39B730))(this);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::UnityEngine::EventSystems::RaycastResult FindFirstRaycast(ModdingAPI::Exposed::System::Collections::Generic::List_T_* candidates) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::EventSystems::RaycastResult(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD26B0))(candidates);
  }
  static inline int32_t DetermineMoveDirection(float x, float y) {
    return reinterpret_cast<int32_t(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD2880))(x, y);
  }
  static inline int32_t DetermineMoveDirection(float x, float y, float deadZone) {
    return reinterpret_cast<int32_t(__fastcall*)(float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD28A0))(x, y, deadZone);
  }
  static inline ModdingAPI::Exposed::UnityEngine::GameObject* FindCommonRoot(ModdingAPI::Exposed::UnityEngine::GameObject* g1, ModdingAPI::Exposed::UnityEngine::GameObject* g2) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD29D0))(g1, g2);
  }
};
}