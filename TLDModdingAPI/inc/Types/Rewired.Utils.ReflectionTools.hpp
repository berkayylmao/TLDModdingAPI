// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Rewired::Utils {
struct __ReflectionTools_Il2CppStaticFields {
};

struct __ReflectionTools_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ReflectionTools_Il2CppClass {
  Il2CppClass_1 _1;
  __ReflectionTools_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ReflectionTools_Il2CppVtbl vtbl;
};

class ReflectionTools {
public:
  // Il2Cpp fields:
  __ReflectionTools_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline bool IsValueType(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649930))(type);
  }
  static inline bool IsEnum(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA17B60))(type);
  }
  static inline ModdingAPI::Exposed::System::Type* GetUnderlyingEnumType(ModdingAPI::Exposed::System::Type* enumType) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA17B80))(enumType);
  }
  static inline bool IsClass(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA17C40))(type);
  }
  static inline bool IsPrimitive(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA17C90))(type);
  }
  static inline bool IsArray(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA17CC0))(type);
  }
  static inline bool DoesTypeImplement(ModdingAPI::Exposed::System::Type* type, ModdingAPI::Exposed::System::Type* baseOrInterfaceType) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA17CF0))(type, baseOrInterfaceType);
  }
  static inline bool IsGenericType(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA17D20))(type);
  }
  static inline ModdingAPI::Exposed::System::Type_array* GetGenericArguments(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type_array*(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA17D40))(type);
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_* GetFields(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_*(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA17D60))(type);
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_* GetFields(ModdingAPI::Exposed::System::Type* type, int32_t bindingFlags) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_*(__fastcall*)(ModdingAPI::Exposed::System::Type*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA17D80))(type, bindingFlags);
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_* GetProperties(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_*(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA17DA0))(type);
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_* GetProperties(ModdingAPI::Exposed::System::Type* type, int32_t bindingFlags) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_*(__fastcall*)(ModdingAPI::Exposed::System::Type*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA17DC0))(type, bindingFlags);
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_* GetMethods(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_*(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA17DE0))(type);
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_* GetMethods(ModdingAPI::Exposed::System::Type* type, int32_t bindingFlags) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_*(__fastcall*)(ModdingAPI::Exposed::System::Type*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA17E00))(type, bindingFlags);
  }
  static inline bool IsDefined(ModdingAPI::Exposed::System::Type* type, ModdingAPI::Exposed::System::Type* attributeType, bool inherit) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA17E20))(type, attributeType, inherit);
  }
  static inline bool IsAssemblyLoaded(System_String* assemblyName, bool useShortName, bool ignoreCase) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA17E40))(assemblyName, useShortName, ignoreCase);
  }
  static inline ModdingAPI::Exposed::System::Type* GetTypeInUnityEditorAssembly(System_String* classPath, bool ignoreCase) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA18380))(classPath, ignoreCase);
  }
  static inline ModdingAPI::Exposed::System::Type* GetTypeInUnityBuildAssembly(System_String* classPath, bool ignoreCase) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA18390))(classPath, ignoreCase);
  }
  static inline ModdingAPI::Exposed::System::Type* xlOWpNiCkeIaWysvgQszbKMmuLB(System_String* , bool , bool ) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(System_String*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA183A0))(, , );
  }
  static inline ModdingAPI::Exposed::System::Type* GetTypeInAssembly(System_String* classPath, System_String* assemblyName, bool ignoreCase) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(System_String*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA185D0))(classPath, assemblyName, ignoreCase);
  }
  static inline ModdingAPI::Exposed::System::Reflection::MethodInfo* GetMethodInfo(ModdingAPI::Exposed::System::Delegate* delegate) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Reflection::MethodInfo*(__fastcall*)(ModdingAPI::Exposed::System::Delegate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA186E0))(delegate);
  }
};
}