// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.AI.NavMeshLinkInstance.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Quaternion.hpp"


namespace ModdingAPI::Exposed::UnityEngine::AI {
struct __NavMeshLink_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* s_Tracked;
};

struct __NavMeshLink_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __NavMeshLink_Il2CppClass {
  Il2CppClass_1 _1;
  __NavMeshLink_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __NavMeshLink_Il2CppVtbl vtbl;
};

class NavMeshLink {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C81648;
  static inline    __NavMeshLink_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __NavMeshLink_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__NavMeshLink_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __NavMeshLink_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  int32_t m_AgentTypeID;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_StartPoint;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_EndPoint;
  float m_Width;
  int32_t m_CostModifier;
  bool m_Bidirectional;
  bool m_AutoUpdatePosition;
  int32_t m_Area;
  ModdingAPI::Exposed::UnityEngine::AI::NavMeshLinkInstance m_LinkInstance;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_LastPosition;
  ModdingAPI::Exposed::UnityEngine::Quaternion m_LastRotation;

  // Member methods:
  int32_t get_agentTypeID() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FED20))(this);
  }
  void set_agentTypeID(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155C940))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_startPoint() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155C9B0))(this);
  }
  void set_startPoint(ModdingAPI::Exposed::UnityEngine::Vector3 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155C9D0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_endPoint() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155CA50))(this);
  }
  void set_endPoint(ModdingAPI::Exposed::UnityEngine::Vector3 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155CA70))(this, value);
  }
  float get_width() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6AB810))(this);
  }
  void set_width(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155CAF0))(this, value);
  }
  int32_t get_costModifier() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8A0))(this);
  }
  void set_costModifier(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155CB60))(this, value);
  }
  bool get_bidirectional() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3E0410))(this);
  }
  void set_bidirectional(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155CBD0))(this, value);
  }
  bool get_autoUpdate() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155CC40))(this);
  }
  void set_autoUpdate(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155CC50))(this, value);
  }
  int32_t get_area() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8E0))(this);
  }
  void set_area(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155CD40))(this, value);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155CDB0))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155CE70))(this);
  }
  void UpdateLink() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155CF50))(this);
  }
  void SetAutoUpdate(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155CC50))(this, value);
  }
  void AddLink() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155D420))(this);
  }
  bool HasTransformChanged() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155D810))(this);
  }
  void OnDidApplyAnimationProperties() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155CF50))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155DD20))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> s_Tracked = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_Tracked; }
  );

  // Static methods:
  static inline void AddTracking(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink* link) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155CFC0))(link);
  }
  static inline void RemoveTracking(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink* link) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AI::NavMeshLink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155D200))(link);
  }
  static inline void UpdateTrackedInstances() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x155DBA0))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x155DE60))();
  }
};
}