// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Runtime::Remoting::Messaging {
struct __MonoMethodMessage_Il2CppStaticFields {
  System_String* CallContextKey;
  System_String* UriKey;
};

struct __MonoMethodMessage_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_ArgCount;
  VirtualInvokeData _5_get_Args;
  VirtualInvokeData _6_get_LogicalCallContext;
  VirtualInvokeData _7_get_MethodBase;
  VirtualInvokeData _8_get_MethodName;
  VirtualInvokeData _9_get_MethodSignature;
  VirtualInvokeData _10_get_TypeName;
  VirtualInvokeData _12_GetArg;
  VirtualInvokeData _13_get_Properties;
  VirtualInvokeData _14_get_Exception;
  VirtualInvokeData _15_get_OutArgs;
  VirtualInvokeData _16_get_ReturnValue;
  VirtualInvokeData _17_System_Runtime_Remoting_Messaging_IInternalMessage_get_TargetIdentity;
  VirtualInvokeData _18_System_Runtime_Remoting_Messaging_IInternalMessage_set_TargetIdentity;
  VirtualInvokeData _19_get_Uri;
  VirtualInvokeData _20_set_Uri;
  VirtualInvokeData _21_get_OutArgCount;
};

struct __MonoMethodMessage_Il2CppClass {
  Il2CppClass_1 _1;
  __MonoMethodMessage_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MonoMethodMessage_Il2CppVtbl vtbl;
};

class MonoMethodMessage {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C640C8;
  static inline    __MonoMethodMessage_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __MonoMethodMessage_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__MonoMethodMessage_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __MonoMethodMessage_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Reflection::MonoMethod* method;
  ModdingAPI::Exposed::System::Object_array* args;
  ModdingAPI::Exposed::System::String_array* names;
  ModdingAPI::Exposed::System::Byte_array* arg_types;
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::LogicalCallContext* ctx;
  Il2CppObject* rval;
  ModdingAPI::Exposed::System::Exception* exc;
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult* asyncResult;
  int32_t call_type;
  System_String* uri;
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MCMDictionary* properties;
  ModdingAPI::Exposed::System::Type_array* methodSignature;
  ModdingAPI::Exposed::System::Runtime::Remoting::Identity* identity;

  // Member methods:
  void InitMessage(ModdingAPI::Exposed::System::Reflection::MonoMethod* method, ModdingAPI::Exposed::System::Object_array* out_args) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*, ModdingAPI::Exposed::System::Reflection::MonoMethod*, ModdingAPI::Exposed::System::Object_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6BCA0))(this, method, out_args);
  }
  void ::ctor(ModdingAPI::Exposed::System::Reflection::MethodInfo* minfo, ModdingAPI::Exposed::System::Object_array* in_args, ModdingAPI::Exposed::System::Object_array* out_args) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*, ModdingAPI::Exposed::System::Reflection::MethodInfo*, ModdingAPI::Exposed::System::Object_array*, ModdingAPI::Exposed::System::Object_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6C000))(this, minfo, in_args, out_args);
  }
  ModdingAPI::Exposed::System::Collections::IDictionary* get_Properties() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IDictionary*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6C1A0))(this);
  }
  int32_t get_ArgCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6C300))(this);
  }
  ModdingAPI::Exposed::System::Object_array* get_Args() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Object_array*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::LogicalCallContext* get_LogicalCallContext() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::LogicalCallContext*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335370))(this);
  }
  void set_LogicalCallContext(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::LogicalCallContext* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*, ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::LogicalCallContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A410))(this, value);
  }
  ModdingAPI::Exposed::System::Reflection::MethodBase* get_MethodBase() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Reflection::MethodBase*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  System_String* get_MethodName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6C340))(this);
  }
  Il2CppObject* get_MethodSignature() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6C460))(this);
  }
  System_String* get_TypeName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6C5F0))(this);
  }
  System_String* get_Uri() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383960))(this);
  }
  void set_Uri(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383970))(this, value);
  }
  Il2CppObject* GetArg(int32_t arg_num) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6C730))(this, arg_num);
  }
  ModdingAPI::Exposed::System::Exception* get_Exception() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319960))(this);
  }
  int32_t get_OutArgCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6C770))(this);
  }
  ModdingAPI::Exposed::System::Object_array* get_OutArgs() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Object_array*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6C7E0))(this);
  }
  Il2CppObject* get_ReturnValue() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319970))(this);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::Identity* System::Runtime::Remoting::Messaging::IInternalMessage::get_TargetIdentity() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::Identity*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319940))(this);
  }
  void System::Runtime::Remoting::Messaging::IInternalMessage::set_TargetIdentity(ModdingAPI::Exposed::System::Runtime::Remoting::Identity* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*, ModdingAPI::Exposed::System::Runtime::Remoting::Identity*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x477710))(this, value);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult* get_AsyncResult() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319980))(this);
  }
  int32_t get_CallType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6C9B0))(this);
  }
  bool NeedsOutProcessing(int32_t outCount) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6CB20))(this, outCount);
  }

  // Static fields:
  static inline __CppStaticProperty<System_String*> CallContextKey = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->CallContextKey; }
  );
  static inline __CppStaticProperty<System_String*> UriKey = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->UriKey; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF6CBA0))();
  }
};
}