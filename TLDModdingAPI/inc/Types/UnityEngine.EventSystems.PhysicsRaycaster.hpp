// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.LayerMask.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Ray.hpp"
#include "ModdingAPI::Exposed::UnityEngine::RaycastHit.hpp"


namespace ModdingAPI::Exposed::UnityEngine::EventSystems {
struct __PhysicsRaycaster_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Comparison_T_* __f__am_cache0;
};

struct __PhysicsRaycaster_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Awake;
  VirtualInvokeData _5_OnEnable;
  VirtualInvokeData _6_Start;
  VirtualInvokeData _7_OnDisable;
  VirtualInvokeData _8_OnDestroy;
  VirtualInvokeData _9_IsActive;
  VirtualInvokeData _10_OnRectTransformDimensionsChange;
  VirtualInvokeData _11_OnBeforeTransformParentChanged;
  VirtualInvokeData _12_OnTransformParentChanged;
  VirtualInvokeData _13_OnDidApplyAnimationProperties;
  VirtualInvokeData _14_OnCanvasGroupChanged;
  VirtualInvokeData _15_OnCanvasHierarchyChanged;
  VirtualInvokeData _16_IsDestroyed;
  VirtualInvokeData _17_Raycast;
  VirtualInvokeData _18_get_eventCamera;
  VirtualInvokeData _19_get_priority;
  VirtualInvokeData _20_get_sortOrderPriority;
  VirtualInvokeData _21_get_renderOrderPriority;
  VirtualInvokeData _22_get_depth;
};

struct __PhysicsRaycaster_Il2CppClass {
  Il2CppClass_1 _1;
  __PhysicsRaycaster_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __PhysicsRaycaster_Il2CppVtbl vtbl;
};

class PhysicsRaycaster {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C2D730;
  static inline    __PhysicsRaycaster_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __PhysicsRaycaster_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__PhysicsRaycaster_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __PhysicsRaycaster_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::Camera* m_EventCamera;
  ModdingAPI::Exposed::UnityEngine::LayerMask m_EventMask;
  int32_t m_MaxRayIntersections;
  int32_t m_LastMaxRayIntersections;
  ModdingAPI::Exposed::UnityEngine::RaycastHit_array* m_Hits;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::PhysicsRaycaster*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD9620))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Camera* get_eventCamera() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Camera*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::PhysicsRaycaster*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD9CF0))(this);
  }
  int32_t get_depth() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::PhysicsRaycaster*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD9E00))(this);
  }
  int32_t get_finalEventMask() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::PhysicsRaycaster*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD9F40))(this);
  }
  ModdingAPI::Exposed::UnityEngine::LayerMask get_eventMask() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::LayerMask(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::PhysicsRaycaster*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xADA080))(this);
  }
  void set_eventMask(ModdingAPI::Exposed::UnityEngine::LayerMask value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::PhysicsRaycaster*, ModdingAPI::Exposed::UnityEngine::LayerMask)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3838E0))(this, value);
  }
  int32_t get_maxRayIntersections() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::PhysicsRaycaster*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xADA090))(this);
  }
  void set_maxRayIntersections(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::PhysicsRaycaster*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3838F0))(this, value);
  }
  bool ComputeRayAndDistance(ModdingAPI::Exposed::UnityEngine::EventSystems::PointerEventData* eventData, ModdingAPI::Exposed::UnityEngine::Ray ray, int32_t eventDisplayIndex, float distanceToClipPlane) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::PhysicsRaycaster*, ModdingAPI::Exposed::UnityEngine::EventSystems::PointerEventData*, ModdingAPI::Exposed::UnityEngine::Ray, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xADA0A0))(this, eventData, ray, eventDisplayIndex, distanceToClipPlane);
  }
  void Raycast(ModdingAPI::Exposed::UnityEngine::EventSystems::PointerEventData* eventData, ModdingAPI::Exposed::System::Collections::Generic::List_T_* resultAppendList) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::PhysicsRaycaster*, ModdingAPI::Exposed::UnityEngine::EventSystems::PointerEventData*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xADA640))(this, eventData, resultAppendList);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Comparison_T_*> __f__am_cache0 = __CppStaticProperty<ModdingAPI::Exposed::System::Comparison_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->__f__am_cache0; }
  );

  // Static methods:
  static inline int32_t _Raycast_m__0(ModdingAPI::Exposed::UnityEngine::RaycastHit r1, ModdingAPI::Exposed::UnityEngine::RaycastHit r2) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::RaycastHit, ModdingAPI::Exposed::UnityEngine::RaycastHit)>(Helpers::Memory::GetInstance().MakeAbsolute(0xADAD40))(r1, r2);
  }
};
}