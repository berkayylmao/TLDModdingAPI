// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.ParadoxNotion.Serialization.FullSerializer.fsResult.hpp"


namespace ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer {
struct __fsJsonParser_Il2CppStaticFields {
};

struct __fsJsonParser_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __fsJsonParser_Il2CppClass {
  Il2CppClass_1 _1;
  __fsJsonParser_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __fsJsonParser_Il2CppVtbl vtbl;
};

class fsJsonParser {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C578A8;
  static inline    __fsJsonParser_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __fsJsonParser_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__fsJsonParser_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __fsJsonParser_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t _start;
  System_String* _input;
  ModdingAPI::Exposed::System::Text::StringBuilder* _cachedStringBuilder;

  // Member methods:
  ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult MakeFailure(System_String* message) {
    return reinterpret_cast<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2426E20))(this, message);
  }
  bool TryMoveNext() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2427140))(this);
  }
  bool HasValue() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2427170))(this);
  }
  bool HasValue(int32_t offset) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24271A0))(this, offset);
  }
  wchar_t Character() {
    return reinterpret_cast<wchar_t(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x192F930))(this);
  }
  wchar_t Character(int32_t offset) {
    return reinterpret_cast<wchar_t(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24271E0))(this, offset);
  }
  void SkipSpace() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2427210))(this);
  }
  bool IsHex(wchar_t c) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24275B0))(this, c);
  }
  uint32_t ParseSingleChar(wchar_t c1, uint32_t multipliyer) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*, wchar_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24275E0))(this, c1, multipliyer);
  }
  uint32_t ParseUnicode(wchar_t c1, wchar_t c2, wchar_t c3, wchar_t c4) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*, wchar_t, wchar_t, wchar_t, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2427620))(this, c1, c2, c3, c4);
  }
  ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult TryUnescapeChar(wchar_t escaped) {
    return reinterpret_cast<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2427770))(this, escaped);
  }
  ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult TryParseExact(System_String* content) {
    return reinterpret_cast<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2428020))(this, content);
  }
  ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult TryParseTrue(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData* data) {
    return reinterpret_cast<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*, ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24281B0))(this, data);
  }
  ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult TryParseFalse(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData* data) {
    return reinterpret_cast<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*, ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2428370))(this, data);
  }
  ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult TryParseNull(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData* data) {
    return reinterpret_cast<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*, ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2428530))(this, data);
  }
  bool IsSeparator(wchar_t c) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24286F0))(this, c);
  }
  ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult TryParseNumber(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData* data) {
    return reinterpret_cast<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*, ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24287B0))(this, data);
  }
  ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult TryParseString(System_String* str) {
    return reinterpret_cast<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2428D90))(this, str);
  }
  ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult TryParseArray(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData* arr) {
    return reinterpret_cast<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*, ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24290E0))(this, arr);
  }
  ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult TryParseObject(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData* obj) {
    return reinterpret_cast<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*, ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2429560))(this, obj);
  }
  ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult RunParse(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData* data) {
    return reinterpret_cast<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*, ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2429B80))(this, data);
  }
  void ::ctor(System_String* input) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsJsonParser*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x242A2D0))(this, input);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult Parse(System_String* input, ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData* data) {
    return reinterpret_cast<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsResult(__fastcall*)(System_String*, ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2429F20))(input, data);
  }
  static inline ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData* Parse(System_String* input) {
    return reinterpret_cast<ModdingAPI::Exposed::ParadoxNotion::Serialization::FullSerializer::fsData*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x242A210))(input);
  }
};
}