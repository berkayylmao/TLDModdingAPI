// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __TimeOfDay_Il2CppStaticFields {
  ModdingAPI::Exposed::TimeOfDaySaveDataProxy* m_TimeOfDaySaveDataProxy;
};

struct __TimeOfDay_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __TimeOfDay_Il2CppClass {
  Il2CppClass_1 _1;
  __TimeOfDay_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TimeOfDay_Il2CppVtbl vtbl;
};

class TimeOfDay {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C6A550;
  static inline    __TimeOfDay_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __TimeOfDay_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__TimeOfDay_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __TimeOfDay_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_UniStormPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_UniStorm;
  int32_t m_DebugTimeSpeedupCounter;
  int32_t m_StartTimeHour;
  int32_t m_StartTimeMinutes;
  int32_t m_DayDurationInMinutes;
  int32_t m_NightDurationInMinutes;
  int32_t m_DawnStingerHourStart;
  int32_t m_DawnStingerMinutesStart;
  int32_t m_NightStingerHourStart;
  int32_t m_NightStingerMinutesStart;
  System_String* m_DawnStingerAudio;
  System_String* m_NightStingerAudio;
  System_String* m_DawnVoiceOver;
  float m_DawnVoiceOverDelaySeconds;
  System_String* m_NightVoiceOver;
  float m_NightVoiceOverDelaySeconds;
  ModdingAPI::Exposed::UniStormWeatherSystem* m_WeatherSystem;
  float m_DayLengthScale;
  float m_DayLengthScaleDebug;
  int32_t m_DayLastDawnStingerAudioPlayed;
  int32_t m_DayLastNightStingerAudioPlayed;
  int32_t m_DayLastDawnVoiceOverPlayed;
  int32_t m_DayLastNightVoiceOverPlayed;
  System_String* m_NextVoiceOver;
  float m_TimeToPlayNextVoiceOver;
  ModdingAPI::Exposed::System::Text::StringBuilder* m_StringBuilder;
  int32_t m_DaysSurvivedLastFrame;
  bool m_WasNightLastFrame;
  int32_t m_SkipUpdateCount;
  int32_t m_LastHourSentToWise;
  bool m_StartHasBeenCalled;
  bool m_WeatherInitializedForScene;
  int32_t m_IsTimeLapseActiveCounter;
  bool m_LockedTOD;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAF850))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BAFB60))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0020))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0300))(this, text);
  }
  void SetTODLocked(bool isLocked) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA7080))(this, isLocked);
  }
  bool IsTODLocked() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA84B20))(this);
  }
  void TimeLapseBegin() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0580))(this);
  }
  void TimeLapseEnd() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0590))(this);
  }
  float GetDayLengthSeconds() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB05A0))(this);
  }
  float GetDayLengthSecondsUnscaled() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB05D0))(this);
  }
  void SetDayLengthScale(float scale) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB05F0))(this, scale);
  }
  float GetDayLengthScale() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0750))(this);
  }
  bool IsTimeLapseActive() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0780))(this);
  }
  bool IsDay() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB08E0))(this);
  }
  bool IsMorning() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0910))(this);
  }
  bool IsAfternoon() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0980))(this);
  }
  bool IsNight() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB09F0))(this);
  }
  bool IsNightPreMidnight() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0A20))(this);
  }
  bool IsNightPostMidnight() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0A80))(this);
  }
  bool IsDusk() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0AE0))(this);
  }
  bool IsDawn() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0B10))(this);
  }
  float GetProgressDusk() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0B40))(this);
  }
  float GetDawnHourTime() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0B70))(this);
  }
  float GetProgressDawn() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0BC0))(this);
  }
  int32_t GetDayNumber() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0BF0))(this);
  }
  int32_t GetHour() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0C10))(this);
  }
  int32_t GetMinutes() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0C40))(this);
  }
  float GetNormalizedTime() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0CA0))(this);
  }
  void SetNormalizedTime(float time) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0CC0))(this, time);
  }
  void SetNormalizedTime(float time, bool forceUpdate) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0CD0))(this, time, forceUpdate);
  }
  void SetUniStormAuroraAlpha(float alpha) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0E10))(this, alpha);
  }
  System_String* FormatTime(int32_t hours, int32_t minutes) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB0E40))(this, hours, minutes);
  }
  void Accelerate(float realTimeSeconds, float gameTimeHours, bool doFadeToBlack) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, float, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB1100))(this, realTimeSeconds, gameTimeHours, doFadeToBlack);
  }
  float GetTODSeconds(float realTimeSeconds) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB1340))(this, realTimeSeconds);
  }
  float GetTODSecondsUnscaled(float realTimeSeconds) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB1380))(this, realTimeSeconds);
  }
  float GetTODMinutes(float realTimeSeconds) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB13B0))(this, realTimeSeconds);
  }
  float GetTODMinutesUnscaled(float realTimeSeconds) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB13F0))(this, realTimeSeconds);
  }
  float GetTODHours(float realTimeSeconds) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB1420))(this, realTimeSeconds);
  }
  float GetTODHoursUnscaled(float realTimeSeconds) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB1460))(this, realTimeSeconds);
  }
  float GetRealTimeSeconds(float todHours) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB1490))(this, todHours);
  }
  float GetHoursPlayedNotPaused() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB14D0))(this);
  }
  bool IsInitializedForScene() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB1500))(this);
  }
  void SetHoursPlayedNotPaused(float hours) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB1510))(this, hours);
  }
  void ForceUpdateTodObjects() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB1540))(this);
  }
  void SetCameraVignettingIndoors() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB15D0))(this);
  }
  int32_t GetTODBlendState() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB1710))(this);
  }
  float GetTODBlendPercent(int32_t blendState) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB1740))(this, blendState);
  }
  System_String* GetHoursDaylightString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB1770))(this);
  }
  System_String* GetGenericTODString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB1C50))(this);
  }
  void InstantiateUniStorm(ModdingAPI::Exposed::UnityEngine::Camera* mainCamera) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, ModdingAPI::Exposed::UnityEngine::Camera*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB1E00))(this, mainCamera);
  }
  void AccelerateTime(float minutes, float realtimeDurationSeconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB20B0))(this, minutes, realtimeDurationSeconds);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* AccelerateCo(float minutes, float realtimeDurationSeconds) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB2230))(this, minutes, realtimeDurationSeconds);
  }
  void CheckAchievements() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB23B0))(this);
  }
  void DoEndOfDayAnalytics(int32_t numDaysSurvived) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB2760))(this, numDaysSurvived);
  }
  void UpdateUniStormDayLength() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB2AE0))(this);
  }
  void UpdateUniStormTimeScollBarDisplay() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB2C30))(this);
  }
  void DebugOnly_UpdateTimeOfDayScale() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB2D90))(this);
  }
  void MaybePlayTimeOfDayStingers() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB3110))(this);
  }
  void PlayDelayedVoiceOver() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB3680))(this);
  }
  void MaybeUpdateWiseWithCurrentHour() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB37E0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TimeOfDay*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB3900))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::TimeOfDaySaveDataProxy*> m_TimeOfDaySaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::TimeOfDaySaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_TimeOfDaySaveDataProxy; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BB3920))();
  }
};
}