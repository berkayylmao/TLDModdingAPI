// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.Rewired.AxisCalibrationData.hpp"
#include "ModdingAPI::Exposed::Rewired::AxisCalibrationData.hpp"


namespace ModdingAPI::Exposed::Rewired::Data::Mapping {
struct __AxisCalibrationInfo_Il2CppStaticFields {
};

struct __AxisCalibrationInfo_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_DeepClone;
};

struct __AxisCalibrationInfo_Il2CppClass {
  Il2CppClass_1 _1;
  __AxisCalibrationInfo_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AxisCalibrationInfo_Il2CppVtbl vtbl;
};

class AxisCalibrationInfo {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C7B498;
  static inline    __AxisCalibrationInfo_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __AxisCalibrationInfo_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__AxisCalibrationInfo_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __AxisCalibrationInfo_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  bool _applyRangeCalibration;
  bool _invert;
  float _deadZone;
  float _zero;
  float _min;
  float _max;
  int32_t _sensitivityType;
  float _sensitivity;
  ModdingAPI::Exposed::UnityEngine::AnimationCurve* _sensitivityCurve;

  // Member methods:
  bool get_applyRangeCalibration() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33C2C0))(this);
  }
  void set_applyRangeCalibration(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30CFB0))(this, value);
  }
  bool get_invert() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33CD00))(this);
  }
  void set_invert(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33CD10))(this, value);
  }
  float get_deadZone() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x580F50))(this);
  }
  void set_deadZone(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x802110))(this, value);
  }
  float get_zero() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x88C900))(this);
  }
  void set_zero(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x699250))(this, value);
  }
  float get_min() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x79C3E0))(this);
  }
  void set_min(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x88C910))(this, value);
  }
  float get_max() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56ECC0))(this);
  }
  void set_max(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x88C920))(this, value);
  }
  int32_t get_sensitivityType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x37AAF0))(this);
  }
  void set_sensitivityType(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3838F0))(this, value);
  }
  float get_sensitivity() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56ED60))(this);
  }
  void set_sensitivity(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7B8D40))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::AnimationCurve* get_sensitivityCurve() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::AnimationCurve*(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335370))(this);
  }
  void set_sensitivityCurve(ModdingAPI::Exposed::UnityEngine::AnimationCurve* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*, ModdingAPI::Exposed::UnityEngine::AnimationCurve*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A410))(this, value);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x88C930))(this);
  }
  void ::ctor(float deadZone, float zero, float min, float max, bool invert, bool applyRangeCalibration, int32_t sensitivityType, float sensitivity, ModdingAPI::Exposed::UnityEngine::AnimationCurve* sensitivityCurve) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*, float, float, float, float, bool, bool, int32_t, float, ModdingAPI::Exposed::UnityEngine::AnimationCurve*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x88C940))(this, deadZone, zero, min, max, invert, applyRangeCalibration, sensitivityType, sensitivity, sensitivityCurve);
  }
  Il2CppObject* DeepClone() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x88C9B0))(this);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::Rewired::AxisCalibrationData knsiWcAQYIFBiWdVAeOpUgJbjWyB(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo* ) {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::AxisCalibrationData(__fastcall*)(ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x88CBE0))();
  }
  static inline ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo* myJctqFeAyjbpcJObgDWRRPlNroQ(ModdingAPI::Exposed::Rewired::AxisCalibrationData ) {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibrationData)>(Helpers::Memory::GetInstance().MakeAbsolute(0x88CDC0))();
  }
};
}