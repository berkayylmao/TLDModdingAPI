// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Nullable_T_.hpp"


namespace ModdingAPI::Exposed::Rewired::Platforms::Custom::CustomInputSource {
struct __Joystick_Il2CppStaticFields {
};

struct __Joystick_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _5_get_supportsVibration;
  VirtualInvokeData _6_GetAxisValue;
  VirtualInvokeData _7_GetButtonValue;
  VirtualInvokeData _65535__ctor;
};

struct __Joystick_Il2CppClass {
  Il2CppClass_1 _1;
  __Joystick_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Joystick_Il2CppVtbl vtbl;
};

class Joystick {
public:
  // Il2Cpp fields:
  __Joystick_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  bool _isConnected;
  System_String* _deviceName;
  System_String* _customName;
  ModdingAPI::Exposed::System::Nullable_T_ qbbbdAdRgyAzIkwmNaaQhnCgBowD;
  int32_t jgfPnAEctTWfPBegrbwLfYRRsNXO;
  ModdingAPI::Exposed::Rewired::Platforms::Custom::CustomInputSource::Axis_array* ygKoSRPvlhFHNugDEHnHEFOaPysU;
  ModdingAPI::Exposed::Rewired::Platforms::Custom::CustomInputSource::Button_array* KVNyFuTeDYMEfZfzXNZSFyiUjOz;
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* qRvwjQLeRXtQWAsIHTXHSDttcbM;
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* dFHovyHkekMsXyCKWzTPLFQzuLf;
  bool QhKxQVMbciEjINDsdQowgZOEWOn;
  ModdingAPI::Exposed::Rewired::Controller::Extension* mOyfABPQGnDTXmvUyuQvMOOPHRt;

  // Member methods:
  ModdingAPI::Exposed::System::Nullable_T_ get_systemId() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Nullable_T_(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::Custom::CustomInputSource::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x310F10))(this);
  }
  void set_systemId(ModdingAPI::Exposed::System::Nullable_T_ value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::Custom::CustomInputSource::Joystick*, ModdingAPI::Exposed::System::Nullable_T_)>(Helpers::Memory::GetInstance().MakeAbsolute(0x310F20))(this, value);
  }
  int32_t get_unityId() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::Custom::CustomInputSource::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8A0))(this);
  }
  void set_unityId(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::Custom::CustomInputSource::Joystick*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8B0))(this, value);
  }
  ModdingAPI::Exposed::System::Collections::Generic::IList_T_* get_Axes() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IList_T_*(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::Custom::CustomInputSource::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A440))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::IList_T_* get_Buttons() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IList_T_*(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::Custom::CustomInputSource::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383960))(this);
  }
  bool get_supportsVibration() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::Custom::CustomInputSource::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x58F760))(this);
  }
  void set_supportsVibration(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::Custom::CustomInputSource::Joystick*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x760420))(this, value);
  }
  ModdingAPI::Exposed::Rewired::Controller::Extension* get_extension() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::Controller::Extension*(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::Custom::CustomInputSource::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319930))(this);
  }
  void set_extension(ModdingAPI::Exposed::Rewired::Controller::Extension* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::Custom::CustomInputSource::Joystick*, ModdingAPI::Exposed::Rewired::Controller::Extension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A4C0))(this, value);
  }
  int32_t get_buttonCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::Custom::CustomInputSource::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x760430))(this);
  }
  int32_t get_axisCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::Custom::CustomInputSource::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x760450))(this);
  }
  void ::ctor(System_String* deviceName, ModdingAPI::Exposed::System::Nullable_T_ systemId, int32_t unityId, int32_t axisCount, int32_t buttonCount) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::Custom::CustomInputSource::Joystick*, System_String*, ModdingAPI::Exposed::System::Nullable_T_, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x760470))(this, deviceName, systemId, unityId, axisCount, buttonCount);
  }
  float GetAxisValue(int32_t index) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::Custom::CustomInputSource::Joystick*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x760BA0))(this, index);
  }
  bool GetButtonValue(int32_t index) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::Custom::CustomInputSource::Joystick*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x760C30))(this, index);
  }
};
}