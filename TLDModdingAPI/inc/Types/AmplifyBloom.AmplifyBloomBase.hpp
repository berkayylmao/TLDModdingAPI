// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector4.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Matrix4x4.hpp"


namespace ModdingAPI::Exposed::AmplifyBloom {
struct __AmplifyBloomBase_Il2CppStaticFields {
};

struct __AmplifyBloomBase_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __AmplifyBloomBase_Il2CppClass {
  Il2CppClass_1 _1;
  __AmplifyBloomBase_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AmplifyBloomBase_Il2CppVtbl vtbl;
};

class AmplifyBloomBase {
public:
  // Il2Cpp fields:
  __AmplifyBloomBase_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::Texture* m_maskTexture;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* m_targetTexture;
  bool m_showDebugMessages;
  int32_t m_softMaxdownscales;
  int32_t m_debugToScreen;
  bool m_highPrecision;
  ModdingAPI::Exposed::UnityEngine::Vector4 m_bloomRange;
  float m_overallThreshold;
  ModdingAPI::Exposed::UnityEngine::Vector4 m_bloomParams;
  bool m_temporalFilteringActive;
  float m_temporalFilteringValue;
  int32_t m_bloomDownsampleCount;
  ModdingAPI::Exposed::UnityEngine::AnimationCurve* m_temporalFilteringCurve;
  bool m_separateFeaturesThreshold;
  float m_featuresThreshold;
  ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare* m_lensFlare;
  bool m_applyLensDirt;
  float m_lensDirtStrength;
  ModdingAPI::Exposed::UnityEngine::Texture* m_lensDirtTexture;
  bool m_applyLensStardurst;
  ModdingAPI::Exposed::UnityEngine::Texture* m_lensStardurstTex;
  float m_lensStarburstStrength;
  ModdingAPI::Exposed::AmplifyBloom::AmplifyGlare* m_anamorphicGlare;
  ModdingAPI::Exposed::AmplifyBloom::AmplifyBokeh* m_bokehFilter;
  ModdingAPI::Exposed::System::Single_array* m_upscaleWeights;
  ModdingAPI::Exposed::System::Single_array* m_gaussianRadius;
  ModdingAPI::Exposed::System::Int32_array* m_gaussianSteps;
  ModdingAPI::Exposed::System::Single_array* m_lensDirtWeights;
  ModdingAPI::Exposed::System::Single_array* m_lensStarburstWeights;
  ModdingAPI::Exposed::System::Boolean_array* m_downscaleSettingsFoldout;
  int32_t m_featuresSourceId;
  int32_t m_upscaleQuality;
  int32_t m_mainThresholdSize;
  ModdingAPI::Exposed::UnityEngine::Transform* m_cameraTransform;
  ModdingAPI::Exposed::UnityEngine::Matrix4x4 m_starburstMat;
  ModdingAPI::Exposed::UnityEngine::Shader* m_bloomShader;
  ModdingAPI::Exposed::UnityEngine::Material* m_bloomMaterial;
  ModdingAPI::Exposed::UnityEngine::Shader* m_finalCompositionShader;
  ModdingAPI::Exposed::UnityEngine::Material* m_finalCompositionMaterial;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* m_tempFilterBuffer;
  ModdingAPI::Exposed::UnityEngine::Camera* m_camera;
  ModdingAPI::Exposed::UnityEngine::RenderTexture_array* m_tempUpscaleRTs;
  ModdingAPI::Exposed::UnityEngine::RenderTexture_array* m_tempAuxDownsampleRTs;
  ModdingAPI::Exposed::UnityEngine::Vector2_array* m_tempDownsamplesSizes;
  bool silentError;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C8CFE0))(this);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C8DFC0))(this);
  }
  void ApplyGaussianBlur(ModdingAPI::Exposed::UnityEngine::RenderTexture* renderTexture, int32_t amount, float radius, bool applyTemporal) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, int32_t, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C8E100))(this, renderTexture, amount, radius, applyTemporal);
  }
  void CreateTempFilterRT(ModdingAPI::Exposed::UnityEngine::RenderTexture* source) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, ModdingAPI::Exposed::UnityEngine::RenderTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C8E650))(this, source);
  }
  void CleanTempFilterRT() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C8E9F0))(this);
  }
  void OnRenderImage(ModdingAPI::Exposed::UnityEngine::RenderTexture* src, ModdingAPI::Exposed::UnityEngine::RenderTexture* dest) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C8EB80))(this, src, dest);
  }
  void FinalComposition(float srcContribution, float upscaleContribution, ModdingAPI::Exposed::UnityEngine::RenderTexture* src, ModdingAPI::Exposed::UnityEngine::RenderTexture* dest, int32_t forcePassId) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, float, float, ModdingAPI::Exposed::UnityEngine::RenderTexture*, ModdingAPI::Exposed::UnityEngine::RenderTexture*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C910B0))(this, srcContribution, upscaleContribution, src, dest, forcePassId);
  }
  void ApplyUpscale() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91340))(this);
  }
  ModdingAPI::Exposed::AmplifyBloom::AmplifyGlare* get_LensGlareInstance() {
    return reinterpret_cast<ModdingAPI::Exposed::AmplifyBloom::AmplifyGlare*(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30F140))(this);
  }
  ModdingAPI::Exposed::AmplifyBloom::AmplifyBokeh* get_BokehFilterInstance() {
    return reinterpret_cast<ModdingAPI::Exposed::AmplifyBloom::AmplifyBokeh*(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x307710))(this);
  }
  ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare* get_LensFlareInstance() {
    return reinterpret_cast<ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319950))(this);
  }
  bool get_ApplyLensDirt() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7F6490))(this);
  }
  void set_ApplyLensDirt(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C5EC50))(this, value);
  }
  float get_LensDirtStrength() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17AE6B0))(this);
  }
  void set_LensDirtStrength(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C916F0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Texture* get_LensDirtTexture() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Texture*(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x307640))(this);
  }
  void set_LensDirtTexture(ModdingAPI::Exposed::UnityEngine::Texture* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, ModdingAPI::Exposed::UnityEngine::Texture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5E95A0))(this, value);
  }
  bool get_ApplyLensStardurst() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3199F0))(this);
  }
  void set_ApplyLensStardurst(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAFE170))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Texture* get_LensStardurstTex() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Texture*(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319850))(this);
  }
  void set_LensStardurstTex(ModdingAPI::Exposed::UnityEngine::Texture* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, ModdingAPI::Exposed::UnityEngine::Texture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319860))(this, value);
  }
  float get_LensStarburstStrength() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91720))(this);
  }
  void set_LensStarburstStrength(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91730))(this, value);
  }
  int32_t get_CurrentPrecisionMode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91760))(this);
  }
  void set_CurrentPrecisionMode(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91770))(this, value);
  }
  bool get_HighPrecision() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x306B90))(this);
  }
  void set_HighPrecision(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91790))(this, value);
  }
  float get_BloomRange() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56EDE0))(this);
  }
  void set_BloomRange(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C917A0))(this, value);
  }
  float get_OverallThreshold() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56EEC0))(this);
  }
  void set_OverallThreshold(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C917C0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector4 get_BloomParams() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector4(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C917F0))(this);
  }
  void set_BloomParams(ModdingAPI::Exposed::UnityEngine::Vector4 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, ModdingAPI::Exposed::UnityEngine::Vector4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91800))(this, value);
  }
  float get_OverallIntensity() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EFF50))(this);
  }
  void set_OverallIntensity(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91810))(this, value);
  }
  float get_BloomScale() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56EFD0))(this);
  }
  void set_BloomScale(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91830))(this, value);
  }
  float get_UpscaleBlurRadius() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56EF90))(this);
  }
  void set_UpscaleBlurRadius(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91850))(this, value);
  }
  bool get_TemporalFilteringActive() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCAF2D0))(this);
  }
  void set_TemporalFilteringActive(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91860))(this, value);
  }
  float get_TemporalFilteringValue() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56F070))(this);
  }
  void set_TemporalFilteringValue(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C918A0))(this, value);
  }
  int32_t get_SoftMaxdownscales() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36F820))(this);
  }
  int32_t get_BloomDownsampleCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3839A0))(this);
  }
  void set_BloomDownsampleCount(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C918B0))(this, value);
  }
  int32_t get_FeaturesSourceId() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91990))(this);
  }
  void set_FeaturesSourceId(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C919A0))(this, value);
  }
  ModdingAPI::Exposed::System::Boolean_array* get_DownscaleSettingsFoldout() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Boolean_array*(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3EBFF0))(this);
  }
  ModdingAPI::Exposed::System::Single_array* get_UpscaleWeights() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Single_array*(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1090))(this);
  }
  ModdingAPI::Exposed::System::Single_array* get_LensDirtWeights() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Single_array*(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F11D0))(this);
  }
  ModdingAPI::Exposed::System::Single_array* get_LensStarburstWeights() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Single_array*(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3EBFD0))(this);
  }
  ModdingAPI::Exposed::System::Single_array* get_GaussianRadius() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Single_array*(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F1BE0))(this);
  }
  ModdingAPI::Exposed::System::Int32_array* get_GaussianSteps() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Int32_array*(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F4090))(this);
  }
  ModdingAPI::Exposed::UnityEngine::AnimationCurve* get_TemporalFilteringCurve() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::AnimationCurve*(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319930))(this);
  }
  void set_TemporalFilteringCurve(ModdingAPI::Exposed::UnityEngine::AnimationCurve* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, ModdingAPI::Exposed::UnityEngine::AnimationCurve*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A4C0))(this, value);
  }
  bool get_SeparateFeaturesThreshold() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C1CD0))(this);
  }
  void set_SeparateFeaturesThreshold(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C1CE0))(this, value);
  }
  float get_FeaturesThreshold() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91A70))(this);
  }
  void set_FeaturesThreshold(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91A80))(this, value);
  }
  int32_t get_DebugToScreen() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D870))(this);
  }
  void set_DebugToScreen(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x31DD70))(this, value);
  }
  int32_t get_UpscaleQuality() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91AB0))(this);
  }
  void set_UpscaleQuality(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91AC0))(this, value);
  }
  bool get_ShowDebugMessages() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3F0))(this);
  }
  void set_ShowDebugMessages(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A400))(this, value);
  }
  int32_t get_MainThresholdSize() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9321A0))(this);
  }
  void set_MainThresholdSize(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91AD0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::RenderTexture* get_TargetTexture() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::RenderTexture*(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110A0))(this);
  }
  void set_TargetTexture(ModdingAPI::Exposed::UnityEngine::RenderTexture* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, ModdingAPI::Exposed::UnityEngine::RenderTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x310F00))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Texture* get_MaskTexture() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Texture*(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  void set_MaskTexture(ModdingAPI::Exposed::UnityEngine::Texture* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, ModdingAPI::Exposed::UnityEngine::Texture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3E0))(this, value);
  }
  bool get_ApplyBokehFilter() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91AE0))(this);
  }
  void set_ApplyBokehFilter(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91B00))(this, value);
  }
  bool get_ApplyLensFlare() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91B20))(this);
  }
  void set_ApplyLensFlare(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91B40))(this, value);
  }
  bool get_ApplyLensGlare() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91B60))(this);
  }
  void set_ApplyLensGlare(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91B80))(this, value);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyBloomBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91BA0))(this);
  }
};
}