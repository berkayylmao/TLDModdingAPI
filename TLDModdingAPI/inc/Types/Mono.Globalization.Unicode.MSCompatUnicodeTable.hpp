// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Mono::Globalization::Unicode {
struct __MSCompatUnicodeTable_Il2CppStaticFields {
  int32_t MaxExpansionLength;
  uint8_t* ignorableFlags;
  uint8_t* categories;
  uint8_t* level1;
  uint8_t* level2;
  uint8_t* level3;
  uint8_t* cjkCHScategory;
  uint8_t* cjkCHTcategory;
  uint8_t* cjkJAcategory;
  uint8_t* cjkKOcategory;
  uint8_t* cjkCHSlv1;
  uint8_t* cjkCHTlv1;
  uint8_t* cjkJAlv1;
  uint8_t* cjkKOlv1;
  uint8_t* cjkKOlv2;
  ModdingAPI::Exposed::System::Char_array* tailoringArr;
  ModdingAPI::Exposed::Mono::Globalization::Unicode::TailoringInfo_array* tailoringInfos;
  Il2CppObject* forLock;
  bool isReady;
};

struct __MSCompatUnicodeTable_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __MSCompatUnicodeTable_Il2CppClass {
  Il2CppClass_1 _1;
  __MSCompatUnicodeTable_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MSCompatUnicodeTable_Il2CppVtbl vtbl;
};

class MSCompatUnicodeTable {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C241E0;
  static inline    __MSCompatUnicodeTable_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __MSCompatUnicodeTable_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__MSCompatUnicodeTable_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __MSCompatUnicodeTable_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<int32_t> MaxExpansionLength = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->MaxExpansionLength; }
  );
  static inline __CppStaticProperty<uint8_t*> ignorableFlags = __CppStaticProperty<uint8_t*>(
   []() { return &GetStaticClassInstance()->pStaticFields->ignorableFlags; }
  );
  static inline __CppStaticProperty<uint8_t*> categories = __CppStaticProperty<uint8_t*>(
   []() { return &GetStaticClassInstance()->pStaticFields->categories; }
  );
  static inline __CppStaticProperty<uint8_t*> level1 = __CppStaticProperty<uint8_t*>(
   []() { return &GetStaticClassInstance()->pStaticFields->level1; }
  );
  static inline __CppStaticProperty<uint8_t*> level2 = __CppStaticProperty<uint8_t*>(
   []() { return &GetStaticClassInstance()->pStaticFields->level2; }
  );
  static inline __CppStaticProperty<uint8_t*> level3 = __CppStaticProperty<uint8_t*>(
   []() { return &GetStaticClassInstance()->pStaticFields->level3; }
  );
  static inline __CppStaticProperty<uint8_t*> cjkCHScategory = __CppStaticProperty<uint8_t*>(
   []() { return &GetStaticClassInstance()->pStaticFields->cjkCHScategory; }
  );
  static inline __CppStaticProperty<uint8_t*> cjkCHTcategory = __CppStaticProperty<uint8_t*>(
   []() { return &GetStaticClassInstance()->pStaticFields->cjkCHTcategory; }
  );
  static inline __CppStaticProperty<uint8_t*> cjkJAcategory = __CppStaticProperty<uint8_t*>(
   []() { return &GetStaticClassInstance()->pStaticFields->cjkJAcategory; }
  );
  static inline __CppStaticProperty<uint8_t*> cjkKOcategory = __CppStaticProperty<uint8_t*>(
   []() { return &GetStaticClassInstance()->pStaticFields->cjkKOcategory; }
  );
  static inline __CppStaticProperty<uint8_t*> cjkCHSlv1 = __CppStaticProperty<uint8_t*>(
   []() { return &GetStaticClassInstance()->pStaticFields->cjkCHSlv1; }
  );
  static inline __CppStaticProperty<uint8_t*> cjkCHTlv1 = __CppStaticProperty<uint8_t*>(
   []() { return &GetStaticClassInstance()->pStaticFields->cjkCHTlv1; }
  );
  static inline __CppStaticProperty<uint8_t*> cjkJAlv1 = __CppStaticProperty<uint8_t*>(
   []() { return &GetStaticClassInstance()->pStaticFields->cjkJAlv1; }
  );
  static inline __CppStaticProperty<uint8_t*> cjkKOlv1 = __CppStaticProperty<uint8_t*>(
   []() { return &GetStaticClassInstance()->pStaticFields->cjkKOlv1; }
  );
  static inline __CppStaticProperty<uint8_t*> cjkKOlv2 = __CppStaticProperty<uint8_t*>(
   []() { return &GetStaticClassInstance()->pStaticFields->cjkKOlv2; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*> tailoringArr = __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->tailoringArr; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::Mono::Globalization::Unicode::TailoringInfo_array*> tailoringInfos = __CppStaticProperty<ModdingAPI::Exposed::Mono::Globalization::Unicode::TailoringInfo_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->tailoringInfos; }
  );
  static inline __CppStaticProperty<Il2CppObject*> forLock = __CppStaticProperty<Il2CppObject*>(
   []() { return &GetStaticClassInstance()->pStaticFields->forLock; }
  );
  static inline __CppStaticProperty<bool> isReady = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->isReady; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::Mono::Globalization::Unicode::TailoringInfo* GetTailoringInfo(int32_t lcid) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Globalization::Unicode::TailoringInfo*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB29D0))(lcid);
  }
  static inline void BuildTailoringTables(ModdingAPI::Exposed::System::Globalization::CultureInfo* culture, ModdingAPI::Exposed::Mono::Globalization::Unicode::TailoringInfo* t, ModdingAPI::Exposed::Mono::Globalization::Unicode::Contraction_array* contractions, ModdingAPI::Exposed::Mono::Globalization::Unicode::Level2Map_array* diacriticals) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CultureInfo*, ModdingAPI::Exposed::Mono::Globalization::Unicode::TailoringInfo*, ModdingAPI::Exposed::Mono::Globalization::Unicode::Contraction_array*, ModdingAPI::Exposed::Mono::Globalization::Unicode::Level2Map_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB2B80))(culture, t, contractions, diacriticals);
  }
  static inline void SetCJKReferences(System_String* name, ModdingAPI::Exposed::Mono::Globalization::Unicode::CodePointIndexer* cjkIndexer, uint8_t* catTable, uint8_t* lv1Table, ModdingAPI::Exposed::Mono::Globalization::Unicode::CodePointIndexer* lv2Indexer, uint8_t* lv2Table) {
    reinterpret_cast<void(__fastcall*)(System_String*, ModdingAPI::Exposed::Mono::Globalization::Unicode::CodePointIndexer*, uint8_t*, uint8_t*, ModdingAPI::Exposed::Mono::Globalization::Unicode::CodePointIndexer*, uint8_t*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB3590))(name, cjkIndexer, catTable, lv1Table, lv2Indexer, lv2Table);
  }
  static inline uint8_t Category(int32_t cp) {
    return reinterpret_cast<uint8_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB3910))(cp);
  }
  static inline uint8_t Level1(int32_t cp) {
    return reinterpret_cast<uint8_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB3A10))(cp);
  }
  static inline uint8_t Level2(int32_t cp) {
    return reinterpret_cast<uint8_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB3B10))(cp);
  }
  static inline uint8_t Level3(int32_t cp) {
    return reinterpret_cast<uint8_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB3C10))(cp);
  }
  static inline bool IsIgnorable(int32_t cp, uint8_t flag) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, uint8_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB3D10))(cp, flag);
  }
  static inline bool IsIgnorableNonSpacing(int32_t cp) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB3E80))(cp);
  }
  static inline int32_t ToKanaTypeInsensitive(int32_t i) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB3F20))(i);
  }
  static inline int32_t ToWidthCompat(int32_t i) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB3F40))(i);
  }
  static inline bool HasSpecialWeight(wchar_t c) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB40C0))(c);
  }
  static inline bool IsHalfWidthKana(wchar_t c) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB4130))(c);
  }
  static inline bool IsHiragana(wchar_t c) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB4150))(c);
  }
  static inline bool IsJapaneseSmallLetter(wchar_t c) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB4170))(c);
  }
  static inline bool get_IsReady() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB42E0))();
  }
  static inline intptr_t GetResource(System_String* name) {
    return reinterpret_cast<intptr_t(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB4380))(name);
  }
  static inline uint32_t UInt32FromBytePtr(uint8_t* raw, uint32_t idx) {
    return reinterpret_cast<uint32_t(__fastcall*)(uint8_t*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB4430))(raw, idx);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB4470))();
  }
  static inline void FillCJK(System_String* culture, ModdingAPI::Exposed::Mono::Globalization::Unicode::CodePointIndexer* cjkIndexer, uint8_t* catTable, uint8_t* lv1Table, ModdingAPI::Exposed::Mono::Globalization::Unicode::CodePointIndexer* lv2Indexer, uint8_t* lv2Table) {
    reinterpret_cast<void(__fastcall*)(System_String*, ModdingAPI::Exposed::Mono::Globalization::Unicode::CodePointIndexer*, uint8_t*, uint8_t*, ModdingAPI::Exposed::Mono::Globalization::Unicode::CodePointIndexer*, uint8_t*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB4AD0))(culture, cjkIndexer, catTable, lv1Table, lv2Indexer, lv2Table);
  }
  static inline void FillCJKCore(System_String* culture, ModdingAPI::Exposed::Mono::Globalization::Unicode::CodePointIndexer* cjkIndexer, uint8_t* catTable, uint8_t* lv1Table, ModdingAPI::Exposed::Mono::Globalization::Unicode::CodePointIndexer* cjkLv2Indexer, uint8_t* lv2Table) {
    reinterpret_cast<void(__fastcall*)(System_String*, ModdingAPI::Exposed::Mono::Globalization::Unicode::CodePointIndexer*, uint8_t*, uint8_t*, ModdingAPI::Exposed::Mono::Globalization::Unicode::CodePointIndexer*, uint8_t*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDB4CD0))(culture, cjkIndexer, catTable, lv1Table, cjkLv2Indexer, lv2Table);
  }
};
}