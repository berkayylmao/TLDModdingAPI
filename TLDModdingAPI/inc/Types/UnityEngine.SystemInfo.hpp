// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::UnityEngine {
struct __SystemInfo_Il2CppStaticFields {
};

struct __SystemInfo_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SystemInfo_Il2CppClass {
  Il2CppClass_1 _1;
  __SystemInfo_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SystemInfo_Il2CppVtbl vtbl;
};

class SystemInfo {
public:
  // Il2Cpp fields:
  __SystemInfo_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline System_String* get_operatingSystem() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B0F70))();
  }
  static inline int32_t get_operatingSystemFamily() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B0FC0))();
  }
  static inline System_String* get_processorType() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1010))();
  }
  static inline int32_t get_processorCount() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1060))();
  }
  static inline int32_t get_systemMemorySize() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B10B0))();
  }
  static inline System_String* get_deviceName() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1100))();
  }
  static inline System_String* get_deviceModel() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1150))();
  }
  static inline int32_t get_deviceType() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B11A0))();
  }
  static inline int32_t get_graphicsMemorySize() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B11F0))();
  }
  static inline System_String* get_graphicsDeviceName() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1240))();
  }
  static inline System_String* get_graphicsDeviceVendor() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1290))();
  }
  static inline int32_t get_graphicsDeviceID() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B12E0))();
  }
  static inline int32_t get_graphicsDeviceVendorID() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1330))();
  }
  static inline int32_t get_graphicsDeviceType() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1380))();
  }
  static inline bool get_graphicsUVStartsAtTop() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B13D0))();
  }
  static inline System_String* get_graphicsDeviceVersion() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1420))();
  }
  static inline int32_t get_graphicsShaderLevel() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1470))();
  }
  static inline bool get_supportsShadows() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B14C0))();
  }
  static inline bool get_supportsMotionVectors() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1510))();
  }
  static inline bool get_supportsImageEffects() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1560))();
  }
  static inline bool get_supports3DTextures() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B15B0))();
  }
  static inline bool get_supports3DRenderTextures() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1600))();
  }
  static inline int32_t get_copyTextureSupport() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1650))();
  }
  static inline bool get_supportsComputeShaders() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B16A0))();
  }
  static inline bool get_supportsInstancing() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B16F0))();
  }
  static inline int32_t get_supportedRenderTargetCount() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1740))();
  }
  static inline int32_t get_supportedRandomWriteTargetCount() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1790))();
  }
  static inline bool get_usesReversedZBuffer() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B17E0))();
  }
  static inline bool IsValidEnumValue(ModdingAPI::Exposed::System::Enum* value) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Enum*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1830))(value);
  }
  static inline bool SupportsRenderTextureFormat(int32_t format) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1900))(format);
  }
  static inline bool SupportsTextureFormat(int32_t format) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1A10))(format);
  }
  static inline System_String* GetOperatingSystem() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B0F70))();
  }
  static inline int32_t GetOperatingSystemFamily() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B0FC0))();
  }
  static inline System_String* GetProcessorType() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1010))();
  }
  static inline int32_t GetProcessorCount() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1060))();
  }
  static inline int32_t GetPhysicalMemoryMB() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B10B0))();
  }
  static inline System_String* GetDeviceName() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1100))();
  }
  static inline System_String* GetDeviceModel() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1150))();
  }
  static inline int32_t GetDeviceType() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B11A0))();
  }
  static inline int32_t GetGraphicsMemorySize() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B11F0))();
  }
  static inline System_String* GetGraphicsDeviceName() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1240))();
  }
  static inline System_String* GetGraphicsDeviceVendor() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1290))();
  }
  static inline int32_t GetGraphicsDeviceID() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B12E0))();
  }
  static inline int32_t GetGraphicsDeviceVendorID() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1330))();
  }
  static inline int32_t GetGraphicsDeviceType() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1380))();
  }
  static inline bool GetGraphicsUVStartsAtTop() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B13D0))();
  }
  static inline System_String* GetGraphicsDeviceVersion() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1420))();
  }
  static inline int32_t GetGraphicsShaderLevel() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1470))();
  }
  static inline bool SupportsShadows() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B14C0))();
  }
  static inline bool SupportsMotionVectors() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1510))();
  }
  static inline bool SupportsImageEffects() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1560))();
  }
  static inline bool Supports3DTextures() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B15B0))();
  }
  static inline bool Supports3DRenderTextures() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1600))();
  }
  static inline int32_t GetCopyTextureSupport() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1650))();
  }
  static inline bool SupportsComputeShaders() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B16A0))();
  }
  static inline bool SupportsInstancing() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B16F0))();
  }
  static inline int32_t SupportedRenderTargetCount() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1740))();
  }
  static inline int32_t SupportedRandomWriteTargetCount() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1790))();
  }
  static inline bool UsesReversedZBuffer() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B17E0))();
  }
  static inline bool HasRenderTextureNative(int32_t format) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1B20))(format);
  }
  static inline bool SupportsTextureFormatNative(int32_t format) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1B70))(format);
  }
  static inline bool IsFormatSupported(int32_t format, int32_t usage) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B1BC0))(format, usage);
  }
};
}