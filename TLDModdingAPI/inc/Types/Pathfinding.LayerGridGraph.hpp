// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Matrix4x4.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Bounds.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.Pathfinding.NNInfo.hpp"


namespace ModdingAPI::Exposed::Pathfinding {
struct __LayerGridGraph_Il2CppStaticFields {
};

struct __LayerGridGraph_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_CountNodes;
  VirtualInvokeData _5_GetNodes;
  VirtualInvokeData _6_RelocateNodes;
  VirtualInvokeData _7_GetNearest;
  VirtualInvokeData _8_GetNearestForce;
  VirtualInvokeData _9_Awake;
  VirtualInvokeData _10_OnDestroy;
  VirtualInvokeData _11_ScanInternal;
  VirtualInvokeData _12_NodeColor;
  VirtualInvokeData _13_SerializeExtraInfo;
  VirtualInvokeData _14_DeserializeExtraInfo;
  VirtualInvokeData _15_PostDeserialization;
  VirtualInvokeData _16_SerializeSettings;
  VirtualInvokeData _17_DeserializeSettings;
  VirtualInvokeData _18_OnDrawGizmos;
  VirtualInvokeData _19_UnloadGizmoMeshes;
  VirtualInvokeData _20_UpdateArea;
  VirtualInvokeData _21_UpdateAreaInit;
  VirtualInvokeData _22_CanUpdateAsync;
  VirtualInvokeData _23_Linecast;
  VirtualInvokeData _24_Linecast;
  VirtualInvokeData _25_Linecast;
  VirtualInvokeData _26_Linecast;
  VirtualInvokeData _27_get_uniformWidthDepthGrid;
  VirtualInvokeData _28_SetUpOffsetsAndCosts;
  VirtualInvokeData _29_UpdateNodePositionCollision;
  VirtualInvokeData _30_ErodeWalkableArea;
  VirtualInvokeData _31_ErodeWalkableArea;
  VirtualInvokeData _32_IsValidConnection;
  VirtualInvokeData _33_CalculateConnections;
  VirtualInvokeData _34_CalculateConnections;
  VirtualInvokeData _35_GetNeighbourAlongDirection;
  VirtualInvokeData _36_UpdatePenalty;
};

struct __LayerGridGraph_Il2CppClass {
  Il2CppClass_1 _1;
  __LayerGridGraph_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __LayerGridGraph_Il2CppVtbl vtbl;
};

class LayerGridGraph {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C7F4E8;
  static inline    LayerGridGraph* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C59870;
  static inline    __LayerGridGraph_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline LayerGridGraph* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (LayerGridGraph**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __LayerGridGraph_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__LayerGridGraph_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __LayerGridGraph_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Byte_array* _sguid;
  ModdingAPI::Exposed::AstarPath* active;
  uint32_t initialPenalty;
  bool open;
  uint32_t graphIndex;
  System_String* name;
  bool drawGizmos;
  bool infoScreenOpen;
  ModdingAPI::Exposed::UnityEngine::Matrix4x4 matrix;
  ModdingAPI::Exposed::UnityEngine::Matrix4x4 inverseMatrix;
  int32_t width;
  int32_t depth;
  float aspectRatio;
  float isometricAngle;
  bool uniformEdgeCosts;
  ModdingAPI::Exposed::UnityEngine::Vector3 rotation;
  ModdingAPI::Exposed::UnityEngine::Bounds bounds;
  ModdingAPI::Exposed::UnityEngine::Vector3 center;
  ModdingAPI::Exposed::UnityEngine::Vector2 unclampedSize;
  float nodeSize;
  ModdingAPI::Exposed::Pathfinding::GraphCollision* collision;
  float maxClimb;
  int32_t maxClimbAxis;
  float maxSlope;
  int32_t erodeIterations;
  bool erosionUseTags;
  int32_t erosionFirstTag;
  bool autoLinkGrids;
  float autoLinkDistLimit;
  int32_t neighbours;
  bool cutCorners;
  float penaltyPositionOffset;
  bool penaltyPosition;
  float penaltyPositionFactor;
  bool penaltyAngle;
  float penaltyAngleFactor;
  float penaltyAnglePower;
  bool useJumpPointSearch;
  ModdingAPI::Exposed::Pathfinding::GridGraph::TextureData* textureData;
  ModdingAPI::Exposed::UnityEngine::Vector2 GridGraph__size_k__BackingField;
  ModdingAPI::Exposed::System::Int32_array* neighbourOffsets;
  ModdingAPI::Exposed::System::UInt32_array* neighbourCosts;
  ModdingAPI::Exposed::System::Int32_array* neighbourXOffsets;
  ModdingAPI::Exposed::System::Int32_array* neighbourZOffsets;
  ModdingAPI::Exposed::UnityEngine::Matrix4x4 GridGraph__boundsMatrix_k__BackingField;
  ModdingAPI::Exposed::Pathfinding::GridNode_array* nodes;
  ModdingAPI::Exposed::System::Int32_array* nodeCellIndices;
  int32_t layerCount;
  float mergeSpanRange;
  float characterHeight;
  int32_t lastScannedWidth;
  int32_t lastScannedDepth;
  ModdingAPI::Exposed::Pathfinding::LevelGridNode_array* LayerGridGraph_nodes;

  // Member methods:
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25BC650))(this);
  }
  void RemoveGridGraphFromStatic() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25BC820))(this);
  }
  bool get_uniformWidthDepthGrid() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this);
  }
  int32_t CountNodes() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25BC8F0))(this);
  }
  void GetNodes(ModdingAPI::Exposed::Pathfinding::GraphNodeDelegateCancelable* del) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*, ModdingAPI::Exposed::Pathfinding::GraphNodeDelegateCancelable*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25BC960))(this, del);
  }
  void UpdateArea(ModdingAPI::Exposed::Pathfinding::GraphUpdateObject* o) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*, ModdingAPI::Exposed::Pathfinding::GraphUpdateObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25BCA10))(this, o);
  }
  void ScanInternal(ModdingAPI::Exposed::OnScanStatus* statusCallback) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*, ModdingAPI::Exposed::OnScanStatus*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25BDD70))(this, statusCallback);
  }
  bool RecalculateCell(int32_t x, int32_t z, bool preserveExistingNodes) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25BF1B0))(this, x, z, preserveExistingNodes);
  }
  void AddLayers(int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C02A0))(this, count);
  }
  void UpdatePenalty(ModdingAPI::Exposed::Pathfinding::LevelGridNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*, ModdingAPI::Exposed::Pathfinding::LevelGridNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C0480))(this, node);
  }
  void ErodeWalkableArea(int32_t xmin, int32_t zmin, int32_t xmax, int32_t zmax) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C0600))(this, xmin, zmin, xmax, zmax);
  }
  void CalculateConnections(ModdingAPI::Exposed::Pathfinding::GraphNode_array* nodes, ModdingAPI::Exposed::Pathfinding::GraphNode* node, int32_t x, int32_t z, int32_t layerIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*, ModdingAPI::Exposed::Pathfinding::GraphNode_array*, ModdingAPI::Exposed::Pathfinding::GraphNode*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C0950))(this, nodes, node, x, z, layerIndex);
  }
  ModdingAPI::Exposed::Pathfinding::NNInfo GetNearest(ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint, ModdingAPI::Exposed::Pathfinding::GraphNode* hint) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::NNInfo(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::NNConstraint*, ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C0E80))(this, position, constraint, hint);
  }
  ModdingAPI::Exposed::Pathfinding::LevelGridNode* GetNearestNode(ModdingAPI::Exposed::UnityEngine::Vector3 position, int32_t x, int32_t z, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::LevelGridNode*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*, ModdingAPI::Exposed::UnityEngine::Vector3, int32_t, int32_t, ModdingAPI::Exposed::Pathfinding::NNConstraint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C10E0))(this, position, x, z, constraint);
  }
  ModdingAPI::Exposed::Pathfinding::NNInfo GetNearestForce(ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::NNInfo(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::NNConstraint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C1350))(this, position, constraint);
  }
  ModdingAPI::Exposed::Pathfinding::GridNodeBase* GetNeighbourAlongDirection(ModdingAPI::Exposed::Pathfinding::GridNodeBase* node, int32_t direction) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::GridNodeBase*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*, ModdingAPI::Exposed::Pathfinding::GridNodeBase*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C1DC0))(this, node, direction);
  }
  void OnDrawGizmos(bool drawNodes) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C1F60))(this, drawNodes);
  }
  void SerializeExtraInfo(ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext* ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*, ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C2630))(this, ctx);
  }
  void DeserializeExtraInfo(ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext* ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*, ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C2800))(this, ctx);
  }
  void PostDeserialization() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C2AF0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LayerGridGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C2D10))(this);
  }

  // Static methods:
  static inline bool CheckConnection(ModdingAPI::Exposed::Pathfinding::LevelGridNode* node, int32_t dir) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C1F30))(node, dir);
  }
};
}