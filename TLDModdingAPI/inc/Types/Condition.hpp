// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed {
struct __Condition_Il2CppStaticFields {
  ModdingAPI::Exposed::UnityEngine::Vector2 m_NoiseStep;
  ModdingAPI::Exposed::ConditionSaveDataProxy* m_ConditionSaveDataProxy;
};

struct __Condition_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Condition_Il2CppClass {
  Il2CppClass_1 _1;
  __Condition_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Condition_Il2CppVtbl vtbl;
};

class Condition {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C26BC8;
  static inline    __Condition_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Condition_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Condition_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Condition_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_CurrentHP;
  float m_MaxHP;
  float m_CriticalHP;
  float m_TimeToDisplayConditionWhenChanged;
  float m_TimeToDisplayConditionDelta;
  float m_HPIncreasePerDayWhileHealthy;
  float m_HPDecreasePerDayFromStarving;
  float m_HPDecreasePerDayFromDehydration;
  float m_HPDecreasePerDayFromExhaustion;
  float m_HPDecreasePerDayFromFreezing;
  float m_SlightlyInjuredThreshold;
  float m_InjuredThreshold;
  float m_VeryInjuredThreshold;
  float m_NearDeathThreshold;
  float m_HeartbeatThreshold;
  System_String* m_SlightlyInjuredVoiceOver;
  System_String* m_InjuredVoiceOver;
  System_String* m_VeryInjuredVoiceOver;
  System_String* m_NearDeathVoiceOver;
  System_String* m_DieVoiceOver;
  System_String* m_DieFromWolfVoiceOver;
  float m_MinSecondsBetweenVoiceOverVariations;
  float m_MinSecondsBetweenVoiceOverVariationsWhileBleeding;
  float m_HPToStartBlur;
  float m_HPForMaxBlur;
  float m_BlurStartVal;
  float m_BlurMaxVal;
  float m_EarRingingLengthIndoors;
  float m_EarRingingDelay;
  float m_EarRingingFadeInTime;
  float m_EarRingingMuffleDelay;
  float m_EarRingingMuffleFadeInTime;
  float m_SoundMufflingMaxValue;
  bool m_NeverDie;
  bool m_Invulnerable;
  bool m_HideDamageEvents;
  bool m_ForceUncrouched;
  int32_t m_OverrideBlurLevel;
  float m_ConditionBlurNoiseStepMin;
  float m_ConditionBlurNoiseStepMax;
  float m_ConditionBlurMinOffsetRange;
  float m_ConditionBlurMaxOffsetRange;
  float m_ConditionMinScreenFadeAmount;
  float m_ConditionMaxScreenFadeAmount;
  float m_ConditionBlur2Min;
  float m_ConditionBlur2Max;
  float m_StaggerNoiseStepMin;
  float m_StaggerNoiseStepMax;
  float m_StaggerForward;
  float m_StaggerSide;
  float m_StaggerRoll;
  float m_StaggerForwardMotionFrac;
  float m_StaggerSideMotionFrac;
  float m_StaggerRollMotionFrac;
  float m_RestingPitchMin;
  float m_RestingPitchMax;
  float m_RestingRollMin;
  float m_RestingRollMax;
  float m_MaxVelocityForSpeedFracCalc;
  float m_StaggerForceScalar;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_ConditionBlurNoisePos;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_StaggerNoisePos;
  float m_BasePitch;
  float m_BaseRoll;
  float m_RestingRollDirection;
  int32_t m_ConditionLevelForPreviousVoiceOver;
  float m_NumSecondsSinceLastVoiceOver;
  float m_TimeDisableConditionOnHUD;
  float m_HealthDelta;
  float m_TimeStopDisplayHealthDelta;
  int32_t m_CauseOfDeath;
  bool m_SleepingWhenKilled;
  uint32_t m_HeartbeatAudioId;
  uint32_t m_EarRingingAudioId;
  float m_EarRingingAudioParam;
  float m_TimeToDelayEarRinging;
  float m_TimeToFadeEarRinging;
  float m_TimeToDelaySoundMuffling;
  float m_TimeToFadeSoundMuffling;
  float m_LastBurnDamageEffectTime;
  float m_LastElectricalEffectTime;
  float m_LastHeartBeatRTPCSent;
  float m_LastMuffleRTPCSent;
  ModdingAPI::Exposed::UnityStandardAssets::ImageEffects::MotionBlur_array* m_BlurEffects;
  bool m_CanPlayNearDeathMusic;
  bool m_StartHasBeenCalled;
  bool m_SuppressVoiceOver;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16299C0))(this);
  }
  bool HasLowHealthEffect() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1629C20))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1629C50))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162A5F0))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162A7F0))(this, text);
  }
  float GetNormalizedCondition() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162A920))(this);
  }
  void MaybeShowPainEffect(float damage) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162A930))(this, damage);
  }
  void ShowPainEffect(float intensity, float intervalSeconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162AA90))(this, intensity, intervalSeconds);
  }
  void ShowElectricalEffect(float intensity, float intervalSeconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162AC00))(this, intensity, intervalSeconds);
  }
  void AddHealthWithNoHudNotification(float hp, int32_t damageSource) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162AD70))(this, hp, damageSource);
  }
  void AddHealth(float hp, int32_t cause) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162AD90))(this, hp, cause);
  }
  float GetAdjustedMaxHP() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162ADB0))(this);
  }
  void DisplayConditionOnHUDForTime(float seconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162B160))(this, seconds);
  }
  bool IsDegrading() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162B220))(this);
  }
  bool HasNonRiskAffliction() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162B420))(this);
  }
  bool HasRiskAffliction() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162B750))(this);
  }
  bool HasAffliction() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162B910))(this);
  }
  bool HasSpecificAffliction(int32_t afflictionType) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Condition*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162BDE0))(this, afflictionType);
  }
  bool HasBuff() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162C480))(this);
  }
  void StartEarRinging() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162C5D0))(this);
  }
  void ForceStartEarRinging() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162C6A0))(this);
  }
  void SetCauseOfDeath(int32_t cause) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162C6C0))(this, cause);
  }
  System_String* GetCauseOfDeathStringUntranslated() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162C6D0))(this);
  }
  int32_t GetCauseOfDeath() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x79C830))(this);
  }
  System_String* GetCauseOfDeathString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162C880))(this);
  }
  int32_t GetConditionValueForInterfaceDisplay() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162C930))(this);
  }
  void DoFallThroughIceDeath() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162CA50))(this);
  }
  bool IsPlayerVulnerable() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162CA70))(this);
  }
  void SetSuppressVoiceOver(bool suppress) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162CC70))(this, suppress);
  }
  System_String* GetDeathFromAfflictionsUnlocalized() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162CC80))(this);
  }
  System_String* GetDeathFromAfflictions() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162D020))(this);
  }
  System_String* GetDeathFromSubConditionsText() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162D0D0))(this);
  }
  void PlayPlayerDeathAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162D2D0))(this);
  }
  void PlayerDeath() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162D500))(this);
  }
  void MaybeIncreaseConditionFromWillpower() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162D5C0))(this);
  }
  bool ShouldPlayInjuredVoiceOver() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162D760))(this);
  }
  void MaybePlayPlayerInjuredVoiceOver() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162D8A0))(this);
  }
  uint32_t GetAfflictionSwitch() {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162DC90))(this);
  }
  int32_t GetConditionLevel() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162DF70))(this);
  }
  void UpdateConditionOnHUD() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162DFC0))(this);
  }
  void UpdateHeartbeatSound() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162EBA0))(this);
  }
  void UpdateEarRingingSound() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162EF70))(this);
  }
  void UpdateMuffleSound() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162F360))(this);
  }
  void UpdateBlurEffect(float percentCondition, bool lowHealthStagger) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x162F5F0))(this, percentCondition, lowHealthStagger);
  }
  void ApplyLowHealthStagger(float blurFrac, float speedFrac) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16301A0))(this, blurFrac, speedFrac);
  }
  void DisableLowHealthEffects() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1630800))(this);
  }
  void PlayDeathMusic() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1630A50))(this);
  }
  void MaybePlayNearDeathMusic() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1630B50))(this);
  }
  void AddHealth(float hp, int32_t cause, bool showHPonHUD) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*, float, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1630CC0))(this, hp, cause, showHPonHUD);
  }
  bool IsDamageSourceBlockedByClothing(int32_t cause) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Condition*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1631520))(this, cause);
  }
  float GetDamageReductionForCause(int32_t cause) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Condition*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1631540))(this, cause);
  }
  void SendMuffleRTPC(float audioParam) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1631650))(this, audioParam);
  }
  void ResetAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16317C0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Condition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1631C50))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector2> m_NoiseStep = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Vector2>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_NoiseStep; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::ConditionSaveDataProxy*> m_ConditionSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::ConditionSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_ConditionSaveDataProxy; }
  );

  // Static methods:
  static inline bool CanPlayConditionVO() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1631980))();
  }
  static inline bool ShouldPlayFx(int32_t options) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1631C30))(options);
  }
  static inline bool ShouldDoAutoSave(int32_t options) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1631C40))(options);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1631C80))();
  }
};
}