// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Rect.hpp"


namespace ModdingAPI::Exposed {
struct __UIFont_Il2CppStaticFields {
};

struct __UIFont_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __UIFont_Il2CppClass {
  Il2CppClass_1 _1;
  __UIFont_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __UIFont_Il2CppVtbl vtbl;
};

class UIFont {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C74CB0;
  static inline    UIFont* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C957B8;
  static inline    __UIFont_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline UIFont* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (UIFont**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __UIFont_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__UIFont_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __UIFont_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::Material* mMat;
  ModdingAPI::Exposed::UnityEngine::Rect mUVRect;
  ModdingAPI::Exposed::BMFont* mFont;
  ModdingAPI::Exposed::UIAtlas* mAtlas;
  ModdingAPI::Exposed::UIFont* mReplacement;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* mSymbols;
  ModdingAPI::Exposed::UnityEngine::Font* mDynamicFont;
  int32_t mDynamicFontSize;
  int32_t mDynamicFontStyle;
  float mFontSizePercentModifier;
  ModdingAPI::Exposed::UISpriteData* mSprite;
  int32_t mPMA;
  int32_t mPacked;

  // Member methods:
  ModdingAPI::Exposed::BMFont* get_bmFont() {
    return reinterpret_cast<ModdingAPI::Exposed::BMFont*(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2579570))(this);
  }
  void set_bmFont(ModdingAPI::Exposed::BMFont* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*, ModdingAPI::Exposed::BMFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2579650))(this, value);
  }
  int32_t get_texWidth() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2579740))(this);
  }
  void set_texWidth(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2579830))(this, value);
  }
  int32_t get_texHeight() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2579930))(this);
  }
  void set_texHeight(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2579A20))(this, value);
  }
  bool get_hasSymbols() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2579B20))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* get_symbols() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2579C10))(this);
  }
  ModdingAPI::Exposed::UIAtlas* get_atlas() {
    return reinterpret_cast<ModdingAPI::Exposed::UIAtlas*(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2579CF0))(this);
  }
  void set_atlas(ModdingAPI::Exposed::UIAtlas* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*, ModdingAPI::Exposed::UIAtlas*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2579DD0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Material* get_material() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2579F80))(this);
  }
  void set_material(ModdingAPI::Exposed::UnityEngine::Material* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257A230))(this, value);
  }
  bool get_premultipliedAlpha() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257A370))(this);
  }
  bool get_premultipliedAlphaShader() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257A380))(this);
  }
  bool get_packedFontShader() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257A5B0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Texture2D* get_texture() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Texture2D*(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257A7C0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Rect get_uvRect() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257A920))(this);
  }
  void set_uvRect(ModdingAPI::Exposed::UnityEngine::Rect value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*, ModdingAPI::Exposed::UnityEngine::Rect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257AA50))(this, value);
  }
  System_String* get_spriteName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257ABA0))(this);
  }
  void set_spriteName(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257AC90))(this, value);
  }
  bool get_isValid() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257ADD0))(this);
  }
  int32_t get_size() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257AEA0))(this);
  }
  void set_size(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257AEB0))(this, value);
  }
  int32_t get_defaultSize() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257AEC0))(this);
  }
  void set_defaultSize(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257AFC0))(this, value);
  }
  ModdingAPI::Exposed::UISpriteData* get_sprite() {
    return reinterpret_cast<ModdingAPI::Exposed::UISpriteData*(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257B0B0))(this);
  }
  ModdingAPI::Exposed::UIFont* get_replacement() {
    return reinterpret_cast<ModdingAPI::Exposed::UIFont*(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319960))(this);
  }
  void set_replacement(ModdingAPI::Exposed::UIFont* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*, ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257B300))(this, value);
  }
  bool get_isDynamic() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257B510))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Font* get_dynamicFont() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Font*(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257B610))(this);
  }
  void set_dynamicFont(ModdingAPI::Exposed::UnityEngine::Font* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*, ModdingAPI::Exposed::UnityEngine::Font*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257B6F0))(this, value);
  }
  int32_t get_dynamicFontStyle() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257B860))(this);
  }
  void set_dynamicFontStyle(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257B940))(this, value);
  }
  float GetFontSizeModifierValue() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257BA40))(this);
  }
  void Trim() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257BB30))(this);
  }
  bool References(ModdingAPI::Exposed::UIFont* font) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIFont*, ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257BEB0))(this, font);
  }
  ModdingAPI::Exposed::UnityEngine::Texture* get_dynamicTexture() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Texture*(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257C290))(this);
  }
  void MarkAsChanged() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257C3E0))(this);
  }
  void UpdateUVRect() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257C690))(this);
  }
  ModdingAPI::Exposed::BMSymbol* GetSymbol(System_String* sequence, bool createIfMissing) {
    return reinterpret_cast<ModdingAPI::Exposed::BMSymbol*(__fastcall*)(ModdingAPI::Exposed::UIFont*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257C960))(this, sequence, createIfMissing);
  }
  ModdingAPI::Exposed::BMSymbol* MatchSymbol(System_String* text, int32_t offset, int32_t textLength) {
    return reinterpret_cast<ModdingAPI::Exposed::BMSymbol*(__fastcall*)(ModdingAPI::Exposed::UIFont*, System_String*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257CBA0))(this, text, offset, textLength);
  }
  void AddSymbol(System_String* sequence, System_String* spriteName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257CDC0))(this, sequence, spriteName);
  }
  void RemoveSymbol(System_String* sequence) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257CE00))(this, sequence);
  }
  void RenameSymbol(System_String* before, System_String* after) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257CED0))(this, before, after);
  }
  bool UsesSprite(System_String* s) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIFont*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257CF10))(this, s);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257D060))(this);
  }

  // Static methods:
  static inline bool CheckIfRelated(ModdingAPI::Exposed::UIFont* a, ModdingAPI::Exposed::UIFont* b) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UIFont*, ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x257C010))(a, b);
  }
};
}