// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __FireManager_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Fires;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_WoodStoves;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Campfires;
};

struct __FireManager_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __FireManager_Il2CppClass {
  Il2CppClass_1 _1;
  __FireManager_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __FireManager_Il2CppVtbl vtbl;
};

class FireManager {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C5C850;
  static inline    __FireManager_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __FireManager_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__FireManager_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __FireManager_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_WindSpeedThatMakeStartingFireImpossible;
  float m_WindSpeedThatBlowsOutFires;
  float m_SkillIncreaseChanceOnSuccess;
  float m_SkillIncreaseChanceOnFailure;
  float m_StartFireTimeSeconds;
  float m_StartFireTimeSecondsWet;
  float m_TODMinutesFadeOutFireAudio;
  float m_MinimumNormalizedFadeOutVolume;
  float m_MinAirTempFromFireOutdoors;
  float m_MinAirTempFromFireIndoors;
  float m_MaxHeatIncreaseOfFireInForge;
  float m_MaxHeatIncreaseOfFire;
  float m_MaxDurationHoursOfFire;
  float m_FireOuterRadiusScaleIndoors;
  float m_TempBeginBurnRateAdjustment;
  float m_TempEndBurnRateAdjustment;
  float m_MaxBurnRateAdjustment;
  float m_TakeTorchReduceBurnMinutes;
  float m_KeroseneLitersAccelerant;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_KeroseneAccelerantPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_CampFirePrefab;
  float m_GunpowderKilogramsAccelerant;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_GunpowderAccelerantPrefab;
  ModdingAPI::Exposed::GearItem* m_FireStarterToDestroy;
  bool m_ForceFireStartingSuccess;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FireManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  bool PlayerStartFire(ModdingAPI::Exposed::Campfire* campfire, ModdingAPI::Exposed::FireStarterItem* starter, ModdingAPI::Exposed::FuelSourceItem* tinder, ModdingAPI::Exposed::FuelSourceItem* fuel, ModdingAPI::Exposed::FireStarterItem* accelerant, float percentChanceSuccess) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::FireManager*, ModdingAPI::Exposed::Campfire*, ModdingAPI::Exposed::FireStarterItem*, ModdingAPI::Exposed::FuelSourceItem*, ModdingAPI::Exposed::FuelSourceItem*, ModdingAPI::Exposed::FireStarterItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183E140))(this, campfire, starter, tinder, fuel, accelerant, percentChanceSuccess);
  }
  void UpdateSkillAfterFireCreationAttempt(bool success) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FireManager*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183E7E0))(this, success);
  }
  float CalclateFireStartSuccess(ModdingAPI::Exposed::FireStarterItem* starter, ModdingAPI::Exposed::FuelSourceItem* fuel, ModdingAPI::Exposed::FireStarterItem* accelerant) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::FireManager*, ModdingAPI::Exposed::FireStarterItem*, ModdingAPI::Exposed::FuelSourceItem*, ModdingAPI::Exposed::FireStarterItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183E920))(this, starter, fuel, accelerant);
  }
  void GetMissingMaterials(bool hasStarter, bool hasTinder, bool hasFuel) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FireManager*, bool, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183ED80))(this, hasStarter, hasTinder, hasFuel);
  }
  System_String* GetMissingMaterialsString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::FireManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183F040))(this);
  }
  float GetDistanceToClosestFire(ModdingAPI::Exposed::UnityEngine::Vector3 pos) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::FireManager*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183F240))(this, pos);
  }
  ModdingAPI::Exposed::Fire* GetClosestFire(ModdingAPI::Exposed::UnityEngine::Vector3 pos) {
    return reinterpret_cast<ModdingAPI::Exposed::Fire*(__fastcall*)(ModdingAPI::Exposed::FireManager*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183F440))(this, pos);
  }
  bool PointInRadiusOfBurningFire(ModdingAPI::Exposed::UnityEngine::Vector3 pos) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::FireManager*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183F660))(this, pos);
  }
  bool PointInRadiusOfFullyBurningFire(ModdingAPI::Exposed::UnityEngine::Vector3 pos) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::FireManager*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183F870))(this, pos);
  }
  bool PointInInnerRadiusOfBurningFire(ModdingAPI::Exposed::UnityEngine::Vector3 pos) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::FireManager*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183FA80))(this, pos);
  }
  void ExitFireStarting() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FireManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183FC90))(this);
  }
  bool PlayerRollFireStartSuccess(float percentChanceSuccess) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::FireManager*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183FD60))(this, percentChanceSuccess);
  }
  bool GetForceFireStartingSuccess() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::FireManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3199F0))(this);
  }
  void SetForceFireStartingSuccess(bool forceFireStartingSuccess) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FireManager*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAFE170))(this, forceFireStartingSuccess);
  }
  bool PlayerCalculateFireStartTime(float duration, ModdingAPI::Exposed::FireStarterItem* starter, ModdingAPI::Exposed::FuelSourceItem* fuel, ModdingAPI::Exposed::FireStarterItem* accelerant) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::FireManager*, float, ModdingAPI::Exposed::FireStarterItem*, ModdingAPI::Exposed::FuelSourceItem*, ModdingAPI::Exposed::FireStarterItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183FDE0))(this, duration, starter, fuel, accelerant);
  }
  ModdingAPI::Exposed::FireStarterItem* PlayerGetFirestarterChoice() {
    return reinterpret_cast<ModdingAPI::Exposed::FireStarterItem*(__fastcall*)(ModdingAPI::Exposed::FireManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1840110))(this);
  }
  ModdingAPI::Exposed::FuelSourceItem* PlayerGetTinderChoice() {
    return reinterpret_cast<ModdingAPI::Exposed::FuelSourceItem*(__fastcall*)(ModdingAPI::Exposed::FireManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18403B0))(this);
  }
  ModdingAPI::Exposed::FuelSourceItem* PlayerGetFuelChoice() {
    return reinterpret_cast<ModdingAPI::Exposed::FuelSourceItem*(__fastcall*)(ModdingAPI::Exposed::FireManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18406E0))(this);
  }
  ModdingAPI::Exposed::FireStarterItem* PlayerGetAccelerantChoice() {
    return reinterpret_cast<ModdingAPI::Exposed::FireStarterItem*(__fastcall*)(ModdingAPI::Exposed::FireManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18409C0))(this);
  }
  bool PlayerHasMaterialsToStartFire(ModdingAPI::Exposed::FireStarterItem* starter, ModdingAPI::Exposed::FuelSourceItem* tinder, ModdingAPI::Exposed::FuelSourceItem* fuel, ModdingAPI::Exposed::FireStarterItem* accelerant) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::FireManager*, ModdingAPI::Exposed::FireStarterItem*, ModdingAPI::Exposed::FuelSourceItem*, ModdingAPI::Exposed::FuelSourceItem*, ModdingAPI::Exposed::FireStarterItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1840C60))(this, starter, tinder, fuel, accelerant);
  }
  bool SpawnPlayerFire(ModdingAPI::Exposed::Campfire* campfire, bool startFireAfterCountdown, float tinderIgniteTimeSeconds, float startTimeSeconds, ModdingAPI::Exposed::FireStarterItem* starter, ModdingAPI::Exposed::FuelSourceItem* fuel, ModdingAPI::Exposed::FireStarterItem* accelerant) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::FireManager*, ModdingAPI::Exposed::Campfire*, bool, float, float, ModdingAPI::Exposed::FireStarterItem*, ModdingAPI::Exposed::FuelSourceItem*, ModdingAPI::Exposed::FireStarterItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1840EC0))(this, campfire, startFireAfterCountdown, tinderIgniteTimeSeconds, startTimeSeconds, starter, fuel, accelerant);
  }
  bool RollForSkillIncrease(bool success) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::FireManager*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18412A0))(this, success);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FireManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> m_Fires = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_Fires; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> m_WoodStoves = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_WoodStoves; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> m_Campfires = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_Campfires; }
  );

  // Static methods:
  static inline System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x183C970))();
  }
  static inline void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183CFC0))(text);
  }
  static inline System_String* SerializeChimneyData() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x183D430))();
  }
  static inline void DeserializeChimneyData(System_String* text) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183D910))(text);
  }
  static inline void Reset() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x183DC50))();
  }
  static inline void AddWoodStove(ModdingAPI::Exposed::WoodStove* ws) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::WoodStove*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183DDA0))(ws);
  }
  static inline void AddCampfire(ModdingAPI::Exposed::Campfire* cf) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Campfire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183DE60))(cf);
  }
  static inline void DestroyFireObject(ModdingAPI::Exposed::Fire* f) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183E000))(f);
  }
  static inline void AddFire(ModdingAPI::Exposed::Fire* f) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183EB40))(f);
  }
  static inline void RemoveFire(ModdingAPI::Exposed::Fire* f) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Fire*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x183EC60))(f);
  }
  static inline ModdingAPI::Exposed::Fire* GetFireComponent(ModdingAPI::Exposed::UnityEngine::GameObject* go) {
    return reinterpret_cast<ModdingAPI::Exposed::Fire*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1841310))(go);
  }
  static inline ModdingAPI::Exposed::Fire* FindFireByPosition(ModdingAPI::Exposed::FireSaveData* fsd) {
    return reinterpret_cast<ModdingAPI::Exposed::Fire*(__fastcall*)(ModdingAPI::Exposed::FireSaveData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1841410))(fsd);
  }
  static inline ModdingAPI::Exposed::Fire* FindFireByGuid(System_String* guid) {
    return reinterpret_cast<ModdingAPI::Exposed::Fire*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1841960))(guid);
  }
  static inline ModdingAPI::Exposed::Fire* InstantiateFireGameObject(ModdingAPI::Exposed::FireSaveData* fsd) {
    return reinterpret_cast<ModdingAPI::Exposed::Fire*(__fastcall*)(ModdingAPI::Exposed::FireSaveData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1841A50))(fsd);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1841C00))();
  }
};
}