// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"


namespace ModdingAPI::Exposed::EasyRoads3Dv3 {
struct __ERCrossingPrefabs_Il2CppStaticFields {
};

struct __ERCrossingPrefabs_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ERCrossingPrefabs_Il2CppClass {
  Il2CppClass_1 _1;
  __ERCrossingPrefabs_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ERCrossingPrefabs_Il2CppVtbl vtbl;
};

class ERCrossingPrefabs {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C89748;
  static inline    ERCrossingPrefabs* _pStaticObjectInstance = nullptr;

public:
// Singleton object getter:
  static inline ERCrossingPrefabs* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (ERCrossingPrefabs**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

  // Il2Cpp fields:
  __ERCrossingPrefabs_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* crossingElements;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* sidewalkControlElements;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* meshVecs;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* fullMeshVecs;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* tmpMeshVecs;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* tmpFullMeshVecs;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* tCrossingTmpFullMeshVecs;
  ModdingAPI::Exposed::System::Int32_array* outerVecInts;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* surfaceVecs;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* surfaceVecType;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* surfaceConnectionInt;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* tCrossingBlendData;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* indentVecs;
  ModdingAPI::Exposed::UnityEngine::GameObject* sourcePrefab;
  int32_t prefabId;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* prioritySegments;
  float minNodeDistance;
  int32_t nodeWithinRange;
  ModdingAPI::Exposed::UnityEngine::GameObject* sourceObject;
  bool meshInstance;
  int32_t selectedConnection;
  ModdingAPI::Exposed::System::String_array* QDOOOQOOQQQQD;
  bool deformTerrain;
  bool isRoundabout;
  bool isERCrossing;
  bool isIConnector;
  ModdingAPI::Exposed::EasyRoads3Dv3::ERRoundabouts* roundaboutScript;
  ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossings* crossingsScript;
  ModdingAPI::Exposed::EasyRoads3Dv3::ERIConnector* iConnectorScript;
  bool isCustomPrefab;
  int32_t customPrefabVersion;
  bool recalculateNormals;
  bool planarUVs;
  float planarTiling;
  int32_t lastVecRoadIndex;
  bool isSceneObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* surfaceObject;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* surfaceMeshVecs;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* tmpSurfaceMeshVecs;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* tmpSurfaceVecsTCrossings;
  ModdingAPI::Exposed::System::Int32_array* surfaceInts;
  ModdingAPI::Exposed::UnityEngine::Vector3 leftBottomCorner;
  ModdingAPI::Exposed::UnityEngine::Vector3 leftTopCorner;
  ModdingAPI::Exposed::UnityEngine::Vector3 rightBottomCorner;
  ModdingAPI::Exposed::UnityEngine::Vector3 rightTopCorner;
  bool tCrossing;
  bool tStraightBending;
  int32_t tCrossingLeftRight;
  float tMainRoadWidth;
  float tConnectionRoadWidth;
  float bottomLeftSidewalkWidth;
  float bottomLeftSidewalkOuterOffset;
  float bottomLeftSidewalkCurbDepth;
  float bottomRightSidewalkWidth;
  float bottomRightSidewalkOuterOffset;
  float bottomRightSidewalkCurbDepth;
  float topLeftSidewalkWidth;
  float topLeftSidewalkOuterOffset;
  float topLeftSidewalkCurbDepth;
  float topRightSidewalkWidth;
  float topRightSidewalkOuterOffset;
  float topRightSidewalkCurbDepth;
  ModdingAPI::Exposed::EasyRoads3Dv3::ERConnection* connObject;
  ModdingAPI::Exposed::UnityEngine::Vector3 testVec;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* surfaceSurroundingInts;
  int32_t rotationPriorityElement;
  ModdingAPI::Exposed::UnityEngine::Vector3 cornerPos;
  ModdingAPI::Exposed::UnityEngine::Vector3 mainCorner;
  ModdingAPI::Exposed::UnityEngine::Vector3 connectedCorner;
  ModdingAPI::Exposed::UnityEngine::Vector3 mainVecOuter;
  ModdingAPI::Exposed::UnityEngine::Vector3 connectionVecOuter;
  ModdingAPI::Exposed::UnityEngine::Vector3 indentTopVec;
  ModdingAPI::Exposed::UnityEngine::Vector3 indentRightVec;
  ModdingAPI::Exposed::UnityEngine::Vector3 mainIndent;
  ModdingAPI::Exposed::UnityEngine::Vector3 connectionIndent;
  int32_t selectedRotationConnection;
  ModdingAPI::Exposed::UnityEngine::Vector3 bottomVec;
  ModdingAPI::Exposed::UnityEngine::Vector3 rightVec;
  ModdingAPI::Exposed::UnityEngine::Vector3 bottomIndent;
  ModdingAPI::Exposed::UnityEngine::Vector3 rightIndent;
  float sAngle;
  ModdingAPI::Exposed::EasyRoads3Dv3::ERModularBase* baseScript;
  bool QDQDQOOQQDQOQQ;
  ModdingAPI::Exposed::UnityEngine::Vector3 tp1;
  ModdingAPI::Exposed::UnityEngine::Vector3 tp2;
  bool doTerrainDeformation;
  bool includeOuterVertices;
  float surroundingDistance;
  ModdingAPI::Exposed::UnityEngine::Mesh* surfaceMesh;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* debugVecs1;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* debugVecs2;
  bool lightmapAdjusted;
  bool lockScale;
  float extraIndentMargin;
  float indent;
  float surrounding;

  // Member methods:
  void OODDCDQQDO() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4A9CA0))(this);
  }
  void ODOOOQODQC(ModdingAPI::Exposed::UnityEngine::Vector3 v1, ModdingAPI::Exposed::UnityEngine::Vector3 v2, int32_t connectionElement, ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad* road) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, int32_t, ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4A9E20))(this, v1, v2, connectionElement, road);
  }
  void OOQDOOOCOD(int32_t el) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4AAA90))(this, el);
  }
  void ODDQOCQDDO(int32_t elInt, float distance) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x40B4A0))(this, elInt, distance);
  }
  void DeformTCossingConnection(int32_t elInt, float distance, float defaultDistance, ModdingAPI::Exposed::System::Collections::Generic::List_T_* controlPoints, float multiplyFactor, float angle, ModdingAPI::Exposed::UnityEngine::Vector3 cpCenterPoint, float curveStrength) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*, int32_t, float, float, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, float, float, ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4AAD10))(this, elInt, distance, defaultDistance, controlPoints, multiplyFactor, angle, cpCenterPoint, curveStrength);
  }
  void OODQDDQCQO(ModdingAPI::Exposed::System::Collections::Generic::List_T_* affectedVecs, ModdingAPI::Exposed::System::Collections::Generic::List_T_* tmpVecs) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4ABB00))(this, affectedVecs, tmpVecs);
  }
  void OCOOQCCDQO(bool ignorePriority, ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad* road) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*, bool, ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4ABE50))(this, ignorePriority, road);
  }
  void OCODQQCQQO() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4ACA50))(this);
  }
  void OCCQOOCCCQ(bool forceFlag) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4ACAA0))(this, forceFlag);
  }
  void CheckPlanarUVs() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4AD050))(this);
  }
  void OCQQQCDODC(bool flag) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4AD550))(this, flag);
  }
  void OCDQQDODQC(int32_t el) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4AD7D0))(this, el);
  }
  bool HasConnections() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4AD8D0))(this);
  }
  bool HasConnectionsFull() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4ADA10))(this);
  }
  void OODCQOQOQO(int32_t el, int32_t startend) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4ADDD0))(this, el, startend);
  }
  void SetElementInfo(int32_t index, int32_t sourceIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4AE2E0))(this, index, sourceIndex);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4AEB90))(this);
  }

  // Static methods:
  static inline bool ODQCOCCQCQ(ModdingAPI::Exposed::System::Collections::Generic::List_T_* affectedObjects, ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad* roadScr) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4AD440))(affectedObjects, roadScr);
  }
  static inline void OOQOQOCOQO() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4AE530))();
  }
  static inline bool OOOOCDQQOC(ModdingAPI::Exposed::UnityEngine::Vector3 pTarget, ModdingAPI::Exposed::UnityEngine::Vector3 pSource, ModdingAPI::Exposed::UnityEngine::Vector3 pCheck) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4AE8D0))(pTarget, pSource, pCheck);
  }
};
}