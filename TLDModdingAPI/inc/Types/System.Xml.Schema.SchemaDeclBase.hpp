// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Xml::Schema {
struct __SchemaDeclBase_Il2CppStaticFields {
};

struct __SchemaDeclBase_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SchemaDeclBase_Il2CppClass {
  Il2CppClass_1 _1;
  __SchemaDeclBase_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SchemaDeclBase_Il2CppVtbl vtbl;
};

class SchemaDeclBase {
public:
  // Il2Cpp fields:
  __SchemaDeclBase_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Xml::XmlQualifiedName* name;
  System_String* prefix;
  bool isDeclaredInExternal;
  int32_t presence;
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaType* schemaType;
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* datatype;
  System_String* defaultValueRaw;
  Il2CppObject* defaultValueTyped;
  int64_t maxLength;
  int64_t minLength;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* values;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Xml::XmlQualifiedName* name, System_String* prefix) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C0C30))(this, name, prefix);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C0CF0))(this);
  }
  ModdingAPI::Exposed::System::Xml::XmlQualifiedName* get_Name() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlQualifiedName*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  void set_Name(ModdingAPI::Exposed::System::Xml::XmlQualifiedName* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, value);
  }
  System_String* get_Prefix() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C0DA0))(this);
  }
  void set_Prefix(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3E0))(this, value);
  }
  bool get_IsDeclaredInExternal() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x46FCC0))(this);
  }
  void set_IsDeclaredInExternal(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D810))(this, value);
  }
  int32_t get_Presence() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x37AAF0))(this);
  }
  void set_Presence(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3838F0))(this, value);
  }
  int64_t get_MaxLength() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319980))(this);
  }
  void set_MaxLength(int64_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A430))(this, value);
  }
  int64_t get_MinLength() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A440))(this);
  }
  void set_MinLength(int64_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A450))(this, value);
  }
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaType* get_SchemaType() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaType*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110B0))(this);
  }
  void set_SchemaType(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaType* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaType*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110C0))(this, value);
  }
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* get_Datatype() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335370))(this);
  }
  void set_Datatype(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A410))(this, value);
  }
  void AddValue(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C0E30))(this, value);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* get_Values() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383960))(this);
  }
  void set_Values(ModdingAPI::Exposed::System::Collections::Generic::List_T_* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383970))(this, value);
  }
  System_String* get_DefaultValueRaw() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C0FB0))(this);
  }
  void set_DefaultValueRaw(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A420))(this, value);
  }
  Il2CppObject* get_DefaultValueTyped() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319960))(this);
  }
  void set_DefaultValueTyped(Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x31F420))(this, value);
  }
  bool CheckEnumeration(Il2CppObject* pVal) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C1040))(this, pVal);
  }
  bool CheckValue(Il2CppObject* pVal) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::SchemaDeclBase*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C1160))(this, pVal);
  }
};
}