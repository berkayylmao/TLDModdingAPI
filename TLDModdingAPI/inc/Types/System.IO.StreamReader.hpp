// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::IO {
struct __StreamReader_Il2CppStaticFields {
  ModdingAPI::Exposed::System::IO::StreamReader* Null;
};

struct __StreamReader_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_CreateObjRef;
  VirtualInvokeData _5_InitializeLifetimeService;
  VirtualInvokeData _6_Dispose;
  VirtualInvokeData _7_Close;
  VirtualInvokeData _8_Dispose;
  VirtualInvokeData _9_Peek;
  VirtualInvokeData _10_Read;
  VirtualInvokeData _11_Read;
  VirtualInvokeData _12_ReadToEnd;
  VirtualInvokeData _13_ReadLine;
  VirtualInvokeData _14_get_CurrentEncoding;
  VirtualInvokeData _15_get_BaseStream;
  VirtualInvokeData _16_ReadBuffer;
};

struct __StreamReader_Il2CppClass {
  Il2CppClass_1 _1;
  __StreamReader_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __StreamReader_Il2CppVtbl vtbl;
};

class StreamReader {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C22CC0;
  static inline    __StreamReader_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __StreamReader_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__StreamReader_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __StreamReader_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  Il2CppObject* MarshalByRefObject__identity;
  ModdingAPI::Exposed::System::IO::Stream* stream;
  ModdingAPI::Exposed::System::Text::Encoding* encoding;
  ModdingAPI::Exposed::System::Text::Decoder* decoder;
  ModdingAPI::Exposed::System::Byte_array* byteBuffer;
  ModdingAPI::Exposed::System::Char_array* charBuffer;
  ModdingAPI::Exposed::System::Byte_array* _preamble;
  int32_t charPos;
  int32_t charLen;
  int32_t byteLen;
  int32_t bytePos;
  int32_t _maxCharsPerBuffer;
  bool _detectEncoding;
  bool _checkPreamble;
  bool _isBlocked;
  bool _closable;
  ModdingAPI::Exposed::System::Threading::Tasks::Task* _asyncReadTask;

  // Member methods:
  void CheckAsyncTaskInProgress() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA55A0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA5680))(this);
  }
  void ::ctor(ModdingAPI::Exposed::System::IO::Stream* stream) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*, ModdingAPI::Exposed::System::IO::Stream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA5710))(this, stream);
  }
  void ::ctor(ModdingAPI::Exposed::System::IO::Stream* stream, bool detectEncodingFromByteOrderMarks) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*, ModdingAPI::Exposed::System::IO::Stream*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA57F0))(this, stream, detectEncodingFromByteOrderMarks);
  }
  void ::ctor(ModdingAPI::Exposed::System::IO::Stream* stream, ModdingAPI::Exposed::System::Text::Encoding* encoding) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*, ModdingAPI::Exposed::System::IO::Stream*, ModdingAPI::Exposed::System::Text::Encoding*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA58E0))(this, stream, encoding);
  }
  void ::ctor(ModdingAPI::Exposed::System::IO::Stream* stream, ModdingAPI::Exposed::System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*, ModdingAPI::Exposed::System::IO::Stream*, ModdingAPI::Exposed::System::Text::Encoding*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA59C0))(this, stream, encoding, detectEncodingFromByteOrderMarks);
  }
  void ::ctor(ModdingAPI::Exposed::System::IO::Stream* stream, ModdingAPI::Exposed::System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks, int32_t bufferSize, bool leaveOpen) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*, ModdingAPI::Exposed::System::IO::Stream*, ModdingAPI::Exposed::System::Text::Encoding*, bool, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA5AB0))(this, stream, encoding, detectEncodingFromByteOrderMarks, bufferSize, leaveOpen);
  }
  void ::ctor(System_String* path) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA5C90))(this, path);
  }
  void ::ctor(System_String* path, bool detectEncodingFromByteOrderMarks) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA5D70))(this, path, detectEncodingFromByteOrderMarks);
  }
  void ::ctor(System_String* path, ModdingAPI::Exposed::System::Text::Encoding* encoding) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*, System_String*, ModdingAPI::Exposed::System::Text::Encoding*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA5E60))(this, path, encoding);
  }
  void ::ctor(System_String* path, ModdingAPI::Exposed::System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks, int32_t bufferSize) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*, System_String*, ModdingAPI::Exposed::System::Text::Encoding*, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA5F40))(this, path, encoding, detectEncodingFromByteOrderMarks, bufferSize);
  }
  void ::ctor(System_String* path, ModdingAPI::Exposed::System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks, int32_t bufferSize, bool checkHost) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*, System_String*, ModdingAPI::Exposed::System::Text::Encoding*, bool, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA5F70))(this, path, encoding, detectEncodingFromByteOrderMarks, bufferSize, checkHost);
  }
  void Init(ModdingAPI::Exposed::System::IO::Stream* stream, ModdingAPI::Exposed::System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks, int32_t bufferSize, bool leaveOpen) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*, ModdingAPI::Exposed::System::IO::Stream*, ModdingAPI::Exposed::System::Text::Encoding*, bool, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA6270))(this, stream, encoding, detectEncodingFromByteOrderMarks, bufferSize, leaveOpen);
  }
  void Init(ModdingAPI::Exposed::System::IO::Stream* stream) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*, ModdingAPI::Exposed::System::IO::Stream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA63D0))(this, stream);
  }
  void Close() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA63E0))(this);
  }
  void Dispose(bool disposing) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA6400))(this, disposing);
  }
  ModdingAPI::Exposed::System::Text::Encoding* get_CurrentEncoding() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::Encoding*(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110A0))(this);
  }
  ModdingAPI::Exposed::System::IO::Stream* get_BaseStream() {
    return reinterpret_cast<ModdingAPI::Exposed::System::IO::Stream*(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  bool get_LeaveOpen() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA64E0))(this);
  }
  int32_t Peek() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA64F0))(this);
  }
  bool DataAvailable() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA6580))(this);
  }
  int32_t Read() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA6590))(this);
  }
  int32_t Read(ModdingAPI::Exposed::System::Char_array* buffer, int32_t index, int32_t count) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*, ModdingAPI::Exposed::System::Char_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA6620))(this, buffer, index, count);
  }
  System_String* ReadToEnd() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA6880))(this);
  }
  void CompressBuffer(int32_t n) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA6A60))(this, n);
  }
  void DetectEncoding() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA6AA0))(this);
  }
  bool IsPreamble() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA7120))(this);
  }
  int32_t ReadBuffer() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA7270))(this);
  }
  int32_t ReadBuffer(ModdingAPI::Exposed::System::Char_array* userBuffer, int32_t userOffset, int32_t desiredChars, bool readToUserBuffer) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*, ModdingAPI::Exposed::System::Char_array*, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA7450))(this, userBuffer, userOffset, desiredChars, readToUserBuffer);
  }
  System_String* ReadLine() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA76D0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::IO::StreamReader*> Null = __CppStaticProperty<ModdingAPI::Exposed::System::IO::StreamReader*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Null; }
  );

  // Static methods:
  static inline int32_t get_DefaultBufferSize() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA5590))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA79D0))();
  }
};
}