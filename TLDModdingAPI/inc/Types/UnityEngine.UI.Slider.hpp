// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.UI.Navigation.hpp"
#include "ModdingAPI.Exposed.UnityEngine.UI.ColorBlock.hpp"
#include "ModdingAPI.Exposed.UnityEngine.UI.SpriteState.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.DrivenRectTransformTracker.hpp"


namespace ModdingAPI::Exposed::UnityEngine::UI {
struct __Slider_Il2CppStaticFields {
};

struct __Slider_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Awake;
  VirtualInvokeData _5_OnEnable;
  VirtualInvokeData _6_Start;
  VirtualInvokeData _7_OnDisable;
  VirtualInvokeData _8_OnDestroy;
  VirtualInvokeData _9_IsActive;
  VirtualInvokeData _10_OnRectTransformDimensionsChange;
  VirtualInvokeData _11_OnBeforeTransformParentChanged;
  VirtualInvokeData _12_OnTransformParentChanged;
  VirtualInvokeData _13_OnDidApplyAnimationProperties;
  VirtualInvokeData _14_OnCanvasGroupChanged;
  VirtualInvokeData _15_OnCanvasHierarchyChanged;
  VirtualInvokeData _16_IsDestroyed;
  VirtualInvokeData _24_IsInteractable;
  VirtualInvokeData _25_InstantClearState;
  VirtualInvokeData _26_DoStateTransition;
  VirtualInvokeData _27_FindSelectableOnLeft;
  VirtualInvokeData _28_FindSelectableOnRight;
  VirtualInvokeData _29_FindSelectableOnUp;
  VirtualInvokeData _30_FindSelectableOnDown;
  VirtualInvokeData _31_OnMove;
  VirtualInvokeData _32_OnPointerDown;
  VirtualInvokeData _33_OnPointerUp;
  VirtualInvokeData _34_OnPointerEnter;
  VirtualInvokeData _35_OnPointerExit;
  VirtualInvokeData _36_OnSelect;
  VirtualInvokeData _37_OnDeselect;
  VirtualInvokeData _38_Select;
  VirtualInvokeData _42_UnityEngine_UI_ICanvasElement_get_transform;
  VirtualInvokeData _46_get_value;
  VirtualInvokeData _47_set_value;
  VirtualInvokeData _48_Rebuild;
  VirtualInvokeData _49_LayoutComplete;
  VirtualInvokeData _50_GraphicUpdateComplete;
  VirtualInvokeData _51_Set;
  VirtualInvokeData _52_OnDrag;
  VirtualInvokeData _53_OnInitializePotentialDrag;
};

struct __Slider_Il2CppClass {
  Il2CppClass_1 _1;
  __Slider_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Slider_Il2CppVtbl vtbl;
};

class Slider {
public:
  // Il2Cpp fields:
  __Slider_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::UI::Navigation Selectable_m_Navigation;
  int32_t Selectable_m_Transition;
  ModdingAPI::Exposed::UnityEngine::UI::ColorBlock Selectable_m_Colors;
  ModdingAPI::Exposed::UnityEngine::UI::SpriteState Selectable_m_SpriteState;
  ModdingAPI::Exposed::UnityEngine::UI::AnimationTriggers* Selectable_m_AnimationTriggers;
  bool Selectable_m_Interactable;
  ModdingAPI::Exposed::UnityEngine::UI::Graphic* Selectable_m_TargetGraphic;
  bool Selectable_m_GroupsAllowInteraction;
  int32_t Selectable_m_CurrentSelectionState;
  bool Selectable__isPointerInside_k__BackingField;
  bool Selectable__isPointerDown_k__BackingField;
  bool Selectable__hasSelection_k__BackingField;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* Selectable_m_CanvasGroupCache;
  ModdingAPI::Exposed::UnityEngine::RectTransform* m_FillRect;
  ModdingAPI::Exposed::UnityEngine::RectTransform* m_HandleRect;
  int32_t m_Direction;
  float m_MinValue;
  float m_MaxValue;
  bool m_WholeNumbers;
  float m_Value;
  ModdingAPI::Exposed::UnityEngine::UI::Slider::SliderEvent* m_OnValueChanged;
  ModdingAPI::Exposed::UnityEngine::UI::Image* m_FillImage;
  ModdingAPI::Exposed::UnityEngine::Transform* m_FillTransform;
  ModdingAPI::Exposed::UnityEngine::RectTransform* m_FillContainerRect;
  ModdingAPI::Exposed::UnityEngine::Transform* m_HandleTransform;
  ModdingAPI::Exposed::UnityEngine::RectTransform* m_HandleContainerRect;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_Offset;
  ModdingAPI::Exposed::UnityEngine::DrivenRectTransformTracker m_Tracker;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFC000))(this);
  }
  ModdingAPI::Exposed::UnityEngine::RectTransform* get_fillRect() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::RectTransform*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE3B40))(this);
  }
  void set_fillRect(ModdingAPI::Exposed::UnityEngine::RectTransform* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, ModdingAPI::Exposed::UnityEngine::RectTransform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFC230))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::RectTransform* get_handleRect() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::RectTransform*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAEE910))(this);
  }
  void set_handleRect(ModdingAPI::Exposed::UnityEngine::RectTransform* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, ModdingAPI::Exposed::UnityEngine::RectTransform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFC300))(this, value);
  }
  int32_t get_direction() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFC3D0))(this);
  }
  void set_direction(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFC3E0))(this, value);
  }
  float get_minValue() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFC490))(this);
  }
  void set_minValue(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFC4A0))(this, value);
  }
  float get_maxValue() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFC590))(this);
  }
  void set_maxValue(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFC5A0))(this, value);
  }
  bool get_wholeNumbers() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFC690))(this);
  }
  void set_wholeNumbers(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFC6A0))(this, value);
  }
  float get_value() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFC790))(this);
  }
  void set_value(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFC860))(this, value);
  }
  float get_normalizedValue() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFC880))(this);
  }
  void set_normalizedValue(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFC9B0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::UI::Slider::SliderEvent* get_onValueChanged() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::UI::Slider::SliderEvent*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFCAA0))(this);
  }
  void set_onValueChanged(ModdingAPI::Exposed::UnityEngine::UI::Slider::SliderEvent* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, ModdingAPI::Exposed::UnityEngine::UI::Slider::SliderEvent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E0B0))(this, value);
  }
  float get_stepSize() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFCAB0))(this);
  }
  void Rebuild(int32_t executing) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, executing);
  }
  void LayoutComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void GraphicUpdateComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFCAE0))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFF5C90))(this);
  }
  void OnDidApplyAnimationProperties() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFCB30))(this);
  }
  void UpdateCachedReferences() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFCDF0))(this);
  }
  float ClampValue(float input) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFD2F0))(this, input);
  }
  void Set(float input) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFC860))(this, input);
  }
  void Set(float input, bool sendCallback) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFD400))(this, input, sendCallback);
  }
  void OnRectTransformDimensionsChange() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFD500))(this);
  }
  int32_t get_axis() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFD540))(this);
  }
  bool get_reverseValue() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFD550))(this);
  }
  void UpdateVisuals() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFD570))(this);
  }
  void UpdateDrag(ModdingAPI::Exposed::UnityEngine::EventSystems::PointerEventData* eventData, ModdingAPI::Exposed::UnityEngine::Camera* cam) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, ModdingAPI::Exposed::UnityEngine::EventSystems::PointerEventData*, ModdingAPI::Exposed::UnityEngine::Camera*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFDAC0))(this, eventData, cam);
  }
  bool MayDrag(ModdingAPI::Exposed::UnityEngine::EventSystems::PointerEventData* eventData) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, ModdingAPI::Exposed::UnityEngine::EventSystems::PointerEventData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFF6650))(this, eventData);
  }
  void OnPointerDown(ModdingAPI::Exposed::UnityEngine::EventSystems::PointerEventData* eventData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, ModdingAPI::Exposed::UnityEngine::EventSystems::PointerEventData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFDEC0))(this, eventData);
  }
  void OnDrag(ModdingAPI::Exposed::UnityEngine::EventSystems::PointerEventData* eventData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, ModdingAPI::Exposed::UnityEngine::EventSystems::PointerEventData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFE130))(this, eventData);
  }
  void OnMove(ModdingAPI::Exposed::UnityEngine::EventSystems::AxisEventData* eventData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, ModdingAPI::Exposed::UnityEngine::EventSystems::AxisEventData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFE180))(this, eventData);
  }
  ModdingAPI::Exposed::UnityEngine::UI::Selectable* FindSelectableOnLeft() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::UI::Selectable*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFE4A0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::UI::Selectable* FindSelectableOnRight() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::UI::Selectable*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFE4D0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::UI::Selectable* FindSelectableOnUp() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::UI::Selectable*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFE500))(this);
  }
  ModdingAPI::Exposed::UnityEngine::UI::Selectable* FindSelectableOnDown() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::UI::Selectable*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFE530))(this);
  }
  void OnInitializePotentialDrag(ModdingAPI::Exposed::UnityEngine::EventSystems::PointerEventData* eventData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, ModdingAPI::Exposed::UnityEngine::EventSystems::PointerEventData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFF7200))(this, eventData);
  }
  void SetDirection(int32_t direction, bool includeRectLayouts) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFE560))(this, direction, includeRectLayouts);
  }
  ModdingAPI::Exposed::UnityEngine::Transform* UnityEngine::UI::ICanvasElement::get_transform() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Transform*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Slider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4117E0))(this);
  }
};
}