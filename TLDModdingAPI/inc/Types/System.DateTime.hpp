// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.DateTime.hpp"
#include "ModdingAPI.Exposed.System.Runtime.Serialization.StreamingContext.hpp"
#include "ModdingAPI.Exposed.System.TimeSpan.hpp"
#include "ModdingAPI.Exposed.System.Decimal.hpp"

namespace ModdingAPI::Exposed::System {
struct __DateTime_Il2CppObject {
  uint64_t dateData;
};
struct __DateTime_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Int32_array* DaysToMonth365;
  ModdingAPI::Exposed::System::Int32_array* DaysToMonth366;
  ModdingAPI::Exposed::System::DateTime MinValue;
  ModdingAPI::Exposed::System::DateTime MaxValue;
};

struct __DateTime_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_CompareTo;
  VirtualInvokeData _5_ToString;
  VirtualInvokeData _6_GetTypeCode;
  VirtualInvokeData _7_System_IConvertible_ToBoolean;
  VirtualInvokeData _8_System_IConvertible_ToChar;
  VirtualInvokeData _9_System_IConvertible_ToSByte;
  VirtualInvokeData _10_System_IConvertible_ToByte;
  VirtualInvokeData _11_System_IConvertible_ToInt16;
  VirtualInvokeData _12_System_IConvertible_ToUInt16;
  VirtualInvokeData _13_System_IConvertible_ToInt32;
  VirtualInvokeData _14_System_IConvertible_ToUInt32;
  VirtualInvokeData _15_System_IConvertible_ToInt64;
  VirtualInvokeData _16_System_IConvertible_ToUInt64;
  VirtualInvokeData _17_System_IConvertible_ToSingle;
  VirtualInvokeData _18_System_IConvertible_ToDouble;
  VirtualInvokeData _19_System_IConvertible_ToDecimal;
  VirtualInvokeData _20_System_IConvertible_ToDateTime;
  VirtualInvokeData _21_ToString;
  VirtualInvokeData _22_System_IConvertible_ToType;
  VirtualInvokeData _23_System_Runtime_Serialization_ISerializable_GetObjectData;
  VirtualInvokeData _24_CompareTo;
  VirtualInvokeData _25_Equals;
};

struct __DateTime_Il2CppClass {
  Il2CppClass_1 _1;
  __DateTime_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __DateTime_Il2CppVtbl vtbl;
};

class DateTime {
  static constexpr uint64_t _rvaObjectInstance     = 0x3C43108;
  static inline    DateTime* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t _rvaClassInstance     = 0x3C81868;
  static inline    __DateTime_Il2CppClass* _pStaticClassInstance = nullptr;

public:
  // Singleton object getter:
  static inline DateTime* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (DateTime**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

  // Static class getter:
  static inline __DateTime_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__DateTime_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Member fields:
  uint64_t dateData;

  // Member methods:
  void ::ctor(int64_t ticks) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24380))(this, ticks);
  }
  void ::ctor(uint64_t dateData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2C00))(this, dateData);
  }
  void ::ctor(int64_t ticks, ModdingAPI::Exposed::System::DateTimeKind kind) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, int64_t, ModdingAPI::Exposed::System::DateTimeKind)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24390))(this, ticks, kind);
  }
  void ::ctor(int64_t ticks, ModdingAPI::Exposed::System::DateTimeKind kind, bool isAmbiguousDst) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, int64_t, ModdingAPI::Exposed::System::DateTimeKind, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x243A0))(this, ticks, kind, isAmbiguousDst);
  }
  void ::ctor(int32_t year, int32_t month, int32_t day) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x243B0))(this, year, month, day);
  }
  void ::ctor(int32_t year, int32_t month, int32_t day, ModdingAPI::Exposed::System::Globalization::Calendar* calendar) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::Globalization::Calendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x243C0))(this, year, month, day, calendar);
  }
  void ::ctor(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x243F0))(this, year, month, day, hour, minute, second);
  }
  void ::ctor(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, ModdingAPI::Exposed::System::DateTimeKind kind) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::DateTimeKind)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24400))(this, year, month, day, hour, minute, second, kind);
  }
  void ::ctor(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, ModdingAPI::Exposed::System::Globalization::Calendar* calendar) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::Globalization::Calendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24410))(this, year, month, day, hour, minute, second, calendar);
  }
  void ::ctor(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24420))(this, year, month, day, hour, minute, second, millisecond);
  }
  void ::ctor(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, ModdingAPI::Exposed::System::DateTimeKind kind) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::DateTimeKind)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24430))(this, year, month, day, hour, minute, second, millisecond, kind);
  }
  void ::ctor(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, ModdingAPI::Exposed::System::Globalization::Calendar* calendar) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::Globalization::Calendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24440))(this, year, month, day, hour, minute, second, millisecond, calendar);
  }
  void ::ctor(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, ModdingAPI::Exposed::System::Globalization::Calendar* calendar, ModdingAPI::Exposed::System::DateTimeKind kind) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::Globalization::Calendar*, ModdingAPI::Exposed::System::DateTimeKind)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24450))(this, year, month, day, hour, minute, second, millisecond, calendar, kind);
  }
  void ::ctor(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo* info, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24460))(this, info, context);
  }
  int64_t get_InternalTicks() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24480))(this);
  }
  uint64_t get_InternalKind() {
    return reinterpret_cast<uint64_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x244A0))(this);
  }
  ModdingAPI::Exposed::System::DateTime Add(ModdingAPI::Exposed::System::TimeSpan value) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::TimeSpan)>(Helpers::Memory::GetInstance().MakeAbsolute(0x244C0))(this, value);
  }
  ModdingAPI::Exposed::System::DateTime Add(double value, int32_t scale) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, double, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x244D0))(this, value, scale);
  }
  ModdingAPI::Exposed::System::DateTime AddDays(double value) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x244E0))(this, value);
  }
  ModdingAPI::Exposed::System::DateTime AddHours(double value) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x244F0))(this, value);
  }
  ModdingAPI::Exposed::System::DateTime AddMilliseconds(double value) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24500))(this, value);
  }
  ModdingAPI::Exposed::System::DateTime AddMonths(int32_t months) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24510))(this, months);
  }
  ModdingAPI::Exposed::System::DateTime AddSeconds(double value) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24520))(this, value);
  }
  ModdingAPI::Exposed::System::DateTime AddTicks(int64_t value) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x244C0))(this, value);
  }
  ModdingAPI::Exposed::System::DateTime AddYears(int32_t value) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24530))(this, value);
  }
  int32_t CompareTo(Il2CppObject* value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24540))(this, value);
  }
  int32_t CompareTo(ModdingAPI::Exposed::System::DateTime value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24670))(this, value);
  }
  bool Equals(Il2CppObject* value) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x246A0))(this, value);
  }
  bool Equals(ModdingAPI::Exposed::System::DateTime value) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0x246B0))(this, value);
  }
  void System::Runtime::Serialization::ISerializable::GetObjectData(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo* info, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0x246D0))(this, info, context);
  }
  bool IsDaylightSavingTime() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x247C0))(this);
  }
  int64_t ToBinary() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24920))(this);
  }
  int64_t ToBinaryRaw() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6590))(this);
  }
  ModdingAPI::Exposed::System::DateTime get_Date() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x249C0))(this);
  }
  int32_t GetDatePart(int32_t part) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24A00))(this, part);
  }
  int32_t get_Day() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24A10))(this);
  }
  int32_t get_DayOfWeek() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24A20))(this);
  }
  int32_t get_DayOfYear() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24A70))(this);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24A80))(this);
  }
  int32_t get_Hour() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24AA0))(this);
  }
  bool IsAmbiguousDaylightSavingTime() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24AF0))(this);
  }
  ModdingAPI::Exposed::System::DateTimeKind get_Kind() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTimeKind(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B10))(this);
  }
  int32_t get_Millisecond() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B40))(this);
  }
  int32_t get_Minute() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B90))(this);
  }
  int32_t get_Month() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BE0))(this);
  }
  int32_t get_Second() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BF0))(this);
  }
  int64_t get_Ticks() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24480))(this);
  }
  ModdingAPI::Exposed::System::TimeSpan get_TimeOfDay() {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C40))(this);
  }
  int32_t get_Year() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C70))(this);
  }
  ModdingAPI::Exposed::System::TimeSpan Subtract(ModdingAPI::Exposed::System::DateTime value) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24C80))(this, value);
  }
  double ToOADate() {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24CA0))(this);
  }
  int64_t ToFileTime() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24CB0))(this);
  }
  int64_t ToFileTimeUtc() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24CF0))(this);
  }
  ModdingAPI::Exposed::System::DateTime ToLocalTime() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D00))(this);
  }
  ModdingAPI::Exposed::System::DateTime ToLocalTime(bool throwOnOverflow) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D10))(this, throwOnOverflow);
  }
  System_String* ToLongDateString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24D20))(this);
  }
  System_String* ToLongTimeString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24E00))(this);
  }
  System_String* ToShortDateString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24EE0))(this);
  }
  System_String* ToShortTimeString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24EF0))(this);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24F00))(this);
  }
  System_String* ToString(System_String* format) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24F10))(this, format);
  }
  System_String* ToString(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24F20))(this, provider);
  }
  System_String* ToString(System_String* format, ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, System_String*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24F30))(this, format, provider);
  }
  ModdingAPI::Exposed::System::DateTime ToUniversalTime() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24F40))(this);
  }
  ModdingAPI::Exposed::System::String_array* GetDateTimeFormats() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24F70))(this);
  }
  ModdingAPI::Exposed::System::String_array* GetDateTimeFormats(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25030))(this, provider);
  }
  int32_t GetTypeCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25040))(this);
  }
  bool System::IConvertible::ToBoolean(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25050))(this, provider);
  }
  wchar_t System::IConvertible::ToChar(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<wchar_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25060))(this, provider);
  }
  char System::IConvertible::ToSByte(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<char(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25070))(this, provider);
  }
  uint8_t System::IConvertible::ToByte(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<uint8_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25080))(this, provider);
  }
  int16_t System::IConvertible::ToInt16(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<int16_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25090))(this, provider);
  }
  uint16_t System::IConvertible::ToUInt16(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<uint16_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x250A0))(this, provider);
  }
  int32_t System::IConvertible::ToInt32(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x250B0))(this, provider);
  }
  uint32_t System::IConvertible::ToUInt32(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x250C0))(this, provider);
  }
  int64_t System::IConvertible::ToInt64(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x250D0))(this, provider);
  }
  uint64_t System::IConvertible::ToUInt64(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<uint64_t(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x250E0))(this, provider);
  }
  float System::IConvertible::ToSingle(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x250F0))(this, provider);
  }
  double System::IConvertible::ToDouble(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25100))(this, provider);
  }
  ModdingAPI::Exposed::System::Decimal System::IConvertible::ToDecimal(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Decimal(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25110))(this, provider);
  }
  ModdingAPI::Exposed::System::DateTime System::IConvertible::ToDateTime(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6590))(this, provider);
  }
  Il2CppObject* System::IConvertible::ToType(ModdingAPI::Exposed::System::Type* type, ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::DateTime*, ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25120))(this, type, provider);
  }

  // Static methods:
  static inline int64_t DateToTicks(int32_t year, int32_t month, int32_t day) {
    return reinterpret_cast<int64_t(__fastcall*)(int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA806C0))(year, month, day);
  }
  static inline int64_t TimeToTicks(int32_t hour, int32_t minute, int32_t second) {
    return reinterpret_cast<int64_t(__fastcall*)(int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA80900))(hour, minute, second);
  }
  static inline int32_t DaysInMonth(int32_t year, int32_t month) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA80A00))(year, month);
  }
  static inline ModdingAPI::Exposed::System::DateTime FromBinary(int64_t dateData) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA80C90))(dateData);
  }
  static inline ModdingAPI::Exposed::System::DateTime FromBinaryRaw(int64_t dateData) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA80F50))(dateData);
  }
  static inline ModdingAPI::Exposed::System::DateTime FromFileTime(int64_t fileTime) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA81040))(fileTime);
  }
  static inline ModdingAPI::Exposed::System::DateTime FromFileTimeUtc(int64_t fileTime) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA810F0))(fileTime);
  }
  static inline ModdingAPI::Exposed::System::DateTime SpecifyKind(ModdingAPI::Exposed::System::DateTime value, ModdingAPI::Exposed::System::DateTimeKind kind) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTime, ModdingAPI::Exposed::System::DateTimeKind)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA811F0))(value, kind);
  }
  static inline ModdingAPI::Exposed::System::DateTime get_Now() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xA81470))();
  }
  static inline ModdingAPI::Exposed::System::DateTime get_UtcNow() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xA815C0))();
  }
  static inline int64_t GetSystemTimeAsFileTime() {
    return reinterpret_cast<int64_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xA81680))();
  }
  static inline bool IsLeapYear(int32_t year) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA816A0))(year);
  }
  static inline ModdingAPI::Exposed::System::DateTime Parse(System_String* s) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA817D0))(s);
  }
  static inline ModdingAPI::Exposed::System::DateTime Parse(System_String* s, ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(System_String*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA818B0))(s, provider);
  }
  static inline ModdingAPI::Exposed::System::DateTime Parse(System_String* s, ModdingAPI::Exposed::System::IFormatProvider* provider, int32_t styles) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(System_String*, ModdingAPI::Exposed::System::IFormatProvider*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA81990))(s, provider, styles);
  }
  static inline ModdingAPI::Exposed::System::DateTime ParseExact(System_String* s, System_String* format, ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(System_String*, System_String*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA81A90))(s, format, provider);
  }
  static inline ModdingAPI::Exposed::System::DateTime ParseExact(System_String* s, System_String* format, ModdingAPI::Exposed::System::IFormatProvider* provider, int32_t style) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(System_String*, System_String*, ModdingAPI::Exposed::System::IFormatProvider*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA81B80))(s, format, provider, style);
  }
  static inline double TicksToOADate(int64_t value) {
    return reinterpret_cast<double(__fastcall*)(int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA81CA0))(value);
  }
  static inline bool TryParse(System_String* s, ModdingAPI::Exposed::System::DateTime result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA82890))(s, result);
  }
  static inline bool TryParse(System_String* s, ModdingAPI::Exposed::System::IFormatProvider* provider, int32_t styles, ModdingAPI::Exposed::System::DateTime result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, ModdingAPI::Exposed::System::IFormatProvider*, int32_t, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA82980))(s, provider, styles, result);
  }
  static inline bool TryParseExact(System_String* s, System_String* format, ModdingAPI::Exposed::System::IFormatProvider* provider, int32_t style, ModdingAPI::Exposed::System::DateTime result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, System_String*, ModdingAPI::Exposed::System::IFormatProvider*, int32_t, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA82AA0))(s, format, provider, style, result);
  }
  static inline bool TryCreate(int32_t year, int32_t month, int32_t day, int32_t hour, int32_t minute, int32_t second, int32_t millisecond, ModdingAPI::Exposed::System::DateTime result) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA83B20))(year, month, day, hour, minute, second, millisecond, result);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xA83DC0))();
  }

};
}