// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed {
struct __Panel_Crafting_Il2CppStaticFields {
};

struct __Panel_Crafting_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Panel_Crafting_Il2CppClass {
  Il2CppClass_1 _1;
  __Panel_Crafting_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Panel_Crafting_Il2CppVtbl vtbl;
};

class Panel_Crafting {
public:
  // Il2Cpp fields:
  __Panel_Crafting_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_SurvivalTabs;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_StoryTabs;
  ModdingAPI::Exposed::UIButton* m_CraftButton;
  float m_CraftingDisplayTimeSeconds;
  ModdingAPI::Exposed::CraftingCategoryNavigation* m_CategoryNavigation;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_FilterButtons;
  ModdingAPI::Exposed::UILabel* m_FilterLabel;
  ModdingAPI::Exposed::UnityEngine::Color m_RequirementsNotMetTint;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Root;
  float m_SkillIncreaseChanceOnFailure;
  float m_SkillIncreaseChanceOnSuccess;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_BlueprintDisplays;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ScrollbarSpawner;
  ModdingAPI::Exposed::UILabel* m_SelectedDescription;
  ModdingAPI::Exposed::UILabel* m_SelectedName;
  ModdingAPI::Exposed::UITexture* m_SelectedImage;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ClothingStatsRoot;
  ModdingAPI::Exposed::UILabel* m_ClothingMobility;
  ModdingAPI::Exposed::UILabel* m_ClothingToughness;
  ModdingAPI::Exposed::UILabel* m_ClothingWarmth;
  ModdingAPI::Exposed::UILabel* m_ClothingWaterproof;
  ModdingAPI::Exposed::UILabel* m_ClothingWindproof;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ItemStatsRoot;
  ModdingAPI::Exposed::UILabel* m_ItemCondition;
  ModdingAPI::Exposed::UILabel* m_ItemWeight;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_SelectedDetailsRoot;
  ModdingAPI::Exposed::CraftingRequirementContainer* m_RequirementContainer;
  ModdingAPI::Exposed::ButtonLegendContainer* m_ButtonLegendContainer;
  ModdingAPI::Exposed::ButtonLegendContainer* m_FilterButtonLegendContainer;
  float m_CraftingTimeSeconds;
  bool _m_CraftingInProgress_k__BackingField;
  ModdingAPI::Exposed::AssetBundleRef* _m_CraftingIconBundle_k__BackingField;
  ModdingAPI::Exposed::BlueprintItem* _m_SelectedBPI_k__BackingField;
  ModdingAPI::Exposed::InProgressCraftItem* _m_SelectedWIP_k__BackingField;
  ModdingAPI::Exposed::CraftingLocationInterface* m_CurrentLocation;
  ModdingAPI::Exposed::CraftingLocationInterface* m_PreviousLocation;
  int32_t m_FrameCountSinceClosing;
  ModdingAPI::Exposed::UISlider* m_BlueprintSlider;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BlueprintSliderRoot;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_BlueprintItems;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_FilteredBlueprintItems;
  bool m_NeedsUpdate;
  bool m_NeedsSelectedRefresh;
  bool m_RefreshingSelectedBlueprint;
  uint32_t m_CraftingAudioID;
  float m_HoursToSpendCrafting;
  float m_RealTimeCraftingElapsed;
  float m_RealTimeCraftingDuration;
  float m_StoredDayLengthScale;
  float m_NextUnitProgress;
  int32_t m_TargetQuantity;
  int32_t m_UnitsCompleted;
  ModdingAPI::Exposed::GamepadButtonSprite_array* m_GamepadButtonSprites;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_HighlightButtons;
  int32_t m_CurrentNavArea;
  int32_t m_CurrentFilter;
  int32_t m_CurrentCategory;
  int32_t m_CurrentBlueprintIndex;
  int32_t m_CurrentBlueprintDisplayOffset;

  // Member methods:
  bool get_m_CraftingInProgress() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FBDA0))(this);
  }
  void set_m_CraftingInProgress(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FBDB0))(this, value);
  }
  ModdingAPI::Exposed::AssetBundleRef* get_m_CraftingIconBundle() {
    return reinterpret_cast<ModdingAPI::Exposed::AssetBundleRef*(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E0C0))(this);
  }
  void set_m_CraftingIconBundle(ModdingAPI::Exposed::AssetBundleRef* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, ModdingAPI::Exposed::AssetBundleRef*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E0D0))(this, value);
  }
  ModdingAPI::Exposed::BlueprintItem* get_m_SelectedBPI() {
    return reinterpret_cast<ModdingAPI::Exposed::BlueprintItem*(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E0E0))(this);
  }
  void set_m_SelectedBPI(ModdingAPI::Exposed::BlueprintItem* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, ModdingAPI::Exposed::BlueprintItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E0F0))(this, value);
  }
  ModdingAPI::Exposed::InProgressCraftItem* get_m_SelectedWIP() {
    return reinterpret_cast<ModdingAPI::Exposed::InProgressCraftItem*(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E100))(this);
  }
  void set_m_SelectedWIP(ModdingAPI::Exposed::InProgressCraftItem* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, ModdingAPI::Exposed::InProgressCraftItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E110))(this, value);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FBDC0))(this);
  }
  void OnControllerScheme(bool isController) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FC9E0))(this, isController);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FCA30))(this);
  }
  void UpdateLastLocations() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FCBF0))(this);
  }
  bool CanCraftBlueprint(ModdingAPI::Exposed::BlueprintItem* bpi) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, ModdingAPI::Exposed::BlueprintItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FCD80))(this, bpi);
  }
  bool CanCraftSelectedBlueprint() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FCDB0))(this);
  }
  void Enable(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FCF30))(this, enable);
  }
  int32_t GetCurrentCraftingLocation() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FD250))(this);
  }
  int32_t GetModifiedCraftingDuration(int32_t baseMinutes) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FD2F0))(this, baseMinutes);
  }
  int32_t GetAdjustedCraftingTime() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FD410))(this);
  }
  int32_t GetFinalCraftingTimeWithAllModifiers() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FD580))(this);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x165DF10))(this);
  }
  void OnBackButton() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FD830))(this);
  }
  void OnBeginCrafting() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FD910))(this);
  }
  void OnCancelCrafting() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FDBF0))(this);
  }
  void OnClothingNav() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FDC00))(this);
  }
  void OnFirstAidNav() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FDCF0))(this);
  }
  void OnInventoryNav() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FDDE0))(this);
  }
  void OnJournalNav() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FDEE0))(this);
  }
  void OnMapNam() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FDFD0))(this);
  }
  void OnMissionNav() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FE160))(this);
  }
  void OnCategoryChanged(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FE250))(this, index);
  }
  void OnSelectedToolChanged() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FE270))(this);
  }
  void OnFilterChange(ModdingAPI::Exposed::UIButton* button) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, ModdingAPI::Exposed::UIButton*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FE280))(this, button);
  }
  void OnScrollbarBlueprintsChanged() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FE3B0))(this);
  }
  void SetCraftingLocation(ModdingAPI::Exposed::CraftingLocationInterface* location) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, ModdingAPI::Exposed::CraftingLocationInterface*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FE5A0))(this, location);
  }
  void OnBlueprintDisplayClicked(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FE5C0))(this, index);
  }
  void ApplyCraftingProgress(float hoursSpentCratfing) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FE680))(this, hoursSpentCratfing);
  }
  void ApplyFilter() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FEE90))(this);
  }
  bool ItemPassesFilter(ModdingAPI::Exposed::BlueprintItem* bpi) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, ModdingAPI::Exposed::BlueprintItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FF2D0))(this, bpi);
  }
  void ConsumeMaterialsUsedForCrafting(float hoursSpentCrafting) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FF390))(this, hoursSpentCrafting);
  }
  void CraftingEnd() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FF950))(this);
  }
  void CraftingStart() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17FFBA0))(this);
  }
  void DegradeTools(float hoursSpentCrafting) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1800240))(this, hoursSpentCrafting);
  }
  void HandleCraftingInterrupt(int32_t reason) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1800340))(this, reason);
  }
  void HandleCraftingSuccess() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18006E0))(this);
  }
  void RollForSkillIncrease(bool success) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1800740))(this, success);
  }
  void UpdateSkillAfterCrafting(bool success) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1800820))(this, success);
  }
  void UpdateControllerButtons() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1800A20))(this);
  }
  void UpdateMouseKeyboardButtons() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1800E60))(this);
  }
  void UpdateCrafting() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1801010))(this);
  }
  void EnableNavigationTabs(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1801470))(this, enable);
  }
  int32_t GetSelectedDisplayIndex() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1801580))(this);
  }
  ModdingAPI::Exposed::InProgressCraftItem* GetInProgressItem(ModdingAPI::Exposed::BlueprintItem* bpi) {
    return reinterpret_cast<ModdingAPI::Exposed::InProgressCraftItem*(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, ModdingAPI::Exposed::BlueprintItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1801680))(this, bpi);
  }
  void HandleInput() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18019D0))(this);
  }
  void HandleVerticalNavigation(float movement) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1802200))(this, movement);
  }
  void ClearSelectedBlueprint() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18024A0))(this);
  }
  void RefreshBlueprints() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1802640))(this);
  }
  void RefreshBlueprintDisplayList() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18028E0))(this);
  }
  void RefreshSelectedBlueprint() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1802BC0))(this);
  }
  void ResetLastLocations() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1803450))(this);
  }
  void SetFilter(int32_t filter) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1803470))(this, filter);
  }
  void SetNavigationArea(int32_t target) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1803580))(this, target);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Crafting*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1803710))(this);
  }
};
}