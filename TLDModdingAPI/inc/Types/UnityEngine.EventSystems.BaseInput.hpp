// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Touch.hpp"


namespace ModdingAPI::Exposed::UnityEngine::EventSystems {
struct __BaseInput_Il2CppStaticFields {
};

struct __BaseInput_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Awake;
  VirtualInvokeData _5_OnEnable;
  VirtualInvokeData _6_Start;
  VirtualInvokeData _7_OnDisable;
  VirtualInvokeData _8_OnDestroy;
  VirtualInvokeData _9_IsActive;
  VirtualInvokeData _10_OnRectTransformDimensionsChange;
  VirtualInvokeData _11_OnBeforeTransformParentChanged;
  VirtualInvokeData _12_OnTransformParentChanged;
  VirtualInvokeData _13_OnDidApplyAnimationProperties;
  VirtualInvokeData _14_OnCanvasGroupChanged;
  VirtualInvokeData _15_OnCanvasHierarchyChanged;
  VirtualInvokeData _16_IsDestroyed;
  VirtualInvokeData _17_get_compositionString;
  VirtualInvokeData _18_get_imeCompositionMode;
  VirtualInvokeData _19_set_imeCompositionMode;
  VirtualInvokeData _20_get_compositionCursorPos;
  VirtualInvokeData _21_set_compositionCursorPos;
  VirtualInvokeData _22_get_mousePresent;
  VirtualInvokeData _23_GetMouseButtonDown;
  VirtualInvokeData _24_GetMouseButtonUp;
  VirtualInvokeData _25_GetMouseButton;
  VirtualInvokeData _26_get_mousePosition;
  VirtualInvokeData _27_get_mouseScrollDelta;
  VirtualInvokeData _28_get_touchSupported;
  VirtualInvokeData _29_get_touchCount;
  VirtualInvokeData _30_GetTouch;
  VirtualInvokeData _31_GetAxisRaw;
  VirtualInvokeData _32_GetButtonDown;
};

struct __BaseInput_Il2CppClass {
  Il2CppClass_1 _1;
  __BaseInput_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __BaseInput_Il2CppVtbl vtbl;
};

class BaseInput {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C2DAE8;
  static inline    BaseInput* _pStaticObjectInstance = nullptr;

public:
// Singleton object getter:
  static inline BaseInput* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (BaseInput**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

  // Il2Cpp fields:
  __BaseInput_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }
  System_String* get_compositionString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD1D20))(this);
  }
  int32_t get_imeCompositionMode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD1D70))(this);
  }
  void set_imeCompositionMode(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD1DC0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_compositionCursorPos() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD1E10))(this);
  }
  void set_compositionCursorPos(ModdingAPI::Exposed::UnityEngine::Vector2 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD1E70))(this, value);
  }
  bool get_mousePresent() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD1ED0))(this);
  }
  bool GetMouseButtonDown(int32_t button) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD1F20))(this, button);
  }
  bool GetMouseButtonUp(int32_t button) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD1F70))(this, button);
  }
  bool GetMouseButton(int32_t button) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD1FC0))(this, button);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_mousePosition() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD2010))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_mouseScrollDelta() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD2020))(this);
  }
  bool get_touchSupported() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD2080))(this);
  }
  int32_t get_touchCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9A9FE0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Touch GetTouch(int32_t index) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Touch(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9AA180))(this, index);
  }
  float GetAxisRaw(System_String* axisName) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD20D0))(this, axisName);
  }
  bool GetButtonDown(System_String* buttonName) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::EventSystems::BaseInput*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD2120))(this, buttonName);
  }
};
}