// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::AmplifyBloom {
struct __StarDefData_Il2CppStaticFields {
};

struct __StarDefData_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __StarDefData_Il2CppClass {
  Il2CppClass_1 _1;
  __StarDefData_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __StarDefData_Il2CppVtbl vtbl;
};

class StarDefData {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C90410;
  static inline    __StarDefData_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __StarDefData_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__StarDefData_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __StarDefData_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t m_starType;
  System_String* m_starName;
  int32_t m_starlinesCount;
  int32_t m_passCount;
  float m_sampleLength;
  float m_attenuation;
  float m_inclination;
  float m_rotation;
  ModdingAPI::Exposed::AmplifyBloom::StarLineData_array* m_starLinesArr;
  float m_customIncrement;
  float m_longAttenuation;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C9BE80))(this);
  }
  void Destroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C9BF30))(this);
  }
  void ::ctor(int32_t starType, System_String* starName, int32_t starLinesCount, int32_t passCount, float sampleLength, float attenuation, float inclination, float rotation, float longAttenuation, float customIncrement) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*, int32_t, System_String*, int32_t, int32_t, float, float, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C9BF40))(this, starType, starName, starLinesCount, passCount, sampleLength, attenuation, inclination, rotation, longAttenuation, customIncrement);
  }
  void CalculateStarData() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C9C040))(this);
  }
  int32_t get_StarType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311060))(this);
  }
  void set_StarType(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311070))(this, value);
  }
  System_String* get_StarName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  void set_StarName(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3E0))(this, value);
  }
  int32_t get_StarlinesCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x37AAE0))(this);
  }
  void set_StarlinesCount(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C9C460))(this, value);
  }
  int32_t get_PassCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x37AAF0))(this);
  }
  void set_PassCount(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C9C470))(this, value);
  }
  float get_SampleLength() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56ED60))(this);
  }
  void set_SampleLength(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C9C480))(this, value);
  }
  float get_Attenuation() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56EDA0))(this);
  }
  void set_Attenuation(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C9C490))(this, value);
  }
  float get_Inclination() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x581030))(this);
  }
  void set_Inclination(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C9C4A0))(this, value);
  }
  float get_CameraRotInfluence() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6AB810))(this);
  }
  void set_CameraRotInfluence(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFEEBA0))(this, value);
  }
  ModdingAPI::Exposed::AmplifyBloom::StarLineData_array* get_StarLinesArr() {
    return reinterpret_cast<ModdingAPI::Exposed::AmplifyBloom::StarLineData_array*(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319970))(this);
  }
  float get_CustomIncrement() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56EE20))(this);
  }
  void set_CustomIncrement(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C9C4B0))(this, value);
  }
  float get_LongAttenuation() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56EE60))(this);
  }
  void set_LongAttenuation(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::StarDefData*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C9C4C0))(this, value);
  }
};
}