// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __MB3_MeshBakerCommon_Il2CppStaticFields {
};

struct __MB3_MeshBakerCommon_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_textureBakeResults;
  VirtualInvokeData _5_set_textureBakeResults;
  VirtualInvokeData _6_GetObjectsToCombine;
  VirtualInvokeData _8_ClearMesh;
  VirtualInvokeData _9_DestroyMesh;
  VirtualInvokeData _10_DestroyMeshEditor;
  VirtualInvokeData _11_GetNumObjectsInCombined;
  VirtualInvokeData _12_GetNumVerticesFor;
  VirtualInvokeData _15_Apply;
  VirtualInvokeData _16_Apply;
  VirtualInvokeData _17_CombinedMeshContains;
  VirtualInvokeData _18_UpdateGameObjects;
  VirtualInvokeData _19_UpdateSkinnedMeshApproximateBounds;
  VirtualInvokeData _20_UpdateSkinnedMeshApproximateBoundsFromBones;
  VirtualInvokeData _21_UpdateSkinnedMeshApproximateBoundsFromBounds;
  VirtualInvokeData _22__ValidateForUpdateSkinnedMeshBounds;
  VirtualInvokeData _65535__ctor;
};

struct __MB3_MeshBakerCommon_Il2CppClass {
  Il2CppClass_1 _1;
  __MB3_MeshBakerCommon_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MB3_MeshBakerCommon_Il2CppVtbl vtbl;
};

class MB3_MeshBakerCommon {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C7D038;
  static inline    __MB3_MeshBakerCommon_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __MB3_MeshBakerCommon_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__MB3_MeshBakerCommon_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __MB3_MeshBakerCommon_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::Vector3 sortAxis;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* objsToMesh;
  bool useObjsToMeshFromTexBaker;
  bool clearBuffersAfterBake;
  System_String* bakeAssetsInPlaceFolderPath;
  ModdingAPI::Exposed::UnityEngine::GameObject* resultPrefab;

  // Member methods:
  ModdingAPI::Exposed::MB2_TextureBakeResults* get_textureBakeResults() {
    return reinterpret_cast<ModdingAPI::Exposed::MB2_TextureBakeResults*(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19105D0))(this);
  }
  void set_textureBakeResults(ModdingAPI::Exposed::MB2_TextureBakeResults* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*, ModdingAPI::Exposed::MB2_TextureBakeResults*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1910610))(this, value);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* GetObjectsToCombine() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1910650))(this);
  }
  void EnableDisableSourceObjectRenderers(bool show) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1910AD0))(this, show);
  }
  void ClearMesh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1910E20))(this);
  }
  void DestroyMesh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1910E60))(this);
  }
  void DestroyMeshEditor(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* editorMethods) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1910EA0))(this, editorMethods);
  }
  int32_t GetNumObjectsInCombined() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1910EE0))(this);
  }
  int32_t GetNumVerticesFor(ModdingAPI::Exposed::UnityEngine::GameObject* go) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1910F20))(this, go);
  }
  ModdingAPI::Exposed::MB3_TextureBaker* GetTextureBaker() {
    return reinterpret_cast<ModdingAPI::Exposed::MB3_TextureBaker*(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1910F60))(this);
  }
  void Apply(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_MeshCombiner::GenerateUV2Delegate* uv2GenerationMethod) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_MeshCombiner::GenerateUV2Delegate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19111D0))(this, uv2GenerationMethod);
  }
  void Apply(bool triangles, bool vertices, bool normals, bool tangents, bool uvs, bool uv2, bool uv3, bool uv4, bool colors, bool bones, bool blendShapesFlag, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_MeshCombiner::GenerateUV2Delegate* uv2GenerationMethod) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_MeshCombiner::GenerateUV2Delegate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19112D0))(this, triangles, vertices, normals, tangents, uvs, uv2, uv3, uv4, colors, bones, blendShapesFlag, uv2GenerationMethod);
  }
  bool CombinedMeshContains(ModdingAPI::Exposed::UnityEngine::GameObject* go) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1911490))(this, go);
  }
  void UpdateGameObjects(ModdingAPI::Exposed::UnityEngine::GameObject_array* gos, bool recalcBounds, bool updateVertices, bool updateNormals, bool updateTangents, bool updateUV, bool updateUV1, bool updateUV2, bool updateColors, bool updateSkinningInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*, ModdingAPI::Exposed::UnityEngine::GameObject_array*, bool, bool, bool, bool, bool, bool, bool, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19114D0))(this, gos, recalcBounds, updateVertices, updateNormals, updateTangents, updateUV, updateUV1, updateUV2, updateColors, updateSkinningInfo);
  }
  void UpdateSkinnedMeshApproximateBounds() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1911650))(this);
  }
  void UpdateSkinnedMeshApproximateBoundsFromBones() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19116B0))(this);
  }
  void UpdateSkinnedMeshApproximateBoundsFromBounds() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1911710))(this);
  }
  bool _ValidateForUpdateSkinnedMeshBounds() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1911770))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MB3_MeshBakerCommon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19119E0))(this);
  }
};
}