// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Matrix4x4.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3Int.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Tilemaps.TileData.hpp"


namespace ModdingAPI::Exposed::UnityEngine::Tilemaps {
struct __Tile_Il2CppStaticFields {
};

struct __Tile_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_RefreshTile;
  VirtualInvokeData _5_GetTileData;
  VirtualInvokeData _6_GetTileAnimationData;
  VirtualInvokeData _7_StartUp;
};

struct __Tile_Il2CppClass {
  Il2CppClass_1 _1;
  __Tile_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Tile_Il2CppVtbl vtbl;
};

class Tile {
public:
  // Il2Cpp fields:
  __Tile_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::Sprite* m_Sprite;
  ModdingAPI::Exposed::UnityEngine::Color m_Color;
  ModdingAPI::Exposed::UnityEngine::Matrix4x4 m_Transform;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_InstancedGameObject;
  int32_t m_Flags;
  int32_t m_ColliderType;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Tilemaps::Tile*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x158FAA0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Sprite* get_sprite() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Sprite*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Tilemaps::Tile*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xADD890))(this);
  }
  void set_sprite(ModdingAPI::Exposed::UnityEngine::Sprite* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Tilemaps::Tile*, ModdingAPI::Exposed::UnityEngine::Sprite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3E0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Color get_color() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Tilemaps::Tile*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE2BFF0))(this);
  }
  void set_color(ModdingAPI::Exposed::UnityEngine::Color value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Tilemaps::Tile*, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11C2560))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Matrix4x4 get_transform() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Matrix4x4(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Tilemaps::Tile*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x158FB90))(this);
  }
  void set_transform(ModdingAPI::Exposed::UnityEngine::Matrix4x4 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Tilemaps::Tile*, ModdingAPI::Exposed::UnityEngine::Matrix4x4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x158FBC0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::GameObject* get_gameObject() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Tilemaps::Tile*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13FCEA0))(this);
  }
  void set_gameObject(ModdingAPI::Exposed::UnityEngine::GameObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Tilemaps::Tile*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x477710))(this, value);
  }
  int32_t get_flags() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Tilemaps::Tile*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x158FBE0))(this);
  }
  void set_flags(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Tilemaps::Tile*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x48B450))(this, value);
  }
  int32_t get_colliderType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Tilemaps::Tile*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x158FBF0))(this);
  }
  void set_colliderType(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Tilemaps::Tile*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC73810))(this, value);
  }
  void GetTileData(ModdingAPI::Exposed::UnityEngine::Vector3Int position, ModdingAPI::Exposed::UnityEngine::Tilemaps::ITilemap* tilemap, ModdingAPI::Exposed::UnityEngine::Tilemaps::TileData tileData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Tilemaps::Tile*, ModdingAPI::Exposed::UnityEngine::Vector3Int, ModdingAPI::Exposed::UnityEngine::Tilemaps::ITilemap*, ModdingAPI::Exposed::UnityEngine::Tilemaps::TileData)>(Helpers::Memory::GetInstance().MakeAbsolute(0x158FC00))(this, position, tilemap, tileData);
  }
};
}