// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System {
struct __TypeSpec_Il2CppStaticFields {
};

struct __TypeSpec_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __TypeSpec_Il2CppClass {
  Il2CppClass_1 _1;
  __TypeSpec_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TypeSpec_Il2CppVtbl vtbl;
};

class TypeSpec {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C2FAA0;
  static inline    __TypeSpec_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __TypeSpec_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__TypeSpec_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __TypeSpec_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::TypeIdentifier* name;
  System_String* assembly_name;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* nested;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* generic_params;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* modifier_spec;
  bool is_byref;
  System_String* display_fullname;

  // Member methods:
  bool get_HasModifiers() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::TypeSpec*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA48CF0))(this);
  }
  System_String* GetDisplayFullName(int32_t flags) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::TypeSpec*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1052230))(this, flags);
  }
  ModdingAPI::Exposed::System::Text::StringBuilder* GetModifierString(ModdingAPI::Exposed::System::Text::StringBuilder* sb) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::StringBuilder*(__fastcall*)(ModdingAPI::Exposed::System::TypeSpec*, ModdingAPI::Exposed::System::Text::StringBuilder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1052960))(this, sb);
  }
  System_String* get_DisplayFullName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::TypeSpec*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1052B70))(this);
  }
  ModdingAPI::Exposed::System::Type* Resolve(ModdingAPI::Exposed::System::Func_T__TResult_* assemblyResolver, ModdingAPI::Exposed::System::Func_T1__T2__T3__TResult_* typeResolver, bool throwOnError, bool ignoreCase) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::TypeSpec*, ModdingAPI::Exposed::System::Func_T__TResult_*, ModdingAPI::Exposed::System::Func_T1__T2__T3__TResult_*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1052E90))(this, assemblyResolver, typeResolver, throwOnError, ignoreCase);
  }
  void AddName(System_String* type_name) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::TypeSpec*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10537A0))(this, type_name);
  }
  void AddModifier(ModdingAPI::Exposed::System::ModifierSpec* md) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::TypeSpec*, ModdingAPI::Exposed::System::ModifierSpec*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1053950))(this, md);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::TypeSpec*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::System::TypeSpec* Parse(System_String* typeName) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TypeSpec*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1052BA0))(typeName);
  }
  static inline System_String* UnescapeInternalName(System_String* displayName) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1052CB0))(displayName);
  }
  static inline void SkipSpace(System_String* name, int32_t pos) {
    reinterpret_cast<void(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1053AD0))(name, pos);
  }
  static inline void BoundCheck(int32_t idx, System_String* s) {
    reinterpret_cast<void(__fastcall*)(int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1053BC0))(idx, s);
  }
  static inline ModdingAPI::Exposed::System::TypeIdentifier* ParsedTypeIdentifier(System_String* displayName) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TypeIdentifier*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1053C90))(displayName);
  }
  static inline ModdingAPI::Exposed::System::TypeSpec* Parse(System_String* name, int32_t p, bool is_recurse, bool allow_aqn) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TypeSpec*(__fastcall*)(System_String*, int32_t, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1053CA0))(name, p, is_recurse, allow_aqn);
  }
};
}