// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Diagnostics::Tracing {
struct __Statics_Il2CppStaticFields {
  int32_t IntPtrType;
  int32_t UIntPtrType;
  int32_t HexIntPtrType;
};

struct __Statics_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Statics_Il2CppClass {
  Il2CppClass_1 _1;
  __Statics_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Statics_Il2CppVtbl vtbl;
};

class Statics {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C240F8;
  static inline    __Statics_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Statics_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Statics_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Statics_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<int32_t> IntPtrType = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->IntPtrType; }
  );
  static inline __CppStaticProperty<int32_t> UIntPtrType = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->UIntPtrType; }
  );
  static inline __CppStaticProperty<int32_t> HexIntPtrType = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->HexIntPtrType; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::System::Byte_array* MetadataForString(System_String* name, int32_t prefixSize, int32_t suffixSize, int32_t additionalSize) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(System_String*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6490C0))(name, prefixSize, suffixSize, additionalSize);
  }
  static inline void EncodeTags(int32_t tags, int32_t pos, ModdingAPI::Exposed::System::Byte_array* metadata) {
    reinterpret_cast<void(__fastcall*)(int32_t, int32_t, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6492D0))(tags, pos, metadata);
  }
  static inline uint8_t Combine(int32_t settingValue, uint8_t defaultValue) {
    return reinterpret_cast<uint8_t(__fastcall*)(int32_t, uint8_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649340))(settingValue, defaultValue);
  }
  static inline int32_t Combine(int32_t settingValue1, int32_t settingValue2) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649350))(settingValue1, settingValue2);
  }
  static inline void CheckName(System_String* name) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649360))(name);
  }
  static inline bool ShouldOverrideFieldName(System_String* fieldName) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649430))(fieldName);
  }
  static inline int32_t MakeDataType(int32_t baseType, int32_t format) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649470))(baseType, format);
  }
  static inline int32_t Format8(int32_t format, int32_t native) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649480))(format, native);
  }
  static inline int32_t Format16(int32_t format, int32_t native) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649570))(format, native);
  }
  static inline int32_t Format32(int32_t format, int32_t native) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649650))(format, native);
  }
  static inline int32_t Format64(int32_t format, int32_t native) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649750))(format, native);
  }
  static inline int32_t FormatPtr(int32_t format, int32_t native) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649810))(format, native);
  }
  static inline Il2CppObject* CreateInstance(ModdingAPI::Exposed::System::Type* type, ModdingAPI::Exposed::System::Object_array* parameters) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Object_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649900))(type, parameters);
  }
  static inline bool IsValueType(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649930))(type);
  }
  static inline bool IsEnum(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649960))(type);
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_* GetProperties(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_*(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649990))(type);
  }
  static inline ModdingAPI::Exposed::System::Reflection::MethodInfo* GetGetMethod(ModdingAPI::Exposed::System::Reflection::PropertyInfo* propInfo) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Reflection::MethodInfo*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::PropertyInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6499C0))(propInfo);
  }
  static inline ModdingAPI::Exposed::System::Reflection::MethodInfo* GetDeclaredStaticMethod(ModdingAPI::Exposed::System::Type* declaringType, System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Reflection::MethodInfo*(__fastcall*)(ModdingAPI::Exposed::System::Type*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6499F0))(declaringType, name);
  }
  static inline bool HasCustomAttribute(ModdingAPI::Exposed::System::Reflection::PropertyInfo* propInfo, ModdingAPI::Exposed::System::Type* attributeType) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Reflection::PropertyInfo*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649A10))(propInfo, attributeType);
  }
  static inline ModdingAPI::Exposed::System::Type_array* GetGenericArguments(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type_array*(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649A50))(type);
  }
  static inline ModdingAPI::Exposed::System::Type* FindEnumerableElementType(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649A80))(type);
  }
  static inline bool IsGenericMatch(ModdingAPI::Exposed::System::Type* type, Il2CppObject* openType) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649DE0))(type, openType);
  }
  static inline ModdingAPI::Exposed::System::Delegate* CreateDelegate(ModdingAPI::Exposed::System::Type* delegateType, ModdingAPI::Exposed::System::Reflection::MethodInfo* methodInfo) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Delegate*(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Reflection::MethodInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649F20))(delegateType, methodInfo);
  }
  static inline ModdingAPI::Exposed::System::Diagnostics::Tracing::TraceLoggingTypeInfo* GetTypeInfoInstance(ModdingAPI::Exposed::System::Type* dataType, ModdingAPI::Exposed::System::Collections::Generic::List_T_* recursionCheck) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Diagnostics::Tracing::TraceLoggingTypeInfo*(__fastcall*)(ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x649F50))(dataType, recursionCheck);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x64A300))();
  }
};
}