// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector4.hpp"


namespace ModdingAPI::Exposed {
struct __vp_FPSWeapon_Il2CppStaticFields {
  bool m_DisableAimBreathing;
  bool m_DisableAimSway;
  bool m_DisableAimStamina;
  bool m_DisableAimShake;
  bool m_DisableDepthOfField;
};

struct __vp_FPSWeapon_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Init;
  VirtualInvokeData _5_AllowState;
  VirtualInvokeData _6_Refresh;
};

struct __vp_FPSWeapon_Il2CppClass {
  Il2CppClass_1 _1;
  __vp_FPSWeapon_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __vp_FPSWeapon_Il2CppVtbl vtbl;
};

class vp_FPSWeapon {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C35888;
  static inline    vp_FPSWeapon* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C32B10;
  static inline    __vp_FPSWeapon_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline vp_FPSWeapon* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (vp_FPSWeapon**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __vp_FPSWeapon_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__vp_FPSWeapon_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __vp_FPSWeapon_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool Persist;
  ModdingAPI::Exposed::vp_StateManager* m_StateManager;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* States;
  ModdingAPI::Exposed::vp_StateInfo* m_DefaultState;
  bool m_Initialized;
  ModdingAPI::Exposed::UnityEngine::CharacterController* Controller;
  float RenderingZoomDamping;
  bool m_StartCalled;
  float m_FinalZoomTime;
  float RenderingFieldOfView;
  int32_t m_FPSMeshId;
  float m_UnzoomedFieldOfView;
  float m_ZoomedFieldOfView;
  ModdingAPI::Exposed::UnityEngine::Vector2 RenderingClippingPlanes;
  ModdingAPI::Exposed::UnityEngine::Vector3 PositionOffset;
  float PositionSpringStiffness;
  float PositionSpringDamping;
  float PositionKneeling;
  float PositionFallRetract;
  float PositionFallYCancel;
  float PositionPivotSpringStiffness;
  float PositionPivotSpringDamping;
  float PositionSpring2Stiffness;
  float PositionSpring2Damping;
  ModdingAPI::Exposed::UnityEngine::Vector3 PositionWalkSlide;
  ModdingAPI::Exposed::UnityEngine::Vector3 PositionPivot;
  float PositionInputVelocityScale;
  float PositionMaxInputVelocity;
  ModdingAPI::Exposed::vp_Spring* m_PositionSpring;
  ModdingAPI::Exposed::vp_Spring* m_PositionSpring2;
  ModdingAPI::Exposed::vp_Spring* m_PositionPivotSpring;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_WeaponCamera;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_WeaponGroup;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Pivot;
  ModdingAPI::Exposed::UnityEngine::Vector3 RotationOffset;
  float RotationSpringStiffness;
  float RotationSpringDamping;
  float RotationSpring2Stiffness;
  float RotationSpring2Damping;
  ModdingAPI::Exposed::UnityEngine::Vector3 RotationLookSway;
  ModdingAPI::Exposed::UnityEngine::Vector3 RotationStrafeSway;
  ModdingAPI::Exposed::UnityEngine::Vector3 RotationFallSway;
  float RotationSlopeSway;
  float RotationInputVelocityScale;
  float RotationMaxInputVelocity;
  ModdingAPI::Exposed::vp_Spring* m_RotationSpring;
  ModdingAPI::Exposed::vp_Spring* m_RotationSpring2;
  float ShakeSpeed;
  ModdingAPI::Exposed::UnityEngine::Vector3 ShakeAmplitude;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_Shake;
  ModdingAPI::Exposed::UnityEngine::Vector4 BobRate;
  ModdingAPI::Exposed::UnityEngine::Vector4 BobAmplitude;
  float BobInputVelocityScale;
  float BobMaxInputVelocity;
  float m_LastBobSpeed;
  float SwayStartFatigue;
  float SwayMaxFatigue;
  float SwayMotionSpeed;
  ModdingAPI::Exposed::UnityEngine::Vector3 SwayLimits;
  float SwayCrouchScalar;
  ModdingAPI::Exposed::UnityEngine::Vector3 PositionExitOffset;
  ModdingAPI::Exposed::UnityEngine::Vector3 RotationExitOffset;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FXGameObject;
  ModdingAPI::Exposed::UnityEngine::Light* m_LightIndoor;
  ModdingAPI::Exposed::UnityEngine::Light* m_LightOutdoor;
  ModdingAPI::Exposed::UnityEngine::Animator* m_Animator;
  int32_t m_BulletsToReload;
  ModdingAPI::Exposed::GearItem* m_GearItem;
  ModdingAPI::Exposed::GunItem* m_GunItem;
  ModdingAPI::Exposed::FirstPersonWeapon* m_FirstPersonWeaponRightHand;
  ModdingAPI::Exposed::FirstPersonWeapon* m_FirstPersonWeaponLeftHand;
  ModdingAPI::Exposed::FirstPersonWeapon* m_FirstPersonWeaponShoulder;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FirstPersonWeaponRightHandPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FirstPersonWeaponLeftHandPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FirstPersonWeaponShoulderPrefab;
  bool m_UseFirstPersonHands;
  float m_AimingMinYawStepDegrees;
  float m_AimingMaxYawStepDegrees;
  float m_AimingMinYawDegrees;
  float m_AimingMaxYawDegrees;
  float m_BreathingCycleMinPitchDegrees;
  float m_BreathingCycleMaxPitchDegrees;
  float m_KneelingBonusPitch;
  float m_KneelingBonusYaw;
  float m_ColdShakingSpeed;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_ColdShakingAngleLimits;
  float m_ColdShakeAngle;
  float m_CurrentBreathTimePercentAsPitchDegrees;
  float m_CurrentBreathingPercent;
  float m_AimingCurrentYawDegrees;
  float m_StaminaWeaponDropDegrees;
  float m_ShiverTeethChatteringTime;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_RightTemporaryParent;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_LeftTemporaryParent;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ShoulderTemporaryParent;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_MovedChild;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_NewChild;

  // Member methods:
  bool GetStartCalled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE510))(this);
  }
  float get_RenderingFieldOfViewVertical() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFD9E0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::GameObject* get_WeaponCamera() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3EBFD0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_DefaultPosition() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFDB60))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_DefaultRotation() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFDC50))(this);
  }
  bool CanStartAiming() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFE290))(this);
  }
  bool ShouldStopAiming() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFE470))(this);
  }
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFE630))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFEBD0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2000070))(this);
  }
  void FixedUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2000140))(this);
  }
  void UpdateForces(float time, float deltaTime) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2000310))(this, time, deltaTime);
  }
  void AddForce(ModdingAPI::Exposed::UnityEngine::Vector3 positional, ModdingAPI::Exposed::UnityEngine::Vector3 angular) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2000500))(this, positional, angular);
  }
  void AddForce(float xPos, float yPos, float zPos, float xRot, float yRot, float zRot) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, float, float, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2000570))(this, xPos, yPos, zPos, xRot, yRot, zRot);
  }
  void AddForce2(ModdingAPI::Exposed::UnityEngine::Vector3 positional, ModdingAPI::Exposed::UnityEngine::Vector3 angular) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2000620))(this, positional, angular);
  }
  void AddForce2(float xPos, float yPos, float zPos, float xRot, float yRot, float zRot) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, float, float, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20006A0))(this, xPos, yPos, zPos, xRot, yRot, zRot);
  }
  void ApplyFallImpact(float impact) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2000750))(this, impact);
  }
  void AddForce(ModdingAPI::Exposed::UnityEngine::Vector3 force) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20007C0))(this, force);
  }
  void AddForce(float x, float y, float z) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2000800))(this, x, y, z);
  }
  void UpdateZoom(float time) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2000850))(this, time);
  }
  void Zoom() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2000B50))(this);
  }
  void SnapZoom() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2000BB0))(this);
  }
  void UpdateShakes(float smoothDeltaTime) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2000C90))(this, smoothDeltaTime);
  }
  void DoWeaponBob(float speed, float time) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2000E00))(this, speed, time);
  }
  void DoWeaponSwaying(ModdingAPI::Exposed::UnityEngine::Vector3 velocity, float time, float deltaTime) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, ModdingAPI::Exposed::UnityEngine::Vector3, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2001160))(this, velocity, time, deltaTime);
  }
  void DoAiming(float fixedDeltaTime) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20020C0))(this, fixedDeltaTime);
  }
  void ResetSprings(float positionReset, float rotationReset, float positionPauseTime, float rotationPauseTime) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2002CB0))(this, positionReset, rotationReset, positionPauseTime, rotationPauseTime);
  }
  void Refresh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2003040))(this);
  }
  void SnapPivot() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20036D0))(this);
  }
  void SetPivotVisible(bool visible) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2003AE0))(this, visible);
  }
  void SnapSprings() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2003BC0))(this);
  }
  void StopSprings() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20041C0))(this);
  }
  void TurnOnEffects() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2004240))(this);
  }
  void DisableEffectsObject() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2004650))(this);
  }
  void TurnOffEffects(bool hardStop) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2004760))(this, hardStop);
  }
  void AnimateToExitOffset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2004AC0))(this);
  }
  void AnimateToDefaultPosition() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2004B10))(this);
  }
  void NoWeaponCameraError() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2004B80))(this);
  }
  int32_t GetAmmoCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2004C20))(this);
  }
  bool AnimIsPlaying(int32_t id, int32_t layer) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2004D00))(this, id, layer);
  }
  void PlayFireAnimation() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2004E00))(this);
  }
  void OnFireAnimationComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2005460))(this);
  }
  void ToggleZoom(bool zoomed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2005600))(this, zoomed);
  }
  void UnJam() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2005810))(this);
  }
  void OnUnJamComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2005B80))(this);
  }
  void SetBulletsToReload(int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2005E10))(this, count);
  }
  bool ReloadInProgress() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2006620))(this);
  }
  void OnReloadComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2006630))(this);
  }
  void MaybeSpawnFirstPersonWeapon() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2006840))(this);
  }
  ModdingAPI::Exposed::UnityEngine::GameObject* GetOrCreateTempParent(System_String* objectName, ModdingAPI::Exposed::UnityEngine::Transform* parent) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, System_String*, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2006890))(this, objectName, parent);
  }
  void MaybeSpawnRightHandProp() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2006B60))(this);
  }
  void MaybeSpawnLeftHandProp() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2007050))(this);
  }
  void MaybeSpawnShoulderProp() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2007540))(this);
  }
  bool DecrementBulletsToReload(int32_t n) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2007A30))(this, n);
  }
  void CancelReload() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2007C80))(this);
  }
  void Reset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2007DF0))(this);
  }
  void UpdateBulletsForReload(int32_t numToShow) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2008040))(this, numToShow);
  }
  void ShowNextLoadedBullet() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20081C0))(this);
  }
  void EnableReloadBulletInstance(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2008330))(this, enable);
  }
  void AttachObjectChildCopy(ModdingAPI::Exposed::UnityEngine::GameObject* parentObject) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20084B0))(this, parentObject);
  }
  void RestoreChildObject() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20085D0))(this);
  }
  bool IsAnimationPlayingOnAnyLayer(int32_t hash) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20089E0))(this, hash);
  }
  void PlayAnimation(int32_t hash) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2008B60))(this, hash);
  }
  void MoveToTempParent() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2008E20))(this);
  }
  void CopyChildObject(ModdingAPI::Exposed::UnityEngine::GameObject* newProp) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2009460))(this, newProp);
  }
  void OnUnJamRoundsUnloaded() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2009A10))(this);
  }
  void OnRoundsUnloaded() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2009A50))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::vp_FPSWeapon*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2009E70))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<bool> m_DisableAimBreathing = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_DisableAimBreathing; }
  );
  static inline __CppStaticProperty<bool> m_DisableAimSway = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_DisableAimSway; }
  );
  static inline __CppStaticProperty<bool> m_DisableAimStamina = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_DisableAimStamina; }
  );
  static inline __CppStaticProperty<bool> m_DisableAimShake = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_DisableAimShake; }
  );
  static inline __CppStaticProperty<bool> m_DisableDepthOfField = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_DisableDepthOfField; }
  );

  // Static methods:
  static inline bool GetDisableAimBreathing() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFDD40))();
  }
  static inline bool GetDisableAimSway() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFDDC0))();
  }
  static inline bool GetDisableAimStamina() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFDE40))();
  }
  static inline bool GetDisableAimShake() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFDEC0))();
  }
  static inline bool GetDisableDepthOfField() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFDF40))();
  }
  static inline void SetDisableAimBreathing(bool enable) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFDFC0))(enable);
  }
  static inline void SetDisableAimSway(bool enable) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFE050))(enable);
  }
  static inline void SetDisableAimStamina(bool enable) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFE0E0))(enable);
  }
  static inline void SetDisableAimShake(bool enable) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFE170))(enable);
  }
  static inline void SetDisableDepthOfField(bool enable) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FFE200))(enable);
  }
};
}