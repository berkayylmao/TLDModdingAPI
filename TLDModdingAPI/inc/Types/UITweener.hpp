// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __UITweener_Il2CppStaticFields {
  ModdingAPI::Exposed::UITweener* current;
};

struct __UITweener_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Start;
  VirtualInvokeData _6_SetStartToCurrentValue;
  VirtualInvokeData _7_SetEndToCurrentValue;
  VirtualInvokeData _65535__ctor;
};

struct __UITweener_Il2CppClass {
  Il2CppClass_1 _1;
  __UITweener_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __UITweener_Il2CppVtbl vtbl;
};

class UITweener {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C380B8;
  static inline    __UITweener_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __UITweener_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__UITweener_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __UITweener_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  int32_t method;
  int32_t style;
  ModdingAPI::Exposed::UnityEngine::AnimationCurve* animationCurve;
  bool ignoreTimeScale;
  float delay;
  float duration;
  bool steeperCurves;
  int32_t tweenGroup;
  bool doNotResetOnDisable;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* onFinished;
  ModdingAPI::Exposed::UnityEngine::GameObject* eventReceiver;
  System_String* callWhenFinished;
  bool mStarted;
  float mStartTime;
  float mDuration;
  float mAmountPerDelta;
  float mFactor;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* mTemp;

  // Member methods:
  float get_amountPerDelta() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UITweener*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2048CB0))(this);
  }
  float get_tweenFactor() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UITweener*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56F0E0))(this);
  }
  void set_tweenFactor(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2048DD0))(this, value);
  }
  int32_t get_direction() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UITweener*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2048EA0))(this);
  }
  void Reset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2048ED0))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2048F10))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2048F20))(this);
  }
  void SetOnFinished(ModdingAPI::Exposed::EventDelegate::Callback* del) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*, ModdingAPI::Exposed::EventDelegate::Callback*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2049590))(this, del);
  }
  void SetOnFinished(ModdingAPI::Exposed::EventDelegate* del) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*, ModdingAPI::Exposed::EventDelegate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2049640))(this, del);
  }
  void AddOnFinished(ModdingAPI::Exposed::EventDelegate::Callback* del) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*, ModdingAPI::Exposed::EventDelegate::Callback*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2049770))(this, del);
  }
  void AddOnFinished(ModdingAPI::Exposed::EventDelegate* del) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*, ModdingAPI::Exposed::EventDelegate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2049820))(this, del);
  }
  void RemoveOnFinished(ModdingAPI::Exposed::EventDelegate* del) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*, ModdingAPI::Exposed::EventDelegate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2049970))(this, del);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2049A20))(this);
  }
  void Sample(float factor, bool isFinished) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2049A30))(this, factor, isFinished);
  }
  float BounceLogic(float val) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UITweener*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x178CA10))(this, val);
  }
  void Play() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2049D00))(this);
  }
  void PlayForward() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2049D00))(this);
  }
  void PlayReverse() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2049D10))(this);
  }
  void Play(bool forward) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2049D20))(this, forward);
  }
  void ResetToBeginning() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2049E50))(this);
  }
  void Toggle() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2049E90))(this);
  }
  void SetStartToCurrentValue() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void SetEndToCurrentValue() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UITweener*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2049FB0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::UITweener*> current = __CppStaticProperty<ModdingAPI::Exposed::UITweener*>(
   []() { return &GetStaticClassInstance()->pStaticFields->current; }
  );
};
}