// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Threading {
struct __Monitor_Il2CppStaticFields {
};

struct __Monitor_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Monitor_Il2CppClass {
  Il2CppClass_1 _1;
  __Monitor_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Monitor_Il2CppVtbl vtbl;
};

class Monitor {
public:
  // Il2Cpp fields:
  __Monitor_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline void Enter(Il2CppObject* obj) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1095CB0))(obj);
  }
  static inline void Enter(Il2CppObject* obj, bool lockTaken) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1095CE0))(obj, lockTaken);
  }
  static inline void ThrowLockTakenException() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1095D10))();
  }
  static inline void Exit(Il2CppObject* obj) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1095D80))(obj);
  }
  static inline void TryEnter(Il2CppObject* obj, bool lockTaken) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1095DB0))(obj, lockTaken);
  }
  static inline bool Wait(Il2CppObject* obj, int32_t millisecondsTimeout, bool exitContext) {
    return reinterpret_cast<bool(__fastcall*)(Il2CppObject*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1095DE0))(obj, millisecondsTimeout, exitContext);
  }
  static inline bool Wait(Il2CppObject* obj, int32_t millisecondsTimeout) {
    return reinterpret_cast<bool(__fastcall*)(Il2CppObject*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1095F90))(obj, millisecondsTimeout);
  }
  static inline void Pulse(Il2CppObject* obj) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1095FA0))(obj);
  }
  static inline void PulseAll(Il2CppObject* obj) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1096140))(obj);
  }
  static inline bool Monitor_test_synchronised(Il2CppObject* obj) {
    return reinterpret_cast<bool(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10962E0))(obj);
  }
  static inline void Monitor_pulse(Il2CppObject* obj) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1096330))(obj);
  }
  static inline void ObjPulse(Il2CppObject* obj) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10963B0))(obj);
  }
  static inline void Monitor_pulse_all(Il2CppObject* obj) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10964E0))(obj);
  }
  static inline void ObjPulseAll(Il2CppObject* obj) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1096560))(obj);
  }
  static inline bool Monitor_wait(Il2CppObject* obj, int32_t ms) {
    return reinterpret_cast<bool(__fastcall*)(Il2CppObject*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1096680))(obj, ms);
  }
  static inline bool ObjWait(bool exitContext, int32_t millisecondsTimeout, Il2CppObject* obj) {
    return reinterpret_cast<bool(__fastcall*)(bool, int32_t, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10966B0))(exitContext, millisecondsTimeout, obj);
  }
  static inline void try_enter_with_atomic_var(Il2CppObject* obj, int32_t millisecondsTimeout, bool lockTaken) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10967E0))(obj, millisecondsTimeout, lockTaken);
  }
  static inline void ReliableEnterTimeout(Il2CppObject* obj, int32_t timeout, bool lockTaken) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1096840))(obj, timeout, lockTaken);
  }
  static inline void ReliableEnter(Il2CppObject* obj, bool lockTaken) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1096970))(obj, lockTaken);
  }
};
}