// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Net {
struct __ServicePointManager_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Collections::Specialized::HybridDictionary* servicePoints;
  ModdingAPI::Exposed::System::Net::ICertificatePolicy* policy;
  int32_t defaultConnectionLimit;
  int32_t maxServicePointIdleTime;
  int32_t maxServicePoints;
  int32_t dnsRefreshTimeout;
  bool _checkCRL;
  int32_t _securityProtocol;
  bool expectContinue;
  bool useNagle;
  ModdingAPI::Exposed::System::Net::ServerCertValidationCallback* server_cert_cb;
  bool tcp_keepalive;
  int32_t tcp_keepalive_time;
  int32_t tcp_keepalive_interval;
};

struct __ServicePointManager_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ServicePointManager_Il2CppClass {
  Il2CppClass_1 _1;
  __ServicePointManager_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ServicePointManager_Il2CppVtbl vtbl;
};

class ServicePointManager {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C3DF08;
  static inline    __ServicePointManager_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ServicePointManager_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ServicePointManager_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ServicePointManager_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Specialized::HybridDictionary*> servicePoints = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Specialized::HybridDictionary*>(
   []() { return &GetStaticClassInstance()->pStaticFields->servicePoints; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Net::ICertificatePolicy*> policy = __CppStaticProperty<ModdingAPI::Exposed::System::Net::ICertificatePolicy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->policy; }
  );
  static inline __CppStaticProperty<int32_t> defaultConnectionLimit = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->defaultConnectionLimit; }
  );
  static inline __CppStaticProperty<int32_t> maxServicePointIdleTime = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->maxServicePointIdleTime; }
  );
  static inline __CppStaticProperty<int32_t> maxServicePoints = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->maxServicePoints; }
  );
  static inline __CppStaticProperty<int32_t> dnsRefreshTimeout = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->dnsRefreshTimeout; }
  );
  static inline __CppStaticProperty<bool> _checkCRL = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->_checkCRL; }
  );
  static inline __CppStaticProperty<int32_t> _securityProtocol = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->_securityProtocol; }
  );
  static inline __CppStaticProperty<bool> expectContinue = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->expectContinue; }
  );
  static inline __CppStaticProperty<bool> useNagle = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->useNagle; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Net::ServerCertValidationCallback*> server_cert_cb = __CppStaticProperty<ModdingAPI::Exposed::System::Net::ServerCertValidationCallback*>(
   []() { return &GetStaticClassInstance()->pStaticFields->server_cert_cb; }
  );
  static inline __CppStaticProperty<bool> tcp_keepalive = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->tcp_keepalive; }
  );
  static inline __CppStaticProperty<int32_t> tcp_keepalive_time = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->tcp_keepalive_time; }
  );
  static inline __CppStaticProperty<int32_t> tcp_keepalive_interval = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->tcp_keepalive_interval; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xB24FE0))();
  }
  static inline ModdingAPI::Exposed::System::Net::ICertificatePolicy* GetLegacyCertificatePolicy() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Net::ICertificatePolicy*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xB251B0))();
  }
  static inline bool get_CheckCertificateRevocationList() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xB25250))();
  }
  static inline int32_t get_DnsRefreshTimeout() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xB252F0))();
  }
  static inline int32_t get_SecurityProtocol() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xB25390))();
  }
  static inline ModdingAPI::Exposed::System::Net::ServerCertValidationCallback* get_ServerCertValidationCallback() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Net::ServerCertValidationCallback*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xB25430))();
  }
  static inline ModdingAPI::Exposed::System::Net::Security::RemoteCertificateValidationCallback* get_ServerCertificateValidationCallback() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Net::Security::RemoteCertificateValidationCallback*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xB254D0))();
  }
  static inline ModdingAPI::Exposed::System::Net::ServicePoint* FindServicePoint(ModdingAPI::Exposed::System::Uri* address, ModdingAPI::Exposed::System::Net::IWebProxy* proxy) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Net::ServicePoint*(__fastcall*)(ModdingAPI::Exposed::System::Uri*, ModdingAPI::Exposed::System::Net::IWebProxy*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB255B0))(address, proxy);
  }
};
}