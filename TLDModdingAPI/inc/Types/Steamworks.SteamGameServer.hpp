// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::Steamworks::AppId_t.hpp"
#include "ModdingAPI.Exposed.Steamworks.CSteamID.hpp"
#include "ModdingAPI::Exposed::Steamworks::CSteamID.hpp"
#include "ModdingAPI.Exposed.Steamworks.HAuthTicket.hpp"
#include "ModdingAPI::Exposed::Steamworks::HAuthTicket.hpp"
#include "ModdingAPI.Exposed.Steamworks.SteamAPICall_t.hpp"


namespace ModdingAPI::Exposed::Steamworks {
struct __SteamGameServer_Il2CppStaticFields {
};

struct __SteamGameServer_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SteamGameServer_Il2CppClass {
  Il2CppClass_1 _1;
  __SteamGameServer_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SteamGameServer_Il2CppVtbl vtbl;
};

class SteamGameServer {
public:
  // Il2Cpp fields:
  __SteamGameServer_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline bool InitGameServer(uint32_t unIP, uint16_t usGamePort, uint16_t usQueryPort, uint32_t unFlags, ModdingAPI::Exposed::Steamworks::AppId_t nGameAppId, System_String* pchVersionString) {
    return reinterpret_cast<bool(__fastcall*)(uint32_t, uint16_t, uint16_t, uint32_t, ModdingAPI::Exposed::Steamworks::AppId_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DF1C0))(unIP, usGamePort, usQueryPort, unFlags, nGameAppId, pchVersionString);
  }
  static inline void SetProduct(System_String* pszProduct) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DF4E0))(pszProduct);
  }
  static inline void SetGameDescription(System_String* pszGameDescription) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DF7A0))(pszGameDescription);
  }
  static inline void SetModDir(System_String* pszModDir) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DFA60))(pszModDir);
  }
  static inline void SetDedicatedServer(bool bDedicated) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DFD20))(bDedicated);
  }
  static inline void LogOn(System_String* pszToken) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26DFDE0))(pszToken);
  }
  static inline void LogOnAnonymous() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E00A0))();
  }
  static inline void LogOff() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E0150))();
  }
  static inline bool BLoggedOn() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E0200))();
  }
  static inline bool BSecure() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E02B0))();
  }
  static inline ModdingAPI::Exposed::Steamworks::CSteamID GetSteamID() {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::CSteamID(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E0360))();
  }
  static inline bool WasRestartRequested() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E0490))();
  }
  static inline void SetMaxPlayerCount(int32_t cPlayersMax) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E0540))(cPlayersMax);
  }
  static inline void SetBotPlayerCount(int32_t cBotplayers) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E05F0))(cBotplayers);
  }
  static inline void SetServerName(System_String* pszServerName) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E06A0))(pszServerName);
  }
  static inline void SetMapName(System_String* pszMapName) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E0960))(pszMapName);
  }
  static inline void SetPasswordProtected(bool bPasswordProtected) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E0C20))(bPasswordProtected);
  }
  static inline void SetSpectatorPort(uint16_t unSpectatorPort) {
    reinterpret_cast<void(__fastcall*)(uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E0CE0))(unSpectatorPort);
  }
  static inline void SetSpectatorServerName(System_String* pszSpectatorServerName) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E0DA0))(pszSpectatorServerName);
  }
  static inline void ClearAllKeyValues() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E1060))();
  }
  static inline void SetKeyValue(System_String* pKey, System_String* pValue) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E1110))(pKey, pValue);
  }
  static inline void SetGameTags(System_String* pchGameTags) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E1550))(pchGameTags);
  }
  static inline void SetGameData(System_String* pchGameData) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E1810))(pchGameData);
  }
  static inline void SetRegion(System_String* pszRegion) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E1AD0))(pszRegion);
  }
  static inline bool SendUserConnectAndAuthenticate(uint32_t unIPClient, ModdingAPI::Exposed::System::Byte_array* pvAuthBlob, uint32_t cubAuthBlobSize, ModdingAPI::Exposed::Steamworks::CSteamID pSteamIDUser) {
    return reinterpret_cast<bool(__fastcall*)(uint32_t, ModdingAPI::Exposed::System::Byte_array*, uint32_t, ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E1D90))(unIPClient, pvAuthBlob, cubAuthBlobSize, pSteamIDUser);
  }
  static inline ModdingAPI::Exposed::Steamworks::CSteamID CreateUnauthenticatedUserConnection() {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::CSteamID(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E1E90))();
  }
  static inline void SendUserDisconnect(ModdingAPI::Exposed::Steamworks::CSteamID steamIDUser) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E1FC0))(steamIDUser);
  }
  static inline bool BUpdateUserData(ModdingAPI::Exposed::Steamworks::CSteamID steamIDUser, System_String* pchPlayerName, uint32_t uScore) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, System_String*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E2080))(steamIDUser, pchPlayerName, uScore);
  }
  static inline ModdingAPI::Exposed::Steamworks::HAuthTicket GetAuthSessionTicket(ModdingAPI::Exposed::System::Byte_array* pTicket, int32_t cbMaxTicket, uint32_t pcbTicket) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::HAuthTicket(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, int32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E2380))(pTicket, cbMaxTicket, pcbTicket);
  }
  static inline int32_t BeginAuthSession(ModdingAPI::Exposed::System::Byte_array* pAuthTicket, int32_t cbAuthTicket, ModdingAPI::Exposed::Steamworks::CSteamID steamID) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, int32_t, ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E24F0))(pAuthTicket, cbAuthTicket, steamID);
  }
  static inline void EndAuthSession(ModdingAPI::Exposed::Steamworks::CSteamID steamID) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E25D0))(steamID);
  }
  static inline void CancelAuthTicket(ModdingAPI::Exposed::Steamworks::HAuthTicket hAuthTicket) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HAuthTicket)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E2690))(hAuthTicket);
  }
  static inline int32_t UserHasLicenseForApp(ModdingAPI::Exposed::Steamworks::CSteamID steamID, ModdingAPI::Exposed::Steamworks::AppId_t appID) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, ModdingAPI::Exposed::Steamworks::AppId_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E2740))(steamID, appID);
  }
  static inline bool RequestUserGroupStatus(ModdingAPI::Exposed::Steamworks::CSteamID steamIDUser, ModdingAPI::Exposed::Steamworks::CSteamID steamIDGroup) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E2810))(steamIDUser, steamIDGroup);
  }
  static inline void GetGameplayStats() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E28E0))();
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t GetServerReputation() {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E2990))();
  }
  static inline uint32_t GetPublicIP() {
    return reinterpret_cast<uint32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E2AC0))();
  }
  static inline bool HandleIncomingPacket(ModdingAPI::Exposed::System::Byte_array* pData, int32_t cbData, uint32_t srcIP, uint16_t srcPort) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, int32_t, uint32_t, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E2B70))(pData, cbData, srcIP, srcPort);
  }
  static inline int32_t GetNextOutgoingPacket(ModdingAPI::Exposed::System::Byte_array* pOut, int32_t cbMaxOut, uint32_t pNetAdr, uint16_t pPort) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, int32_t, uint32_t, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E2C70))(pOut, cbMaxOut, pNetAdr, pPort);
  }
  static inline void EnableHeartbeats(bool bActive) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E2D70))(bActive);
  }
  static inline void SetHeartbeatInterval(int32_t iHeartbeatInterval) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E2E30))(iHeartbeatInterval);
  }
  static inline void ForceHeartbeat() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E2EE0))();
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t AssociateWithClan(ModdingAPI::Exposed::Steamworks::CSteamID steamIDClan) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E2F90))(steamIDClan);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t ComputeNewPlayerCompatibility(ModdingAPI::Exposed::Steamworks::CSteamID steamIDNewPlayer) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26E30D0))(steamIDNewPlayer);
  }
};
}