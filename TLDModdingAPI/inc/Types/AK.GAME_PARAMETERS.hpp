// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::AK {
struct __GAME_PARAMETERS_Il2CppStaticFields {
  uint32_t AMBIENTVOLUME;
  uint32_t AURORAELECTROLIZER;
  uint32_t AURORASTRENGTH;
  uint32_t BEARANGERLEVEL;
  uint32_t BEARDISTANCE;
  uint32_t BREATHLEVEL;
  uint32_t CONDITIONHEARTBEAT;
  uint32_t COOKINGSTATE;
  uint32_t DISTANCE;
  uint32_t EARRINGINGVOLUME;
  uint32_t ELEVATION;
  uint32_t FIREBLENDSTATE;
  uint32_t FOOTSTEPWINDDUCKER;
  uint32_t GLOBALVOLUME;
  uint32_t GUIWINDLEVELLING;
  uint32_t ICECRACKINGVOLUME;
  uint32_t INTERACTIVEBUSMETER;
  uint32_t INTERACTIVEDUCKSMETER;
  uint32_t INTERIOREXTERIOR;
  uint32_t INVENTORYWEIGHTGENERAL;
  uint32_t INVENTORYWEIGHTMETAL;
  uint32_t INVENTORYWEIGHTWATER;
  uint32_t INVENTORYWEIGHTWOOD;
  uint32_t ITEMCONDITION;
  uint32_t LIGHTSOURCEFLICKER;
  uint32_t LPFILTERLEVEL;
  uint32_t MASTERVOLUME;
  uint32_t MUSICDUCKSMETER;
  uint32_t MUSICVOLUME;
  uint32_t PAINPULSE;
  uint32_t PLAYERBOWFATIGUE;
  uint32_t PLAYERINCLINE;
  uint32_t PLAYERVELOCITY;
  uint32_t PLAYERWINDANGLE;
  uint32_t PREDATORDISTANCE;
  uint32_t ROPEVELOCITY;
  uint32_t SFXVOLUME;
  uint32_t SPEECHAUTODUCKER;
  uint32_t SPEED;
  uint32_t SS_AIR_FEAR;
  uint32_t SS_AIR_FREEFALL;
  uint32_t SS_AIR_FURY;
  uint32_t SS_AIR_MONTH;
  uint32_t SS_AIR_PRESENCE;
  uint32_t SS_AIR_RPM;
  uint32_t SS_AIR_SIZE;
  uint32_t SS_AIR_STORM;
  uint32_t SS_AIR_TIMEOFDAY;
  uint32_t SS_AIR_TURBULENCE;
  uint32_t STIMPACKSTRENGTH;
  uint32_t STOVEDOORS;
  uint32_t TEMPERATURE;
  uint32_t TIMEOFDAY;
  uint32_t VOVOLUME;
  uint32_t WEAPONFIRE;
  uint32_t WEAPONSHELLNUMDROPPED;
  uint32_t WINDACTUALSPEED;
  uint32_t WINDGUSTINTENSITY;
  uint32_t WINDGUSTSSIDECHAIN;
  uint32_t WINDINTENSITYBLEND;
  uint32_t WOLFATTACKMUTE;
  uint32_t WOOZYFADE;
};

struct __GAME_PARAMETERS_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __GAME_PARAMETERS_Il2CppClass {
  Il2CppClass_1 _1;
  __GAME_PARAMETERS_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __GAME_PARAMETERS_Il2CppVtbl vtbl;
};

class GAME_PARAMETERS {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C44908;
  static inline    __GAME_PARAMETERS_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __GAME_PARAMETERS_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__GAME_PARAMETERS_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __GAME_PARAMETERS_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AK::GAME_PARAMETERS*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<uint32_t> AMBIENTVOLUME = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->AMBIENTVOLUME; }
  );
  static inline __CppStaticProperty<uint32_t> AURORAELECTROLIZER = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->AURORAELECTROLIZER; }
  );
  static inline __CppStaticProperty<uint32_t> AURORASTRENGTH = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->AURORASTRENGTH; }
  );
  static inline __CppStaticProperty<uint32_t> BEARANGERLEVEL = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->BEARANGERLEVEL; }
  );
  static inline __CppStaticProperty<uint32_t> BEARDISTANCE = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->BEARDISTANCE; }
  );
  static inline __CppStaticProperty<uint32_t> BREATHLEVEL = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->BREATHLEVEL; }
  );
  static inline __CppStaticProperty<uint32_t> CONDITIONHEARTBEAT = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->CONDITIONHEARTBEAT; }
  );
  static inline __CppStaticProperty<uint32_t> COOKINGSTATE = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->COOKINGSTATE; }
  );
  static inline __CppStaticProperty<uint32_t> DISTANCE = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->DISTANCE; }
  );
  static inline __CppStaticProperty<uint32_t> EARRINGINGVOLUME = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->EARRINGINGVOLUME; }
  );
  static inline __CppStaticProperty<uint32_t> ELEVATION = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ELEVATION; }
  );
  static inline __CppStaticProperty<uint32_t> FIREBLENDSTATE = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->FIREBLENDSTATE; }
  );
  static inline __CppStaticProperty<uint32_t> FOOTSTEPWINDDUCKER = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->FOOTSTEPWINDDUCKER; }
  );
  static inline __CppStaticProperty<uint32_t> GLOBALVOLUME = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->GLOBALVOLUME; }
  );
  static inline __CppStaticProperty<uint32_t> GUIWINDLEVELLING = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->GUIWINDLEVELLING; }
  );
  static inline __CppStaticProperty<uint32_t> ICECRACKINGVOLUME = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ICECRACKINGVOLUME; }
  );
  static inline __CppStaticProperty<uint32_t> INTERACTIVEBUSMETER = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->INTERACTIVEBUSMETER; }
  );
  static inline __CppStaticProperty<uint32_t> INTERACTIVEDUCKSMETER = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->INTERACTIVEDUCKSMETER; }
  );
  static inline __CppStaticProperty<uint32_t> INTERIOREXTERIOR = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->INTERIOREXTERIOR; }
  );
  static inline __CppStaticProperty<uint32_t> INVENTORYWEIGHTGENERAL = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->INVENTORYWEIGHTGENERAL; }
  );
  static inline __CppStaticProperty<uint32_t> INVENTORYWEIGHTMETAL = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->INVENTORYWEIGHTMETAL; }
  );
  static inline __CppStaticProperty<uint32_t> INVENTORYWEIGHTWATER = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->INVENTORYWEIGHTWATER; }
  );
  static inline __CppStaticProperty<uint32_t> INVENTORYWEIGHTWOOD = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->INVENTORYWEIGHTWOOD; }
  );
  static inline __CppStaticProperty<uint32_t> ITEMCONDITION = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ITEMCONDITION; }
  );
  static inline __CppStaticProperty<uint32_t> LIGHTSOURCEFLICKER = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->LIGHTSOURCEFLICKER; }
  );
  static inline __CppStaticProperty<uint32_t> LPFILTERLEVEL = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->LPFILTERLEVEL; }
  );
  static inline __CppStaticProperty<uint32_t> MASTERVOLUME = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->MASTERVOLUME; }
  );
  static inline __CppStaticProperty<uint32_t> MUSICDUCKSMETER = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->MUSICDUCKSMETER; }
  );
  static inline __CppStaticProperty<uint32_t> MUSICVOLUME = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->MUSICVOLUME; }
  );
  static inline __CppStaticProperty<uint32_t> PAINPULSE = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->PAINPULSE; }
  );
  static inline __CppStaticProperty<uint32_t> PLAYERBOWFATIGUE = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->PLAYERBOWFATIGUE; }
  );
  static inline __CppStaticProperty<uint32_t> PLAYERINCLINE = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->PLAYERINCLINE; }
  );
  static inline __CppStaticProperty<uint32_t> PLAYERVELOCITY = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->PLAYERVELOCITY; }
  );
  static inline __CppStaticProperty<uint32_t> PLAYERWINDANGLE = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->PLAYERWINDANGLE; }
  );
  static inline __CppStaticProperty<uint32_t> PREDATORDISTANCE = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->PREDATORDISTANCE; }
  );
  static inline __CppStaticProperty<uint32_t> ROPEVELOCITY = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->ROPEVELOCITY; }
  );
  static inline __CppStaticProperty<uint32_t> SFXVOLUME = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->SFXVOLUME; }
  );
  static inline __CppStaticProperty<uint32_t> SPEECHAUTODUCKER = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->SPEECHAUTODUCKER; }
  );
  static inline __CppStaticProperty<uint32_t> SPEED = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->SPEED; }
  );
  static inline __CppStaticProperty<uint32_t> SS_AIR_FEAR = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->SS_AIR_FEAR; }
  );
  static inline __CppStaticProperty<uint32_t> SS_AIR_FREEFALL = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->SS_AIR_FREEFALL; }
  );
  static inline __CppStaticProperty<uint32_t> SS_AIR_FURY = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->SS_AIR_FURY; }
  );
  static inline __CppStaticProperty<uint32_t> SS_AIR_MONTH = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->SS_AIR_MONTH; }
  );
  static inline __CppStaticProperty<uint32_t> SS_AIR_PRESENCE = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->SS_AIR_PRESENCE; }
  );
  static inline __CppStaticProperty<uint32_t> SS_AIR_RPM = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->SS_AIR_RPM; }
  );
  static inline __CppStaticProperty<uint32_t> SS_AIR_SIZE = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->SS_AIR_SIZE; }
  );
  static inline __CppStaticProperty<uint32_t> SS_AIR_STORM = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->SS_AIR_STORM; }
  );
  static inline __CppStaticProperty<uint32_t> SS_AIR_TIMEOFDAY = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->SS_AIR_TIMEOFDAY; }
  );
  static inline __CppStaticProperty<uint32_t> SS_AIR_TURBULENCE = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->SS_AIR_TURBULENCE; }
  );
  static inline __CppStaticProperty<uint32_t> STIMPACKSTRENGTH = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->STIMPACKSTRENGTH; }
  );
  static inline __CppStaticProperty<uint32_t> STOVEDOORS = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->STOVEDOORS; }
  );
  static inline __CppStaticProperty<uint32_t> TEMPERATURE = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->TEMPERATURE; }
  );
  static inline __CppStaticProperty<uint32_t> TIMEOFDAY = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->TIMEOFDAY; }
  );
  static inline __CppStaticProperty<uint32_t> VOVOLUME = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->VOVOLUME; }
  );
  static inline __CppStaticProperty<uint32_t> WEAPONFIRE = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->WEAPONFIRE; }
  );
  static inline __CppStaticProperty<uint32_t> WEAPONSHELLNUMDROPPED = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->WEAPONSHELLNUMDROPPED; }
  );
  static inline __CppStaticProperty<uint32_t> WINDACTUALSPEED = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->WINDACTUALSPEED; }
  );
  static inline __CppStaticProperty<uint32_t> WINDGUSTINTENSITY = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->WINDGUSTINTENSITY; }
  );
  static inline __CppStaticProperty<uint32_t> WINDGUSTSSIDECHAIN = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->WINDGUSTSSIDECHAIN; }
  );
  static inline __CppStaticProperty<uint32_t> WINDINTENSITYBLEND = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->WINDINTENSITYBLEND; }
  );
  static inline __CppStaticProperty<uint32_t> WOLFATTACKMUTE = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->WOLFATTACKMUTE; }
  );
  static inline __CppStaticProperty<uint32_t> WOOZYFADE = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->WOOZYFADE; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x16EDD30))();
  }
};
}