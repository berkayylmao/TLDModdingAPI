// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Runtime.InteropServices.GCHandle.hpp"
#include "ModdingAPI.Exposed.System.ValueTuple_T1__T2_.hpp"
#include "ModdingAPI.Exposed.Mono.Unity.UnityTls.unitytls_x509list_ref.hpp"
#include "ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_x509list_ref.hpp"


namespace ModdingAPI::Exposed::Mono::Unity {
struct __UnityTlsContext_Il2CppStaticFields {
};

struct __UnityTlsContext_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Dispose;
  VirtualInvokeData _5_get_IsAuthenticated;
  VirtualInvokeData _6_StartHandshake;
  VirtualInvokeData _7_ProcessHandshake;
  VirtualInvokeData _8_FinishHandshake;
  VirtualInvokeData _9_get_LocalClientCertificate;
  VirtualInvokeData _10_Read;
  VirtualInvokeData _11_Write;
  VirtualInvokeData _12_Shutdown;
  VirtualInvokeData _13_Dispose;
};

struct __UnityTlsContext_Il2CppClass {
  Il2CppClass_1 _1;
  __UnityTlsContext_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __UnityTlsContext_Il2CppVtbl vtbl;
};

class UnityTlsContext {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C46DF8;
  static inline    __UnityTlsContext_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __UnityTlsContext_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__UnityTlsContext_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __UnityTlsContext_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::Mono::Net::Security::MobileAuthenticatedStream* MobileTlsContext_parent;
  bool MobileTlsContext_serverMode;
  System_String* MobileTlsContext_targetHost;
  System_String* MobileTlsContext_serverName;
  int32_t MobileTlsContext_enabledProtocols;
  ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate* MobileTlsContext_serverCertificate;
  ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509CertificateCollection* MobileTlsContext_clientCertificates;
  bool MobileTlsContext_askForClientCert;
  ModdingAPI::Exposed::Mono::Security::Interface::ICertificateValidator2* MobileTlsContext_certificateValidator;
  ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_tlsctx* tlsContext;
  ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_x509list* requestedClientCertChain;
  ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_key* requestedClientKey;
  ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate* localClientCertificate;
  ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate* remoteCertificate;
  ModdingAPI::Exposed::Mono::Security::Interface::MonoTlsConnectionInfo* connectioninfo;
  bool isAuthenticated;
  bool hasContext;
  bool closedGraceful;
  ModdingAPI::Exposed::System::Byte_array* writeBuffer;
  ModdingAPI::Exposed::System::Byte_array* readBuffer;
  ModdingAPI::Exposed::System::Runtime::InteropServices::GCHandle handle;
  ModdingAPI::Exposed::System::Exception* lastException;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::Mono::Net::Security::MobileAuthenticatedStream* parent, bool serverMode, System_String* targetHost, int32_t enabledProtocols, ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate, ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates, bool askForClientCert) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsContext*, ModdingAPI::Exposed::Mono::Net::Security::MobileAuthenticatedStream*, bool, System_String*, int32_t, ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate*, ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509CertificateCollection*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD41540))(this, parent, serverMode, targetHost, enabledProtocols, serverCertificate, clientCertificates, askForClientCert);
  }
  bool get_IsAuthenticated() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x871A60))(this);
  }
  ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate* get_LocalClientCertificate() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate*(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319940))(this);
  }
  ModdingAPI::Exposed::System::ValueTuple_T1__T2_ Read(ModdingAPI::Exposed::System::Byte_array* buffer, int32_t offset, int32_t count) {
    return reinterpret_cast<ModdingAPI::Exposed::System::ValueTuple_T1__T2_(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsContext*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD42730))(this, buffer, offset, count);
  }
  ModdingAPI::Exposed::System::ValueTuple_T1__T2_ Write(ModdingAPI::Exposed::System::Byte_array* buffer, int32_t offset, int32_t count) {
    return reinterpret_cast<ModdingAPI::Exposed::System::ValueTuple_T1__T2_(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsContext*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD42960))(this, buffer, offset, count);
  }
  void Shutdown() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD42B80))(this);
  }
  void Dispose(bool disposing) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsContext*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD42DA0))(this, disposing);
  }
  void StartHandshake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD42E50))(this);
  }
  bool ProcessHandshake() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD430D0))(this);
  }
  void FinishHandshake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD434E0))(this);
  }
  intptr_t WriteCallback(uint8_t* data, intptr_t bufferLen, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
    return reinterpret_cast<intptr_t(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsContext*, uint8_t*, intptr_t, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_errorstate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD438C0))(this, data, bufferLen, errorState);
  }
  intptr_t ReadCallback(uint8_t* buffer, intptr_t bufferLen, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
    return reinterpret_cast<intptr_t(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsContext*, uint8_t*, intptr_t, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_errorstate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD43C40))(this, buffer, bufferLen, errorState);
  }
  uint32_t VerifyCallback(ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_x509list_ref chain, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsContext*, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_x509list_ref, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_errorstate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD44070))(this, chain, errorState);
  }
  void CertificateCallback(ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_tlsctx* ctx, uint8_t* cn, intptr_t cnLen, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_x509name* caList, intptr_t caListLen, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_x509list_ref* chain, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_key_ref* key, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Unity::UnityTlsContext*, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_tlsctx*, uint8_t*, intptr_t, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_x509name*, intptr_t, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_x509list_ref*, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_key_ref*, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_errorstate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD444A0))(this, ctx, cn, cnLen, caList, caListLen, chain, key, errorState);
  }

  // Static methods:
  static inline void ExtractNativeKeyAndChainFromManagedCertificate(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate* cert, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_errorstate* errorState, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_x509list* nativeCertChain, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_key* nativeKey) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate*, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_errorstate*, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_x509list*, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_key*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD423A0))(cert, errorState, nativeCertChain, nativeKey);
  }
  static inline intptr_t WriteCallback(void* userData, uint8_t* data, intptr_t bufferLen, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
    return reinterpret_cast<intptr_t(__fastcall*)(void*, uint8_t*, intptr_t, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_errorstate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD43760))(userData, data, bufferLen, errorState);
  }
  static inline intptr_t ReadCallback(void* userData, uint8_t* buffer, intptr_t bufferLen, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
    return reinterpret_cast<intptr_t(__fastcall*)(void*, uint8_t*, intptr_t, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_errorstate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD43AE0))(userData, buffer, bufferLen, errorState);
  }
  static inline uint32_t VerifyCallback(void* userData, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_x509list_ref chain, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
    return reinterpret_cast<uint32_t(__fastcall*)(void*, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_x509list_ref, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_errorstate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD43F30))(userData, chain, errorState);
  }
  static inline void CertificateCallback(void* userData, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_tlsctx* ctx, uint8_t* cn, intptr_t cnLen, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_x509name* caList, intptr_t caListLen, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_x509list_ref* chain, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_key_ref* key, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_errorstate* errorState) {
    reinterpret_cast<void(__fastcall*)(void*, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_tlsctx*, uint8_t*, intptr_t, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_x509name*, intptr_t, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_x509list_ref*, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_key_ref*, ModdingAPI::Exposed::Mono::Unity::UnityTls::unitytls_errorstate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD44340))(userData, ctx, cn, cnLen, caList, caListLen, chain, key, errorState);
  }
};
}