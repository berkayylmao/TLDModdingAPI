// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Resources {
struct __ManifestBasedResourceGroveler_Il2CppStaticFields {
};

struct __ManifestBasedResourceGroveler_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_GrovelForResourceSet;
};

struct __ManifestBasedResourceGroveler_Il2CppClass {
  Il2CppClass_1 _1;
  __ManifestBasedResourceGroveler_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ManifestBasedResourceGroveler_Il2CppVtbl vtbl;
};

class ManifestBasedResourceGroveler {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C55070;
  static inline    __ManifestBasedResourceGroveler_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ManifestBasedResourceGroveler_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ManifestBasedResourceGroveler_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ManifestBasedResourceGroveler_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Resources::ResourceManager::ResourceManagerMediator* _mediator;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Resources::ResourceManager::ResourceManagerMediator* mediator) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Resources::ManifestBasedResourceGroveler*, ModdingAPI::Exposed::System::Resources::ResourceManager::ResourceManagerMediator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, mediator);
  }
  ModdingAPI::Exposed::System::Resources::ResourceSet* GrovelForResourceSet(ModdingAPI::Exposed::System::Globalization::CultureInfo* culture, ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* localResourceSets, bool tryParents, bool createIfNotExists, int32_t stackMark) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Resources::ResourceSet*(__fastcall*)(ModdingAPI::Exposed::System::Resources::ManifestBasedResourceGroveler*, ModdingAPI::Exposed::System::Globalization::CultureInfo*, ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*, bool, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF2D220))(this, culture, localResourceSets, tryParents, createIfNotExists, stackMark);
  }
  ModdingAPI::Exposed::System::Globalization::CultureInfo* UltimateFallbackFixup(ModdingAPI::Exposed::System::Globalization::CultureInfo* lookForCulture) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)(ModdingAPI::Exposed::System::Resources::ManifestBasedResourceGroveler*, ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF2D650))(this, lookForCulture);
  }
  ModdingAPI::Exposed::System::Resources::ResourceSet* CreateResourceSet(ModdingAPI::Exposed::System::IO::Stream* store, ModdingAPI::Exposed::System::Reflection::Assembly* assembly) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Resources::ResourceSet*(__fastcall*)(ModdingAPI::Exposed::System::Resources::ManifestBasedResourceGroveler*, ModdingAPI::Exposed::System::IO::Stream*, ModdingAPI::Exposed::System::Reflection::Assembly*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF2DB50))(this, store, assembly);
  }
  ModdingAPI::Exposed::System::IO::Stream* GetManifestResourceStream(ModdingAPI::Exposed::System::Reflection::RuntimeAssembly* satellite, System_String* fileName, int32_t stackMark) {
    return reinterpret_cast<ModdingAPI::Exposed::System::IO::Stream*(__fastcall*)(ModdingAPI::Exposed::System::Resources::ManifestBasedResourceGroveler*, ModdingAPI::Exposed::System::Reflection::RuntimeAssembly*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF2E640))(this, satellite, fileName, stackMark);
  }
  ModdingAPI::Exposed::System::IO::Stream* CaseInsensitiveManifestResourceStreamLookup(ModdingAPI::Exposed::System::Reflection::RuntimeAssembly* satellite, System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::System::IO::Stream*(__fastcall*)(ModdingAPI::Exposed::System::Resources::ManifestBasedResourceGroveler*, ModdingAPI::Exposed::System::Reflection::RuntimeAssembly*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF2E7E0))(this, satellite, name);
  }
  ModdingAPI::Exposed::System::Reflection::RuntimeAssembly* GetSatelliteAssembly(ModdingAPI::Exposed::System::Globalization::CultureInfo* lookForCulture, int32_t stackMark) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Reflection::RuntimeAssembly*(__fastcall*)(ModdingAPI::Exposed::System::Resources::ManifestBasedResourceGroveler*, ModdingAPI::Exposed::System::Globalization::CultureInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF2ED00))(this, lookForCulture, stackMark);
  }
  bool CanUseDefaultResourceClasses(System_String* readerTypeName, System_String* resSetTypeName) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Resources::ManifestBasedResourceGroveler*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF2EFE0))(this, readerTypeName, resSetTypeName);
  }
  System_String* GetSatelliteAssemblyName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Resources::ManifestBasedResourceGroveler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF2F260))(this);
  }
  void HandleSatelliteMissing() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Resources::ManifestBasedResourceGroveler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF2F330))(this);
  }
  void HandleResourceStreamMissing(System_String* fileName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Resources::ManifestBasedResourceGroveler*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF2F8B0))(this, fileName);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::System::Globalization::CultureInfo* GetNeutralResourcesLanguage(ModdingAPI::Exposed::System::Reflection::Assembly* a, int32_t fallbackLocation) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::Assembly*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF2D830))(a, fallbackLocation);
  }
  static inline bool GetNeutralResourcesLanguageAttribute(ModdingAPI::Exposed::System::Reflection::Assembly* assembly, System_String* cultureName, int16_t fallbackLocation) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Reflection::Assembly*, System_String*, int16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF2FC80))(assembly, cultureName, fallbackLocation);
  }
};
}