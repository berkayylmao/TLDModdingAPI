// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __BodyCarry_Il2CppStaticFields {
  int32_t s_BodyIdleAnimationStateHash;
};

struct __BodyCarry_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __BodyCarry_Il2CppClass {
  Il2CppClass_1 _1;
  __BodyCarry_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __BodyCarry_Il2CppVtbl vtbl;
};

class BodyCarry {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C4B018;
  static inline    __BodyCarry_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __BodyCarry_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__BodyCarry_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __BodyCarry_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  System_String* m_PickupAudioLow;
  System_String* m_PickupAudioMedium;
  System_String* m_PickupAudioHigh;
  System_String* m_PutdownAudioLow;
  System_String* m_PutdownAudioMedium;
  System_String* m_PutdownAudioHigh;
  ModdingAPI::Exposed::CarryableBody* _m_Body_k__BackingField;
  bool m_AllowBodyTransferBetweenZones;
  ModdingAPI::Exposed::GearItem* m_BodyGearItem;
  ModdingAPI::Exposed::UnityEngine::Animator* m_BodyAnimator;
  System_String* m_BodyDropAnimationState;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BodyGameObject;
  bool m_DropIsPending;
  bool m_IsPlacingBodyPending;
  bool m_BodyCarryIdleAnimationRequested;
  bool m_CarryRequested;
  bool m_HandsReady;

  // Member methods:
  ModdingAPI::Exposed::CarryableBody* get_m_Body() {
    return reinterpret_cast<ModdingAPI::Exposed::CarryableBody*(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319980))(this);
  }
  void set_m_Body(ModdingAPI::Exposed::CarryableBody* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*, ModdingAPI::Exposed::CarryableBody*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A430))(this, value);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF13A0))(this);
  }
  bool ReadyToCarry() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x48B460))(this);
  }
  void CancelPlacement() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF16C0))(this);
  }
  void Carry(ModdingAPI::Exposed::CarryableBody* body) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*, ModdingAPI::Exposed::CarryableBody*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF1920))(this, body);
  }
  void MaybeDoCarry() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF1C60))(this);
  }
  void MaybeStowItemInHand() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF1D40))(this);
  }
  void OnItemInHandStowed() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF1F60))(this);
  }
  void CarryInternal() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF1F70))(this);
  }
  bool Drop(int32_t opts) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BodyCarry*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF2040))(this, opts);
  }
  void ReadyForPlacementDropAnimation() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF28D0))(this);
  }
  bool IsPlacingBodyPending() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5EF7F0))(this);
  }
  bool IsDropPending() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF2A90))(this);
  }
  void OnDropPlaceMeshAnimationComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF2AA0))(this);
  }
  bool HasBody() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF2D00))(this);
  }
  ModdingAPI::Exposed::NPC* GetCarriedNpc() {
    return reinterpret_cast<ModdingAPI::Exposed::NPC*(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF2DA0))(this);
  }
  bool IsCarryingBody(ModdingAPI::Exposed::CarryableBody* body) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BodyCarry*, ModdingAPI::Exposed::CarryableBody*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF2E70))(this, body);
  }
  bool MaybeDrop() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF2F60))(this);
  }
  bool MaybeDropImmediate() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF3030))(this);
  }
  bool MaybePlace() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF3100))(this);
  }
  void PrepareForSceneTransition() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF3430))(this);
  }
  bool ProcessInteraction(ModdingAPI::Exposed::CarryableBody* body) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BodyCarry*, ModdingAPI::Exposed::CarryableBody*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF3560))(this, body);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF4060))(this);
  }
  void CarryCallback() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF4CA0))(this);
  }
  void DiagnoseCallback() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF4E10))(this);
  }
  void Restore(ModdingAPI::Exposed::CarryableBody* body) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*, ModdingAPI::Exposed::CarryableBody*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF4FA0))(this, body);
  }
  void PlayHoistEffortAudio(int32_t direction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF5120))(this, direction);
  }
  void SearchCallback() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF52A0))(this);
  }
  void SetupCarryState(bool restored) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF5400))(this, restored);
  }
  void AttachFPMesh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF5880))(this);
  }
  void DetachFPMesh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF5B10))(this);
  }
  bool StickBodyToGroundAtPlayersFeet() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF5C10))(this);
  }
  bool IsPlayingCarryIdleAnimation() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF6030))(this);
  }
  void PlayCarryIdleAnimation() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF6160))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BodyCarry*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF6290))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<int32_t> s_BodyIdleAnimationStateHash = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_BodyIdleAnimationStateHash; }
  );

  // Static methods:
  static inline void Deserialize(System_String* serialized) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF4280))(serialized);
  }
  static inline bool CanInteractWithObject(ModdingAPI::Exposed::UnityEngine::GameObject* go) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF4750))(go);
  }
  static inline void ShowError(int32_t error) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF4910))(error);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BF62A0))();
  }
};
}