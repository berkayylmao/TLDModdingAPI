// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed {
struct __TorchItem_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Collections::Generic::HashSet_T_* s_Torches;
  ModdingAPI::Exposed::TorchItemSaveDataProxy* m_TorchItemSaveDataProxy;
};

struct __TorchItem_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __TorchItem_Il2CppClass {
  Il2CppClass_1 _1;
  __TorchItem_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TorchItem_Il2CppVtbl vtbl;
};

class TorchItem {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C94250;
  static inline    __TorchItem_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __TorchItem_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__TorchItem_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __TorchItem_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_BurnLifetimeMinutes;
  float m_ExtinguishTime;
  bool m_CanBeRelit;
  bool m_CanBeHolstered;
  float m_LightRepositionRate;
  float m_LightHeightOffset;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TorchMeshGameObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TorchBurntMeshGameObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FXGameObject;
  System_String* m_IgniteAudio;
  System_String* m_ExtinguishAudio;
  System_String* m_BlownOutAudio;
  System_String* m_BurnOutAudio;
  System_String* m_LoopWithoutIgniteAudio;
  System_String* m_CollideAudio;
  float m_ThrowForce;
  float m_ThrowTorque;
  float m_WindSpeedCannotIgnite;
  float m_WindSpeedExtinguish;
  float m_StaminaDrainPerSecond;
  float m_ReduceLifetimeMinutesPerSwing;
  System_String* m_RadialSpriteName;
  ModdingAPI::Exposed::TorchIntensity* m_IntensityComponent;
  float velDamp;
  float aVelDamp;
  bool m_CanThrow;
  bool m_Thrown;
  float m_ElapsedBurnMinutes;
  ModdingAPI::Exposed::UnityEngine::Color m_Color;
  int32_t m_State;
  ModdingAPI::Exposed::HeatSource* m_HeatSource;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_LightPosOriginalObject;
  ModdingAPI::Exposed::UnityEngine::Light* m_LightIndoor;
  ModdingAPI::Exposed::UnityEngine::Light* m_LightOutdoor;
  float m_LightOffsetY;
  uint32_t m_IgniteAudioID;
  float m_DragIncreaseAfterCollision;
  bool m_RenderingDisabled;
  float m_RenderingDisabledNumFramesLeft;
  bool m_PlayCollisonAudio;
  bool m_IgniteAfterDelay;
  float m_ElapsedIgniteDelaySeconds;
  float m_IgniteDelaySeconds;
  uint32_t m_IgniteLoop;
  bool m_IgniteFromFire;
  bool m_ExtinguishAfterDelay;
  float m_ElapsedExtinguishDelaySeconds;
  ModdingAPI::Exposed::GearItem* m_GearItem;
  ModdingAPI::Exposed::UnityEngine::Rigidbody* m_Rigidbody;
  ModdingAPI::Exposed::UnityEngine::AI::NavMeshObstacle* m_NavMeshObstacle;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC3090))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC3630))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC3730))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC3F60))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC4110))(this, text);
  }
  void Ignite() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC4300))(this);
  }
  void Ignite(System_String* igniteAudio) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC4330))(this, igniteAudio);
  }
  void OnIgniteComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC4660))(this);
  }
  void IgniteDelayed(float delaySeconds, System_String* igniteAudio, bool isFire) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*, float, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC4770))(this, delaySeconds, igniteAudio, isFire);
  }
  void IgniteAfterDelay() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC4AD0))(this);
  }
  void CancelIgnite() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC4D50))(this);
  }
  bool IsSetToIgniteAfterDelay() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC4F40))(this);
  }
  void ExtinguishDelayed() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC4F50))(this);
  }
  void OnExtinguishCompleteCallback() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void ExtinguishAfterDelayStarted() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC5220))(this);
  }
  void CancelExtinguish() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC5580))(this);
  }
  bool CanBeLit() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC5700))(this);
  }
  bool IsBurning() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC5720))(this);
  }
  bool IsExtinguishing() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC5730))(this);
  }
  bool IsBurnedOut() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC5740))(this);
  }
  bool IsFresh() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC5750))(this);
  }
  void OnCollisionStay(ModdingAPI::Exposed::UnityEngine::Collision* collisionInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*, ModdingAPI::Exposed::UnityEngine::Collision*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC5760))(this, collisionInfo);
  }
  void OnCollisionEnter(ModdingAPI::Exposed::UnityEngine::Collision* collisionInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*, ModdingAPI::Exposed::UnityEngine::Collision*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC5BC0))(this, collisionInfo);
  }
  void DisableRendering(int32_t numFrames) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC6050))(this, numFrames);
  }
  void EnableCollisionAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC6150))(this);
  }
  void PrepareForThrow() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC6160))(this);
  }
  void DestroyHeatSource() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC6190))(this);
  }
  void HideEffects(bool hide) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC6260))(this, hide);
  }
  void AttemptToLight() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC62F0))(this);
  }
  void ForceExtinguish() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC6500))(this);
  }
  float GetBurnProgress() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC6510))(this);
  }
  void UpdateTorchAudioPosition() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC6520))(this);
  }
  void UpdateLightPosition() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC66C0))(this);
  }
  void StopBurningAudioLoop() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC6FE0))(this);
  }
  void Extinguish(int32_t newState) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC70E0))(this, newState);
  }
  bool IsIgnitedFromFire() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC7380))(this);
  }
  float GetModifiedBurnLifetimeMinutes() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x156A9A0))(this);
  }
  void OnDroppedInWater() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC7390))(this);
  }
  void StopLoopingAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC73A0))(this);
  }
  void SetState(int32_t state) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC73C0))(this, state);
  }
  bool ShouldBlowOut() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC75F0))(this);
  }
  void MaybeAdjustHeatSource() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC77E0))(this);
  }
  void StopIgniteLoop() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC79E0))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC7AE0))(this);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC7C50))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC7D20))(this);
  }
  void MaybeEnableNavMeshObstacle(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC7DF0))(this, enable);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TorchItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC8380))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::HashSet_T_*> s_Torches = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::HashSet_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_Torches; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::TorchItemSaveDataProxy*> m_TorchItemSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::TorchItemSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_TorchItemSaveDataProxy; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BC83A0))();
  }
};
}