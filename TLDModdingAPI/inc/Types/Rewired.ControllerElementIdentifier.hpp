// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Rewired {
struct __ControllerElementIdentifier_Il2CppStaticFields {
  ModdingAPI::Exposed::Rewired::ControllerElementIdentifier* NPVfEjzXOlesiSijVwgqsOmSIlJi;
};

struct __ControllerElementIdentifier_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_id;
  VirtualInvokeData _5_get_name;
  VirtualInvokeData _6_get_positiveName;
  VirtualInvokeData _7_get_negativeName;
  VirtualInvokeData _8_Rewired_Interfaces_IControllerElementIdentifierCommon_Internal_get_elementType;
  VirtualInvokeData _9_Rewired_Interfaces_IControllerElementIdentifierCommon_Internal_get_useEditorElementTypeOverride;
  VirtualInvokeData _10_Rewired_Interfaces_IControllerElementIdentifierCommon_Internal_get_editorElementTypeOverride;
};

struct __ControllerElementIdentifier_Il2CppClass {
  Il2CppClass_1 _1;
  __ControllerElementIdentifier_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ControllerElementIdentifier_Il2CppVtbl vtbl;
};

class ControllerElementIdentifier {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C6D418;
  static inline    __ControllerElementIdentifier_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ControllerElementIdentifier_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ControllerElementIdentifier_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ControllerElementIdentifier_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t _id;
  System_String* _name;
  System_String* _positiveName;
  System_String* _negativeName;
  int32_t _elementType;
  int32_t _compoundElementType;
  bool isMappableOnPlatform;
  bool RwxGvqOCqideUfwQaEXsETdXqdV;

  // Member methods:
  int32_t get_id() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311060))(this);
  }
  System_String* get_name() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  void set_name(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x816850))(this, value);
  }
  System_String* get_positiveName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110A0))(this);
  }
  void set_positiveName(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8168A0))(this, value);
  }
  System_String* get_negativeName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110B0))(this);
  }
  void set_negativeName(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8168D0))(this, value);
  }
  int32_t get_elementType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D870))(this);
  }
  int32_t get_compoundElementType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D880))(this);
  }
  bool get_isCompoundElement() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x816900))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void ::ctor(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier* source) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*, ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x816910))(this, source);
  }
  void ::ctor(int32_t id, System_String* name, System_String* positiveName, System_String* negativeName, int32_t elementType, int32_t compoundElementType, bool isMappableOnPlatform) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*, int32_t, System_String*, System_String*, System_String*, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x816960))(this, id, name, positiveName, negativeName, elementType, compoundElementType, isMappableOnPlatform);
  }
  void ::ctor(int32_t id, System_String* name, System_String* positiveName, System_String* negativeName, int32_t elementType, bool isMappableOnPlatform) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*, int32_t, System_String*, System_String*, System_String*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x816990))(this, id, name, positiveName, negativeName, elementType, isMappableOnPlatform);
  }
  void ::ctor(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier* source, bool isMappableOnPlatform, int32_t changedElementType) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*, ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8169C0))(this, source, isMappableOnPlatform, changedElementType);
  }
  ModdingAPI::Exposed::Rewired::ControllerElementIdentifier* Clone() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x816A10))(this);
  }
  System_String* GetDisplayName(int32_t actualElementType, int32_t axisRange) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x816B90))(this, actualElementType, axisRange);
  }
  System_String* GetDisplayName(int32_t axisRange) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x816D40))(this, axisRange);
  }
  Il2CppObject* Rewired::Interfaces::IControllerElementIdentifierCommon_Internal::get_elementType() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x816D50))(this);
  }
  bool Rewired::Interfaces::IControllerElementIdentifierCommon_Internal::get_useEditorElementTypeOverride() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this);
  }
  int32_t Rewired::Interfaces::IControllerElementIdentifierCommon_Internal::get_editorElementTypeOverride() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D870))(this);
  }
  void bJwksEpMSBdfTYBTNbpSGUaeHep() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x816DE0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*> NPVfEjzXOlesiSijVwgqsOmSIlJi = __CppStaticProperty<ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*>(
   []() { return &GetStaticClassInstance()->pStaticFields->NPVfEjzXOlesiSijVwgqsOmSIlJi; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::Rewired::ControllerElementIdentifier* get_BlankReadOnly() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x816EA0))();
  }
};
}