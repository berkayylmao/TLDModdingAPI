// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __AkWwiseInitializationSettings_Il2CppStaticFields {
  ModdingAPI::Exposed::System::String_array* AllGlobalValues;
  ModdingAPI::Exposed::AkWwiseInitializationSettings* m_Instance;
  ModdingAPI::Exposed::AkBasePlatformSettings* m_ActivePlatformSettings;
};

struct __AkWwiseInitializationSettings_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_AkInitializationSettings;
  VirtualInvokeData _5_get_AkSpatialAudioInitSettings;
  VirtualInvokeData _6_get_CallbackManagerInitializationSettings;
  VirtualInvokeData _7_get_InitialLanguage;
  VirtualInvokeData _8_get_SoundbankPath;
  VirtualInvokeData _9_get_AkCommunicationSettings;
  VirtualInvokeData _10_GetUserSettings;
  VirtualInvokeData _11_GetAdvancedSettings;
  VirtualInvokeData _12_GetCommsSettings;
};

struct __AkWwiseInitializationSettings_Il2CppClass {
  Il2CppClass_1 _1;
  __AkWwiseInitializationSettings_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AkWwiseInitializationSettings_Il2CppVtbl vtbl;
};

class AkWwiseInitializationSettings {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C95730;
  static inline    __AkWwiseInitializationSettings_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __AkWwiseInitializationSettings_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__AkWwiseInitializationSettings_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __AkWwiseInitializationSettings_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* PlatformSettingsNameList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* PlatformSettingsList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* InvalidReferencePlatforms;
  ModdingAPI::Exposed::AkCommonUserSettings* UserSettings;
  ModdingAPI::Exposed::AkCommonAdvancedSettings* AdvancedSettings;
  ModdingAPI::Exposed::AkCommonCommSettings* CommsSettings;

  // Member methods:
  bool get_IsValid() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AkWwiseInitializationSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C86D00))(this);
  }
  int32_t get_Count() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::AkWwiseInitializationSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C86DA0))(this);
  }
  ModdingAPI::Exposed::AkCommonUserSettings* GetUserSettings() {
    return reinterpret_cast<ModdingAPI::Exposed::AkCommonUserSettings*(__fastcall*)(ModdingAPI::Exposed::AkWwiseInitializationSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335370))(this);
  }
  ModdingAPI::Exposed::AkCommonAdvancedSettings* GetAdvancedSettings() {
    return reinterpret_cast<ModdingAPI::Exposed::AkCommonAdvancedSettings*(__fastcall*)(ModdingAPI::Exposed::AkWwiseInitializationSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319970))(this);
  }
  ModdingAPI::Exposed::AkCommonCommSettings* GetCommsSettings() {
    return reinterpret_cast<ModdingAPI::Exposed::AkCommonCommSettings*(__fastcall*)(ModdingAPI::Exposed::AkWwiseInitializationSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319960))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AkWwiseInitializationSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C873D0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AkWwiseInitializationSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C88660))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::String_array*> AllGlobalValues = __CppStaticProperty<ModdingAPI::Exposed::System::String_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->AllGlobalValues; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::AkWwiseInitializationSettings*> m_Instance = __CppStaticProperty<ModdingAPI::Exposed::AkWwiseInitializationSettings*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_Instance; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::AkBasePlatformSettings*> m_ActivePlatformSettings = __CppStaticProperty<ModdingAPI::Exposed::AkBasePlatformSettings*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_ActivePlatformSettings; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::AkWwiseInitializationSettings* get_Instance() {
    return reinterpret_cast<ModdingAPI::Exposed::AkWwiseInitializationSettings*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C86E30))();
  }
  static inline ModdingAPI::Exposed::AkBasePlatformSettings* GetPlatformSettings(System_String* platformName) {
    return reinterpret_cast<ModdingAPI::Exposed::AkBasePlatformSettings*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C86FA0))(platformName);
  }
  static inline ModdingAPI::Exposed::AkBasePlatformSettings* get_ActivePlatformSettings() {
    return reinterpret_cast<ModdingAPI::Exposed::AkBasePlatformSettings*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C87260))();
  }
  static inline bool InitializeSoundEngine() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C87580))();
  }
  static inline bool ResetSoundEngine(bool isPlaying) {
    return reinterpret_cast<bool(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C87FE0))(isPlaying);
  }
  static inline void LoadInitBank() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C88110))();
  }
  static inline void TerminateSoundEngine() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C88240))();
  }
  static inline void SleepForMilliseconds(double milliseconds) {
    reinterpret_cast<void(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C88430))(milliseconds);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C88950))();
  }
};
}