// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.Pathfinding.Int3.hpp"


namespace ModdingAPI::Exposed::Pathfinding {
struct __GraphNode_Il2CppStaticFields {
};

struct __GraphNode_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_UpdateRecursiveG;
  VirtualInvokeData _5_FloodFill;
  VirtualInvokeData _10_ContainsConnection;
  VirtualInvokeData _11_RecalculateConnectionCosts;
  VirtualInvokeData _12_GetPortal;
  VirtualInvokeData _14_SerializeNode;
  VirtualInvokeData _15_DeserializeNode;
  VirtualInvokeData _16_SerializeReferences;
  VirtualInvokeData _17_DeserializeReferences;
  VirtualInvokeData _65535__ctor;
};

struct __GraphNode_Il2CppClass {
  Il2CppClass_1 _1;
  __GraphNode_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __GraphNode_Il2CppVtbl vtbl;
};

class GraphNode {
public:
  // Il2Cpp fields:
  __GraphNode_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t nodeIndex;
  uint32_t flags;
  uint32_t penalty;
  ModdingAPI::Exposed::Pathfinding::Int3 position;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::AstarPath* astar) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::AstarPath*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26B63B0))(this, astar);
  }
  void Destroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26B6550))(this);
  }
  bool get_Destroyed() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26B66A0))(this);
  }
  int32_t get_NodeIndex() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311060))(this);
  }
  uint32_t get_Flags() {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311080))(this);
  }
  void set_Flags(uint32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEBD0))(this, value);
  }
  uint32_t get_Penalty() {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FED20))(this);
  }
  void set_Penalty(uint32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26B66B0))(this, value);
  }
  bool get_Walkable() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26B6790))(this);
  }
  void set_Walkable(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26B67A0))(this, value);
  }
  uint32_t get_Area() {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26B67C0))(this);
  }
  void set_Area(uint32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26B67D0))(this, value);
  }
  uint32_t get_GraphIndex() {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26B67E0))(this);
  }
  void set_GraphIndex(uint32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26B67F0))(this, value);
  }
  uint32_t get_Tag() {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26B6800))(this);
  }
  void set_Tag(uint32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26B6810))(this, value);
  }
  void UpdateG(ModdingAPI::Exposed::Pathfinding::Path* path, ModdingAPI::Exposed::Pathfinding::PathNode* pathNode) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::Pathfinding::Path*, ModdingAPI::Exposed::Pathfinding::PathNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26B6820))(this, path, pathNode);
  }
  void UpdateRecursiveG(ModdingAPI::Exposed::Pathfinding::Path* path, ModdingAPI::Exposed::Pathfinding::PathNode* pathNode, ModdingAPI::Exposed::Pathfinding::PathHandler* handler) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::Pathfinding::Path*, ModdingAPI::Exposed::Pathfinding::PathNode*, ModdingAPI::Exposed::Pathfinding::PathHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26B68B0))(this, path, pathNode, handler);
  }
  void FloodFill(ModdingAPI::Exposed::System::Collections::Generic::Stack_T_* stack, uint32_t region) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::System::Collections::Generic::Stack_T_*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26B6B50))(this, stack, region);
  }
  bool ContainsConnection(ModdingAPI::Exposed::Pathfinding::GraphNode* node) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26B6DA0))(this, node);
  }
  void RecalculateConnectionCosts() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  bool GetPortal(ModdingAPI::Exposed::Pathfinding::GraphNode* other, ModdingAPI::Exposed::System::Collections::Generic::List_T_* left, ModdingAPI::Exposed::System::Collections::Generic::List_T_* right, bool backwards) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this, other, left, right, backwards);
  }
  void SerializeNode(ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext* ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26B6FF0))(this, ctx);
  }
  void DeserializeNode(ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext* ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26B7060))(this, ctx);
  }
  void SerializeReferences(ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext* ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, ctx);
  }
  void DeserializeReferences(ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext* ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, ctx);
  }
};
}