// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed::UnityEngine::UI {
struct __CanvasScaler_Il2CppStaticFields {
};

struct __CanvasScaler_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Awake;
  VirtualInvokeData _5_OnEnable;
  VirtualInvokeData _6_Start;
  VirtualInvokeData _7_OnDisable;
  VirtualInvokeData _8_OnDestroy;
  VirtualInvokeData _9_IsActive;
  VirtualInvokeData _10_OnRectTransformDimensionsChange;
  VirtualInvokeData _11_OnBeforeTransformParentChanged;
  VirtualInvokeData _12_OnTransformParentChanged;
  VirtualInvokeData _13_OnDidApplyAnimationProperties;
  VirtualInvokeData _14_OnCanvasGroupChanged;
  VirtualInvokeData _15_OnCanvasHierarchyChanged;
  VirtualInvokeData _16_IsDestroyed;
  VirtualInvokeData _17_Update;
  VirtualInvokeData _18_Handle;
  VirtualInvokeData _19_HandleWorldCanvas;
  VirtualInvokeData _20_HandleConstantPixelSize;
  VirtualInvokeData _21_HandleScaleWithScreenSize;
  VirtualInvokeData _22_HandleConstantPhysicalSize;
};

struct __CanvasScaler_Il2CppClass {
  Il2CppClass_1 _1;
  __CanvasScaler_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CanvasScaler_Il2CppVtbl vtbl;
};

class CanvasScaler {
public:
  // Il2Cpp fields:
  __CanvasScaler_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  int32_t m_UiScaleMode;
  float m_ReferencePixelsPerUnit;
  float m_ScaleFactor;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_ReferenceResolution;
  int32_t m_ScreenMatchMode;
  float m_MatchWidthOrHeight;
  int32_t m_PhysicalUnit;
  float m_FallbackScreenDPI;
  float m_DefaultSpriteDPI;
  float m_DynamicPixelsPerUnit;
  ModdingAPI::Exposed::UnityEngine::Canvas* m_Canvas;
  float m_PrevScaleFactor;
  float m_PrevReferencePixelsPerUnit;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE40C0))(this);
  }
  int32_t get_uiScaleMode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE2A00))(this);
  }
  void set_uiScaleMode(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311090))(this, value);
  }
  float get_referencePixelsPerUnit() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE2AB0))(this);
  }
  void set_referencePixelsPerUnit(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x88C910))(this, value);
  }
  float get_scaleFactor() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE4120))(this);
  }
  void set_scaleFactor(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE4130))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_referenceResolution() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE41E0))(this);
  }
  void set_referenceResolution(ModdingAPI::Exposed::UnityEngine::Vector2 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE4200))(this, value);
  }
  int32_t get_screenMatchMode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE4370))(this);
  }
  void set_screenMatchMode(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x31DD60))(this, value);
  }
  float get_matchWidthOrHeight() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB3BB0))(this);
  }
  void set_matchWidthOrHeight(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x807930))(this, value);
  }
  int32_t get_physicalUnit() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD4210))(this);
  }
  void set_physicalUnit(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D890))(this, value);
  }
  float get_fallbackScreenDPI() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE4380))(this);
  }
  void set_fallbackScreenDPI(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE4390))(this, value);
  }
  float get_defaultSpriteDPI() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE43A0))(this);
  }
  void set_defaultSpriteDPI(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE43B0))(this, value);
  }
  float get_dynamicPixelsPerUnit() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE4460))(this);
  }
  void set_dynamicPixelsPerUnit(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE4470))(this, value);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE4480))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE4520))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE4560))(this);
  }
  void Handle() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE4580))(this);
  }
  void HandleWorldCanvas() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE4770))(this);
  }
  void HandleConstantPixelSize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE47A0))(this);
  }
  void HandleScaleWithScreenSize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE47D0))(this);
  }
  void HandleConstantPhysicalSize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE4B70))(this);
  }
  void SetScaleFactor(float scaleFactor) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE4C50))(this, scaleFactor);
  }
  void SetReferencePixelsPerUnit(float referencePixelsPerUnit) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::CanvasScaler*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAE4CE0))(this, referencePixelsPerUnit);
  }
};
}