// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Rect.hpp"


namespace ModdingAPI::Exposed::UnityEngine {
struct __CanvasRenderer_Il2CppStaticFields {
};

struct __CanvasRenderer_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __CanvasRenderer_Il2CppClass {
  Il2CppClass_1 _1;
  __CanvasRenderer_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CanvasRenderer_Il2CppVtbl vtbl;
};

class CanvasRenderer {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C80720;
  static inline    CanvasRenderer* _pStaticObjectInstance = nullptr;

public:
// Singleton object getter:
  static inline CanvasRenderer* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (CanvasRenderer**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

  // Il2Cpp fields:
  __CanvasRenderer_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool _isMask_k__BackingField;

  // Member methods:
  void set_hasPopInstruction(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1583FD0))(this, value);
  }
  int32_t get_materialCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584030))(this);
  }
  void set_materialCount(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584080))(this, value);
  }
  void set_popMaterialCount(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15840E0))(this, value);
  }
  int32_t get_absoluteDepth() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584140))(this);
  }
  bool get_hasMoved() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584190))(this);
  }
  bool get_cull() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15841E0))(this);
  }
  void set_cull(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584230))(this, value);
  }
  void SetColor(ModdingAPI::Exposed::UnityEngine::Color color) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584290))(this, color);
  }
  ModdingAPI::Exposed::UnityEngine::Color GetColor() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15842F0))(this);
  }
  void EnableRectClipping(ModdingAPI::Exposed::UnityEngine::Rect rect) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*, ModdingAPI::Exposed::UnityEngine::Rect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584370))(this, rect);
  }
  void DisableRectClipping() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15843D0))(this);
  }
  void SetMaterial(ModdingAPI::Exposed::UnityEngine::Material* material, int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*, ModdingAPI::Exposed::UnityEngine::Material*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584420))(this, material, index);
  }
  ModdingAPI::Exposed::UnityEngine::Material* GetMaterial(int32_t index) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584490))(this, index);
  }
  void SetPopMaterial(ModdingAPI::Exposed::UnityEngine::Material* material, int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*, ModdingAPI::Exposed::UnityEngine::Material*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15844F0))(this, material, index);
  }
  void SetTexture(ModdingAPI::Exposed::UnityEngine::Texture* texture) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*, ModdingAPI::Exposed::UnityEngine::Texture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584560))(this, texture);
  }
  void SetAlphaTexture(ModdingAPI::Exposed::UnityEngine::Texture* texture) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*, ModdingAPI::Exposed::UnityEngine::Texture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15845C0))(this, texture);
  }
  void SetMesh(ModdingAPI::Exposed::UnityEngine::Mesh* mesh) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*, ModdingAPI::Exposed::UnityEngine::Mesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584620))(this, mesh);
  }
  void Clear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584680))(this);
  }
  void SetAlpha(float alpha) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15846D0))(this, alpha);
  }
  void SetMaterial(ModdingAPI::Exposed::UnityEngine::Material* material, ModdingAPI::Exposed::UnityEngine::Texture* texture) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*, ModdingAPI::Exposed::UnityEngine::Material*, ModdingAPI::Exposed::UnityEngine::Texture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15847B0))(this, material, texture);
  }
  ModdingAPI::Exposed::UnityEngine::Material* GetMaterial() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584990))(this);
  }
  void SetColor_Injected(ModdingAPI::Exposed::UnityEngine::Color color) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584C90))(this, color);
  }
  void GetColor_Injected(ModdingAPI::Exposed::UnityEngine::Color ret) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584CF0))(this, ret);
  }
  void EnableRectClipping_Injected(ModdingAPI::Exposed::UnityEngine::Rect rect) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::CanvasRenderer*, ModdingAPI::Exposed::UnityEngine::Rect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584D50))(this, rect);
  }

  // Static methods:
  static inline void SplitUIVertexStreams(ModdingAPI::Exposed::System::Collections::Generic::List_T_* verts, ModdingAPI::Exposed::System::Collections::Generic::List_T_* positions, ModdingAPI::Exposed::System::Collections::Generic::List_T_* colors, ModdingAPI::Exposed::System::Collections::Generic::List_T_* uv0S, ModdingAPI::Exposed::System::Collections::Generic::List_T_* uv1S, ModdingAPI::Exposed::System::Collections::Generic::List_T_* uv2S, ModdingAPI::Exposed::System::Collections::Generic::List_T_* uv3S, ModdingAPI::Exposed::System::Collections::Generic::List_T_* normals, ModdingAPI::Exposed::System::Collections::Generic::List_T_* tangents, ModdingAPI::Exposed::System::Collections::Generic::List_T_* indices) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15849F0))(verts, positions, colors, uv0S, uv1S, uv2S, uv3S, normals, tangents, indices);
  }
  static inline void CreateUIVertexStream(ModdingAPI::Exposed::System::Collections::Generic::List_T_* verts, ModdingAPI::Exposed::System::Collections::Generic::List_T_* positions, ModdingAPI::Exposed::System::Collections::Generic::List_T_* colors, ModdingAPI::Exposed::System::Collections::Generic::List_T_* uv0S, ModdingAPI::Exposed::System::Collections::Generic::List_T_* uv1S, ModdingAPI::Exposed::System::Collections::Generic::List_T_* uv2S, ModdingAPI::Exposed::System::Collections::Generic::List_T_* uv3S, ModdingAPI::Exposed::System::Collections::Generic::List_T_* normals, ModdingAPI::Exposed::System::Collections::Generic::List_T_* tangents, ModdingAPI::Exposed::System::Collections::Generic::List_T_* indices) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584B10))(verts, positions, colors, uv0S, uv1S, uv2S, uv3S, normals, tangents, indices);
  }
  static inline void AddUIVertexStream(ModdingAPI::Exposed::System::Collections::Generic::List_T_* verts, ModdingAPI::Exposed::System::Collections::Generic::List_T_* positions, ModdingAPI::Exposed::System::Collections::Generic::List_T_* colors, ModdingAPI::Exposed::System::Collections::Generic::List_T_* uv0S, ModdingAPI::Exposed::System::Collections::Generic::List_T_* uv1S, ModdingAPI::Exposed::System::Collections::Generic::List_T_* uv2S, ModdingAPI::Exposed::System::Collections::Generic::List_T_* uv3S, ModdingAPI::Exposed::System::Collections::Generic::List_T_* normals, ModdingAPI::Exposed::System::Collections::Generic::List_T_* tangents) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584BA0))(verts, positions, colors, uv0S, uv1S, uv2S, uv3S, normals, tangents);
  }
  static inline void SplitIndicesStreamsInternal(Il2CppObject* verts, Il2CppObject* indices) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584C30))(verts, indices);
  }
  static inline void SplitUIVertexStreamsInternal(Il2CppObject* verts, Il2CppObject* positions, Il2CppObject* colors, Il2CppObject* uv0S, Il2CppObject* uv1S, Il2CppObject* uv2S, Il2CppObject* uv3S, Il2CppObject* normals, Il2CppObject* tangents) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*, Il2CppObject*, Il2CppObject*, Il2CppObject*, Il2CppObject*, Il2CppObject*, Il2CppObject*, Il2CppObject*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584BA0))(verts, positions, colors, uv0S, uv1S, uv2S, uv3S, normals, tangents);
  }
  static inline void CreateUIVertexStreamInternal(Il2CppObject* verts, Il2CppObject* positions, Il2CppObject* colors, Il2CppObject* uv0S, Il2CppObject* uv1S, Il2CppObject* uv2S, Il2CppObject* uv3S, Il2CppObject* normals, Il2CppObject* tangents, Il2CppObject* indices) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*, Il2CppObject*, Il2CppObject*, Il2CppObject*, Il2CppObject*, Il2CppObject*, Il2CppObject*, Il2CppObject*, Il2CppObject*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1584B10))(verts, positions, colors, uv0S, uv1S, uv2S, uv3S, normals, tangents, indices);
  }
};
}