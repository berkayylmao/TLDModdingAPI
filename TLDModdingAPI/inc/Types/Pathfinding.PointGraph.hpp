// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Matrix4x4.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.LayerMask.hpp"
#include "ModdingAPI.Exposed.Pathfinding.Int3.hpp"
#include "ModdingAPI.Exposed.Pathfinding.NNInfo.hpp"


namespace ModdingAPI::Exposed::Pathfinding {
struct __PointGraph_Il2CppStaticFields {
  ModdingAPI::Exposed::Pathfinding::Int3_array* ThreeDNeighbours;
};

struct __PointGraph_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_CountNodes;
  VirtualInvokeData _5_GetNodes;
  VirtualInvokeData _6_RelocateNodes;
  VirtualInvokeData _7_GetNearest;
  VirtualInvokeData _8_GetNearestForce;
  VirtualInvokeData _9_Awake;
  VirtualInvokeData _10_OnDestroy;
  VirtualInvokeData _11_ScanInternal;
  VirtualInvokeData _12_NodeColor;
  VirtualInvokeData _13_SerializeExtraInfo;
  VirtualInvokeData _14_DeserializeExtraInfo;
  VirtualInvokeData _15_PostDeserialization;
  VirtualInvokeData _16_SerializeSettings;
  VirtualInvokeData _17_DeserializeSettings;
  VirtualInvokeData _18_OnDrawGizmos;
  VirtualInvokeData _19_UnloadGizmoMeshes;
  VirtualInvokeData _20_UpdateArea;
  VirtualInvokeData _21_UpdateAreaInit;
  VirtualInvokeData _22_CanUpdateAsync;
  VirtualInvokeData _23_IsValidConnection;
};

struct __PointGraph_Il2CppClass {
  Il2CppClass_1 _1;
  __PointGraph_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __PointGraph_Il2CppVtbl vtbl;
};

class PointGraph {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C30028;
  static inline    PointGraph* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C511A0;
  static inline    __PointGraph_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline PointGraph* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (PointGraph**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __PointGraph_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__PointGraph_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __PointGraph_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Byte_array* _sguid;
  ModdingAPI::Exposed::AstarPath* active;
  uint32_t initialPenalty;
  bool open;
  uint32_t graphIndex;
  System_String* name;
  bool drawGizmos;
  bool infoScreenOpen;
  ModdingAPI::Exposed::UnityEngine::Matrix4x4 matrix;
  ModdingAPI::Exposed::UnityEngine::Matrix4x4 inverseMatrix;
  ModdingAPI::Exposed::UnityEngine::Transform* root;
  System_String* searchTag;
  float maxDistance;
  ModdingAPI::Exposed::UnityEngine::Vector3 limits;
  bool raycast;
  bool use2DPhysics;
  bool thickRaycast;
  float thickRaycastRadius;
  bool recursive;
  bool autoLinkNodes;
  ModdingAPI::Exposed::UnityEngine::LayerMask mask;
  bool optimizeForSparseGraph;
  bool optimizeFor2D;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* nodeLookup;
  ModdingAPI::Exposed::Pathfinding::Int3 minLookup;
  ModdingAPI::Exposed::Pathfinding::Int3 maxLookup;
  ModdingAPI::Exposed::Pathfinding::Int3 lookupCellSize;
  ModdingAPI::Exposed::Pathfinding::PointNode_array* nodes;
  int32_t nodeCount;

  // Member methods:
  ModdingAPI::Exposed::Pathfinding::Int3 WorldToLookupSpace(ModdingAPI::Exposed::Pathfinding::Int3 p) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::Int3(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*, ModdingAPI::Exposed::Pathfinding::Int3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2549640))(this, p);
  }
  int32_t CountNodes() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x79C620))(this);
  }
  void GetNodes(ModdingAPI::Exposed::Pathfinding::GraphNodeDelegateCancelable* del) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*, ModdingAPI::Exposed::Pathfinding::GraphNodeDelegateCancelable*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2549770))(this, del);
  }
  ModdingAPI::Exposed::Pathfinding::NNInfo GetNearest(ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint, ModdingAPI::Exposed::Pathfinding::GraphNode* hint) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::NNInfo(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::NNConstraint*, ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2549810))(this, position, constraint, hint);
  }
  ModdingAPI::Exposed::Pathfinding::NNInfo GetNearestForce(ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::NNInfo(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::NNConstraint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2549870))(this, position, constraint);
  }
  ModdingAPI::Exposed::Pathfinding::PointNode* AddNode(ModdingAPI::Exposed::Pathfinding::Int3 position) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::PointNode*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*, ModdingAPI::Exposed::Pathfinding::Int3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x254B8A0))(this, position);
  }
  void AddChildren(int32_t c, ModdingAPI::Exposed::UnityEngine::Transform* tr) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*, int32_t, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x254BC40))(this, c, tr);
  }
  void RebuildNodeLookup() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x254C000))(this);
  }
  void AddToLookup(ModdingAPI::Exposed::Pathfinding::PointNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*, ModdingAPI::Exposed::Pathfinding::PointNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x254C4B0))(this, node);
  }
  void ScanInternal(ModdingAPI::Exposed::OnScanStatus* statusCallback) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*, ModdingAPI::Exposed::OnScanStatus*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x254C7C0))(this, statusCallback);
  }
  bool IsValidConnection(ModdingAPI::Exposed::Pathfinding::GraphNode* a, ModdingAPI::Exposed::Pathfinding::GraphNode* b, float dist) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*, ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::Pathfinding::GraphNode*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x254DDD0))(this, a, b, dist);
  }
  int32_t CanUpdateAsync(ModdingAPI::Exposed::Pathfinding::GraphUpdateObject* o) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*, ModdingAPI::Exposed::Pathfinding::GraphUpdateObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this, o);
  }
  void UpdateAreaInit(ModdingAPI::Exposed::Pathfinding::GraphUpdateObject* o) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*, ModdingAPI::Exposed::Pathfinding::GraphUpdateObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, o);
  }
  void UpdateArea(ModdingAPI::Exposed::Pathfinding::GraphUpdateObject* guo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*, ModdingAPI::Exposed::Pathfinding::GraphUpdateObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x254EAB0))(this, guo);
  }
  void PostDeserialization() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x254F550))(this);
  }
  void RelocateNodes(ModdingAPI::Exposed::UnityEngine::Matrix4x4 oldMatrix, ModdingAPI::Exposed::UnityEngine::Matrix4x4 newMatrix) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*, ModdingAPI::Exposed::UnityEngine::Matrix4x4, ModdingAPI::Exposed::UnityEngine::Matrix4x4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x254F560))(this, oldMatrix, newMatrix);
  }
  void SerializeSettings(ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext* ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*, ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x254F5E0))(this, ctx);
  }
  void DeserializeSettings(ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext* ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*, ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x254F890))(this, ctx);
  }
  void SerializeExtraInfo(ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext* ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*, ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x254FBF0))(this, ctx);
  }
  void DeserializeExtraInfo(ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext* ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*, ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x254FD90))(this, ctx);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::PointGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2550040))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::Pathfinding::Int3_array*> ThreeDNeighbours = __CppStaticProperty<ModdingAPI::Exposed::Pathfinding::Int3_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->ThreeDNeighbours; }
  );

  // Static methods:
  static inline int32_t CountChildren(ModdingAPI::Exposed::UnityEngine::Transform* tr) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x254BA30))(tr);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2550070))();
  }
};
}