// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.Rewired.Demos.SimpleCombinedKeyboardMouseRemapping.TargetMapping.hpp"


namespace ModdingAPI::Exposed::Rewired::Demos {
struct __SimpleCombinedKeyboardMouseRemapping_Il2CppStaticFields {
};

struct __SimpleCombinedKeyboardMouseRemapping_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SimpleCombinedKeyboardMouseRemapping_Il2CppClass {
  Il2CppClass_1 _1;
  __SimpleCombinedKeyboardMouseRemapping_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SimpleCombinedKeyboardMouseRemapping_Il2CppVtbl vtbl;
};

class SimpleCombinedKeyboardMouseRemapping {
public:
  // Il2Cpp fields:
  __SimpleCombinedKeyboardMouseRemapping_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::Rewired::InputMapper* inputMapper_keyboard;
  ModdingAPI::Exposed::Rewired::InputMapper* inputMapper_mouse;
  ModdingAPI::Exposed::UnityEngine::GameObject* buttonPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* textPrefab;
  ModdingAPI::Exposed::UnityEngine::RectTransform* fieldGroupTransform;
  ModdingAPI::Exposed::UnityEngine::RectTransform* actionGroupTransform;
  ModdingAPI::Exposed::UnityEngine::UI::Text* controllerNameUIText;
  ModdingAPI::Exposed::UnityEngine::UI::Text* statusUIText;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* rows;
  ModdingAPI::Exposed::Rewired::Demos::SimpleCombinedKeyboardMouseRemapping::TargetMapping _replaceTargetMapping;

  // Member methods:
  ModdingAPI::Exposed::Rewired::Player* get_player() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::Player*(__fastcall*)(ModdingAPI::Exposed::Rewired::Demos::SimpleCombinedKeyboardMouseRemapping*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x216A300))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Demos::SimpleCombinedKeyboardMouseRemapping*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x216A3B0))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Demos::SimpleCombinedKeyboardMouseRemapping*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x216A950))(this);
  }
  void RedrawUI() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Demos::SimpleCombinedKeyboardMouseRemapping*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x216A9C0))(this);
  }
  void ClearUI() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Demos::SimpleCombinedKeyboardMouseRemapping*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x216AFF0))(this);
  }
  void InitializeUI() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Demos::SimpleCombinedKeyboardMouseRemapping*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x216B140))(this);
  }
  void CreateUIRow(ModdingAPI::Exposed::Rewired::InputAction* action, int32_t actionRange, System_String* label) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Demos::SimpleCombinedKeyboardMouseRemapping*, ModdingAPI::Exposed::Rewired::InputAction*, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x216B8F0))(this, action, actionRange, label);
  }
  void OnInputFieldClicked(int32_t index, int32_t actionElementMapToReplaceId) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Demos::SimpleCombinedKeyboardMouseRemapping*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x216BDD0))(this, index, actionElementMapToReplaceId);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* StartListeningDelayed(int32_t index, ModdingAPI::Exposed::Rewired::ControllerMap* keyboardMap, ModdingAPI::Exposed::Rewired::ControllerMap* mouseMap, int32_t actionElementMapToReplaceId) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::Rewired::Demos::SimpleCombinedKeyboardMouseRemapping*, int32_t, ModdingAPI::Exposed::Rewired::ControllerMap*, ModdingAPI::Exposed::Rewired::ControllerMap*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x216C0F0))(this, index, keyboardMap, mouseMap, actionElementMapToReplaceId);
  }
  void OnInputMapped(ModdingAPI::Exposed::Rewired::InputMapper::InputMappedEventData* data) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Demos::SimpleCombinedKeyboardMouseRemapping*, ModdingAPI::Exposed::Rewired::InputMapper::InputMappedEventData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x216C270))(this, data);
  }
  void OnStopped(ModdingAPI::Exposed::Rewired::InputMapper::StoppedEventData* data) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Demos::SimpleCombinedKeyboardMouseRemapping*, ModdingAPI::Exposed::Rewired::InputMapper::StoppedEventData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x216C300))(this, data);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Demos::SimpleCombinedKeyboardMouseRemapping*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x216C3F0))(this);
  }
};
}