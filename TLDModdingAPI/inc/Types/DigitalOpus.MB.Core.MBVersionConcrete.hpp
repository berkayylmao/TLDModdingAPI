// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector4.hpp"


namespace ModdingAPI::Exposed::DigitalOpus::MB::Core {
struct __MBVersionConcrete_Il2CppStaticFields {
};

struct __MBVersionConcrete_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_version;
  VirtualInvokeData _5_GetMajorVersion;
  VirtualInvokeData _6_GetMinorVersion;
  VirtualInvokeData _7_GetActive;
  VirtualInvokeData _8_SetActive;
  VirtualInvokeData _9_SetActiveRecursively;
  VirtualInvokeData _10_FindSceneObjectsOfType;
  VirtualInvokeData _11_IsRunningAndMeshNotReadWriteable;
  VirtualInvokeData _12_GetMeshUV3orUV4;
  VirtualInvokeData _13_MeshClear;
  VirtualInvokeData _14_MeshAssignUV3;
  VirtualInvokeData _15_MeshAssignUV4;
  VirtualInvokeData _16_GetLightmapTilingOffset;
  VirtualInvokeData _17_GetBones;
  VirtualInvokeData _18_OptimizeMesh;
  VirtualInvokeData _19_GetBlendShapeFrameCount;
  VirtualInvokeData _20_GetBlendShapeFrameWeight;
  VirtualInvokeData _21_GetBlendShapeFrameVertices;
  VirtualInvokeData _22_ClearBlendShapes;
  VirtualInvokeData _23_AddBlendShapeFrame;
  VirtualInvokeData _24_MaxMeshVertexCount;
  VirtualInvokeData _25_SetMeshIndexFormatAndClearMesh;
};

struct __MBVersionConcrete_Il2CppClass {
  Il2CppClass_1 _1;
  __MBVersionConcrete_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MBVersionConcrete_Il2CppVtbl vtbl;
};

class MBVersionConcrete {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C5A408;
  static inline    MBVersionConcrete* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C79F60;
  static inline    __MBVersionConcrete_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline MBVersionConcrete* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (MBVersionConcrete**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __MBVersionConcrete_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__MBVersionConcrete_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __MBVersionConcrete_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::UnityEngine::Vector2 _HALF_UV;

  // Member methods:
  System_String* version() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD0810))(this);
  }
  int32_t GetMajorVersion() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD0890))(this);
  }
  int32_t GetMinorVersion() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD09F0))(this);
  }
  bool GetActive(ModdingAPI::Exposed::UnityEngine::GameObject* go) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD0B50))(this, go);
  }
  void SetActive(ModdingAPI::Exposed::UnityEngine::GameObject* go, bool isActive) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::UnityEngine::GameObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD0BB0))(this, go, isActive);
  }
  void SetActiveRecursively(ModdingAPI::Exposed::UnityEngine::GameObject* go, bool isActive) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::UnityEngine::GameObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD0BB0))(this, go, isActive);
  }
  ModdingAPI::Exposed::UnityEngine::Object_array* FindSceneObjectsOfType(ModdingAPI::Exposed::System::Type* t) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Object_array*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD0C20))(this, t);
  }
  void OptimizeMesh(ModdingAPI::Exposed::UnityEngine::Mesh* m) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::UnityEngine::Mesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, m);
  }
  bool IsRunningAndMeshNotReadWriteable(ModdingAPI::Exposed::UnityEngine::Mesh* m) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::UnityEngine::Mesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD0CF0))(this, m);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2_array* GetMeshUV1s(ModdingAPI::Exposed::UnityEngine::Mesh* m, int32_t LOG_LEVEL) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2_array*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD0DA0))(this, m, LOG_LEVEL);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2_array* GetMeshUV3orUV4(ModdingAPI::Exposed::UnityEngine::Mesh* m, bool get3, int32_t LOG_LEVEL) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2_array*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::UnityEngine::Mesh*, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD0FC0))(this, m, get3, LOG_LEVEL);
  }
  void MeshClear(ModdingAPI::Exposed::UnityEngine::Mesh* m, bool t) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::UnityEngine::Mesh*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD1370))(this, m, t);
  }
  void MeshAssignUV3(ModdingAPI::Exposed::UnityEngine::Mesh* m, ModdingAPI::Exposed::UnityEngine::Vector2_array* uv3s) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::UnityEngine::Mesh*, ModdingAPI::Exposed::UnityEngine::Vector2_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD13E0))(this, m, uv3s);
  }
  void MeshAssignUV4(ModdingAPI::Exposed::UnityEngine::Mesh* m, ModdingAPI::Exposed::UnityEngine::Vector2_array* uv4s) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::UnityEngine::Mesh*, ModdingAPI::Exposed::UnityEngine::Vector2_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD1480))(this, m, uv4s);
  }
  ModdingAPI::Exposed::UnityEngine::Vector4 GetLightmapTilingOffset(ModdingAPI::Exposed::UnityEngine::Renderer* r) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector4(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::UnityEngine::Renderer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD14B0))(this, r);
  }
  ModdingAPI::Exposed::UnityEngine::Transform_array* GetBones(ModdingAPI::Exposed::UnityEngine::Renderer* r) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Transform_array*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::UnityEngine::Renderer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD1540))(this, r);
  }
  int32_t GetBlendShapeFrameCount(ModdingAPI::Exposed::UnityEngine::Mesh* m, int32_t shapeIndex) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD1800))(this, m, shapeIndex);
  }
  float GetBlendShapeFrameWeight(ModdingAPI::Exposed::UnityEngine::Mesh* m, int32_t shapeIndex, int32_t frameIndex) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD1870))(this, m, shapeIndex, frameIndex);
  }
  void GetBlendShapeFrameVertices(ModdingAPI::Exposed::UnityEngine::Mesh* m, int32_t shapeIndex, int32_t frameIndex, ModdingAPI::Exposed::UnityEngine::Vector3_array* vs, ModdingAPI::Exposed::UnityEngine::Vector3_array* ns, ModdingAPI::Exposed::UnityEngine::Vector3_array* ts) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Vector3_array*, ModdingAPI::Exposed::UnityEngine::Vector3_array*, ModdingAPI::Exposed::UnityEngine::Vector3_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD18F0))(this, m, shapeIndex, frameIndex, vs, ns, ts);
  }
  void ClearBlendShapes(ModdingAPI::Exposed::UnityEngine::Mesh* m) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::UnityEngine::Mesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD1990))(this, m);
  }
  void AddBlendShapeFrame(ModdingAPI::Exposed::UnityEngine::Mesh* m, System_String* nm, float wt, ModdingAPI::Exposed::UnityEngine::Vector3_array* vs, ModdingAPI::Exposed::UnityEngine::Vector3_array* ns, ModdingAPI::Exposed::UnityEngine::Vector3_array* ts) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::UnityEngine::Mesh*, System_String*, float, ModdingAPI::Exposed::UnityEngine::Vector3_array*, ModdingAPI::Exposed::UnityEngine::Vector3_array*, ModdingAPI::Exposed::UnityEngine::Vector3_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD19F0))(this, m, nm, wt, vs, ns, ts);
  }
  int32_t MaxMeshVertexCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD1A90))(this);
  }
  void SetMeshIndexFormatAndClearMesh(ModdingAPI::Exposed::UnityEngine::Mesh* m, int32_t numVerts, bool vertices, bool justClearTriangles) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*, ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD1AA0))(this, m, numVerts, vertices, justClearTriangles);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionConcrete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD1BA0))(this);
  }
};
}