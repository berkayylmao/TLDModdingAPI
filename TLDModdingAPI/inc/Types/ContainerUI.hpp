// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __ContainerUI_Il2CppStaticFields {
};

struct __ContainerUI_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ContainerUI_Il2CppClass {
  Il2CppClass_1 _1;
  __ContainerUI_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ContainerUI_Il2CppVtbl vtbl;
};

class ContainerUI {
public:
  // Il2Cpp fields:
  __ContainerUI_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UILabel* m_ContainerTitle;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ContainerTableObject;
  ModdingAPI::Exposed::UISprite* m_ContainerCapacityBarSprite;
  ModdingAPI::Exposed::UISprite* m_ContainerCapacityBarOutline;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ContainerScrollbarObject;
  ModdingAPI::Exposed::UnityEngine::GameObject_array* m_DragDropContainers;
  int32_t m_MaxItemsDisplayAtOnceContainer;
  int32_t m_TableConNumColumns;
  float m_TableConSpacingHorizontal;
  float m_TableConSpacingVertical;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ContainerGridBackground;
  ModdingAPI::Exposed::UIWidget* m_ContainerSideWidget;
  ModdingAPI::Exposed::UILabel* m_LabelNoItemsContainer;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_InventoryTableObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_InventoryScrollbarObject;
  ModdingAPI::Exposed::UIWidget* m_InventorySideWidget;
  int32_t m_MaxItemsDisplayAtOnceInventory;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_InventoryGridBackground;
  int32_t m_TableInvNumColumns;
  float m_TableInvSpacingHorizontal;
  float m_TableInvSpacingVertical;
  ModdingAPI::Exposed::UILabel* m_LabelNoItemsInventory;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ButtonMoveItem;
  ModdingAPI::Exposed::UISprite* m_ArrowButtonSprite;
  ModdingAPI::Exposed::UnityEngine::GameObject* InventoryItemPrefab;
  ModdingAPI::Exposed::InventoryGridItem_array* m_ContainerTableItems;
  ModdingAPI::Exposed::InventoryGridItem_array* m_InventoryTableItems;
  ModdingAPI::Exposed::UISlider* m_InventoryScrollbarSlider;
  ModdingAPI::Exposed::UISlider* m_ContainerScrollbarSlider;
  ModdingAPI::Exposed::System::Action* m_OnScrollbarInventoryChanged;
  ModdingAPI::Exposed::System::Action* m_OnScrollbarContainerChanged;
  ModdingAPI::Exposed::System::Action* m_OnMoveItemAction;
  ModdingAPI::Exposed::System::Action* m_OnDragInventoryToContainer;
  ModdingAPI::Exposed::System::Action* m_OnDragContainerToInventory;
  ModdingAPI::Exposed::ScrollbarThumbResizer* m_InventoryScrollbarThumbResizer;
  ModdingAPI::Exposed::ScrollbarThumbResizer* m_ContainerScrollbarThumbResizer;

  // Member methods:
  void Initialize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ContainerUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1971DE0))(this);
  }
  void Enable(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ContainerUI*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1971EF0))(this, enable);
  }
  void SetScrollbarChangeActions(ModdingAPI::Exposed::System::Action* onScrollbarInventoryChanged, ModdingAPI::Exposed::System::Action* onScrollbarContainerChanged) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ContainerUI*, ModdingAPI::Exposed::System::Action*, ModdingAPI::Exposed::System::Action*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19721A0))(this, onScrollbarInventoryChanged, onScrollbarContainerChanged);
  }
  void SetDragAndDropActions(ModdingAPI::Exposed::System::Action* onDragInventoryToContainer, ModdingAPI::Exposed::System::Action* onDragContainerToInventory) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ContainerUI*, ModdingAPI::Exposed::System::Action*, ModdingAPI::Exposed::System::Action*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19721B0))(this, onDragInventoryToContainer, onDragContainerToInventory);
  }
  void SetMoveItemAction(ModdingAPI::Exposed::System::Action* onMoveAction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ContainerUI*, ModdingAPI::Exposed::System::Action*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E090))(this, onMoveAction);
  }
  void OnDragInventoryToContainer() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ContainerUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19721C0))(this);
  }
  void OnDragContainerToInventory() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ContainerUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19721E0))(this);
  }
  void InstantiateContainerTableItems() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ContainerUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1972200))(this);
  }
  void InstantiateInventoryTableItems() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ContainerUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19724B0))(this);
  }
  void OnScrollbarInventoryChange() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ContainerUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1972730))(this);
  }
  void OnScrollbarContainerChange() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ContainerUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1972750))(this);
  }
  void OnMoveItem() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ContainerUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1972770))(this);
  }
  void UpdateScrollbarThumbSize(ModdingAPI::Exposed::System::Collections::Generic::List_T_* filteredInventoryList, ModdingAPI::Exposed::System::Collections::Generic::List_T_* filteredContainerList) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ContainerUI*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1972790))(this, filteredInventoryList, filteredContainerList);
  }
  void RefreshScrollBars(int32_t inventoryFirstItemDisplayedIndexVal, int32_t containerFirstItemDisplayedIndexVal, ModdingAPI::Exposed::System::Collections::Generic::List_T_* filteredInventoryList, ModdingAPI::Exposed::System::Collections::Generic::List_T_* filteredContainerList) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ContainerUI*, int32_t, int32_t, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19728F0))(this, inventoryFirstItemDisplayedIndexVal, containerFirstItemDisplayedIndexVal, filteredInventoryList, filteredContainerList);
  }
  void SetTableSelected(int32_t selectedTable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ContainerUI*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1972B50))(this, selectedTable);
  }
  void SetInventoryItemSelectedIndex(int32_t inventorySelectedItemIndexVal, int32_t selectedTable, int32_t newIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ContainerUI*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1972BC0))(this, inventorySelectedItemIndexVal, selectedTable, newIndex);
  }
  void SetContainerItemSelectedIndex(int32_t containerSelectedItemIndexVal, int32_t selectedTable, int32_t newIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ContainerUI*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1972C90))(this, containerSelectedItemIndexVal, selectedTable, newIndex);
  }
  bool HasSelectedGridItem() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ContainerUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1972D60))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ContainerUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }
};
}