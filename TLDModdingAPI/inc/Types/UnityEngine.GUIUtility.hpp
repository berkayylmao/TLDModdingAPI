// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::UnityEngine::Rect.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector2.hpp"


namespace ModdingAPI::Exposed::UnityEngine {
struct __GUIUtility_Il2CppStaticFields {
  int32_t s_SkinMode;
  int32_t s_OriginalID;
  ModdingAPI::Exposed::System::Action* takeCapture;
  ModdingAPI::Exposed::System::Action* releaseCapture;
  ModdingAPI::Exposed::System::Func_T1__T2__TResult_* processEvent;
  ModdingAPI::Exposed::System::Func_T__TResult_* endContainerGUIFromException;
  ModdingAPI::Exposed::System::Action* enabledStateChanged;
  bool _guiIsExiting_k__BackingField;
};

struct __GUIUtility_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __GUIUtility_Il2CppClass {
  Il2CppClass_1 _1;
  __GUIUtility_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __GUIUtility_Il2CppVtbl vtbl;
};

class GUIUtility {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C42C68;
  static inline    __GUIUtility_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __GUIUtility_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__GUIUtility_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __GUIUtility_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<int32_t> s_SkinMode = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_SkinMode; }
  );
  static inline __CppStaticProperty<int32_t> s_OriginalID = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_OriginalID; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Action*> takeCapture = __CppStaticProperty<ModdingAPI::Exposed::System::Action*>(
   []() { return &GetStaticClassInstance()->pStaticFields->takeCapture; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Action*> releaseCapture = __CppStaticProperty<ModdingAPI::Exposed::System::Action*>(
   []() { return &GetStaticClassInstance()->pStaticFields->releaseCapture; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Func_T1__T2__TResult_*> processEvent = __CppStaticProperty<ModdingAPI::Exposed::System::Func_T1__T2__TResult_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->processEvent; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Func_T__TResult_*> endContainerGUIFromException = __CppStaticProperty<ModdingAPI::Exposed::System::Func_T__TResult_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->endContainerGUIFromException; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Action*> enabledStateChanged = __CppStaticProperty<ModdingAPI::Exposed::System::Action*>(
   []() { return &GetStaticClassInstance()->pStaticFields->enabledStateChanged; }
  );
  static inline __CppStaticProperty<bool> _guiIsExiting_k__BackingField = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->_guiIsExiting_k__BackingField; }
  );

  // Static methods:
  static inline float get_pixelsPerPoint() {
    return reinterpret_cast<float(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1403130))();
  }
  static inline int32_t get_guiDepth() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1403180))();
  }
  static inline void set_mouseUsed(bool value) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14031D0))(value);
  }
  static inline System_String* get_systemCopyBuffer() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x403ED0))();
  }
  static inline void set_systemCopyBuffer(System_String* value) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x403F20))(value);
  }
  static inline int32_t GetControlID(int32_t hint, int32_t focusType, ModdingAPI::Exposed::UnityEngine::Rect rect) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Rect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1403220))(hint, focusType, rect);
  }
  static inline int32_t Internal_GetHotControl() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1403290))();
  }
  static inline int32_t Internal_GetKeyboardControl() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x14032E0))();
  }
  static inline void Internal_SetHotControl(int32_t value) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1403330))(value);
  }
  static inline Il2CppObject* Internal_GetDefaultSkin(int32_t skinMode) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1403380))(skinMode);
  }
  static inline void Internal_ExitGUI() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x14033D0))();
  }
  static inline void MarkGUIChanged() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1403420))();
  }
  static inline int32_t GetControlID(int32_t hint, int32_t focus) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14034B0))(hint, focus);
  }
  static inline Il2CppObject* GetStateObject(ModdingAPI::Exposed::System::Type* t, int32_t controlID) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Type*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1403520))(t, controlID);
  }
  static inline void set_guiIsExiting(bool value) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14035D0))(value);
  }
  static inline int32_t get_hotControl() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1403290))();
  }
  static inline void set_hotControl(int32_t value) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1403330))(value);
  }
  static inline void TakeCapture() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1403660))();
  }
  static inline void RemoveCapture() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x14036F0))();
  }
  static inline int32_t get_keyboardControl() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x14032E0))();
  }
  static inline ModdingAPI::Exposed::UnityEngine::GUISkin* GetDefaultSkin() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GUISkin*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1403780))();
  }
  static inline bool ProcessEvent(int32_t instanceID, intptr_t nativeEventPtr) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1403860))(instanceID, nativeEventPtr);
  }
  static inline void BeginGUI(int32_t skinMode, int32_t instanceID, int32_t useGUILayout) {
    reinterpret_cast<void(__fastcall*)(int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1403920))(skinMode, instanceID, useGUILayout);
  }
  static inline void EndGUI(int32_t layoutType) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1403B20))(layoutType);
  }
  static inline bool EndGUIFromException(ModdingAPI::Exposed::System::Exception* exception) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Exception*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1403EC0))(exception);
  }
  static inline bool EndContainerGUIFromException(ModdingAPI::Exposed::System::Exception* exception) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Exception*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1403FC0))(exception);
  }
  static inline void ResetGlobalState() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1404060))();
  }
  static inline bool IsExitGUIException(ModdingAPI::Exposed::System::Exception* exception) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Exception*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14041A0))(exception);
  }
  static inline bool ShouldRethrowException(ModdingAPI::Exposed::System::Exception* exception) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Exception*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14041A0))(exception);
  }
  static inline void CheckOnGUI() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1404260))();
  }
  static inline void RotateAroundPivot(float angle, ModdingAPI::Exposed::UnityEngine::Vector2 pivotPoint) {
    reinterpret_cast<void(__fastcall*)(float, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1404340))(angle, pivotPoint);
  }
  static inline int32_t GetControlID_Injected(int32_t hint, int32_t focusType, ModdingAPI::Exposed::UnityEngine::Rect rect) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Rect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1404980))(hint, focusType, rect);
  }
};
}