// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.TimeSpan.hpp"
#include "ModdingAPI::Exposed::Newtonsoft::Json::Utilities::ConvertUtils::TypeConvertKey.hpp"
#include "ModdingAPI::Exposed::System::Guid.hpp"


namespace ModdingAPI::Exposed::Newtonsoft::Json::Utilities {
struct __ConvertUtils_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* TypeCodeMap;
  ModdingAPI::Exposed::Newtonsoft::Json::Utilities::TypeInformation_array* PrimitiveTypeCodes;
  ModdingAPI::Exposed::Newtonsoft::Json::Utilities::ThreadSafeStore_TKey__TValue_* CastConverters;
};

struct __ConvertUtils_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ConvertUtils_Il2CppClass {
  Il2CppClass_1 _1;
  __ConvertUtils_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ConvertUtils_Il2CppVtbl vtbl;
};

class ConvertUtils {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C91880;
  static inline    __ConvertUtils_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ConvertUtils_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ConvertUtils_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ConvertUtils_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> TypeCodeMap = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->TypeCodeMap; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::Newtonsoft::Json::Utilities::TypeInformation_array*> PrimitiveTypeCodes = __CppStaticProperty<ModdingAPI::Exposed::Newtonsoft::Json::Utilities::TypeInformation_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->PrimitiveTypeCodes; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::Newtonsoft::Json::Utilities::ThreadSafeStore_TKey__TValue_*> CastConverters = __CppStaticProperty<ModdingAPI::Exposed::Newtonsoft::Json::Utilities::ThreadSafeStore_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->CastConverters; }
  );

  // Static methods:
  static inline int32_t GetTypeCode(ModdingAPI::Exposed::System::Type* t) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7ABC0))(t);
  }
  static inline int32_t GetTypeCode(ModdingAPI::Exposed::System::Type* t, bool isEnum) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Type*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7AC70))(t, isEnum);
  }
  static inline ModdingAPI::Exposed::Newtonsoft::Json::Utilities::TypeInformation* GetTypeInformation(ModdingAPI::Exposed::System::IConvertible* convertable) {
    return reinterpret_cast<ModdingAPI::Exposed::Newtonsoft::Json::Utilities::TypeInformation*(__fastcall*)(ModdingAPI::Exposed::System::IConvertible*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7AF80))(convertable);
  }
  static inline bool IsConvertible(ModdingAPI::Exposed::System::Type* t) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7B080))(t);
  }
  static inline ModdingAPI::Exposed::System::TimeSpan ParseTimeSpan(System_String* input) {
    return reinterpret_cast<ModdingAPI::Exposed::System::TimeSpan(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7B150))(input);
  }
  static inline ModdingAPI::Exposed::System::Func_T__TResult_* CreateCastConverter(ModdingAPI::Exposed::Newtonsoft::Json::Utilities::ConvertUtils::TypeConvertKey t) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Func_T__TResult_*(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Utilities::ConvertUtils::TypeConvertKey)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7B270))(t);
  }
  static inline bool TryConvert(Il2CppObject* initialValue, ModdingAPI::Exposed::System::Globalization::CultureInfo* culture, ModdingAPI::Exposed::System::Type* targetType, Il2CppObject* value) {
    return reinterpret_cast<bool(__fastcall*)(Il2CppObject*, ModdingAPI::Exposed::System::Globalization::CultureInfo*, ModdingAPI::Exposed::System::Type*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7B650))(initialValue, culture, targetType, value);
  }
  static inline int32_t TryConvertInternal(Il2CppObject* initialValue, ModdingAPI::Exposed::System::Globalization::CultureInfo* culture, ModdingAPI::Exposed::System::Type* targetType, Il2CppObject* value) {
    return reinterpret_cast<int32_t(__fastcall*)(Il2CppObject*, ModdingAPI::Exposed::System::Globalization::CultureInfo*, ModdingAPI::Exposed::System::Type*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7B750))(initialValue, culture, targetType, value);
  }
  static inline Il2CppObject* ConvertOrCast(Il2CppObject* initialValue, ModdingAPI::Exposed::System::Globalization::CultureInfo* culture, ModdingAPI::Exposed::System::Type* targetType) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(Il2CppObject*, ModdingAPI::Exposed::System::Globalization::CultureInfo*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7C110))(initialValue, culture, targetType);
  }
  static inline Il2CppObject* EnsureTypeAssignable(Il2CppObject* value, ModdingAPI::Exposed::System::Type* initialType, ModdingAPI::Exposed::System::Type* targetType) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(Il2CppObject*, ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7C2D0))(value, initialType, targetType);
  }
  static inline ModdingAPI::Exposed::System::ComponentModel::TypeConverter* GetConverter(ModdingAPI::Exposed::System::Type* t) {
    return reinterpret_cast<ModdingAPI::Exposed::System::ComponentModel::TypeConverter*(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7C570))(t);
  }
  static inline bool VersionTryParse(System_String* input, ModdingAPI::Exposed::System::Version* result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Version*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7C720))(input, result);
  }
  static inline bool IsInteger(Il2CppObject* value) {
    return reinterpret_cast<bool(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7C890))(value);
  }
  static inline int32_t Int32TryParse(ModdingAPI::Exposed::System::Char_array* chars, int32_t start, int32_t length, int32_t value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Char_array*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7C9B0))(chars, start, length, value);
  }
  static inline int32_t Int64TryParse(ModdingAPI::Exposed::System::Char_array* chars, int32_t start, int32_t length, int64_t value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Char_array*, int32_t, int32_t, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7CB80))(chars, start, length, value);
  }
  static inline bool TryConvertGuid(System_String* s, ModdingAPI::Exposed::System::Guid g) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Guid)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7CD20))(s, g);
  }
  static inline int32_t HexTextToInt(ModdingAPI::Exposed::System::Char_array* text, int32_t start, int32_t end) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Char_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7CF50))(text, start, end);
  }
  static inline int32_t HexCharToInt(wchar_t ch) {
    return reinterpret_cast<int32_t(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7D070))(ch);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xB7D180))();
  }
};
}