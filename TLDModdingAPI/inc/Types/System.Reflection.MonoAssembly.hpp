// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Reflection {
struct __MonoAssembly_Il2CppStaticFields {
};

struct __MonoAssembly_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _8_get_CodeBase;
  VirtualInvokeData _9_get_FullName;
  VirtualInvokeData _10_get_Location;
  VirtualInvokeData _11_GetObjectData;
  VirtualInvokeData _12_IsDefined;
  VirtualInvokeData _13_GetCustomAttributes;
  VirtualInvokeData _14_GetCustomAttributes;
  VirtualInvokeData _15_GetManifestResourceStream;
  VirtualInvokeData _16_GetTypes;
  VirtualInvokeData _17_GetTypes;
  VirtualInvokeData _18_GetExportedTypes;
  VirtualInvokeData _19_GetType;
  VirtualInvokeData _20_GetType;
  VirtualInvokeData _21_GetName;
  VirtualInvokeData _22_GetName;
  VirtualInvokeData _23_CreateInstance;
  VirtualInvokeData _24_GetModules;
  VirtualInvokeData _25_GetModulesInternal;
  VirtualInvokeData _26_GetManifestResourceNames;
  VirtualInvokeData _27_GetManifestResourceInfo;
  VirtualInvokeData _28_get_ReflectionOnly;
  VirtualInvokeData _29_GetType;
  VirtualInvokeData _30_GetModule;
  VirtualInvokeData _31_GetModules;
};

struct __MonoAssembly_Il2CppClass {
  Il2CppClass_1 _1;
  __MonoAssembly_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MonoAssembly_Il2CppVtbl vtbl;
};

class MonoAssembly {
public:
  // Il2Cpp fields:
  __MonoAssembly_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t _mono_assembly;
  ModdingAPI::Exposed::System::Reflection::Assembly::ResolveEventHolder* Assembly_resolve_event_holder;
  Il2CppObject* Assembly__evidence;
  Il2CppObject* Assembly__minimum;
  Il2CppObject* Assembly__optional;
  Il2CppObject* Assembly__refuse;
  Il2CppObject* Assembly__granted;
  Il2CppObject* Assembly__denied;
  bool Assembly_fromByteArray;
  System_String* Assembly_assemblyName;

  // Member methods:
  ModdingAPI::Exposed::System::Type* GetType(System_String* name, bool throwOnError, bool ignoreCase) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoAssembly*, System_String*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF215B0))(this, name, throwOnError, ignoreCase);
  }
  ModdingAPI::Exposed::System::Reflection::Module* GetModule(System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Reflection::Module*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoAssembly*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF216D0))(this, name);
  }
  ModdingAPI::Exposed::System::Reflection::Module_array* GetModules(bool getResourceModules) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Reflection::Module_array*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoAssembly*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF21880))(this, getResourceModules);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoAssembly*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF1960))(this);
  }
};
}