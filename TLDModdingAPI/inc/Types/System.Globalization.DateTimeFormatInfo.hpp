// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Runtime.Serialization.StreamingContext.hpp"
#include "ModdingAPI.Exposed.System.__DTString.hpp"
#include "ModdingAPI::Exposed::System::__DTString.hpp"


namespace ModdingAPI::Exposed::System::Globalization {
struct __DateTimeFormatInfo_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* invariantInfo;
  bool preferExistingTokens;
  ModdingAPI::Exposed::System::Collections::Hashtable* s_calendarNativeNames;
  ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* s_jajpDTFI;
  ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* s_zhtwDTFI;
};

struct __DateTimeFormatInfo_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Clone;
  VirtualInvokeData _5_GetFormat;
};

struct __DateTimeFormatInfo_Il2CppClass {
  Il2CppClass_1 _1;
  __DateTimeFormatInfo_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __DateTimeFormatInfo_Il2CppVtbl vtbl;
};

class DateTimeFormatInfo {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C48718;
  static inline    DateTimeFormatInfo* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C8C888;
  static inline    __DateTimeFormatInfo_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline DateTimeFormatInfo* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (DateTimeFormatInfo**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __DateTimeFormatInfo_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__DateTimeFormatInfo_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __DateTimeFormatInfo_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Globalization::CultureData* m_cultureData;
  System_String* m_name;
  System_String* m_langName;
  ModdingAPI::Exposed::System::Globalization::CompareInfo* m_compareInfo;
  ModdingAPI::Exposed::System::Globalization::CultureInfo* m_cultureInfo;
  System_String* amDesignator;
  System_String* pmDesignator;
  System_String* dateSeparator;
  System_String* generalShortTimePattern;
  System_String* generalLongTimePattern;
  System_String* timeSeparator;
  System_String* monthDayPattern;
  System_String* dateTimeOffsetPattern;
  ModdingAPI::Exposed::System::Globalization::Calendar* calendar;
  int32_t firstDayOfWeek;
  int32_t calendarWeekRule;
  System_String* fullDateTimePattern;
  ModdingAPI::Exposed::System::String_array* abbreviatedDayNames;
  ModdingAPI::Exposed::System::String_array* m_superShortDayNames;
  ModdingAPI::Exposed::System::String_array* dayNames;
  ModdingAPI::Exposed::System::String_array* abbreviatedMonthNames;
  ModdingAPI::Exposed::System::String_array* monthNames;
  ModdingAPI::Exposed::System::String_array* genitiveMonthNames;
  ModdingAPI::Exposed::System::String_array* m_genitiveAbbreviatedMonthNames;
  ModdingAPI::Exposed::System::String_array* leapYearMonthNames;
  System_String* longDatePattern;
  System_String* shortDatePattern;
  System_String* yearMonthPattern;
  System_String* longTimePattern;
  System_String* shortTimePattern;
  ModdingAPI::Exposed::System::String_array* allYearMonthPatterns;
  ModdingAPI::Exposed::System::String_array* allShortDatePatterns;
  ModdingAPI::Exposed::System::String_array* allLongDatePatterns;
  ModdingAPI::Exposed::System::String_array* allShortTimePatterns;
  ModdingAPI::Exposed::System::String_array* allLongTimePatterns;
  ModdingAPI::Exposed::System::String_array* m_eraNames;
  ModdingAPI::Exposed::System::String_array* m_abbrevEraNames;
  ModdingAPI::Exposed::System::String_array* m_abbrevEnglishEraNames;
  ModdingAPI::Exposed::System::Int32_array* optionalCalendars;
  bool m_isReadOnly;
  int32_t formatFlags;
  int32_t CultureID;
  bool m_useUserOverride;
  bool bUseCalendarInfo;
  int32_t nDataItem;
  bool m_isDefaultCalendar;
  ModdingAPI::Exposed::System::String_array* m_dateWords;
  System_String* m_fullTimeSpanPositivePattern;
  System_String* m_fullTimeSpanNegativePattern;
  ModdingAPI::Exposed::System::Globalization::TokenHashValue_array* m_dtfiTokenHash;

  // Member methods:
  System_String* get_CultureName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF85B60))(this);
  }
  ModdingAPI::Exposed::System::Globalization::CultureInfo* get_Culture() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF85B90))(this);
  }
  System_String* get_LanguageName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF85C70))(this);
  }
  ModdingAPI::Exposed::System::String_array* internalGetAbbreviatedDayOfWeekNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF85CA0))(this);
  }
  ModdingAPI::Exposed::System::String_array* internalGetDayOfWeekNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF85D20))(this);
  }
  ModdingAPI::Exposed::System::String_array* internalGetAbbreviatedMonthNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF85DA0))(this);
  }
  ModdingAPI::Exposed::System::String_array* internalGetMonthNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF85E20))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF85EA0))(this);
  }
  void ::ctor(ModdingAPI::Exposed::System::Globalization::CultureData* cultureData, ModdingAPI::Exposed::System::Globalization::Calendar* cal) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, ModdingAPI::Exposed::System::Globalization::CultureData*, ModdingAPI::Exposed::System::Globalization::Calendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF85FA0))(this, cultureData, cal);
  }
  void InitializeOverridableProperties(ModdingAPI::Exposed::System::Globalization::CultureData* cultureData, int32_t calendarID) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, ModdingAPI::Exposed::System::Globalization::CultureData*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF85FD0))(this, cultureData, calendarID);
  }
  void OnDeserialized(ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF861D0))(this, ctx);
  }
  void OnSerializing(ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF86970))(this, ctx);
  }
  Il2CppObject* GetFormat(ModdingAPI::Exposed::System::Type* formatType) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF87250))(this, formatType);
  }
  Il2CppObject* Clone() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF87320))(this);
  }
  System_String* get_AMDesignator() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319970))(this);
  }
  ModdingAPI::Exposed::System::Globalization::Calendar* get_Calendar() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::Calendar*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319950))(this);
  }
  void set_Calendar(ModdingAPI::Exposed::System::Globalization::Calendar* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, ModdingAPI::Exposed::System::Globalization::Calendar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF874D0))(this, value);
  }
  ModdingAPI::Exposed::System::Int32_array* get_OptionalCalendars() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Int32_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF87800))(this);
  }
  ModdingAPI::Exposed::System::String_array* get_EraNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF87840))(this);
  }
  System_String* GetEraName(int32_t era) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF878C0))(this, era);
  }
  ModdingAPI::Exposed::System::String_array* get_AbbreviatedEraNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF87A60))(this);
  }
  System_String* GetAbbreviatedEraName(int32_t era) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF87AE0))(this, era);
  }
  ModdingAPI::Exposed::System::String_array* get_AbbreviatedEnglishEraNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF87CB0))(this);
  }
  System_String* get_DateSeparator() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319980))(this);
  }
  System_String* get_FullDateTimePattern() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF87D30))(this);
  }
  System_String* get_LongDatePattern() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF87E30))(this);
  }
  void set_LongDatePattern(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF87E80))(this, value);
  }
  System_String* get_LongTimePattern() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF87FC0))(this);
  }
  void set_LongTimePattern(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF88030))(this, value);
  }
  System_String* get_MonthDayPattern() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF88170))(this);
  }
  System_String* get_PMDesignator() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319960))(this);
  }
  System_String* get_RFC1123Pattern() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF881E0))(this);
  }
  System_String* get_ShortDatePattern() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF88260))(this);
  }
  void set_ShortDatePattern(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF882B0))(this, value);
  }
  System_String* get_ShortTimePattern() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF883F0))(this);
  }
  void set_ShortTimePattern(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF88460))(this, value);
  }
  System_String* get_SortableDateTimePattern() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF885A0))(this);
  }
  System_String* get_GeneralShortTimePattern() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF88620))(this);
  }
  System_String* get_GeneralLongTimePattern() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF88710))(this);
  }
  System_String* get_DateTimeOffsetPattern() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF88800))(this);
  }
  System_String* get_TimeSeparator() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3199C0))(this);
  }
  System_String* get_UniversalSortableDateTimePattern() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF88A70))(this);
  }
  System_String* get_YearMonthPattern() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF88AF0))(this);
  }
  void set_YearMonthPattern(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF88B40))(this, value);
  }
  ModdingAPI::Exposed::System::String_array* get_AbbreviatedDayNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF88C70))(this);
  }
  ModdingAPI::Exposed::System::String_array* get_DayNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF88DC0))(this);
  }
  ModdingAPI::Exposed::System::String_array* get_AbbreviatedMonthNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF88F10))(this);
  }
  ModdingAPI::Exposed::System::String_array* get_MonthNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF89060))(this);
  }
  bool get_HasSpacesInMonthNames() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF891B0))(this);
  }
  bool get_HasSpacesInDayNames() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF891D0))(this);
  }
  System_String* internalGetMonthName(int32_t month, int32_t style, bool abbreviated) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF891F0))(this, month, style, abbreviated);
  }
  ModdingAPI::Exposed::System::String_array* internalGetGenitiveMonthNames(bool abbreviated) {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF893E0))(this, abbreviated);
  }
  ModdingAPI::Exposed::System::String_array* internalGetLeapYearMonthNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF894D0))(this);
  }
  System_String* GetAbbreviatedDayName(int32_t dayofweek) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF89550))(this, dayofweek);
  }
  ModdingAPI::Exposed::System::String_array* GetAllDateTimePatterns(wchar_t format) {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF898A0))(this, format);
  }
  System_String* GetDayName(int32_t dayofweek) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF89D50))(this, dayofweek);
  }
  System_String* GetAbbreviatedMonthName(int32_t month) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF89EF0))(this, month);
  }
  System_String* GetMonthName(int32_t month) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8A090))(this, month);
  }
  ModdingAPI::Exposed::System::String_array* get_AllYearMonthPatterns() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8A5F0))(this);
  }
  ModdingAPI::Exposed::System::String_array* get_AllShortDatePatterns() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8A6F0))(this);
  }
  ModdingAPI::Exposed::System::String_array* get_AllShortTimePatterns() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8A7F0))(this);
  }
  ModdingAPI::Exposed::System::String_array* get_AllLongDatePatterns() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8A8D0))(this);
  }
  ModdingAPI::Exposed::System::String_array* get_AllLongTimePatterns() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8A9D0))(this);
  }
  ModdingAPI::Exposed::System::String_array* get_UnclonedYearMonthPatterns() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8AAB0))(this);
  }
  ModdingAPI::Exposed::System::String_array* get_UnclonedShortDatePatterns() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8AB30))(this);
  }
  ModdingAPI::Exposed::System::String_array* get_UnclonedLongDatePatterns() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8ABB0))(this);
  }
  ModdingAPI::Exposed::System::String_array* get_UnclonedShortTimePatterns() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8AC30))(this);
  }
  ModdingAPI::Exposed::System::String_array* get_UnclonedLongTimePatterns() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8AC70))(this);
  }
  bool get_IsReadOnly() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8ACB0))(this);
  }
  ModdingAPI::Exposed::System::String_array* get_MonthGenitiveNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8ACC0))(this);
  }
  System_String* get_FullTimeSpanPositivePattern() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8AE70))(this);
  }
  System_String* get_FullTimeSpanNegativePattern() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8B030))(this);
  }
  ModdingAPI::Exposed::System::Globalization::CompareInfo* get_CompareInfo() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CompareInfo*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8B0D0))(this);
  }
  int32_t get_FormatFlags() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8B3C0))(this);
  }
  bool get_HasForceTwoDigitYears() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8B970))(this);
  }
  bool get_HasYearMonthAdjustment() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8B9B0))(this);
  }
  bool YearMonthAdjustment(int32_t year, int32_t month, bool parsedMonthName) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8B9D0))(this, year, month, parsedMonthName);
  }
  void ClearTokenHashTable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8BF60))(this);
  }
  ModdingAPI::Exposed::System::Globalization::TokenHashValue_array* CreateTokenHashTable() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::TokenHashValue_array*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8BF80))(this);
  }
  void AddMonthNames(ModdingAPI::Exposed::System::Globalization::TokenHashValue_array* temp, System_String* monthPostfix) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, ModdingAPI::Exposed::System::Globalization::TokenHashValue_array*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8D370))(this, temp, monthPostfix);
  }
  bool Tokenize(int32_t TokenMask, int32_t tokenType, int32_t tokenValue, ModdingAPI::Exposed::System::__DTString str) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::__DTString)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8D720))(this, TokenMask, tokenType, tokenValue, str);
  }
  void InsertAtCurrentHashNode(ModdingAPI::Exposed::System::Globalization::TokenHashValue_array* hashTable, System_String* str, wchar_t ch, int32_t tokenType, int32_t tokenValue, int32_t pos, int32_t hashcode, int32_t hashProbe) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, ModdingAPI::Exposed::System::Globalization::TokenHashValue_array*, System_String*, wchar_t, int32_t, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8DC20))(this, hashTable, str, ch, tokenType, tokenValue, pos, hashcode, hashProbe);
  }
  void InsertHash(ModdingAPI::Exposed::System::Globalization::TokenHashValue_array* hashTable, System_String* str, int32_t tokenType, int32_t tokenValue) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, ModdingAPI::Exposed::System::Globalization::TokenHashValue_array*, System_String*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8DF20))(this, hashTable, str, tokenType, tokenValue);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*> invariantInfo = __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->invariantInfo; }
  );
  static inline __CppStaticProperty<bool> preferExistingTokens = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->preferExistingTokens; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Hashtable*> s_calendarNativeNames = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Hashtable*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_calendarNativeNames; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*> s_jajpDTFI = __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_jajpDTFI; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*> s_zhtwDTFI = __CppStaticProperty<ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_zhtwDTFI; }
  );

  // Static methods:
  static inline bool InitPreferExistingTokens() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))();
  }
  static inline ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* get_InvariantInfo() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF86C90))();
  }
  static inline ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* get_CurrentInfo() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF86F80))();
  }
  static inline ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* GetInstance(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*(__fastcall*)(ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF870B0))(provider);
  }
  static inline ModdingAPI::Exposed::System::String_array* GetCombinedPatterns(ModdingAPI::Exposed::System::String_array* patterns1, ModdingAPI::Exposed::System::String_array* patterns2, System_String* connectString) {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::System::String_array*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF896F0))(patterns1, patterns2, connectString);
  }
  static inline ModdingAPI::Exposed::System::String_array* GetMergedPatterns(ModdingAPI::Exposed::System::String_array* patterns, System_String* defaultPattern) {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::System::String_array*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8A230))(patterns, defaultPattern);
  }
  static inline void ValidateStyles(int32_t style, System_String* parameterName) {
    reinterpret_cast<void(__fastcall*)(int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8B250))(style, parameterName);
  }
  static inline ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* GetJapaneseCalendarDTFI() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8BB00))();
  }
  static inline ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* GetTaiwanCalendarDTFI() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8BD30))();
  }
  static inline bool TryParseHebrewNumber(ModdingAPI::Exposed::System::__DTString str, bool badFormat, int32_t number) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8D440))(str, badFormat, number);
  }
  static inline bool IsHebrewChar(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8D700))(ch);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF8E400))();
  }
};
}