// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed {
struct __KeroseneLampIntensity_Il2CppStaticFields {
};

struct __KeroseneLampIntensity_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __KeroseneLampIntensity_Il2CppClass {
  Il2CppClass_1 _1;
  __KeroseneLampIntensity_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __KeroseneLampIntensity_Il2CppVtbl vtbl;
};

class KeroseneLampIntensity {
public:
  // Il2Cpp fields:
  __KeroseneLampIntensity_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_Intensity;
  bool m_DynamicIntensity;
  ModdingAPI::Exposed::UnityEngine::AnimationCurve* m_FlameRateMin;
  ModdingAPI::Exposed::UnityEngine::AnimationCurve* m_FlameRateMax;
  ModdingAPI::Exposed::UnityEngine::Gradient* m_FlameColor;
  float m_IndoorIntensity;
  float m_OutdoorIntensity;
  float m_FillIntensity;
  float m_RimIntensity;
  ModdingAPI::Exposed::UnityEngine::Gradient* m_GlassColor;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FlameParticles;
  ModdingAPI::Exposed::LightTracking* m_IndoorLight;
  ModdingAPI::Exposed::LightTracking* m_IndoorLightCore;
  ModdingAPI::Exposed::LightTracking* m_SelfLightFill;
  ModdingAPI::Exposed::LightTracking* m_SelfLightRim;
  ModdingAPI::Exposed::LightTracking* m_OutdoorLight;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_LitGlass;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Glass;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_RadialGradient;
  float m_ParticleIntensity;
  ModdingAPI::Exposed::UnityEngine::ParticleSystem* m_FlameParticles_ParticleSystem;
  ModdingAPI::Exposed::ParticleRandomEmission* m_FlameParticles_ParticleRandomEmission;
  ModdingAPI::Exposed::UnityEngine::Material* m_LitGlassMaterial;
  float m_PreviousIntensity;
  float m_LastIntensitySentToWise;
  ModdingAPI::Exposed::GearItem* m_GearItem;
  float m_MaxFlameParticlesEmission;
  ModdingAPI::Exposed::UnityEngine::Color m_RadialGradientColor;
  float currentCameraAngle;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampIntensity*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x187D880))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampIntensity*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x187DB30))(this);
  }
  void InstantFullEmission() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampIntensity*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x187E4F0))(this);
  }
  void SetIntensity(float intensity) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampIntensity*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x187E690))(this, intensity);
  }
  float GetEmissionRate(ModdingAPI::Exposed::UnityEngine::ParticleSystem* ps) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::KeroseneLampIntensity*, ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1852E50))(this, ps);
  }
  void SetEmissionRate(ModdingAPI::Exposed::UnityEngine::ParticleSystem* ps, float newRate) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampIntensity*, ModdingAPI::Exposed::UnityEngine::ParticleSystem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1852ED0))(this, ps, newRate);
  }
  void MaybeUpdateIntensityRTPC() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampIntensity*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x187E760))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::KeroseneLampIntensity*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1853240))(this);
  }
};
}