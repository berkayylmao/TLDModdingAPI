// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __BowItem_Il2CppStaticFields {
};

struct __BowItem_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __BowItem_Il2CppClass {
  Il2CppClass_1 _1;
  __BowItem_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __BowItem_Il2CppVtbl vtbl;
};

class BowItem {
public:
  // Il2Cpp fields:
  __BowItem_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  System_String* m_DrawAudio;
  System_String* m_HoldAudio;
  System_String* m_ReleaseAudio;
  System_String* m_ArrowNockAudio;
  System_String* m_GearArrowPrefabName;
  float m_SwayValueZeroFatigue;
  float m_SwayValueMaxFatigue;
  float m_SwayIncreasePerSecond;
  float m_SwayDecreasePerSecond;
  float m_SwayEnergyBoostBonus;
  float m_SwayEnergyStimBonus;
  ModdingAPI::Exposed::GearItem* m_GearArrow;
  ModdingAPI::Exposed::GearItem* m_GearBow;
  int32_t m_BowState;
  uint32_t m_HoldAudioInstance;
  float m_SwayValue;
  float m_AimingSwayDropThresholdPercent;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180C5A0))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180C630))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180C640))(this);
  }
  void PressFire() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180C860))(this);
  }
  void OnReadyToAimComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180CC40))(this);
  }
  void ExhaustedRelaxBow() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180CC50))(this);
  }
  void ReleaseFire() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180CF50))(this);
  }
  void OnFireComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180D340))(this);
  }
  void CancelItemInHandsAction() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180D490))(this);
  }
  void ForceReady() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180D550))(this);
  }
  void OnAimToReadyComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180D720))(this);
  }
  bool InReadyState() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180D730))(this);
  }
  bool CanEquipWithArrow() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180D740))(this);
  }
  bool ShouldBeZooming() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180D820))(this);
  }
  int32_t GetNumArrowsInInventory() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180D830))(this);
  }
  bool IsArrowNocked() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180D8E0))(this);
  }
  void UpdateBowState() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180D8F0))(this);
  }
  void SetState(int32_t state) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180D9F0))(this, state);
  }
  bool Equipped() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180DA00))(this);
  }
  void UpdateBowStateReady() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180DBB0))(this);
  }
  void UpdateBowStateReadyToAim() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  float GetSwayIncreasePerSecond() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180DC80))(this);
  }
  float GetSwayDecreasePerSecond() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180DFA0))(this);
  }
  float GetCurrentStaminaPercent() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180E180))(this);
  }
  float GetStaminaDropThresholdPercent() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180E190))(this);
  }
  void UpdateBowStamina() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180E1C0))(this);
  }
  void UpdateBowStateAim() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180E390))(this);
  }
  void MaybeHandleDroppedArrow() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180E650))(this);
  }
  void ShootArrow() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180E860))(this);
  }
  void MaybeSpawnArrow() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180F1C0))(this);
  }
  void OnDequip() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180F400))(this);
  }
  void NockArrow() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180F6C0))(this);
  }
  void OnReloadComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180D720))(this);
  }
  void MakeArrowChildOfBow(ModdingAPI::Exposed::GearItem* arrow) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180FA10))(this, arrow);
  }
  void RemoveArrowChildFromBow(ModdingAPI::Exposed::GearItem* arrow) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x180FE30))(this, arrow);
  }
  void StopHoldAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1810120))(this);
  }
  void ZoomStart() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1810210))(this);
  }
  void ZoomEnd() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1810320))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BowItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1810410))(this);
  }
};
}