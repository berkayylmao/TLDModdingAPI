// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.DateTime.hpp"


namespace ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates {
struct __X509Certificate2ImplMono_Il2CppStaticFields {
  System_String* empty_error;
  ModdingAPI::Exposed::System::Byte_array* commonName;
  ModdingAPI::Exposed::System::Byte_array* email;
  ModdingAPI::Exposed::System::Byte_array* signedData;
};

struct __X509Certificate2ImplMono_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Dispose;
  VirtualInvokeData _5_get_IsValid;
  VirtualInvokeData _6_Clone;
  VirtualInvokeData _7_GetIssuerName;
  VirtualInvokeData _8_GetSubjectName;
  VirtualInvokeData _9_GetRawCertData;
  VirtualInvokeData _10_GetValidFrom;
  VirtualInvokeData _11_GetValidUntil;
  VirtualInvokeData _12_GetCertHash;
  VirtualInvokeData _13_Equals;
  VirtualInvokeData _14_GetSerialNumber;
  VirtualInvokeData _15_ToString;
  VirtualInvokeData _16_Dispose;
  VirtualInvokeData _17_get_PrivateKey;
  VirtualInvokeData _18_get_PublicKey;
  VirtualInvokeData _19_get_SignatureAlgorithm;
  VirtualInvokeData _20_get_Version;
  VirtualInvokeData _21_get_IntermediateCertificates;
  VirtualInvokeData _22_Import;
  VirtualInvokeData _23_Reset;
};

struct __X509Certificate2ImplMono_Il2CppClass {
  Il2CppClass_1 _1;
  __X509Certificate2ImplMono_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __X509Certificate2ImplMono_Il2CppVtbl vtbl;
};

class X509Certificate2ImplMono {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C36F98;
  static inline    __X509Certificate2ImplMono_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __X509Certificate2ImplMono_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__X509Certificate2ImplMono_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __X509Certificate2ImplMono_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Byte_array* X509CertificateImpl_cachedCertificateHash;
  bool _archived;
  ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509ExtensionCollection* _extensions;
  ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::PublicKey* _publicKey;
  ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X500DistinguishedName* issuer_name;
  ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X500DistinguishedName* subject_name;
  ModdingAPI::Exposed::System::Security::Cryptography::Oid* signature_algorithm;
  ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509CertificateImplCollection* intermediateCerts;
  ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1* _cert;

  // Member methods:
  bool get_IsValid() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB14100))(this);
  }
  void ::ctor(ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1* cert) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*, ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A450))(this, cert);
  }
  void ::ctor(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono* other) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*, ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB14110))(this, other);
  }
  ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509CertificateImpl* Clone() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509CertificateImpl*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB14280))(this);
  }
  System_String* GetIssuerName(bool legacyV1Mode) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB143E0))(this, legacyV1Mode);
  }
  System_String* GetSubjectName(bool legacyV1Mode) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB144F0))(this, legacyV1Mode);
  }
  ModdingAPI::Exposed::System::Byte_array* GetRawCertData() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB14600))(this);
  }
  ModdingAPI::Exposed::System::Byte_array* GetCertHash(bool lazy) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB14640))(this, lazy);
  }
  ModdingAPI::Exposed::System::DateTime GetValidFrom() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB146B0))(this);
  }
  ModdingAPI::Exposed::System::DateTime GetValidUntil() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB146F0))(this);
  }
  bool Equals(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509CertificateImpl* other, bool result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*, ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509CertificateImpl*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x945690))(this, other, result);
  }
  ModdingAPI::Exposed::System::Byte_array* GetSerialNumber() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB14730))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB14770))(this);
  }
  ModdingAPI::Exposed::System::Security::Cryptography::AsymmetricAlgorithm* get_PrivateKey() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::Cryptography::AsymmetricAlgorithm*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB14780))(this);
  }
  ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::PublicKey* get_PublicKey() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::PublicKey*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB14AC0))(this);
  }
  ModdingAPI::Exposed::System::Security::Cryptography::Oid* get_SignatureAlgorithm() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::Cryptography::Oid*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB14CF0))(this);
  }
  int32_t get_Version() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB14EF0))(this);
  }
  ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1* ImportPkcs12(ModdingAPI::Exposed::System::Byte_array* rawData, System_String* password) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Security::X509::X509Certificate_Duplicate1*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*, ModdingAPI::Exposed::System::Byte_array*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB14FE0))(this, rawData, password);
  }
  void Import(ModdingAPI::Exposed::System::Byte_array* rawData, System_String* password, int32_t keyStorageFlags) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*, ModdingAPI::Exposed::System::Byte_array*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB15B50))(this, rawData, password, keyStorageFlags);
  }
  void Reset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB15E40))(this);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB15F30))(this);
  }
  System_String* ToString(bool verbose) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB15FD0))(this, verbose);
  }
  ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509CertificateImplCollection* get_IntermediateCertificates() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509CertificateImplCollection*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2ImplMono*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319980))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<System_String*> empty_error = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->empty_error; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*> commonName = __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->commonName; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*> email = __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->email; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*> signedData = __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->signedData; }
  );

  // Static methods:
  static inline void AppendBuffer(ModdingAPI::Exposed::System::Text::StringBuilder* sb, ModdingAPI::Exposed::System::Byte_array* buffer) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::StringBuilder*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB16700))(sb, buffer);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xB16820))();
  }
};
}