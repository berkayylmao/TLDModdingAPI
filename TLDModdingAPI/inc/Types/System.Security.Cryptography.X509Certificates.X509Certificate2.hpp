// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Runtime.Serialization.StreamingContext.hpp"
#include "ModdingAPI.Exposed.System.DateTime.hpp"


namespace ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates {
struct __X509Certificate2_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Byte_array* signedData;
};

struct __X509Certificate2_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization;
  VirtualInvokeData _5_System_Runtime_Serialization_ISerializable_GetObjectData;
  VirtualInvokeData _6_Dispose;
  VirtualInvokeData _7_Equals;
  VirtualInvokeData _8_GetCertHash;
  VirtualInvokeData _9_GetCertHashString;
  VirtualInvokeData _10_GetRawCertData;
  VirtualInvokeData _11_GetSerialNumber;
  VirtualInvokeData _12_GetSerialNumberString;
  VirtualInvokeData _13_ToString;
  VirtualInvokeData _14_Import;
  VirtualInvokeData _15_Dispose;
  VirtualInvokeData _16_Reset;
};

struct __X509Certificate2_Il2CppClass {
  Il2CppClass_1 _1;
  __X509Certificate2_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __X509Certificate2_Il2CppVtbl vtbl;
};

class X509Certificate2 {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C35EB8;
  static inline    __X509Certificate2_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __X509Certificate2_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__X509Certificate2_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __X509Certificate2_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509CertificateImpl* X509Certificate_impl;
  bool X509Certificate_hideDates;
  System_String* X509Certificate_issuer_name;
  System_String* X509Certificate_subject_name;
  System_String* friendlyName;

  // Member methods:
  ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2Impl* get_Impl() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2Impl*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB13040))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB13120))(this);
  }
  void ::ctor(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo* info, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2*, ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB131B0))(this, info, context);
  }
  ModdingAPI::Exposed::System::DateTime get_NotAfter() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB13350))(this);
  }
  ModdingAPI::Exposed::System::DateTime get_NotBefore() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB13390))(this);
  }
  ModdingAPI::Exposed::System::Security::Cryptography::AsymmetricAlgorithm* get_PrivateKey() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::Cryptography::AsymmetricAlgorithm*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB133D0))(this);
  }
  ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::PublicKey* get_PublicKey() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::PublicKey*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB13400))(this);
  }
  System_String* get_SerialNumber() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB13430))(this);
  }
  ModdingAPI::Exposed::System::Security::Cryptography::Oid* get_SignatureAlgorithm() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::Cryptography::Oid*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB13450))(this);
  }
  System_String* get_Thumbprint() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA579E0))(this);
  }
  int32_t get_Version() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB13480))(this);
  }
  void Import(ModdingAPI::Exposed::System::Byte_array* rawData, System_String* password, int32_t keyStorageFlags) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2*, ModdingAPI::Exposed::System::Byte_array*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB134B0))(this, rawData, password, keyStorageFlags);
  }
  void Reset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB13510))(this);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB135C0))(this);
  }
  System_String* ToString(bool verbose) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::X509Certificates::X509Certificate2*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB136D0))(this, verbose);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*> signedData = __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->signedData; }
  );

  // Static methods:
  static inline void AppendBuffer(ModdingAPI::Exposed::System::Text::StringBuilder* sb, ModdingAPI::Exposed::System::Byte_array* buffer) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::StringBuilder*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB13E30))(sb, buffer);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xB13F50))();
  }
};
}