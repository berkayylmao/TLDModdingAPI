// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Security::Cryptography {
struct __DESTransform_Il2CppStaticFields {
  int32_t KEY_BIT_SIZE;
  int32_t KEY_BYTE_SIZE;
  int32_t BLOCK_BIT_SIZE;
  int32_t BLOCK_BYTE_SIZE;
  ModdingAPI::Exposed::System::UInt32_array* spBoxes;
  ModdingAPI::Exposed::System::Byte_array* PC1;
  ModdingAPI::Exposed::System::Byte_array* leftRotTotal;
  ModdingAPI::Exposed::System::Byte_array* PC2;
  ModdingAPI::Exposed::System::UInt32_array* ipTab;
  ModdingAPI::Exposed::System::UInt32_array* fpTab;
};

struct __DESTransform_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _9_System_IDisposable_Dispose;
  VirtualInvokeData _10_Dispose;
  VirtualInvokeData _11_get_CanTransformMultipleBlocks;
  VirtualInvokeData _12_get_InputBlockSize;
  VirtualInvokeData _13_get_OutputBlockSize;
  VirtualInvokeData _14_Transform;
  VirtualInvokeData _15_ECB;
  VirtualInvokeData _16_CBC;
  VirtualInvokeData _17_CFB;
  VirtualInvokeData _18_OFB;
  VirtualInvokeData _19_CTS;
  VirtualInvokeData _20_TransformBlock;
  VirtualInvokeData _21_FinalEncrypt;
  VirtualInvokeData _22_FinalDecrypt;
  VirtualInvokeData _23_TransformFinalBlock;
};

struct __DESTransform_Il2CppClass {
  Il2CppClass_1 _1;
  __DESTransform_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __DESTransform_Il2CppVtbl vtbl;
};

class DESTransform {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C491D0;
  static inline    __DESTransform_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __DESTransform_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__DESTransform_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __DESTransform_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Security::Cryptography::SymmetricAlgorithm* algo;
  bool encrypt;
  int32_t BlockSizeByte;
  ModdingAPI::Exposed::System::Byte_array* temp;
  ModdingAPI::Exposed::System::Byte_array* temp2;
  ModdingAPI::Exposed::System::Byte_array* SymmetricTransform_workBuff;
  ModdingAPI::Exposed::System::Byte_array* SymmetricTransform_workout;
  int32_t padmode;
  int32_t FeedBackByte;
  bool SymmetricTransform_m_disposed;
  bool lastBlock;
  ModdingAPI::Exposed::System::Security::Cryptography::RandomNumberGenerator* SymmetricTransform__rng;
  ModdingAPI::Exposed::System::Byte_array* keySchedule;
  ModdingAPI::Exposed::System::Byte_array* byteBuff;
  ModdingAPI::Exposed::System::UInt32_array* dwordBuff;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Security::Cryptography::SymmetricAlgorithm* symmAlgo, bool encryption, ModdingAPI::Exposed::System::Byte_array* key, ModdingAPI::Exposed::System::Byte_array* iv) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::DESTransform*, ModdingAPI::Exposed::System::Security::Cryptography::SymmetricAlgorithm*, bool, ModdingAPI::Exposed::System::Byte_array*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDD17E0))(this, symmAlgo, encryption, key, iv);
  }
  uint32_t CipherFunct(uint32_t r, int32_t n) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::DESTransform*, uint32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDD1C00))(this, r, n);
  }
  void SetKey(ModdingAPI::Exposed::System::Byte_array* key) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::DESTransform*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDD27A0))(this, key);
  }
  void ProcessBlock(ModdingAPI::Exposed::System::Byte_array* input, ModdingAPI::Exposed::System::Byte_array* output) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::DESTransform*, ModdingAPI::Exposed::System::Byte_array*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDD2CD0))(this, input, output);
  }
  void ECB(ModdingAPI::Exposed::System::Byte_array* input, ModdingAPI::Exposed::System::Byte_array* output) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::Cryptography::DESTransform*, ModdingAPI::Exposed::System::Byte_array*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDD31F0))(this, input, output);
  }

  // Static fields:
  static inline __CppStaticProperty<int32_t> KEY_BIT_SIZE = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->KEY_BIT_SIZE; }
  );
  static inline __CppStaticProperty<int32_t> KEY_BYTE_SIZE = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->KEY_BYTE_SIZE; }
  );
  static inline __CppStaticProperty<int32_t> BLOCK_BIT_SIZE = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->BLOCK_BIT_SIZE; }
  );
  static inline __CppStaticProperty<int32_t> BLOCK_BYTE_SIZE = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->BLOCK_BYTE_SIZE; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::UInt32_array*> spBoxes = __CppStaticProperty<ModdingAPI::Exposed::System::UInt32_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->spBoxes; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*> PC1 = __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->PC1; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*> leftRotTotal = __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->leftRotTotal; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*> PC2 = __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->PC2; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::UInt32_array*> ipTab = __CppStaticProperty<ModdingAPI::Exposed::System::UInt32_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->ipTab; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::UInt32_array*> fpTab = __CppStaticProperty<ModdingAPI::Exposed::System::UInt32_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->fpTab; }
  );

  // Static methods:
  static inline void Permutation(ModdingAPI::Exposed::System::Byte_array* input, ModdingAPI::Exposed::System::Byte_array* output, ModdingAPI::Exposed::System::UInt32_array* permTab, bool preSwap) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, ModdingAPI::Exposed::System::Byte_array*, ModdingAPI::Exposed::System::UInt32_array*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDD2040))(input, output, permTab, preSwap);
  }
  static inline void BSwap(ModdingAPI::Exposed::System::Byte_array* byteBuff) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDD2600))(byteBuff);
  }
  static inline ModdingAPI::Exposed::System::Byte_array* GetStrongKey() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xDD3300))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xDD3450))();
  }
};
}