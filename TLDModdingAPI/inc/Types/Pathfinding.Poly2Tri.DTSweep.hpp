// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Pathfinding::Poly2Tri {
struct __DTSweep_Il2CppStaticFields {
};

struct __DTSweep_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __DTSweep_Il2CppClass {
  Il2CppClass_1 _1;
  __DTSweep_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __DTSweep_Il2CppVtbl vtbl;
};

class DTSweep {
public:
  // Il2Cpp fields:
  __DTSweep_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline void Triangulate(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150D360))(tcx);
  }
  static inline void Sweep(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150D4C0))(tcx);
  }
  static inline void FinalizationConvexHull(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150D730))(tcx);
  }
  static inline void TurnAdvancingFrontConvex(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* b, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* c) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150DCC0))(tcx, b, c);
  }
  static inline void FinalizationPolygon(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150DEF0))(tcx);
  }
  static inline ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* PointEvent(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* point) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150E010))(tcx, point);
  }
  static inline ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* NewFrontTriangle(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* point, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150E250))(tcx, point, node);
  }
  static inline void EdgeEvent(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150E5B0))(tcx, edge, node);
  }
  static inline void FillEdgeEvent(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150E7B0))(tcx, edge, node);
  }
  static inline void FillRightConcaveEdgeEvent(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150E7F0))(tcx, edge, node);
  }
  static inline void FillRightConvexEdgeEvent(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150E9A0))(tcx, edge, node);
  }
  static inline void FillRightBelowEdgeEvent(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150EB80))(tcx, edge, node);
  }
  static inline void FillRightAboveEdgeEvent(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150ED50))(tcx, edge, node);
  }
  static inline void FillLeftConvexEdgeEvent(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150EF20))(tcx, edge, node);
  }
  static inline void FillLeftConcaveEdgeEvent(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150F100))(tcx, edge, node);
  }
  static inline void FillLeftBelowEdgeEvent(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150F2B0))(tcx, edge, node);
  }
  static inline void FillLeftAboveEdgeEvent(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint* edge, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepConstraint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150F480))(tcx, edge, node);
  }
  static inline bool IsEdgeSideOfTriangle(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle* triangle, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* ep, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* eq) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150F650))(triangle, ep, eq);
  }
  static inline void EdgeEvent(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* ep, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* eq, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle* triangle, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* point) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150F760))(tcx, ep, eq, triangle, point);
  }
  static inline void FlipEdgeEvent(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* ep, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* eq, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle* t, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150F9E0))(tcx, ep, eq, t, p);
  }
  static inline ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* NextFlipPoint(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* ep, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* eq, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle* ot, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* op) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150FDC0))(ep, eq, ot, op);
  }
  static inline ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle* NextFlipTriangle(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, int32_t o, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle* t, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle* ot, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* op) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, int32_t, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x150FF50))(tcx, o, t, ot, p, op);
  }
  static inline void FlipScanEdgeEvent(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* ep, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* eq, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle* flipTriangle, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle* t, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1510020))(tcx, ep, eq, flipTriangle, t, p);
  }
  static inline void FillAdvancingFront(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* n) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1510250))(tcx, n);
  }
  static inline void FillBasin(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15104B0))(tcx, node);
  }
  static inline void FillBasinReq(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1510880))(tcx, node);
  }
  static inline bool IsShallow(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1510BC0))(tcx, node);
  }
  static inline double HoleAngle(ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1510CB0))(node);
  }
  static inline double BasinAngle(ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1510E70))(node);
  }
  static inline void Fill(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::AdvancingFrontNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1510FC0))(tcx, node);
  }
  static inline bool Legalize(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext* tcx, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle* t) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DTSweepContext*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1511240))(tcx, t);
  }
  static inline void RotateTrianglePair(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle* t, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* p, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle* ot, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint* op) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::DelaunayTriangle*, ModdingAPI::Exposed::Pathfinding::Poly2Tri::TriangulationPoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15114E0))(t, p, ot, op);
  }
};
}