// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector4.hpp"


namespace ModdingAPI::Exposed::AmplifyBloom {
struct __AmplifyLensFlare_Il2CppStaticFields {
};

struct __AmplifyLensFlare_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Destroy;
};

struct __AmplifyLensFlare_Il2CppClass {
  Il2CppClass_1 _1;
  __AmplifyLensFlare_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AmplifyLensFlare_Il2CppVtbl vtbl;
};

class AmplifyLensFlare {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C3F2E8;
  static inline    __AmplifyLensFlare_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __AmplifyLensFlare_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__AmplifyLensFlare_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __AmplifyLensFlare_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  float m_overallIntensity;
  float m_normalizedGhostIntensity;
  float m_normalizedHaloIntensity;
  bool m_applyLensFlare;
  int32_t m_lensFlareGhostAmount;
  ModdingAPI::Exposed::UnityEngine::Vector4 m_lensFlareGhostsParams;
  float m_lensFlareGhostChrDistortion;
  ModdingAPI::Exposed::UnityEngine::Gradient* m_lensGradient;
  ModdingAPI::Exposed::UnityEngine::Texture2D* m_lensFlareGradTexture;
  ModdingAPI::Exposed::UnityEngine::Color_array* m_lensFlareGradColor;
  ModdingAPI::Exposed::UnityEngine::Vector4 m_lensFlareHaloParams;
  float m_lensFlareHaloChrDistortion;
  int32_t m_lensFlareGaussianBlurAmount;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C97C80))(this);
  }
  void Destroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C980C0))(this);
  }
  void CreateLUTexture() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C981B0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::RenderTexture* ApplyFlare(ModdingAPI::Exposed::UnityEngine::Material* material, ModdingAPI::Exposed::UnityEngine::RenderTexture* source) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::RenderTexture*(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, ModdingAPI::Exposed::UnityEngine::Material*, ModdingAPI::Exposed::UnityEngine::RenderTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C98370))(this, material, source);
  }
  void TextureFromGradient() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C98750))(this);
  }
  bool get_ApplyLensFlare() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x310EB0))(this);
  }
  void set_ApplyLensFlare(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x310EC0))(this, value);
  }
  float get_OverallIntensity() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5914A0))(this);
  }
  void set_OverallIntensity(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C988F0))(this, value);
  }
  int32_t get_LensFlareGhostAmount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x37AAE0))(this);
  }
  void set_LensFlareGhostAmount(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3838E0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector4 get_LensFlareGhostsParams() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector4(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F50D0))(this);
  }
  void set_LensFlareGhostsParams(ModdingAPI::Exposed::UnityEngine::Vector4 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, ModdingAPI::Exposed::UnityEngine::Vector4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C98930))(this, value);
  }
  float get_LensFlareNormalizedGhostsIntensity() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x580F50))(this);
  }
  void set_LensFlareNormalizedGhostsIntensity(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C98940))(this, value);
  }
  float get_LensFlareGhostsIntensity() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x591530))(this);
  }
  void set_LensFlareGhostsIntensity(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C98970))(this, value);
  }
  float get_LensFlareGhostsDispersal() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56ED60))(this);
  }
  void set_LensFlareGhostsDispersal(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7B8D40))(this, value);
  }
  float get_LensFlareGhostsPowerFactor() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56EDA0))(this);
  }
  void set_LensFlareGhostsPowerFactor(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7B8D50))(this, value);
  }
  float get_LensFlareGhostsPowerFalloff() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x581030))(this);
  }
  void set_LensFlareGhostsPowerFalloff(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x807930))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Gradient* get_LensFlareGradient() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Gradient*(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319970))(this);
  }
  void set_LensFlareGradient(ModdingAPI::Exposed::UnityEngine::Gradient* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, ModdingAPI::Exposed::UnityEngine::Gradient*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A420))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector4 get_LensFlareHaloParams() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector4(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5F49C0))(this);
  }
  void set_LensFlareHaloParams(ModdingAPI::Exposed::UnityEngine::Vector4 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, ModdingAPI::Exposed::UnityEngine::Vector4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C98990))(this, value);
  }
  float get_LensFlareNormalizedHaloIntensity() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x88C900))(this);
  }
  void set_LensFlareNormalizedHaloIntensity(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C989A0))(this, value);
  }
  float get_LensFlareHaloIntensity() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56EF50))(this);
  }
  void set_LensFlareHaloIntensity(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C989D0))(this, value);
  }
  float get_LensFlareHaloWidth() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56EF90))(this);
  }
  void set_LensFlareHaloWidth(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C91850))(this, value);
  }
  float get_LensFlareHaloPowerFactor() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56EFD0))(this);
  }
  void set_LensFlareHaloPowerFactor(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C989F0))(this, value);
  }
  float get_LensFlareHaloPowerFalloff() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56F010))(this);
  }
  void set_LensFlareHaloPowerFalloff(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C98A00))(this, value);
  }
  float get_LensFlareGhostChrDistortion() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6AB810))(this);
  }
  void set_LensFlareGhostChrDistortion(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFEEBA0))(this, value);
  }
  float get_LensFlareHaloChrDistortion() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56F070))(this);
  }
  void set_LensFlareHaloChrDistortion(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C918A0))(this, value);
  }
  int32_t get_LensFlareGaussianBlurAmount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3839A0))(this);
  }
  void set_LensFlareGaussianBlurAmount(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AmplifyBloom::AmplifyLensFlare*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3839B0))(this, value);
  }
};
}