// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Quaternion.hpp"


namespace ModdingAPI::Exposed::Rewired::Platforms::PS4 {
struct __PS4ControllerExtension_Il2CppStaticFields {
};

struct __PS4ControllerExtension_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Clear;
  VirtualInvokeData _5_SourceUpdated;
  VirtualInvokeData _6_UpdateData;
  VirtualInvokeData _7_Clone;
  VirtualInvokeData _8_get_vibrationMotorCount;
  VirtualInvokeData _9_SetVibration;
  VirtualInvokeData _10_SetVibration;
  VirtualInvokeData _11_SetVibration;
  VirtualInvokeData _12_SetVibration;
  VirtualInvokeData _13_GetVibration;
  VirtualInvokeData _14_StopVibration;
  VirtualInvokeData _15_GetAccelerometerValueRaw;
  VirtualInvokeData _16_GetAccelerometerValue;
  VirtualInvokeData _17_GetOrientation;
  VirtualInvokeData _18_ResetOrientation;
  VirtualInvokeData _19_SetLightColor;
  VirtualInvokeData _20_SetLightColor;
  VirtualInvokeData _21_SetLightColor;
};

struct __PS4ControllerExtension_Il2CppClass {
  Il2CppClass_1 _1;
  __PS4ControllerExtension_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __PS4ControllerExtension_Il2CppVtbl vtbl;
};

class PS4ControllerExtension {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C5DF50;
  static inline    __PS4ControllerExtension_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __PS4ControllerExtension_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__PS4ControllerExtension_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __PS4ControllerExtension_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::Rewired::Controller* Extension_eRiZsSFDNrFJxnreKaUhJBCLIKi;
  ModdingAPI::Exposed::Rewired::Interfaces::IControllerExtensionSource* Extension_ovJjdavCVCSQaRYvkKYaPvETjMV;
  int32_t _reInputId;
  ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::TimerAbs_array* KosJyRCFGBmXDFYPLNJGraJLqqn;

  // Member methods:
  ModdingAPI::Exposed::Rewired::Platforms::PS4::IPS4ControllerExtensionSource* get_Source() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::Platforms::PS4::IPS4ControllerExtensionSource*(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x761410))(this);
  }
  ModdingAPI::Exposed::Rewired::Joystick* get_joystick() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::Joystick*(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x761510))(this);
  }
  void ::ctor(ModdingAPI::Exposed::Rewired::Platforms::PS4::IPS4ControllerExtensionSource* source) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*, ModdingAPI::Exposed::Rewired::Platforms::PS4::IPS4ControllerExtensionSource*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x761620))(this, source);
  }
  void ::ctor(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension* source) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*, ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x761850))(this, source);
  }
  int32_t get_userStatusCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x761A40))(this);
  }
  bool get_userIsPrimary() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x761B50))(this);
  }
  int32_t get_userId() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x761C60))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Color get_userColor() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x761D70))(this);
  }
  int32_t get_userColorId() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x761EA0))(this);
  }
  System_String* get_userName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x761FB0))(this);
  }
  int32_t get_vibrationMotorCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7620D0))(this);
  }
  void SetVibration(int32_t motorIndex, float motorLevel) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7621E0))(this, motorIndex, motorLevel);
  }
  void SetVibration(int32_t motorIndex, float motorLevel, float duration) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*, int32_t, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7622F0))(this, motorIndex, motorLevel, duration);
  }
  void SetVibration(int32_t motorIndex, float motorLevel, bool stopOtherMotors) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*, int32_t, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x762310))(this, motorIndex, motorLevel, stopOtherMotors);
  }
  void SetVibration(int32_t motorIndex, float motorLevel, float duration, bool stopOtherMotors) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*, int32_t, float, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x762330))(this, motorIndex, motorLevel, duration, stopOtherMotors);
  }
  float GetVibration(int32_t motorIndex) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x762720))(this, motorIndex);
  }
  void StopVibration() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x762870))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetAccelerometerValueRaw() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x762A90))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetAccelerometerValue() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x762CA0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetLastGyroscopeValueRaw() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x762DF0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetLastGyroscopeValue() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x762F40))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Quaternion GetOrientationRaw() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Quaternion(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x763090))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Quaternion GetOrientation() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Quaternion(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7631D0))(this);
  }
  void ResetOrientation() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x763310))(this);
  }
  void SetMotionSensorState(bool enabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x763420))(this, enabled);
  }
  void SetTiltCorrectionState(bool enabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x763560))(this, enabled);
  }
  void SetAngularVelocityDeadbandState(bool enabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x763680))(this, enabled);
  }
  void SetLightColor(ModdingAPI::Exposed::UnityEngine::Color color) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7637A0))(this, color);
  }
  void SetLightColor(float red, float green, float blue) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7638B0))(this, red, green, blue);
  }
  void SetLightColor(float red, float green, float blue, float intensity) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7639E0))(this, red, green, blue, intensity);
  }
  void ResetLight() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x763DA0))(this);
  }
  void UpdateData(int32_t ) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x763EB0))(this, );
  }
  void SourceUpdated(ModdingAPI::Exposed::Rewired::Interfaces::IControllerExtensionSource* ) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*, ModdingAPI::Exposed::Rewired::Interfaces::IControllerExtensionSource*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, );
  }
  ModdingAPI::Exposed::Rewired::Controller::Extension* Clone() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::Controller::Extension*(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x764030))(this);
  }
  void TjSCsCuKRPHYrJnKinvAHWyqKyl() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x763EB0))(this);
  }
  void kAgdYhzIkUgCLKYsnFgFdkDFBomp(int32_t , float , float ) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Platforms::PS4::PS4ControllerExtension*, int32_t, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x764180))(this, , , );
  }
};
}