// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System {
struct __Math_Il2CppStaticFields {
  double doubleRoundLimit;
  ModdingAPI::Exposed::System::Double_array* roundPower10Double;
};

struct __Math_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Math_Il2CppClass {
  Il2CppClass_1 _1;
  __Math_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Math_Il2CppVtbl vtbl;
};

class Math {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C24D68;
  static inline    Math* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C6CD88;
  static inline    __Math_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline Math* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (Math**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __Math_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Math_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Math_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<double> doubleRoundLimit = __CppStaticProperty<double>(
   []() { return &GetStaticClassInstance()->pStaticFields->doubleRoundLimit; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Double_array*> roundPower10Double = __CppStaticProperty<ModdingAPI::Exposed::System::Double_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->roundPower10Double; }
  );

  // Static methods:
  static inline double Acos(double d) {
    return reinterpret_cast<double(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD90E0))(d);
  }
  static inline double Asin(double d) {
    return reinterpret_cast<double(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD90F0))(d);
  }
  static inline double Atan(double d) {
    return reinterpret_cast<double(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9100))(d);
  }
  static inline double Atan2(double y, double x) {
    return reinterpret_cast<double(__fastcall*)(double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9110))(y, x);
  }
  static inline double Ceiling(double a) {
    return reinterpret_cast<double(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9120))(a);
  }
  static inline double Cos(double d) {
    return reinterpret_cast<double(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9130))(d);
  }
  static inline double Floor(double d) {
    return reinterpret_cast<double(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9140))(d);
  }
  static inline double InternalRound(double value, int32_t digits, int32_t mode) {
    return reinterpret_cast<double(__fastcall*)(double, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9150))(value, digits, mode);
  }
  static inline double InternalTruncate(double d) {
    return reinterpret_cast<double(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9390))(d);
  }
  static inline double Sin(double a) {
    return reinterpret_cast<double(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9440))(a);
  }
  static inline double Tan(double a) {
    return reinterpret_cast<double(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9450))(a);
  }
  static inline double Round(double a) {
    return reinterpret_cast<double(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9460))(a);
  }
  static inline double Round(double value, int32_t mode) {
    return reinterpret_cast<double(__fastcall*)(double, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9470))(value, mode);
  }
  static inline double Round(double value, int32_t digits, int32_t mode) {
    return reinterpret_cast<double(__fastcall*)(double, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9520))(value, digits, mode);
  }
  static inline double SplitFractionDouble(double* value) {
    return reinterpret_cast<double(__fastcall*)(double*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD96F0))(value);
  }
  static inline double Truncate(double d) {
    return reinterpret_cast<double(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9700))(d);
  }
  static inline double Sqrt(double d) {
    return reinterpret_cast<double(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9830))(d);
  }
  static inline double Log(double d) {
    return reinterpret_cast<double(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9840))(d);
  }
  static inline double Log10(double d) {
    return reinterpret_cast<double(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9850))(d);
  }
  static inline double Exp(double d) {
    return reinterpret_cast<double(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9860))(d);
  }
  static inline double Pow(double x, double y) {
    return reinterpret_cast<double(__fastcall*)(double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9870))(x, y);
  }
  static inline double IEEERemainder(double x, double y) {
    return reinterpret_cast<double(__fastcall*)(double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9880))(x, y);
  }
  static inline int32_t Abs(int32_t value) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9BA0))(value);
  }
  static inline int32_t AbsHelper(int32_t value) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9CE0))(value);
  }
  static inline int64_t Abs(int64_t value) {
    return reinterpret_cast<int64_t(__fastcall*)(int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9DB0))(value);
  }
  static inline int64_t AbsHelper(int64_t value) {
    return reinterpret_cast<int64_t(__fastcall*)(int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9F00))(value);
  }
  static inline float Abs(float value) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9FD0))(value);
  }
  static inline double Abs(double value) {
    return reinterpret_cast<double(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD9FF0))(value);
  }
  static inline uint16_t Max(uint16_t val1, uint16_t val2) {
    return reinterpret_cast<uint16_t(__fastcall*)(uint16_t, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0740))(val1, val2);
  }
  static inline int32_t Max(int32_t val1, int32_t val2) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0750))(val1, val2);
  }
  static inline uint32_t Max(uint32_t val1, uint32_t val2) {
    return reinterpret_cast<uint32_t(__fastcall*)(uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0760))(val1, val2);
  }
  static inline int64_t Max(int64_t val1, int64_t val2) {
    return reinterpret_cast<int64_t(__fastcall*)(int64_t, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0770))(val1, val2);
  }
  static inline float Max(float val1, float val2) {
    return reinterpret_cast<float(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCDA000))(val1, val2);
  }
  static inline double Max(double val1, double val2) {
    return reinterpret_cast<double(__fastcall*)(double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCDA020))(val1, val2);
  }
  static inline int32_t Min(int32_t val1, int32_t val2) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD07F0))(val1, val2);
  }
  static inline uint32_t Min(uint32_t val1, uint32_t val2) {
    return reinterpret_cast<uint32_t(__fastcall*)(uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0800))(val1, val2);
  }
  static inline int64_t Min(int64_t val1, int64_t val2) {
    return reinterpret_cast<int64_t(__fastcall*)(int64_t, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0810))(val1, val2);
  }
  static inline float Min(float val1, float val2) {
    return reinterpret_cast<float(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCDA110))(val1, val2);
  }
  static inline double Min(double val1, double val2) {
    return reinterpret_cast<double(__fastcall*)(double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCDA130))(val1, val2);
  }
  static inline double Log(double a, double newBase) {
    return reinterpret_cast<double(__fastcall*)(double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCDA220))(a, newBase);
  }
  static inline int32_t Sign(double value) {
    return reinterpret_cast<int32_t(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCDA3D0))(value);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xCDA4E0))();
  }
};
}