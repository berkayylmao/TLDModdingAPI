// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __CookingPotItem_Il2CppStaticFields {
  ModdingAPI::Exposed::CookingPotItemSaveDataProxy* m_CookingPotItemSaveDataProxy;
};

struct __CookingPotItem_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __CookingPotItem_Il2CppClass {
  Il2CppClass_1 _1;
  __CookingPotItem_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CookingPotItem_Il2CppVtbl vtbl;
};

class CookingPotItem {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C4C4E0;
  static inline    __CookingPotItem_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __CookingPotItem_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__CookingPotItem_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __CookingPotItem_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool m_CanCookMeat;
  bool m_CanCookGrub;
  bool m_CanCookLiquid;
  bool m_CanOnlyWarmUpFood;
  float m_WaterCapacityLiters;
  float m_ConditionPercentDamageFromBurningFood;
  float m_ConditionPercentDamageFromBoilingDry;
  float m_CookingTimeMultiplier;
  float m_ReadyTimeMultiplier;
  float m_BoilingTimeMultiplier;
  float m_LampOilMultiplier;
  float m_CookedCalorieMultiplier;
  float m_NearFireWarmUpCookingTimeMultiplier;
  float m_NearFireWarmUpReadyTimeMultiplier;
  float m_WarningMinutesBeforeCooked;
  float m_WarningMinutesBeforeRuined;
  int32_t m_GrubMeshType;
  ModdingAPI::Exposed::UnityEngine::MeshFilter* m_GrubMeshFilter;
  ModdingAPI::Exposed::UnityEngine::MeshRenderer* m_GrubMeshRenderer;
  ModdingAPI::Exposed::UnityEngine::Material_array* m_RuinedFoodMaterialsList;
  ModdingAPI::Exposed::UnityEngine::Material_array* m_MeltSnowMaterialsList;
  ModdingAPI::Exposed::UnityEngine::Material_array* m_BoilWaterPotMaterialsList;
  ModdingAPI::Exposed::UnityEngine::Material_array* m_BoilWaterReadyMaterialsList;
  ModdingAPI::Exposed::UnityEngine::Mesh* m_SnowMesh;
  ModdingAPI::Exposed::UnityEngine::Mesh* m_WaterMesh;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ParticlesItemCooking;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ParticlesItemReady;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ParticlesItemRuined;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ParticlesSnowMelting;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ParticlesWaterBoiling;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ParticlesWaterReady;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ParticlesWaterRuined;
  ModdingAPI::Exposed::Fire* m_FireBeingUsed;
  ModdingAPI::Exposed::GearPlacePoint* m_GearPlacePointAttachedTo;
  ModdingAPI::Exposed::GearItem* m_GearItemBeingCooked;
  ModdingAPI::Exposed::GearItem* m_GearItemSpawnedForInspectMode;
  ModdingAPI::Exposed::GearItem* m_GearItemToEatDrinkFromInspectMode;
  float m_CookingElapsedHours;
  float m_GracePeriodElapsedHours;
  System_String* m_GearItemGUIDFromDeserialize;
  float m_LitersSnowBeingMelted;
  float m_LitersWaterBeingBoiled;
  int32_t m_CookingState;
  float m_PercentCooked;
  float m_PercentRuined;
  float m_MinutesUntilCooked;
  float m_MinutesUntilRuined;
  bool m_ForceParticleUpdate;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ParticlesCurrentlyEnabled;
  bool m_IsBeingInspected;
  bool m_IsBeingPlaced;
  ModdingAPI::Exposed::Fire* m_CachedFireBeingUsed;
  ModdingAPI::Exposed::GearPlacePoint* m_CachedGearPlacePoint;
  uint32_t m_CookingAudioId;
  bool m_ShouldInterruptPassTime;
  bool m_HasDoneReattachCheck;
  float m_CookingStateEventCooldown;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19745D0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1974700))(this);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1974E20))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1974F20))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19753C0))(this, text);
  }
  bool ShouldProcessInteractionInternal() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19756A0))(this);
  }
  bool CanOpenCookingInterface() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19756E0))(this);
  }
  bool ProcessInteraction() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19757D0))(this);
  }
  bool CanCookItem(ModdingAPI::Exposed::GearItem* gi) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1975A50))(this, gi);
  }
  void StartCooking(ModdingAPI::Exposed::GearItem* gearItemToCook) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1975BB0))(this, gearItemToCook);
  }
  void StartMeltingSnow(float amountToMelt) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1976AC0))(this, amountToMelt);
  }
  void StartBoilingWater(float amountToBoil, bool doWaterRemoval) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1976BB0))(this, amountToBoil, doWaterRemoval);
  }
  void AttachToFire(ModdingAPI::Exposed::Fire* fire, ModdingAPI::Exposed::GearPlacePoint* gpp) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*, ModdingAPI::Exposed::Fire*, ModdingAPI::Exposed::GearPlacePoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1976D80))(this, fire, gpp);
  }
  void DetachFromFire() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1976D90))(this);
  }
  ModdingAPI::Exposed::Fire* GetFireBeingUsed() {
    return reinterpret_cast<ModdingAPI::Exposed::Fire*(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F4090))(this);
  }
  System_String* GetHoverText() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1976DB0))(this);
  }
  bool IsDummyPot() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1977930))(this);
  }
  bool IsCookingSomething() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19779D0))(this);
  }
  ModdingAPI::Exposed::GearItem* MaybeSpawnGearItemForInspectMode() {
    return reinterpret_cast<ModdingAPI::Exposed::GearItem*(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1977AB0))(this);
  }
  ModdingAPI::Exposed::GearItem* GetGearItemForInspectMode() {
    return reinterpret_cast<ModdingAPI::Exposed::GearItem*(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1978010))(this);
  }
  bool ShouldShowPotModelInInspect() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19780E0))(this);
  }
  void PickUpCookedItem() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1978110))(this);
  }
  void DoSpecialActionFromInspectMode(float volumeAvailable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1978330))(this, volumeAvailable);
  }
  void InspectModeCallback() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1978690))(this);
  }
  float GetTotalCookMultiplier() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19788C0))(this);
  }
  float GetTotalBoilMultiplier() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1978990))(this);
  }
  float GetTotalReadyMultiplier() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1978A60))(this);
  }
  void EnterPlaceMesh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1978B70))(this);
  }
  void RestoreCachedFire() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1978D00))(this);
  }
  void ExitPlaceMesh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1978D20))(this);
  }
  int32_t GetCookingState() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1230))(this);
  }
  bool IsAttachedToGearPlacePoint() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1979220))(this);
  }
  bool AttachedFireIsBurning() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19792D0))(this);
  }
  void PlayPutBackFromInspectAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19793B0))(this);
  }
  void PlayStowFromInspectAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1979620))(this);
  }
  void PlayGearItemInsidePickupAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19797E0))(this);
  }
  void PlayAttachToFireAudio(ModdingAPI::Exposed::GearPlacePoint* gpp) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*, ModdingAPI::Exposed::GearPlacePoint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x19798B0))(this, gpp);
  }
  void PickUpCookedGearItem(bool addToInventory) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1979A20))(this, addToInventory);
  }
  void SetCookedGearProperties(ModdingAPI::Exposed::GearItem* rawItem, ModdingAPI::Exposed::GearItem* cookedItem) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*, ModdingAPI::Exposed::GearItem*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197AAD0))(this, rawItem, cookedItem);
  }
  void FindGearItemBeingCooked(System_String* guid) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197AF20))(this, guid);
  }
  void UpdateGearItemBeingCooked() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197B4A0))(this);
  }
  float ModifiedCookTimeMinutes() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197B530))(this);
  }
  float ModifiedReadyTimeMinutes() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197B5B0))(this);
  }
  void UpdateMeltingSnow() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197B620))(this);
  }
  void UpdateBoilingWater() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197B7B0))(this);
  }
  void UpdateCookingTimeAndState(float cookTimeMinutes, float readyTimeMinutes) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197B960))(this, cookTimeMinutes, readyTimeMinutes);
  }
  void UpdateVisuals() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197C080))(this);
  }
  void PickUpSnow() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197C2D0))(this);
  }
  void PickUpWater() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197C640))(this);
  }
  void HideItemBeingCooked() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197CB00))(this);
  }
  void SetUpGrubMesh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197CBF0))(this);
  }
  void SetUpWaterMesh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197D2D0))(this);
  }
  void SetCookingState(int32_t cookingState) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197D380))(this, cookingState);
  }
  void UpdateParticles() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197D500))(this);
  }
  void TurnOnParticles(ModdingAPI::Exposed::UnityEngine::GameObject* particlesToTurnOn) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197D620))(this, particlesToTurnOn);
  }
  void SetShaderBlendAmt(float blendAmt) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197DAF0))(this, blendAmt);
  }
  void DoConditionDamageToPot() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197DC20))(this);
  }
  void SetRuinedFoodMaterial() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197DDB0))(this);
  }
  void UpdateAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197E270))(this);
  }
  void StartInspectMode() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197E5B0))(this);
  }
  void MaybeInterruptPassTime() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197E8C0))(this);
  }
  void MaybeFlagItemAsOpened() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197E9E0))(this);
  }
  void SetUpDummyPotMeatMesh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197EB20))(this);
  }
  void CheckForFireBurntOut() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197ED20))(this);
  }
  bool BroadcastEventWithItemName(System_String* eventName) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197EE90))(this, eventName);
  }
  bool IsItemBeingCookedHot() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197F110))(this);
  }
  void ResetHeatLoss() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197F250))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CookingPotItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x197F370))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::CookingPotItemSaveDataProxy*> m_CookingPotItemSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::CookingPotItemSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_CookingPotItemSaveDataProxy; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x197F3C0))();
  }
};
}