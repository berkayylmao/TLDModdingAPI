// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Collections {
struct __CollectionBase_Il2CppStaticFields {
};

struct __CollectionBase_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_System_Collections_IList_get_Item;
  VirtualInvokeData _5_System_Collections_IList_set_Item;
  VirtualInvokeData _6_System_Collections_IList_Add;
  VirtualInvokeData _7_System_Collections_IList_Contains;
  VirtualInvokeData _8_Clear;
  VirtualInvokeData _9_System_Collections_IList_get_IsReadOnly;
  VirtualInvokeData _10_System_Collections_IList_get_IsFixedSize;
  VirtualInvokeData _11_System_Collections_IList_IndexOf;
  VirtualInvokeData _12_System_Collections_IList_Insert;
  VirtualInvokeData _13_System_Collections_IList_Remove;
  VirtualInvokeData _14_RemoveAt;
  VirtualInvokeData _15_System_Collections_ICollection_CopyTo;
  VirtualInvokeData _16_get_Count;
  VirtualInvokeData _17_System_Collections_ICollection_get_SyncRoot;
  VirtualInvokeData _18_System_Collections_ICollection_get_IsSynchronized;
  VirtualInvokeData _19_GetEnumerator;
  VirtualInvokeData _20_OnSet;
  VirtualInvokeData _21_OnInsert;
  VirtualInvokeData _22_OnClear;
  VirtualInvokeData _23_OnRemove;
  VirtualInvokeData _24_OnValidate;
  VirtualInvokeData _25_OnSetComplete;
  VirtualInvokeData _26_OnInsertComplete;
  VirtualInvokeData _27_OnClearComplete;
  VirtualInvokeData _28_OnRemoveComplete;
};

struct __CollectionBase_Il2CppClass {
  Il2CppClass_1 _1;
  __CollectionBase_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CollectionBase_Il2CppVtbl vtbl;
};

class CollectionBase {
public:
  // Il2Cpp fields:
  __CollectionBase_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Collections::ArrayList* list;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE02FB0))(this);
  }
  ModdingAPI::Exposed::System::Collections::ArrayList* get_InnerList() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::ArrayList*(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE03100))(this);
  }
  ModdingAPI::Exposed::System::Collections::IList* get_List() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IList*(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3201B0))(this);
  }
  int32_t get_Count() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE03260))(this);
  }
  void Clear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE03280))(this);
  }
  void RemoveAt(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE032E0))(this, index);
  }
  bool System::Collections::IList::get_IsReadOnly() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE034D0))(this);
  }
  bool System::Collections::IList::get_IsFixedSize() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE03500))(this);
  }
  bool System::Collections::ICollection::get_IsSynchronized() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE03530))(this);
  }
  Il2CppObject* System::Collections::ICollection::get_SyncRoot() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE03560))(this);
  }
  void System::Collections::ICollection::CopyTo(ModdingAPI::Exposed::System::Array* array, int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*, ModdingAPI::Exposed::System::Array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE03590))(this, array, index);
  }
  Il2CppObject* System::Collections::IList::get_Item(int32_t index) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE035E0))(this, index);
  }
  void System::Collections::IList::set_Item(int32_t index, Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*, int32_t, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE03700))(this, index, value);
  }
  bool System::Collections::IList::Contains(Il2CppObject* value) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE03910))(this, value);
  }
  int32_t System::Collections::IList::Add(Il2CppObject* value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE03950))(this, value);
  }
  void System::Collections::IList::Remove(Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE03AD0))(this, value);
  }
  int32_t System::Collections::IList::IndexOf(Il2CppObject* value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE03C90))(this, value);
  }
  void System::Collections::IList::Insert(int32_t index, Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*, int32_t, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE03CD0))(this, index, value);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* GetEnumerator() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE03E90))(this);
  }
  void OnSet(int32_t index, Il2CppObject* oldValue, Il2CppObject* newValue) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*, int32_t, Il2CppObject*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, index, oldValue, newValue);
  }
  void OnInsert(int32_t index, Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*, int32_t, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, index, value);
  }
  void OnClear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnRemove(int32_t index, Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*, int32_t, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, index, value);
  }
  void OnValidate(Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE03EC0))(this, value);
  }
  void OnSetComplete(int32_t index, Il2CppObject* oldValue, Il2CppObject* newValue) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*, int32_t, Il2CppObject*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, index, oldValue, newValue);
  }
  void OnInsertComplete(int32_t index, Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*, int32_t, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, index, value);
  }
  void OnClearComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnRemoveComplete(int32_t index, Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::CollectionBase*, int32_t, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, index, value);
  }
};
}