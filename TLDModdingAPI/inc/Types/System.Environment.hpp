// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System {
struct __Environment_Il2CppStaticFields {
  System_String* nl;
  ModdingAPI::Exposed::System::OperatingSystem* os;
};

struct __Environment_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Environment_Il2CppClass {
  Il2CppClass_1 _1;
  __Environment_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Environment_Il2CppVtbl vtbl;
};

class Environment {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C23250;
  static inline    __Environment_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Environment_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Environment_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Environment_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<System_String*> nl = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->nl; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::OperatingSystem*> os = __CppStaticProperty<ModdingAPI::Exposed::System::OperatingSystem*>(
   []() { return &GetStaticClassInstance()->pStaticFields->os; }
  );

  // Static methods:
  static inline System_String* GetResourceString(System_String* key) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3201B0))(key);
  }
  static inline System_String* GetResourceString(System_String* key, ModdingAPI::Exposed::System::Object_array* values) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Object_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x659C10))(key, values);
  }
  static inline System_String* GetResourceStringEncodingName(int32_t codePage) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x659CD0))(codePage);
  }
  static inline int32_t get_CurrentManagedThreadId() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x659E20))();
  }
  static inline bool get_HasShutdownStarted() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x659E70))();
  }
  static inline System_String* get_MachineName() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x659E80))();
  }
  static inline System_String* GetNewLine() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x659E90))();
  }
  static inline System_String* get_NewLine() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x659EB0))();
  }
  static inline int32_t get_Platform() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x3201C0))();
  }
  static inline System_String* GetOSVersionString() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x659F70))();
  }
  static inline ModdingAPI::Exposed::System::OperatingSystem* get_OSVersion() {
    return reinterpret_cast<ModdingAPI::Exposed::System::OperatingSystem*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x65A0A0))();
  }
  static inline ModdingAPI::Exposed::System::Version* CreateVersionFromString(System_String* info) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Version*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65A360))(info);
  }
  static inline System_String* get_StackTrace() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x65A710))();
  }
  static inline int32_t get_TickCount() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x65A870))();
  }
  static inline System_String* get_UserDomainName() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x659E80))();
  }
  static inline System_String* get_UserName() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x65A8B0))();
  }
  static inline void Exit(int32_t exitCode) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65A8C0))(exitCode);
  }
  static inline System_String* ExpandEnvironmentVariables(System_String* name) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65A8D0))(name);
  }
  static inline ModdingAPI::Exposed::System::String_array* GetCommandLineArgs() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x65ACA0))();
  }
  static inline System_String* internalGetEnvironmentVariable_native(intptr_t variable) {
    return reinterpret_cast<System_String*(__fastcall*)(intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65AE20))(variable);
  }
  static inline System_String* internalGetEnvironmentVariable(System_String* variable) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65AF70))(variable);
  }
  static inline System_String* GetEnvironmentVariable(System_String* variable) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65B230))(variable);
  }
  static inline ModdingAPI::Exposed::System::Collections::Hashtable* GetEnvironmentVariablesNoCase() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Hashtable*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x65B240))();
  }
  static inline ModdingAPI::Exposed::System::Collections::IDictionary* GetEnvironmentVariables() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IDictionary*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x65B440))();
  }
  static inline System_String* GetFolderPath(int32_t folder) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65B600))(folder);
  }
  static inline System_String* GetWindowsFolderPath(int32_t folder) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65B610))(folder);
  }
  static inline System_String* GetFolderPath(int32_t folder, int32_t option) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65B600))(folder, option);
  }
  static inline System_String* ReadXdgUserDir(System_String* config_dir, System_String* home_dir, System_String* key, System_String* fallback) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65B620))(config_dir, home_dir, key, fallback);
  }
  static inline System_String* UnixGetFolderPath(int32_t folder, int32_t option) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65BAE0))(folder, option);
  }
  static inline void FailFast(System_String* message) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65BEC0))(message);
  }
  static inline void FailFast(System_String* message, ModdingAPI::Exposed::System::Exception* exception) {
    reinterpret_cast<void(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Exception*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65BF10))(message, exception);
  }
  static inline bool get_Is64BitProcess() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x403F70))();
  }
  static inline int32_t get_ProcessorCount() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x65BF70))();
  }
  static inline bool get_IsRunningOnWindows() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x403F70))();
  }
  static inline ModdingAPI::Exposed::System::String_array* GetEnvironmentVariableNames() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x65BF90))();
  }
  static inline System_String* GetMachineConfigPath() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x65BFA0))();
  }
  static inline System_String* internalGetHome() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x65BFB0))();
  }
  static inline int32_t GetPageSize() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x65C040))();
  }
  static inline System_String* GetStackTrace(ModdingAPI::Exposed::System::Exception* e, bool needFileInfo) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Exception*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x65C050))(e, needFileInfo);
  }
};
}