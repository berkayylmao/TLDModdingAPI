// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Guid.hpp"


namespace ModdingAPI::Exposed::Rewired {
struct __MouseMap_Il2CppStaticFields {
};

struct __MouseMap_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_ContainsAction;
  VirtualInvokeData _5_CreateElementMap;
  VirtualInvokeData _6_ReplaceElementMap;
  VirtualInvokeData _7_DeleteElementMap;
  VirtualInvokeData _8_DeleteElementMapsWithAction;
  VirtualInvokeData _9_DeleteElementMapsWithAction;
  VirtualInvokeData _10_GetElementMap;
  VirtualInvokeData _11_GetFirstElementMapWithAction;
  VirtualInvokeData _12_GetFirstElementMapWithAction;
  VirtualInvokeData _13_GetFirstElementMapWithAction;
  VirtualInvokeData _14_GetFirstElementMapMatch;
  VirtualInvokeData _15_GetElementMapMatches;
  VirtualInvokeData _16_ClearElementMaps;
  VirtualInvokeData _17_DoesElementAssignmentConflict;
  VirtualInvokeData _18_DoesElementAssignmentConflict;
  VirtualInvokeData _19_DoesElementAssignmentConflict;
  VirtualInvokeData _20_ElementAssignmentConflicts;
  VirtualInvokeData _21_ElementAssignmentConflicts;
  VirtualInvokeData _22_ElementAssignmentConflicts;
  VirtualInvokeData _23_RemoveElementAssignmentConflicts;
  VirtualInvokeData _24_RemoveElementAssignmentConflicts;
  VirtualInvokeData _25_RemoveElementAssignmentConflicts;
  VirtualInvokeData _26_DisableElementAssignmentConflicts;
  VirtualInvokeData _27_DisableElementAssignmentConflicts;
  VirtualInvokeData _28_DisableElementAssignmentConflicts;
  VirtualInvokeData _29_AddActionMapping_BeforeBake;
  VirtualInvokeData _30_GetElementMaps_Append;
  VirtualInvokeData _31_GetFirstElementMapWithMapping;
  VirtualInvokeData _32_GetElementMapsWithElementIdentifier;
  VirtualInvokeData _33_ContainsElementMapping;
  VirtualInvokeData _34_FirstIndexOfElementMapping;
  VirtualInvokeData _35_GetElementMapsWithAction;
  VirtualInvokeData _36_GetFirstElementMapWithElementTarget;
  VirtualInvokeData _37_GetElementMapsWithElementTarget;
  VirtualInvokeData _38_AddElementMap;
  VirtualInvokeData _39_Import;
  VirtualInvokeData _40_ExportDataToSerializedObject;
};

struct __MouseMap_Il2CppClass {
  Il2CppClass_1 _1;
  __MouseMap_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MouseMap_Il2CppVtbl vtbl;
};

class MouseMap {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C7B910;
  static inline    MouseMap* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C93258;
  static inline    __MouseMap_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline MouseMap* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (MouseMap**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __MouseMap_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__MouseMap_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __MouseMap_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t _id;
  int32_t _sourceMapId;
  int32_t _categoryId;
  int32_t _layoutId;
  System_String* _name;
  ModdingAPI::Exposed::System::Guid _hardwareGuid;
  bool _enabled;
  int32_t CtWHpgOaCVZYpcBzymhejPsalLW;
  ModdingAPI::Exposed::Rewired::Utils::Classes::Data::AList_T_* ControllerMap_PhdBrdLZLySJwEJoFqgmOZLGADR;
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* ControllerMap_FNIOecSdAwFfXOChNCSBhnNnnbka;
  ModdingAPI::Exposed::Rewired::Utils::Classes::Data::AList_T_* ControllerMap_mftHrujFyOeJxVlVXVfXGxwpxdPc;
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* ControllerMap_gehPVOolHXHNOJfospWSsVoXpahN;
  int32_t _playerId;
  int32_t _controllerId;
  int32_t _controllerType;
  ModdingAPI::Exposed::System::Collections::Generic::IList_T_* ControllerMapWithAxes_NNqBCxMMtMjTQFEaIrybchbdSum;
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* ControllerMapWithAxes_gEpAPaicQRLRrrfLiDcSssZJAmZO;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::MouseMap*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x752CD0))(this);
  }
  void ::ctor(ModdingAPI::Exposed::Rewired::MouseMap* mouseMap) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::MouseMap*, ModdingAPI::Exposed::Rewired::MouseMap*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x752CE0))(this, mouseMap);
  }
  void SetIdentity(int32_t categoryId, int32_t layoutId) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::MouseMap*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x75E010))(this, categoryId, layoutId);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::Rewired::MouseMap* Blank(int32_t categoryId, int32_t layoutId) {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::MouseMap*(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x75E030))(categoryId, layoutId);
  }
};
}