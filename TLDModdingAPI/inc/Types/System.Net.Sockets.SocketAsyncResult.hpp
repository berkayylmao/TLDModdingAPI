// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Net::Sockets {
struct __SocketAsyncResult_Il2CppStaticFields {
};

struct __SocketAsyncResult_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_IsCompleted;
  VirtualInvokeData _5_get_AsyncWaitHandle;
  VirtualInvokeData _6_get_AsyncState;
  VirtualInvokeData _7_get_CompletedSynchronously;
  VirtualInvokeData _8_CompleteDisposed;
};

struct __SocketAsyncResult_Il2CppClass {
  Il2CppClass_1 _1;
  __SocketAsyncResult_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SocketAsyncResult_Il2CppVtbl vtbl;
};

class SocketAsyncResult {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C40F20;
  static inline    __SocketAsyncResult_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __SocketAsyncResult_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__SocketAsyncResult_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __SocketAsyncResult_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::AsyncCallback* IOAsyncResult_async_callback;
  Il2CppObject* IOAsyncResult_async_state;
  ModdingAPI::Exposed::System::Threading::ManualResetEvent* IOAsyncResult_wait_handle;
  bool IOAsyncResult_completed_synchronously;
  bool IOAsyncResult_completed;
  ModdingAPI::Exposed::System::Net::Sockets::Socket* socket;
  int32_t operation;
  ModdingAPI::Exposed::System::Exception* DelayedException;
  ModdingAPI::Exposed::System::Net::EndPoint* EndPoint;
  ModdingAPI::Exposed::System::Byte_array* Buffer;
  int32_t Offset;
  int32_t Size;
  int32_t SockFlags;
  ModdingAPI::Exposed::System::Net::Sockets::Socket* AcceptSocket;
  ModdingAPI::Exposed::System::Net::IPAddress_array* Addresses;
  int32_t Port;
  ModdingAPI::Exposed::System::Collections::Generic::IList_T_* Buffers;
  bool ReuseSocket;
  int32_t CurrentAddress;
  ModdingAPI::Exposed::System::Net::Sockets::Socket* AcceptedSocket;
  int32_t Total;
  int32_t error;
  int32_t EndCalled;

  // Member methods:
  intptr_t get_Handle() {
    return reinterpret_cast<intptr_t(__fastcall*)(ModdingAPI::Exposed::System::Net::Sockets::SocketAsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB39F40))(this);
  }
  void ::ctor(ModdingAPI::Exposed::System::Net::Sockets::Socket* socket, ModdingAPI::Exposed::System::AsyncCallback* callback, Il2CppObject* state, int32_t operation) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::Sockets::SocketAsyncResult*, ModdingAPI::Exposed::System::Net::Sockets::Socket*, ModdingAPI::Exposed::System::AsyncCallback*, Il2CppObject*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB39FE0))(this, socket, callback, state, operation);
  }
  int32_t get_ErrorCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Net::Sockets::SocketAsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3A000))(this);
  }
  void CheckIfThrowDelayedException() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::Sockets::SocketAsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3A0E0))(this);
  }
  void CompleteDisposed() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::Sockets::SocketAsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3A200))(this);
  }
  void Complete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::Sockets::SocketAsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3A210))(this);
  }
  void Complete(bool synch) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::Sockets::SocketAsyncResult*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3A5D0))(this, synch);
  }
  void Complete(int32_t total) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::Sockets::SocketAsyncResult*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3A5E0))(this, total);
  }
  void Complete(ModdingAPI::Exposed::System::Exception* e, bool synch) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::Sockets::SocketAsyncResult*, ModdingAPI::Exposed::System::Exception*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3A5F0))(this, e, synch);
  }
  void Complete(ModdingAPI::Exposed::System::Exception* e) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::Sockets::SocketAsyncResult*, ModdingAPI::Exposed::System::Exception*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3A600))(this, e);
  }
  void Complete(ModdingAPI::Exposed::System::Net::Sockets::Socket* s) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::Sockets::SocketAsyncResult*, ModdingAPI::Exposed::System::Net::Sockets::Socket*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3A610))(this, s);
  }
  void Complete(ModdingAPI::Exposed::System::Net::Sockets::Socket* s, int32_t total) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::Sockets::SocketAsyncResult*, ModdingAPI::Exposed::System::Net::Sockets::Socket*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB3A620))(this, s, total);
  }
};
}