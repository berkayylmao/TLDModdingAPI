// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"

namespace ModdingAPI::Exposed::UnityEngine::TextCore {
struct __FaceInfo_Il2CppObject {
  System_String* m_FamilyName;
  System_String* m_StyleName;
  int32_t m_PointSize;
  float m_Scale;
  float m_LineHeight;
  float m_AscentLine;
  float m_CapLine;
  float m_MeanLine;
  float m_Baseline;
  float m_DescentLine;
  float m_SuperscriptOffset;
  float m_SuperscriptSize;
  float m_SubscriptOffset;
  float m_SubscriptSize;
  float m_UnderlineOffset;
  float m_UnderlineThickness;
  float m_StrikethroughOffset;
  float m_StrikethroughThickness;
  float m_TabWidth;
};
struct __FaceInfo_Il2CppStaticFields {
};

struct __FaceInfo_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __FaceInfo_Il2CppClass {
  Il2CppClass_1 _1;
  __FaceInfo_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __FaceInfo_Il2CppVtbl vtbl;
};

class FaceInfo {
public:
  // Member fields:
  System_String* m_FamilyName;
  System_String* m_StyleName;
  int32_t m_PointSize;
  float m_Scale;
  float m_LineHeight;
  float m_AscentLine;
  float m_CapLine;
  float m_MeanLine;
  float m_Baseline;
  float m_DescentLine;
  float m_SuperscriptOffset;
  float m_SuperscriptSize;
  float m_SubscriptOffset;
  float m_SubscriptSize;
  float m_UnderlineOffset;
  float m_UnderlineThickness;
  float m_StrikethroughOffset;
  float m_StrikethroughThickness;
  float m_TabWidth;

  // Member methods:
  void set_familyName(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2C00))(this, value);
  }
  void set_styleName(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB420))(this, value);
  }
  int32_t get_pointSize() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3B370))(this);
  }
  void set_pointSize(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x121E0))(this, value);
  }
  float get_scale() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5CB10))(this);
  }
  void set_scale(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13160))(this, value);
  }
  float get_lineHeight() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5A720))(this);
  }
  void set_lineHeight(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x27130))(this, value);
  }
  float get_ascentLine() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x53B60))(this);
  }
  void set_ascentLine(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF2C0))(this, value);
  }
  float get_capLine() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5CB20))(this);
  }
  void set_capLine(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x27140))(this, value);
  }
  void set_meanLine(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF2D0))(this, value);
  }
  float get_baseline() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5CB30))(this);
  }
  void set_baseline(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EB0))(this, value);
  }
  float get_descentLine() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x27F50))(this);
  }
  void set_descentLine(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EC0))(this, value);
  }
  float get_superscriptOffset() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x509B0))(this);
  }
  void set_superscriptOffset(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6ED0))(this, value);
  }
  float get_superscriptSize() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5CB40))(this);
  }
  void set_superscriptSize(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6EF0))(this, value);
  }
  float get_subscriptOffset() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5CB50))(this);
  }
  void set_subscriptOffset(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6F10))(this, value);
  }
  float get_subscriptSize() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5CB60))(this);
  }
  void set_subscriptSize(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x132D0))(this, value);
  }
  float get_underlineOffset() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x27E70))(this);
  }
  void set_underlineOffset(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x27E80))(this, value);
  }
  float get_underlineThickness() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x27E90))(this);
  }
  void set_underlineThickness(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x27EA0))(this, value);
  }
  float get_strikethroughOffset() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5CB70))(this);
  }
  void set_strikethroughOffset(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x132E0))(this, value);
  }
  void set_strikethroughThickness(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5CB80))(this, value);
  }
  float get_tabWidth() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5CB90))(this);
  }
  void set_tabWidth(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::TextCore::FaceInfo*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x132F0))(this, value);
  }

};
}