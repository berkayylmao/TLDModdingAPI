// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Rewired::Utils::Classes::Utility {
struct __ThreadedRingReportBuffer_Il2CppStaticFields {
};

struct __ThreadedRingReportBuffer_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Dispose;
};

struct __ThreadedRingReportBuffer_Il2CppClass {
  Il2CppClass_1 _1;
  __ThreadedRingReportBuffer_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ThreadedRingReportBuffer_Il2CppVtbl vtbl;
};

class ThreadedRingReportBuffer {
public:
  // Il2Cpp fields:
  __ThreadedRingReportBuffer_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t ckTQguEMVNSOPFfHpgJVFYyYODpv;
  int32_t cQmUUUMdEHOZFubMHmNwMPcDGrq;
  int32_t lPrtMPBARYnboLdPIzKedQXkAPOj;
  int32_t dfSilmbTQunkFdxSgRxCbdojBMpA;
  int32_t XCtWrbRFwtkOyJMyxvQHWqjEBVE;
  bool ukkMIkATKrpKheZMEzzBefKGxyR;
  ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadHelper* MOvgbbUBRIZdLolWqlkesrIEfkd;
  ModdingAPI::Exposed::Rewired::Utils::Classes::Data::NativeRingBuffer* xfvGqtebPxhctrJOzXeYUUJdnuy;
  ModdingAPI::Exposed::Rewired::Utils::Classes::Data::NativeRingBuffer* ATAztKuYsUaDAHTMWLVDdCkDyLl;
  ModdingAPI::Exposed::System::Action_T_* AhDRJtrpZzfJOVCyUFevusrSkqk;
  ModdingAPI::Exposed::System::Byte_array* OBJzDpYdaMhuVBSTWVcwBncBaoA;
  ModdingAPI::Exposed::System::Byte_array* BWePeuYAPOOHxkOGTTZcCekFoib;
  bool slxFtOJunKNlUlauVwWbnOCMRska;
  bool esYehwKhrldtApGnRVqbmuVUkFZ;
  int32_t yYfxSeYeFodRHbZJyyBIGHRMczX;
  bool IPjKDfWEXfJCxnkfIfovlZZlcJe;

  // Member methods:
  bool get_IsRunning() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCBF1E0))(this);
  }
  int32_t get_BufferLength() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311060))(this);
  }
  int32_t get_BytesInBuffer() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCBF200))(this);
  }
  int32_t get_EntriesInBuffer() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCBF220))(this);
  }
  ModdingAPI::Exposed::System::Byte_array* get_ReadBuffer() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A440))(this);
  }
  int32_t get_LastNumBytesRead() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5F11E0))(this);
  }
  void ::ctor(int32_t entryByteLength, int32_t entryCapacity, int32_t threadRefreshRateFPS, int32_t threadAutoKillTimeoutMS, bool threadBlockOnStartAndStop, ModdingAPI::Exposed::System::Action_T_* threadRetrieveDataDelegate) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*, int32_t, int32_t, int32_t, int32_t, bool, ModdingAPI::Exposed::System::Action_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCBF240))(this, entryByteLength, entryCapacity, threadRefreshRateFPS, threadAutoKillTimeoutMS, threadBlockOnStartAndStop, threadRetrieveDataDelegate);
  }
  int32_t Read() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCBF5E0))(this);
  }
  int32_t Read(ModdingAPI::Exposed::System::Byte_array* buffer) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCBF700))(this, buffer);
  }
  int32_t Read(intptr_t buffer, int32_t bufferLength) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*, intptr_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCBF8B0))(this, buffer, bufferLength);
  }
  int32_t StartRead() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCBFAF0))(this);
  }
  void StartThread() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCBFB20))(this);
  }
  void StopThread() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCBFBE0))(this);
  }
  bool eLFlGXLOKHpWeJUUlihpqcYggDt() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCBFCB0))(this);
  }
  bool qphfoOAJMzNdEbpJfPiWjcSoOqQr() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCBFCF0))(this);
  }
  void hVVFhXBcBgVYXLhrydbOrjwPeAi() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCBFFF0))(this);
  }
  void gbVZoBAwkwoPLxZhckmLmlksciXi() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCC01F0))(this);
  }
  void Dispose() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCC0380))(this);
  }
  void Finalize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCC0480))(this);
  }
  void Dispose(bool disposing) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::ThreadedRingReportBuffer*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCC0550))(this, disposing);
  }
};
}