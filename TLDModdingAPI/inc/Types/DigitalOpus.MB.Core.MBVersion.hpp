// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector4.hpp"


namespace ModdingAPI::Exposed::DigitalOpus::MB::Core {
struct __MBVersion_Il2CppStaticFields {
  ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionInterface* _MBVersion;
};

struct __MBVersion_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __MBVersion_Il2CppClass {
  Il2CppClass_1 _1;
  __MBVersion_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MBVersion_Il2CppVtbl vtbl;
};

class MBVersion {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C717B0;
  static inline    __MBVersion_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __MBVersion_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__MBVersion_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __MBVersion_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersion*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionInterface*> _MBVersion = __CppStaticProperty<ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionInterface*>(
   []() { return &GetStaticClassInstance()->pStaticFields->_MBVersion; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionInterface* _CreateMBVersionConcrete() {
    return reinterpret_cast<ModdingAPI::Exposed::DigitalOpus::MB::Core::MBVersionInterface*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCEE60))();
  }
  static inline System_String* version() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCEF50))();
  }
  static inline int32_t GetMajorVersion() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCF010))();
  }
  static inline int32_t GetMinorVersion() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCF0E0))();
  }
  static inline bool GetActive(ModdingAPI::Exposed::UnityEngine::GameObject* go) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCF1B0))(go);
  }
  static inline void SetActive(ModdingAPI::Exposed::UnityEngine::GameObject* go, bool isActive) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCF2F0))(go, isActive);
  }
  static inline void SetActiveRecursively(ModdingAPI::Exposed::UnityEngine::GameObject* go, bool isActive) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCF3D0))(go, isActive);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Object_array* FindSceneObjectsOfType(ModdingAPI::Exposed::System::Type* t) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Object_array*(__fastcall*)(ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCF4B0))(t);
  }
  static inline bool IsRunningAndMeshNotReadWriteable(ModdingAPI::Exposed::UnityEngine::Mesh* m) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCF5F0))(m);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2_array* GetMeshUV3orUV4(ModdingAPI::Exposed::UnityEngine::Mesh* m, bool get3, int32_t LOG_LEVEL) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2_array*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCF730))(m, get3, LOG_LEVEL);
  }
  static inline void MeshClear(ModdingAPI::Exposed::UnityEngine::Mesh* m, bool t) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCF8A0))(m, t);
  }
  static inline void MeshAssignUV3(ModdingAPI::Exposed::UnityEngine::Mesh* m, ModdingAPI::Exposed::UnityEngine::Vector2_array* uv3s) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, ModdingAPI::Exposed::UnityEngine::Vector2_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCF9F0))(m, uv3s);
  }
  static inline void MeshAssignUV4(ModdingAPI::Exposed::UnityEngine::Mesh* m, ModdingAPI::Exposed::UnityEngine::Vector2_array* uv4s) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, ModdingAPI::Exposed::UnityEngine::Vector2_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCFAD0))(m, uv4s);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector4 GetLightmapTilingOffset(ModdingAPI::Exposed::UnityEngine::Renderer* r) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector4(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Renderer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCFBB0))(r);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Transform_array* GetBones(ModdingAPI::Exposed::UnityEngine::Renderer* r) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Transform_array*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Renderer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCFD10))(r);
  }
  static inline void OptimizeMesh(ModdingAPI::Exposed::UnityEngine::Mesh* m) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCFE50))(m);
  }
  static inline int32_t GetBlendShapeFrameCount(ModdingAPI::Exposed::UnityEngine::Mesh* m, int32_t shapeIndex) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FCFF20))(m, shapeIndex);
  }
  static inline float GetBlendShapeFrameWeight(ModdingAPI::Exposed::UnityEngine::Mesh* m, int32_t shapeIndex, int32_t frameIndex) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD0070))(m, shapeIndex, frameIndex);
  }
  static inline void GetBlendShapeFrameVertices(ModdingAPI::Exposed::UnityEngine::Mesh* m, int32_t shapeIndex, int32_t frameIndex, ModdingAPI::Exposed::UnityEngine::Vector3_array* vs, ModdingAPI::Exposed::UnityEngine::Vector3_array* ns, ModdingAPI::Exposed::UnityEngine::Vector3_array* ts) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Vector3_array*, ModdingAPI::Exposed::UnityEngine::Vector3_array*, ModdingAPI::Exposed::UnityEngine::Vector3_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD01D0))(m, shapeIndex, frameIndex, vs, ns, ts);
  }
  static inline void ClearBlendShapes(ModdingAPI::Exposed::UnityEngine::Mesh* m) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD0360))(m);
  }
  static inline void AddBlendShapeFrame(ModdingAPI::Exposed::UnityEngine::Mesh* m, System_String* nm, float wt, ModdingAPI::Exposed::UnityEngine::Vector3_array* vs, ModdingAPI::Exposed::UnityEngine::Vector3_array* ns, ModdingAPI::Exposed::UnityEngine::Vector3_array* ts) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, System_String*, float, ModdingAPI::Exposed::UnityEngine::Vector3_array*, ModdingAPI::Exposed::UnityEngine::Vector3_array*, ModdingAPI::Exposed::UnityEngine::Vector3_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD0430))(m, nm, wt, vs, ns, ts);
  }
  static inline int32_t MaxMeshVertexCount() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD05C0))();
  }
  static inline void SetMeshIndexFormatAndClearMesh(ModdingAPI::Exposed::UnityEngine::Mesh* m, int32_t numVerts, bool vertices, bool justClearTriangles) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD0690))(m, numVerts, vertices, justClearTriangles);
  }
};
}