// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Rect.hpp"
#include "ModdingAPI.Exposed.Pathfinding.IntRect.hpp"
#include "ModdingAPI.Exposed.Pathfinding.NNInfo.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"
#include "ModdingAPI::Exposed::Pathfinding::IntRect.hpp"


namespace ModdingAPI::Exposed::Pathfinding {
struct __BBTree_Il2CppStaticFields {
};

struct __BBTree_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __BBTree_Il2CppClass {
  Il2CppClass_1 _1;
  __BBTree_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __BBTree_Il2CppVtbl vtbl;
};

class BBTree {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C385F8;
  static inline    __BBTree_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __BBTree_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__BBTree_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __BBTree_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::Pathfinding::BBTree::BBTreeBox_array* arr;
  int32_t count;

  // Member methods:
  ModdingAPI::Exposed::UnityEngine::Rect get_Size() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A5EE0))(this);
  }
  void Clear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x22F1E80))(this);
  }
  void EnsureCapacity(int32_t c) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A5FD0))(this, c);
  }
  int32_t GetBox(ModdingAPI::Exposed::Pathfinding::MeshNode* node) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*, ModdingAPI::Exposed::Pathfinding::MeshNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A6160))(this, node);
  }
  int32_t GetBox(ModdingAPI::Exposed::Pathfinding::IntRect rect) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*, ModdingAPI::Exposed::Pathfinding::IntRect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A6230))(this, rect);
  }
  void RebuildFrom(ModdingAPI::Exposed::Pathfinding::MeshNode_array* nodes) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*, ModdingAPI::Exposed::Pathfinding::MeshNode_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A62D0))(this, nodes);
  }
  int32_t RebuildFromInternal(ModdingAPI::Exposed::Pathfinding::MeshNode_array* nodes, int32_t from, int32_t to, bool odd) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*, ModdingAPI::Exposed::Pathfinding::MeshNode_array*, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A66C0))(this, nodes, from, to, odd);
  }
  void Insert(ModdingAPI::Exposed::Pathfinding::MeshNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*, ModdingAPI::Exposed::Pathfinding::MeshNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A6D90))(this, node);
  }
  ModdingAPI::Exposed::Pathfinding::NNInfo Query(ModdingAPI::Exposed::UnityEngine::Vector3 p, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::NNInfo(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::NNConstraint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A7240))(this, p, constraint);
  }
  ModdingAPI::Exposed::Pathfinding::NNInfo QueryCircle(ModdingAPI::Exposed::UnityEngine::Vector3 p, float radius, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::NNInfo(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*, ModdingAPI::Exposed::UnityEngine::Vector3, float, ModdingAPI::Exposed::Pathfinding::NNConstraint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A7320))(this, p, radius, constraint);
  }
  ModdingAPI::Exposed::Pathfinding::NNInfo QueryClosest(ModdingAPI::Exposed::UnityEngine::Vector3 p, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint, float distance) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::NNInfo(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::NNConstraint*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A7440))(this, p, constraint, distance);
  }
  ModdingAPI::Exposed::Pathfinding::NNInfo QueryClosestXZ(ModdingAPI::Exposed::UnityEngine::Vector3 p, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint, float distance, ModdingAPI::Exposed::Pathfinding::NNInfo previous) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::NNInfo(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::NNConstraint*, float, ModdingAPI::Exposed::Pathfinding::NNInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A7550))(this, p, constraint, distance, previous);
  }
  void SearchBoxClosestXZ(int32_t boxi, ModdingAPI::Exposed::UnityEngine::Vector3 p, float closestDist, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint, ModdingAPI::Exposed::Pathfinding::NNInfo nnInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector3, float, ModdingAPI::Exposed::Pathfinding::NNConstraint*, ModdingAPI::Exposed::Pathfinding::NNInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A7600))(this, boxi, p, closestDist, constraint, nnInfo);
  }
  ModdingAPI::Exposed::Pathfinding::NNInfo QueryClosest(ModdingAPI::Exposed::UnityEngine::Vector3 p, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint, float distance, ModdingAPI::Exposed::Pathfinding::NNInfo previous) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::NNInfo(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::NNConstraint*, float, ModdingAPI::Exposed::Pathfinding::NNInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A7970))(this, p, constraint, distance, previous);
  }
  void SearchBoxClosest(int32_t boxi, ModdingAPI::Exposed::UnityEngine::Vector3 p, float closestDist, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint, ModdingAPI::Exposed::Pathfinding::NNInfo nnInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector3, float, ModdingAPI::Exposed::Pathfinding::NNConstraint*, ModdingAPI::Exposed::Pathfinding::NNInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A7A20))(this, boxi, p, closestDist, constraint, nnInfo);
  }
  ModdingAPI::Exposed::Pathfinding::MeshNode* QueryInside(ModdingAPI::Exposed::UnityEngine::Vector3 p, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::MeshNode*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::NNConstraint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A7DE0))(this, p, constraint);
  }
  ModdingAPI::Exposed::Pathfinding::MeshNode* SearchBoxInside(int32_t boxi, ModdingAPI::Exposed::UnityEngine::Vector3 p, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::MeshNode*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::NNConstraint*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A7E20))(this, boxi, p, constraint);
  }
  void SearchBoxCircle(int32_t boxi, ModdingAPI::Exposed::UnityEngine::Vector3 p, float radius, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint, ModdingAPI::Exposed::Pathfinding::NNInfo nnInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector3, float, ModdingAPI::Exposed::Pathfinding::NNConstraint*, ModdingAPI::Exposed::Pathfinding::NNInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A80E0))(this, boxi, p, radius, constraint, nnInfo);
  }
  void SearchBox(int32_t boxi, ModdingAPI::Exposed::UnityEngine::Vector3 p, ModdingAPI::Exposed::Pathfinding::NNConstraint* constraint, ModdingAPI::Exposed::Pathfinding::NNInfo nnInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::Pathfinding::NNConstraint*, ModdingAPI::Exposed::Pathfinding::NNInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A8560))(this, boxi, p, constraint, nnInfo);
  }
  void OnDrawGizmos() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A89B0))(this);
  }
  void OnDrawGizmos(int32_t boxi, int32_t depth) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A8A30))(this, boxi, depth);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::BBTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A9540))(this);
  }

  // Static methods:
  static inline int32_t SplitByX(ModdingAPI::Exposed::Pathfinding::MeshNode_array* nodes, int32_t from, int32_t to, int32_t divider) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::MeshNode_array*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A64A0))(nodes, from, to, divider);
  }
  static inline int32_t SplitByZ(ModdingAPI::Exposed::Pathfinding::MeshNode_array* nodes, int32_t from, int32_t to, int32_t divider) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::MeshNode_array*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A65B0))(nodes, from, to, divider);
  }
  static inline ModdingAPI::Exposed::Pathfinding::IntRect NodeBounds(ModdingAPI::Exposed::Pathfinding::MeshNode_array* nodes, int32_t from, int32_t to) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::IntRect(__fastcall*)(ModdingAPI::Exposed::Pathfinding::MeshNode_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A6B00))(nodes, from, to);
  }
  static inline bool NodeIntersectsCircle(ModdingAPI::Exposed::Pathfinding::MeshNode* node, ModdingAPI::Exposed::UnityEngine::Vector3 p, float radius) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::MeshNode*, ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A8E50))(node, p, radius);
  }
  static inline bool RectIntersectsCircle(ModdingAPI::Exposed::Pathfinding::IntRect r, ModdingAPI::Exposed::UnityEngine::Vector3 p, float radius) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::IntRect, ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A8FC0))(r, p, radius);
  }
  static inline int32_t ExpansionRequired(ModdingAPI::Exposed::Pathfinding::IntRect r, ModdingAPI::Exposed::Pathfinding::IntRect r2) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::IntRect, ModdingAPI::Exposed::Pathfinding::IntRect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A9200))(r, r2);
  }
  static inline ModdingAPI::Exposed::Pathfinding::IntRect ExpandToContain(ModdingAPI::Exposed::Pathfinding::IntRect r, ModdingAPI::Exposed::Pathfinding::IntRect r2) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::IntRect(__fastcall*)(ModdingAPI::Exposed::Pathfinding::IntRect, ModdingAPI::Exposed::Pathfinding::IntRect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A9360))(r, r2);
  }
  static inline int32_t RectArea(ModdingAPI::Exposed::Pathfinding::IntRect r) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::IntRect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26A9520))(r);
  }
};
}