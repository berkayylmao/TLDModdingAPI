// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Text::RegularExpressions {
struct __RegexCharClass_Il2CppStaticFields {
  System_String* InternalRegexIgnoreCase;
  System_String* Space;
  System_String* NotSpace;
  System_String* Word;
  System_String* NotWord;
  System_String* SpaceClass;
  System_String* NotSpaceClass;
  System_String* WordClass;
  System_String* NotWordClass;
  System_String* DigitClass;
  System_String* NotDigitClass;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* _definedCategories;
  ModdingAPI::Exposed::System::String_array* _propTable;
  ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass::LowerCaseMapping_array* _lcTable;
};

struct __RegexCharClass_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __RegexCharClass_Il2CppClass {
  Il2CppClass_1 _1;
  __RegexCharClass_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __RegexCharClass_Il2CppVtbl vtbl;
};

class RegexCharClass {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C5AEC8;
  static inline    __RegexCharClass_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __RegexCharClass_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__RegexCharClass_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __RegexCharClass_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* _rangelist;
  ModdingAPI::Exposed::System::Text::StringBuilder* _categories;
  bool _canonical;
  bool _negate;
  ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass* _subtractor;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF43CB0))(this);
  }
  void ::ctor(bool negate, ModdingAPI::Exposed::System::Collections::Generic::List_T_* ranges, ModdingAPI::Exposed::System::Text::StringBuilder* categories, ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass* subtraction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*, bool, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Text::StringBuilder*, ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF43F10))(this, negate, ranges, categories, subtraction);
  }
  bool get_CanMerge() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF43F30))(this);
  }
  void set_Negate(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D820))(this, value);
  }
  void AddChar(wchar_t c) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF43F50))(this, c);
  }
  void AddCharClass(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass* cc) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*, ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF43F60))(this, cc);
  }
  void AddSet(System_String* set) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF44170))(this, set);
  }
  void AddSubtraction(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass* sub) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*, ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110C0))(this, sub);
  }
  void AddRange(wchar_t first, wchar_t last) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*, wchar_t, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF44560))(this, first, last);
  }
  void AddCategoryFromName(System_String* categoryName, bool invert, bool caseInsensitive, System_String* pattern) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*, System_String*, bool, bool, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF44740))(this, categoryName, invert, caseInsensitive, pattern);
  }
  void AddCategory(System_String* category) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF44A20))(this, category);
  }
  void AddLowercase(ModdingAPI::Exposed::System::Globalization::CultureInfo* culture) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*, ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF44A40))(this, culture);
  }
  void AddLowercaseRange(wchar_t chMin, wchar_t chMax, ModdingAPI::Exposed::System::Globalization::CultureInfo* culture) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*, wchar_t, wchar_t, ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF44BC0))(this, chMin, chMax, culture);
  }
  void AddWord(bool ecma, bool negate) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF44EF0))(this, ecma, negate);
  }
  void AddSpace(bool ecma, bool negate) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF45060))(this, ecma, negate);
  }
  void AddDigit(bool ecma, bool negate, System_String* pattern) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*, bool, bool, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF451D0))(this, ecma, negate, pattern);
  }
  int32_t RangeCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF469E0))(this);
  }
  System_String* ToStringClass() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF46A70))(this);
  }
  ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass::SingleRange* GetRangeAt(int32_t i) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass::SingleRange*(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF46EC0))(this, i);
  }
  void Canonicalize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF46F70))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<System_String*> InternalRegexIgnoreCase = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->InternalRegexIgnoreCase; }
  );
  static inline __CppStaticProperty<System_String*> Space = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Space; }
  );
  static inline __CppStaticProperty<System_String*> NotSpace = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->NotSpace; }
  );
  static inline __CppStaticProperty<System_String*> Word = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Word; }
  );
  static inline __CppStaticProperty<System_String*> NotWord = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->NotWord; }
  );
  static inline __CppStaticProperty<System_String*> SpaceClass = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->SpaceClass; }
  );
  static inline __CppStaticProperty<System_String*> NotSpaceClass = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->NotSpaceClass; }
  );
  static inline __CppStaticProperty<System_String*> WordClass = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->WordClass; }
  );
  static inline __CppStaticProperty<System_String*> NotWordClass = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->NotWordClass; }
  );
  static inline __CppStaticProperty<System_String*> DigitClass = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->DigitClass; }
  );
  static inline __CppStaticProperty<System_String*> NotDigitClass = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->NotDigitClass; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> _definedCategories = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->_definedCategories; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::String_array*> _propTable = __CppStaticProperty<ModdingAPI::Exposed::System::String_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->_propTable; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass::LowerCaseMapping_array*> _lcTable = __CppStaticProperty<ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass::LowerCaseMapping_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->_lcTable; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF3EDB0))();
  }
  static inline wchar_t SingletonChar(System_String* set) {
    return reinterpret_cast<wchar_t(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF452C0))(set);
  }
  static inline bool IsMergeable(System_String* charClass) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF452E0))(charClass);
  }
  static inline bool IsEmpty(System_String* charClass) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF45410))(charClass);
  }
  static inline bool IsSingleton(System_String* set) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF45500))(set);
  }
  static inline bool IsSingletonInverse(System_String* set) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF45650))(set);
  }
  static inline bool IsSubtraction(System_String* charClass) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF457A0))(charClass);
  }
  static inline bool IsNegated(System_String* set) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF45800))(set);
  }
  static inline bool IsECMAWordChar(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF45830))(ch);
  }
  static inline bool IsWordChar(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF458D0))(ch);
  }
  static inline bool CharInClass(wchar_t ch, System_String* set) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF459A0))(ch, set);
  }
  static inline bool CharInClassRecursive(wchar_t ch, System_String* set, int32_t start) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF45A50))(ch, set, start);
  }
  static inline bool CharInClassInternal(wchar_t ch, System_String* set, int32_t start, int32_t mySetLength, int32_t myCategoryLength) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t, System_String*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF45CB0))(ch, set, start, mySetLength, myCategoryLength);
  }
  static inline bool CharInCategory(wchar_t ch, System_String* set, int32_t start, int32_t mySetLength, int32_t myCategoryLength) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t, System_String*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF45DF0))(ch, set, start, mySetLength, myCategoryLength);
  }
  static inline bool CharInCategoryGroup(wchar_t ch, int32_t chcategory, System_String* category, int32_t i) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t, int32_t, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF45FD0))(ch, chcategory, category, i);
  }
  static inline System_String* NegateCategory(System_String* category) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF460A0))(category);
  }
  static inline ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass* Parse(System_String* charClass) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF46380))(charClass);
  }
  static inline ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass* ParseRecursive(System_String* charClass, int32_t start) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::RegularExpressions::RegexCharClass*(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF46420))(charClass, start);
  }
  static inline System_String* SetFromProperty(System_String* capname, bool invert, System_String* pattern) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, bool, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF47360))(capname, invert, pattern);
  }
};
}