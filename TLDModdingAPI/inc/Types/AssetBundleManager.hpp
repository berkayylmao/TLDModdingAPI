// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __AssetBundleManager_Il2CppStaticFields {
  ModdingAPI::Exposed::UnityEngine::AssetBundleManifest* s_Manifest;
  System_String* s_BundlePath;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* s_AsyncLoads;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* s_CompletedLoads;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* s_Bundles;
  bool s_Verbose;
};

struct __AssetBundleManager_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __AssetBundleManager_Il2CppClass {
  Il2CppClass_1 _1;
  __AssetBundleManager_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AssetBundleManager_Il2CppVtbl vtbl;
};

class AssetBundleManager {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C23E88;
  static inline    __AssetBundleManager_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __AssetBundleManager_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__AssetBundleManager_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __AssetBundleManager_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AssetBundleManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::AssetBundleManifest*> s_Manifest = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::AssetBundleManifest*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_Manifest; }
  );
  static inline __CppStaticProperty<System_String*> s_BundlePath = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_BundlePath; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> s_AsyncLoads = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_AsyncLoads; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> s_CompletedLoads = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_CompletedLoads; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> s_Bundles = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_Bundles; }
  );
  static inline __CppStaticProperty<bool> s_Verbose = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_Verbose; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_* GetAllBundles() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FA9CE0))();
  }
  static inline System_String* GetBundlePath() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FA9E60))();
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_* GetDependencies(System_String* bundle) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FA9F00))(bundle);
  }
  static inline bool IsLoading() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FAA070))();
  }
  static inline bool IsVerbose() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FAA120))();
  }
  static inline bool IsSimulating() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))();
  }
  static inline void Init() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FAA1C0))();
  }
  static inline void Update() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FAA340))();
  }
  static inline System_String* GetPlatformName() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FAA7F0))();
  }
  static inline ModdingAPI::Exposed::AssetBundleRef* CreateReference(System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::AssetBundleRef*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FAA870))(name);
  }
  static inline ModdingAPI::Exposed::AssetBundleRef* FindBundleByName(System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::AssetBundleRef*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FAA9E0))(name);
  }
  static inline ModdingAPI::Exposed::AssetBundleRef* LoadBundle(System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::AssetBundleRef*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FAAB30))(name);
  }
  static inline ModdingAPI::Exposed::AssetBundleRef* LoadBundleAsync(System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::AssetBundleRef*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FAACB0))(name);
  }
  static inline void LoadManifest() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FAAE50))();
  }
  static inline void UnloadBundle(ModdingAPI::Exposed::AssetBundleRef* bundle, bool unloadAllLoadedObjects) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AssetBundleRef*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FAB140))(bundle, unloadAllLoadedObjects);
  }
  static inline void UnloadBundle(System_String* name, bool unloadAllLoadedObjects) {
    reinterpret_cast<void(__fastcall*)(System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FAB380))(name, unloadAllLoadedObjects);
  }
  static inline void VerboseLog(System_String* message) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FAB520))(message);
  }
  static inline void VerboseLogWarning(System_String* message) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FAB5B0))(message);
  }
  static inline void VerboseLogError(System_String* message) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FAB640))(message);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FAB6D0))();
  }
};
}