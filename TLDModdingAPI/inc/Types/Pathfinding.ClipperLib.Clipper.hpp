// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.Pathfinding.ClipperLib.IntPoint.hpp"


namespace ModdingAPI::Exposed::Pathfinding::ClipperLib {
struct __Clipper_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Action_T_* __f__am_cacheE;
  ModdingAPI::Exposed::System::Action_T_* __f__am_cacheF;
};

struct __Clipper_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Clear;
  VirtualInvokeData _5_Reset;
};

struct __Clipper_Il2CppClass {
  Il2CppClass_1 _1;
  __Clipper_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Clipper_Il2CppVtbl vtbl;
};

class Clipper {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C2A890;
  static inline    __Clipper_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Clipper_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Clipper_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Clipper_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::Pathfinding::ClipperLib::LocalMinima* m_MinimaList;
  ModdingAPI::Exposed::Pathfinding::ClipperLib::LocalMinima* m_CurrentLM;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_edges;
  bool m_UseFullRange;
  bool m_HasOpenPaths;
  bool ClipperBase__PreserveCollinear_k__BackingField;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_PolyOuts;
  int32_t m_ClipType;
  ModdingAPI::Exposed::Pathfinding::ClipperLib::Scanbeam* m_Scanbeam;
  ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* m_ActiveEdges;
  ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* m_SortedEdges;
  ModdingAPI::Exposed::Pathfinding::ClipperLib::IntersectNode* m_IntersectNodes;
  bool m_ExecuteLocked;
  int32_t m_ClipFillType;
  int32_t m_SubjFillType;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Joins;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_GhostJoins;
  bool m_UsingPolyTree;
  bool _ReverseSolution_k__BackingField;
  bool _StrictlySimple_k__BackingField;

  // Member methods:
  void ::ctor(int32_t InitOptions) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DD690))(this, InitOptions);
  }
  void Clear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DDB00))(this);
  }
  void Reset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DDBA0))(this);
  }
  bool get_ReverseSolution() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DDC60))(this);
  }
  void set_ReverseSolution(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DDC70))(this, value);
  }
  bool get_StrictlySimple() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DDC80))(this);
  }
  void set_StrictlySimple(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DDC90))(this, value);
  }
  void InsertScanbeam(int64_t Y) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DDCA0))(this, Y);
  }
  bool Execute(int32_t clipType, ModdingAPI::Exposed::System::Collections::Generic::List_T_* solution, int32_t subjFillType, int32_t clipFillType) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, int32_t, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DE060))(this, clipType, solution, subjFillType, clipFillType);
  }
  bool Execute(int32_t clipType, ModdingAPI::Exposed::Pathfinding::ClipperLib::PolyTree* polytree, int32_t subjFillType, int32_t clipFillType) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, int32_t, ModdingAPI::Exposed::Pathfinding::ClipperLib::PolyTree*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DE1B0))(this, clipType, polytree, subjFillType, clipFillType);
  }
  void FixHoleLinkage(ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec* outRec) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DE230))(this, outRec);
  }
  bool ExecuteInternal() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DE290))(this);
  }
  int64_t PopScanbeam() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DE680))(this);
  }
  void DisposeAllPolyPts() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DE6B0))(this);
  }
  void DisposeOutRec(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DE7A0))(this, index);
  }
  void DisposeOutPts(ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* pp) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DE8E0))(this, pp);
  }
  void AddJoin(ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* Op1, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* Op2, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint OffPt) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DE920))(this, Op1, Op2, OffPt);
  }
  void AddGhostJoin(ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* Op, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint OffPt) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DEAB0))(this, Op, OffPt);
  }
  void InsertLocalMinimaIntoAEL(int64_t botY) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DEC30))(this, botY);
  }
  void InsertEdgeIntoAEL(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* edge, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* startEdge) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DF130))(this, edge, startEdge);
  }
  bool E2InsertsBeforeE1(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e1, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e2) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DF280))(this, e1, e2);
  }
  bool IsEvenOddFillType(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* edge) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DF370))(this, edge);
  }
  bool IsEvenOddAltFillType(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* edge) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DF3A0))(this, edge);
  }
  bool IsContributing(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* edge) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DF3D0))(this, edge);
  }
  void SetWindingCount(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* edge) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DF560))(this, edge);
  }
  void AddEdgeToSEL(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* edge) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DF820))(this, edge);
  }
  void CopyAELToSEL() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DF890))(this);
  }
  void SwapPositionsInAEL(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* edge1, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* edge2) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DF8E0))(this, edge1, edge2);
  }
  void SwapPositionsInSEL(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* edge1, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* edge2) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DFA40))(this, edge1, edge2);
  }
  void AddLocalMaxPoly(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e1, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e2, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint pt) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DFBB0))(this, e1, e2, pt);
  }
  ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* AddLocalMinPoly(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e1, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e2, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint pt) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DFC50))(this, e1, e2, pt);
  }
  ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec* CreateOutRec() {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14DFE90))(this);
  }
  ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* AddOutPt(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint pt) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E0030))(this, e, pt);
  }
  bool HorzSegmentsOverlap(ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint Pt1a, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint Pt1b, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint Pt2a, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint Pt2b) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E04D0))(this, Pt1a, Pt1b, Pt2a, Pt2b);
  }
  void SetHoleState(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec* outRec) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E0550))(this, e, outRec);
  }
  double GetDx(ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint pt1, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint pt2) {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E0670))(this, pt1, pt2);
  }
  bool FirstIsBottomPt(ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* btmPt1, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* btmPt2) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E06B0))(this, btmPt1, btmPt2);
  }
  ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* GetBottomPt(ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* pp) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E0B00))(this, pp);
  }
  ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec* GetLowermostRec(ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec* outRec1, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec* outRec2) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E0C30))(this, outRec1, outRec2);
  }
  bool Param1RightOfParam2(ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec* outRec1, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec* outRec2) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E0D20))(this, outRec1, outRec2);
  }
  ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec* GetOutRec(int32_t idx) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E0D50))(this, idx);
  }
  void AppendPolygon(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e1, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e2) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E0E50))(this, e1, e2);
  }
  void ReversePolyPtLinks(ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* pp) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E11D0))(this, pp);
  }
  void IntersectEdges(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e1, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e2, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint pt, bool protect) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E1270))(this, e1, e2, pt, protect);
  }
  void DeleteFromAEL(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E1900))(this, e);
  }
  void DeleteFromSEL(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E1960))(this, e);
  }
  void UpdateEdgeIntoAEL(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E19C0))(this, e);
  }
  void ProcessHorizontals(bool isTopOfScanbeam) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E1C70))(this, isTopOfScanbeam);
  }
  void GetHorzDirection(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* HorzEdge, int32_t Dir, int64_t Left, int64_t Right) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, int32_t, int64_t, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E1D10))(this, HorzEdge, Dir, Left, Right);
  }
  void PrepareHorzJoins(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* horzEdge, bool isTopOfScanbeam) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E1D70))(this, horzEdge, isTopOfScanbeam);
  }
  void ProcessHorizontal(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* horzEdge, bool isTopOfScanbeam) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E2020))(this, horzEdge, isTopOfScanbeam);
  }
  ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* GetNextInAEL(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e, int32_t Direction) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E2650))(this, e, Direction);
  }
  bool IsMaxima(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e, double Y) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E2690))(this, e, Y);
  }
  bool IsIntermediate(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e, double Y) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E26C0))(this, e, Y);
  }
  ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* GetMaximaPair(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E2700))(this, e);
  }
  bool ProcessIntersections(int64_t botY, int64_t topY) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, int64_t, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E2800))(this, botY, topY);
  }
  void BuildIntersectList(int64_t botY, int64_t topY) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, int64_t, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E2A90))(this, botY, topY);
  }
  bool EdgesAdjacent(ModdingAPI::Exposed::Pathfinding::ClipperLib::IntersectNode* inode) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntersectNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E2DA0))(this, inode);
  }
  bool FixupIntersectionOrder() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E2E00))(this);
  }
  void ProcessIntersectList() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E2F30))(this);
  }
  void InsertIntersectNode(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e1, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e2, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint pt) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E3070))(this, e1, e2, pt);
  }
  void SwapIntersectNodes(ModdingAPI::Exposed::Pathfinding::ClipperLib::IntersectNode* int1, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntersectNode* int2) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntersectNode*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntersectNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E3230))(this, int1, int2);
  }
  bool IntersectPoint(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* edge1, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* edge2, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint ip) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E3290))(this, edge1, edge2, ip);
  }
  void DisposeIntersectNodes() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E36C0))(this);
  }
  void ProcessEdgesAtTopOfScanbeam(int64_t topY) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E36F0))(this, topY);
  }
  void DoMaxima(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E3B40))(this, e);
  }
  int32_t PointCount(ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* pts) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E3E10))(this, pts);
  }
  void BuildResult(ModdingAPI::Exposed::System::Collections::Generic::List_T_* polyg) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E3E40))(this, polyg);
  }
  void BuildResult2(ModdingAPI::Exposed::Pathfinding::ClipperLib::PolyTree* polytree) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::PolyTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E4200))(this, polytree);
  }
  void FixupOutPolygon(ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec* outRec) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E4780))(this, outRec);
  }
  ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* DupOutPt(ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* outPt, bool InsertAfter) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E4B20))(this, outPt, InsertAfter);
  }
  bool GetOverlap(int64_t a1, int64_t a2, int64_t b1, int64_t b2, int64_t Left, int64_t Right) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E4CE0))(this, a1, a2, b1, b2, Left, Right);
  }
  bool JoinHorz(ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* op1, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* op1b, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* op2, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* op2b, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint Pt, bool DiscardLeft) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E4E60))(this, op1, op1b, op2, op2b, Pt, DiscardLeft);
  }
  bool JoinPoints(ModdingAPI::Exposed::Pathfinding::ClipperLib::Join* j, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* p1, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* p2) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::Join*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E53A0))(this, j, p1, p2);
  }
  bool Poly2ContainsPoly1(ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* outPt1, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* outPt2, bool UseFullRange) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E61E0))(this, outPt1, outPt2, UseFullRange);
  }
  void FixupFirstLefts1(ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec* OldOutRec, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec* NewOutRec) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E62D0))(this, OldOutRec, NewOutRec);
  }
  void FixupFirstLefts2(ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec* OldOutRec, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec* NewOutRec) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E6420))(this, OldOutRec, NewOutRec);
  }
  void JoinCommonEdges() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E6590))(this);
  }
  void UpdateOutPtIdxs(ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec* outrec) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E69B0))(this, outrec);
  }
  void DoSimplePolygons() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E69F0))(this);
  }
  double Area(ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec* outRec) {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::Clipper*, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutRec*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E6E80))(this, outRec);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Action_T_*> __f__am_cacheE = __CppStaticProperty<ModdingAPI::Exposed::System::Action_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->__f__am_cacheE; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Action_T_*> __f__am_cacheF = __CppStaticProperty<ModdingAPI::Exposed::System::Action_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->__f__am_cacheF; }
  );

  // Static methods:
  static inline void SwapSides(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* edge1, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* edge2) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E1210))(edge1, edge2);
  }
  static inline void SwapPolyIndexes(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* edge1, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* edge2) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E1240))(edge1, edge2);
  }
  static inline int64_t Round(double value) {
    return reinterpret_cast<int64_t(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E2FD0))(value);
  }
  static inline int64_t TopX(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* edge, int64_t currentY) {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E3000))(edge, currentY);
  }
  static inline bool Orientation(ModdingAPI::Exposed::System::Collections::Generic::List_T_* poly) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E3DF0))(poly);
  }
  static inline double Area(ModdingAPI::Exposed::System::Collections::Generic::List_T_* poly) {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E6CA0))(poly);
  }
};
}