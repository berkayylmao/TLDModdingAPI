// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.Pathfinding.Int3.hpp"


namespace ModdingAPI::Exposed::Pathfinding {
struct __LevelGridNode_Il2CppStaticFields {
  ModdingAPI::Exposed::Pathfinding::LayerGridGraph_array* _gridGraphs;
  ModdingAPI::Exposed::Pathfinding::LayerGridGraph_array* gridGraphs;
};

struct __LevelGridNode_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_UpdateRecursiveG;
  VirtualInvokeData _5_FloodFill;
  VirtualInvokeData _6_GetConnections;
  VirtualInvokeData _7_AddConnection;
  VirtualInvokeData _8_RemoveConnection;
  VirtualInvokeData _9_ClearConnections;
  VirtualInvokeData _10_ContainsConnection;
  VirtualInvokeData _11_RecalculateConnectionCosts;
  VirtualInvokeData _12_GetPortal;
  VirtualInvokeData _13_Open;
  VirtualInvokeData _14_SerializeNode;
  VirtualInvokeData _15_DeserializeNode;
  VirtualInvokeData _16_SerializeReferences;
  VirtualInvokeData _17_DeserializeReferences;
};

struct __LevelGridNode_Il2CppClass {
  Il2CppClass_1 _1;
  __LevelGridNode_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __LevelGridNode_Il2CppVtbl vtbl;
};

class LevelGridNode {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C3BA20;
  static inline    __LevelGridNode_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __LevelGridNode_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__LevelGridNode_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __LevelGridNode_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t GraphNode_nodeIndex;
  uint32_t flags;
  uint32_t GraphNode_penalty;
  ModdingAPI::Exposed::Pathfinding::Int3 position;
  int32_t nodeInGridIndex;
  uint16_t gridFlags;
  uint32_t gridConnections;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::AstarPath* astar) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*, ModdingAPI::Exposed::AstarPath*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24432F0))(this, astar);
  }
  void ResetAllGridConnections() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7DD680))(this);
  }
  bool get_WalkableErosion() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C3140))(this);
  }
  void set_WalkableErosion(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C3150))(this, value);
  }
  bool get_TmpWalkable() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C3180))(this);
  }
  void set_TmpWalkable(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C3190))(this, value);
  }
  bool HasAnyGridConnections() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1083BC0))(this);
  }
  void SetPosition(ModdingAPI::Exposed::Pathfinding::Int3 position) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*, ModdingAPI::Exposed::Pathfinding::Int3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2550720))(this, position);
  }
  void ClearConnections(bool alsoReverse) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C31C0))(this, alsoReverse);
  }
  void GetConnections(ModdingAPI::Exposed::Pathfinding::GraphNodeDelegate* del) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*, ModdingAPI::Exposed::Pathfinding::GraphNodeDelegate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C3390))(this, del);
  }
  void FloodFill(ModdingAPI::Exposed::System::Collections::Generic::Stack_T_* stack, uint32_t region) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*, ModdingAPI::Exposed::System::Collections::Generic::Stack_T_*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C3530))(this, stack, region);
  }
  void AddConnection(ModdingAPI::Exposed::Pathfinding::GraphNode* node, uint32_t cost) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*, ModdingAPI::Exposed::Pathfinding::GraphNode*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C3710))(this, node, cost);
  }
  void RemoveConnection(ModdingAPI::Exposed::Pathfinding::GraphNode* node) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*, ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C3770))(this, node);
  }
  bool GetConnection(int32_t i) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C37D0))(this, i);
  }
  void SetConnectionValue(int32_t dir, int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C37F0))(this, dir, value);
  }
  int32_t GetConnectionValue(int32_t dir) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C3820))(this, dir);
  }
  bool GetPortal(ModdingAPI::Exposed::Pathfinding::GraphNode* other, ModdingAPI::Exposed::System::Collections::Generic::List_T_* left, ModdingAPI::Exposed::System::Collections::Generic::List_T_* right, bool backwards) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*, ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C3840))(this, other, left, right, backwards);
  }
  void UpdateRecursiveG(ModdingAPI::Exposed::Pathfinding::Path* path, ModdingAPI::Exposed::Pathfinding::PathNode* pathNode, ModdingAPI::Exposed::Pathfinding::PathHandler* handler) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*, ModdingAPI::Exposed::Pathfinding::Path*, ModdingAPI::Exposed::Pathfinding::PathNode*, ModdingAPI::Exposed::Pathfinding::PathHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C3CF0))(this, path, pathNode, handler);
  }
  void Open(ModdingAPI::Exposed::Pathfinding::Path* path, ModdingAPI::Exposed::Pathfinding::PathNode* pathNode, ModdingAPI::Exposed::Pathfinding::PathHandler* handler) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*, ModdingAPI::Exposed::Pathfinding::Path*, ModdingAPI::Exposed::Pathfinding::PathNode*, ModdingAPI::Exposed::Pathfinding::PathHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C3F30))(this, path, pathNode, handler);
  }
  void SerializeNode(ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext* ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*, ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C4310))(this, ctx);
  }
  void DeserializeNode(ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext* ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::LevelGridNode*, ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C4400))(this, ctx);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::Pathfinding::LayerGridGraph_array*> _gridGraphs = __CppStaticProperty<ModdingAPI::Exposed::Pathfinding::LayerGridGraph_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->_gridGraphs; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::Pathfinding::LayerGridGraph_array*> gridGraphs = __CppStaticProperty<ModdingAPI::Exposed::Pathfinding::LayerGridGraph_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->gridGraphs; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::Pathfinding::LayerGridGraph* GetGridGraph(uint32_t graphIndex) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::LayerGridGraph*(__fastcall*)(uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C2DF0))(graphIndex);
  }
  static inline void SetGridGraph(int32_t graphIndex, ModdingAPI::Exposed::Pathfinding::LayerGridGraph* graph) {
    reinterpret_cast<void(__fastcall*)(int32_t, ModdingAPI::Exposed::Pathfinding::LayerGridGraph*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C2EC0))(graphIndex, graph);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x25C4510))();
  }
};
}