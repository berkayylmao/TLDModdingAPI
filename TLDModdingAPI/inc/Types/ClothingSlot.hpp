// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __ClothingSlot_Il2CppStaticFields {
};

struct __ClothingSlot_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ClothingSlot_Il2CppClass {
  Il2CppClass_1 _1;
  __ClothingSlot_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ClothingSlot_Il2CppVtbl vtbl;
};

class ClothingSlot {
public:
  // Il2Cpp fields:
  __ClothingSlot_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UITexture* m_TextureGearItem;
  ModdingAPI::Exposed::UISprite* m_SpriteEmptySlot;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Selected;
  ModdingAPI::Exposed::UISprite* m_SpriteWet;
  ModdingAPI::Exposed::UISprite* m_SpriteFrozen;
  ModdingAPI::Exposed::UISprite* m_SpriteOptionsAvailable;
  ModdingAPI::Exposed::UILabel* m_LayerLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_SpriteBoxHover;
  ModdingAPI::Exposed::UnityEngine::Material* m_MaterialSource;
  ModdingAPI::Exposed::GearItem* m_GearItem;
  int32_t m_ClothingRegion;
  int32_t m_ClothingLayer;
  int32_t m_LayoutColumnIndex;
  int32_t m_LayoutRowIndex;
  bool m_HasRegistered;
  bool m_IsUsingAltTexture;
  bool m_IsUsingThirdAltTexture;
  int32_t m_VoiceInUse;
  ModdingAPI::Exposed::UITexture_array* m_PaperDollSlots;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_PaperDollSlotWidgets;
  ModdingAPI::Exposed::System::Text::StringBuilder* m_StringBuilder;
  bool m_HasAltLayoutIndex;
  int32_t m_AltLayoutColumnIndex;
  int32_t m_AltLayoutRowIndex;
  ModdingAPI::Exposed::HoverWidgetControl* m_HoverWidgetControl;

  // Member methods:
  void DoSetup(System_String* emptySlotSpriteName, int32_t region, int32_t layer, int32_t column, int32_t row, ModdingAPI::Exposed::UITexture_array* paperDolls, System_String* layerLocID) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*, System_String*, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::UITexture_array*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B99CC0))(this, emptySlotSpriteName, region, layer, column, row, paperDolls, layerLocID);
  }
  void ActivateMouseHoverHighlight(bool isEnabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9A1F0))(this, isEnabled);
  }
  void DoAltLayoutSetup(int32_t column, int32_t row) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9A2E0))(this, column, row);
  }
  bool HasAltIndex() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x931E50))(this);
  }
  int32_t GetColumnIndex() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383A00))(this);
  }
  bool ColumnMatchesLayout(int32_t col) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9A300))(this, col);
  }
  void SetSelected(bool isSelected) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9A320))(this, isSelected);
  }
  void DoClickAction() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9A450))(this);
  }
  void DoDoubleClickAction() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9A570))(this);
  }
  bool IsAtPositionInLayout(int32_t col, int32_t row) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9A680))(this, col, row);
  }
  bool IsSelected() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9A6B0))(this);
  }
  int32_t GetClothingRegion() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3839C0))(this);
  }
  int32_t GetClothingLayer() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3839E0))(this);
  }
  void UpdateSlotInfo() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9A710))(this);
  }
  void ToggleWidgetsActive(bool toggle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9AC10))(this, toggle);
  }
  int32_t GetLayoutRow() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383A20))(this);
  }
  int32_t GetLayoutColumn() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383A00))(this);
  }
  void UpdateWetFrozenSprites(ModdingAPI::Exposed::ClothingItem* clothingItem) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*, ModdingAPI::Exposed::ClothingItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9ADB0))(this, clothingItem);
  }
  void SetPaperDollTexture(ModdingAPI::Exposed::GearItem* gi) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9AE20))(this, gi);
  }
  void SetBlendAmountOnly(ModdingAPI::Exposed::GearItem* gi) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9BBB0))(this, gi);
  }
  bool HasOptionsAvailable() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9BF30))(this);
  }
  int32_t GetPaperDollTextureLayer() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9C280))(this);
  }
  void UpdatePaperDollTextureLayer(int32_t newLayer) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9C2D0))(this, newLayer);
  }
  bool ShouldUseAltTexture() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9C450))(this);
  }
  bool ShouldUseThirdAltTexture() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9CD20))(this);
  }
  void CheckForChangeLayer() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9CEA0))(this);
  }
  void CheckForHide() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9DBE0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ClothingSlot*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B9DEE0))(this);
  }
};
}