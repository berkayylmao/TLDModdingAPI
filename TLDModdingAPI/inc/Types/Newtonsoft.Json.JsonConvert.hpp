// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::System::Decimal.hpp"


namespace ModdingAPI::Exposed::Newtonsoft::Json {
struct __JsonConvert_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Func_TResult_* _DefaultSettings_k__BackingField;
  System_String* True;
  System_String* False;
  System_String* Null;
  System_String* Undefined;
  System_String* PositiveInfinity;
  System_String* NegativeInfinity;
  System_String* NaN;
  ModdingAPI::Exposed::Newtonsoft::Json::JsonSerializerSettings* InitialSerializerSettings;
};

struct __JsonConvert_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __JsonConvert_Il2CppClass {
  Il2CppClass_1 _1;
  __JsonConvert_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __JsonConvert_Il2CppVtbl vtbl;
};

class JsonConvert {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C6D8C8;
  static inline    __JsonConvert_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __JsonConvert_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__JsonConvert_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __JsonConvert_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Func_TResult_*> _DefaultSettings_k__BackingField = __CppStaticProperty<ModdingAPI::Exposed::System::Func_TResult_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->_DefaultSettings_k__BackingField; }
  );
  static inline __CppStaticProperty<System_String*> True = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->True; }
  );
  static inline __CppStaticProperty<System_String*> False = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->False; }
  );
  static inline __CppStaticProperty<System_String*> Null = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Null; }
  );
  static inline __CppStaticProperty<System_String*> Undefined = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Undefined; }
  );
  static inline __CppStaticProperty<System_String*> PositiveInfinity = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->PositiveInfinity; }
  );
  static inline __CppStaticProperty<System_String*> NegativeInfinity = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->NegativeInfinity; }
  );
  static inline __CppStaticProperty<System_String*> NaN = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->NaN; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::Newtonsoft::Json::JsonSerializerSettings*> InitialSerializerSettings = __CppStaticProperty<ModdingAPI::Exposed::Newtonsoft::Json::JsonSerializerSettings*>(
   []() { return &GetStaticClassInstance()->pStaticFields->InitialSerializerSettings; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::System::Func_TResult_* get_DefaultSettings() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Func_TResult_*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E7530))();
  }
  static inline void set_DefaultSettings(ModdingAPI::Exposed::System::Func_TResult_* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Func_TResult_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E75D0))(value);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E7680))();
  }
  static inline ModdingAPI::Exposed::Newtonsoft::Json::JsonSerializerSettings* GetDefaultSettings() {
    return reinterpret_cast<ModdingAPI::Exposed::Newtonsoft::Json::JsonSerializerSettings*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E79E0))();
  }
  static inline System_String* ToString(bool value) {
    return reinterpret_cast<System_String*(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E7A80))(value);
  }
  static inline System_String* ToString(wchar_t value) {
    return reinterpret_cast<System_String*(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E7B60))(value);
  }
  static inline System_String* ToString(float value, int32_t floatFormatHandling, wchar_t quoteChar, bool nullable) {
    return reinterpret_cast<System_String*(__fastcall*)(float, int32_t, wchar_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E7C30))(value, floatFormatHandling, quoteChar, nullable);
  }
  static inline System_String* EnsureFloatFormat(double value, System_String* text, int32_t floatFormatHandling, wchar_t quoteChar, bool nullable) {
    return reinterpret_cast<System_String*(__fastcall*)(double, System_String*, int32_t, wchar_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E7D70))(value, text, floatFormatHandling, quoteChar, nullable);
  }
  static inline System_String* ToString(double value, int32_t floatFormatHandling, wchar_t quoteChar, bool nullable) {
    return reinterpret_cast<System_String*(__fastcall*)(double, int32_t, wchar_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E7F20))(value, floatFormatHandling, quoteChar, nullable);
  }
  static inline System_String* EnsureDecimalPlace(double value, System_String* text) {
    return reinterpret_cast<System_String*(__fastcall*)(double, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E8060))(value, text);
  }
  static inline System_String* EnsureDecimalPlace(System_String* text) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E8200))(text);
  }
  static inline System_String* ToString(ModdingAPI::Exposed::System::Decimal value) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Decimal)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E82D0))(value);
  }
  static inline System_String* ToString(System_String* value) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E8450))(value);
  }
  static inline System_String* ToString(System_String* value, wchar_t delimiter) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E85F0))(value, delimiter);
  }
  static inline System_String* ToString(System_String* value, wchar_t delimiter, int32_t stringEscapeHandling) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, wchar_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E8760))(value, delimiter, stringEscapeHandling);
  }
  static inline Il2CppObject* DeserializeObject(System_String* value, ModdingAPI::Exposed::System::Type* type, ModdingAPI::Exposed::Newtonsoft::Json::JsonConverter_array* converters) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::Newtonsoft::Json::JsonConverter_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E8870))(value, type, converters);
  }
  static inline Il2CppObject* DeserializeObject(System_String* value, ModdingAPI::Exposed::System::Type* type, ModdingAPI::Exposed::Newtonsoft::Json::JsonSerializerSettings* settings) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::Newtonsoft::Json::JsonSerializerSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9E8A20))(value, type, settings);
  }
};
}