// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __Panel_ChallengeComplete_Il2CppStaticFields {
  ModdingAPI::Exposed::System::String_array* SPECIAL_SLOT_PREFIXES;
  ModdingAPI::Exposed::System::String_array* SPECIAL_SLOT_LOCIDS;
  ModdingAPI::Exposed::System::Int32_array* SPECIAL_SLOT_LIMITS;
};

struct __Panel_ChallengeComplete_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Panel_ChallengeComplete_Il2CppClass {
  Il2CppClass_1 _1;
  __Panel_ChallengeComplete_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Panel_ChallengeComplete_Il2CppVtbl vtbl;
};

class Panel_ChallengeComplete {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C384A0;
  static inline    __Panel_ChallengeComplete_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Panel_ChallengeComplete_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Panel_ChallengeComplete_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Panel_ChallengeComplete_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::ButtonLegendContainer* m_ButtonLegendContainer;
  float m_SecondsBeforeShowMenuSuccess;
  float m_SecondsBeforeShowMenuFail;
  float m_SecondsBeforeShowMenuToBeContinued;
  int32_t m_MaxSavesToDisplay;
  ModdingAPI::Exposed::UnityEngine::GameObject_array* m_ButtonObjects;
  ModdingAPI::Exposed::UnityEngine::Animator* m_SuccessAnimator;
  ModdingAPI::Exposed::UnityEngine::Animator* m_FailAnimator;
  ModdingAPI::Exposed::UITexture* m_BadgeTexture;
  ModdingAPI::Exposed::UILabel* m_ChallengeNameLabel;
  ModdingAPI::Exposed::UILabel* m_SurvivedTimeLabel;
  ModdingAPI::Exposed::UILabel* m_BestTimeLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TryAgainButtonParent;
  ModdingAPI::Exposed::UILabel* m_FailReasonLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BasicMenuPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BasicMenuRoot;
  ModdingAPI::Exposed::UtilsPanelChoose::DetailsObjets* m_DetailObjects;
  ModdingAPI::Exposed::UILabel* m_EpisodeValue;
  ModdingAPI::Exposed::UILabel* m_ProgressValue;
  ModdingAPI::Exposed::UILabel* m_MostRecentSavesLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FailInfoGroup;
  ModdingAPI::Exposed::UILabel* m_FailSurvivedTimeLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FailSurvivedTimeHeader;
  ModdingAPI::Exposed::UILabel* m_FailStatLabel;
  ModdingAPI::Exposed::BasicMenu* m_BasicMenu;
  ModdingAPI::Exposed::SaveSlotInfo* m_LastSaveSlotInfo;
  ModdingAPI::Exposed::SaveSlotInfo* m_LastCheckpointSlotInfo;
  ModdingAPI::Exposed::UILabel* m_TryAgainButtonLabel;
  float m_FinalScreenCountdownSeconds;
  int32_t m_AnimParameter_ShowFailScreen;
  int32_t m_AnimParameter_ShowSuccessScreen;
  int32_t m_AnimParameter_ShowToBeContinued;
  bool m_ShowTimeSurvived;
  bool m_ShowStatInfo;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B37100))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B37310))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B37490))(this);
  }
  void Enable(bool enable, int32_t panelOptions) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B37700))(this, enable, panelOptions);
  }
  void EnableLoadList(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B38260))(this, enable);
  }
  void DisableReloadCheckpointButton() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B38320))(this);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x165DF10))(this);
  }
  void OnMainMenu() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B38380))(this);
  }
  void OnLoadOther() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B384F0))(this);
  }
  void OnTryAgain() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B38630))(this);
  }
  void OnFinalScreenShown() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B387A0))(this);
  }
  void ConfigureMenu() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B389A0))(this);
  }
  System_String* GetDescriptionLabelForSlot(ModdingAPI::Exposed::SaveSlotInfo* slotInfo) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*, ModdingAPI::Exposed::SaveSlotInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B39260))(this, slotInfo);
  }
  void SetTimeSurvivedLabel(ModdingAPI::Exposed::UILabel* label) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*, ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B39790))(this, label);
  }
  void UpdateBestTime() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B39970))(this);
  }
  System_String* GetBadgeNameForCurrentChallenge() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B3A2B0))(this);
  }
  void UpdateLabels() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B3A400))(this);
  }
  void ReloadSlot(ModdingAPI::Exposed::SaveSlotInfo* slotInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*, ModdingAPI::Exposed::SaveSlotInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B3A760))(this, slotInfo);
  }
  void AddSavesOfTypeToMenu(ModdingAPI::Exposed::System::String_array* slotPrefixes, ModdingAPI::Exposed::System::String_array* displayLocIds, ModdingAPI::Exposed::System::Int32_array* limits, bool showTimeSinceSave) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*, ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::System::Int32_array*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B3A820))(this, slotPrefixes, displayLocIds, limits, showTimeSinceSave);
  }
  void OnSlotClicked() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B3B160))(this);
  }
  ModdingAPI::Exposed::SaveSlotInfo* GetSaveSlotInfo(int32_t index) {
    return reinterpret_cast<ModdingAPI::Exposed::SaveSlotInfo*(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B3B300))(this, index);
  }
  void OnSelectionUpdate(System_String* name, int32_t value, int32_t itemIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*, System_String*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B3B3C0))(this, name, value, itemIndex);
  }
  void RefreshDetails(ModdingAPI::Exposed::SaveSlotInfo* slotInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*, ModdingAPI::Exposed::SaveSlotInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B3B5A0))(this, slotInfo);
  }
  void SetStatInfoText(System_String* locId, System_String* stat1MarkerValue, int32_t stat1ValueValue, System_String* stat2MarkerValue, int32_t stat2ValueValue) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*, System_String*, System_String*, int32_t, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B3B840))(this, locId, stat1MarkerValue, stat1ValueValue, stat2MarkerValue, stat2ValueValue);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_ChallengeComplete*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B3B990))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::String_array*> SPECIAL_SLOT_PREFIXES = __CppStaticProperty<ModdingAPI::Exposed::System::String_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->SPECIAL_SLOT_PREFIXES; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::String_array*> SPECIAL_SLOT_LOCIDS = __CppStaticProperty<ModdingAPI::Exposed::System::String_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->SPECIAL_SLOT_LOCIDS; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*> SPECIAL_SLOT_LIMITS = __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->SPECIAL_SLOT_LIMITS; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B3BBE0))();
  }
};
}