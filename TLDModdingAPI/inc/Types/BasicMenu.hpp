// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __BasicMenu_Il2CppStaticFields {
};

struct __BasicMenu_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __BasicMenu_Il2CppClass {
  Il2CppClass_1 _1;
  __BasicMenu_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __BasicMenu_Il2CppVtbl vtbl;
};

class BasicMenu {
public:
  // Il2Cpp fields:
  __BasicMenu_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UILabel* m_TitleLabel;
  ModdingAPI::Exposed::UILabel* m_TitleHeaderLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TitleGroup;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_SelectionMarker;
  ModdingAPI::Exposed::UILabel* m_DescriptionLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Scrollbar;
  ModdingAPI::Exposed::UnityEngine::Color m_ButtonTextColor_Hover;
  ModdingAPI::Exposed::UnityEngine::Color m_ButtonTextColor_Normal;
  ModdingAPI::Exposed::UnityEngine::Color m_ButtonTextColor_Selected;
  ModdingAPI::Exposed::UnityEngine::Color m_ButtonTextColor_Disabled;
  ModdingAPI::Exposed::UnityEngine::Color m_ButtonTextColor_HoverConfirmRequired;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BasicMenuItemPrefab;
  ModdingAPI::Exposed::UIGrid* m_MenuGrid;
  int32_t m_SecondaryTextSpacing;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_MouseBackButton;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_MouseConfirmButton;
  ModdingAPI::Exposed::GenericButtonMouseSpawner* m_MouseConfirmButtonSpawner;
  int32_t m_MouseKeyboardControlBehavior;
  bool m_CanScroll;
  int32_t m_MenuScrollOffset;
  int32_t m_MenuSelectedButtonIndex;
  int32_t m_PreviousMenuScrollOffset;
  int32_t m_PreviousSelectedButtonIndex;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_EnabledMenuItems;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_ItemModelList;
  ModdingAPI::Exposed::System::Action* m_OnClickBackAction;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_HeaderLabelOriginalPosition;
  ModdingAPI::Exposed::BasicMenu::OnSelectionUpdate* m_OnSelectionUpdateCallback;
  int32_t m_DescriptionCurrentIndex;
  int32_t m_LastControlMode;
  ModdingAPI::Exposed::UISlider* m_ScrollbarSlider;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_MenuItems;
  ModdingAPI::Exposed::UnityEngine::MonoBehaviour* m_OwnerContext;

  // Member methods:
  ModdingAPI::Exposed::UnityEngine::MonoBehaviour* GetOwnerContext() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::MonoBehaviour*(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E140))(this);
  }
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCF790))(this);
  }
  void UpdateDescriptionForMouseControl() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCF8F0))(this);
  }
  void ManualUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCFB10))(this);
  }
  void Reset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCFD00))(this);
  }
  void SetBackAction(ModdingAPI::Exposed::System::Action* onClickBackAction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, ModdingAPI::Exposed::System::Action*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E070))(this, onClickBackAction);
  }
  void EnableConfirm(bool enable, System_String* confirmTextLocId) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, bool, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BCFF00))(this, enable, confirmTextLocId);
  }
  void UpdateMouseConfirmText(System_String* confirmTextLocId) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD0040))(this, confirmTextLocId);
  }
  void SetOnSelectionUpdateCallback(ModdingAPI::Exposed::BasicMenu::OnSelectionUpdate* onSelectionUpdate) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, ModdingAPI::Exposed::BasicMenu::OnSelectionUpdate*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E0D0))(this, onSelectionUpdate);
  }
  int32_t GetItemValueIndex(int32_t value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD0110))(this, value);
  }
  ModdingAPI::Exposed::BasicMenu::BasicMenuItemModel* AddItem(System_String* id, int32_t value, int32_t itemIndex, System_String* labelText, System_String* descriptionText, System_String* secondaryText, ModdingAPI::Exposed::System::Action* onClickAction, ModdingAPI::Exposed::UnityEngine::Color tintNormal, ModdingAPI::Exposed::UnityEngine::Color tintHighlight) {
    return reinterpret_cast<ModdingAPI::Exposed::BasicMenu::BasicMenuItemModel*(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, System_String*, int32_t, int32_t, System_String*, System_String*, System_String*, ModdingAPI::Exposed::System::Action*, ModdingAPI::Exposed::UnityEngine::Color, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD0210))(this, id, value, itemIndex, labelText, descriptionText, secondaryText, onClickAction, tintNormal, tintHighlight);
  }
  void AddLineBreak() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD0460))(this);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x165DF10))(this);
  }
  void Enable(bool enabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD0540))(this, enabled);
  }
  int32_t GetItemCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD0910))(this);
  }
  int32_t GetSelectedItemIndex() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD09A0))(this);
  }
  System_String* GetSelectedItemIndexNextId() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD0A80))(this);
  }
  int32_t GetSelectedItemIndexFromId(System_String* id) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD0B60))(this, id);
  }
  System_String* GetSelectedItemId() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD0D30))(this);
  }
  void Refresh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD0E10))(this);
  }
  void OnConfirm() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD1090))(this);
  }
  void OnItemClicked(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD10D0))(this, index);
  }
  void OnItemDoubleClicked(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD1230))(this, index);
  }
  void OnClickBack() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD1320))(this);
  }
  void UpdateTitle(System_String* mainLocalizedTextId, System_String* headerLocalizedTextId, ModdingAPI::Exposed::UnityEngine::Vector3 headerOffset) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, System_String*, System_String*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD16E0))(this, mainLocalizedTextId, headerLocalizedTextId, headerOffset);
  }
  bool AcceptInput() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD1880))(this);
  }
  void UpdateTitleHeader(System_String* localizedTextId, ModdingAPI::Exposed::UnityEngine::Vector3 offset) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, System_String*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD1A10))(this, localizedTextId, offset);
  }
  void UpdateTitle(System_String* localizedTextId) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD1DC0))(this, localizedTextId);
  }
  void SetItemSelectable(int32_t itemIndex, bool selectable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD1FD0))(this, itemIndex, selectable);
  }
  void SetItemSelected(int32_t itemIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD20B0))(this, itemIndex);
  }
  void UpdateHoveredButton(int32_t index, bool immediate) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD2370))(this, index, immediate);
  }
  int32_t GetButtonIndexHovered() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD2530))(this);
  }
  void SetButtonPressedFromMenuIndex(int32_t buttonIndex, bool immediate) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD26B0))(this, buttonIndex, immediate);
  }
  ModdingAPI::Exposed::UnityEngine::Color GetSelectedColor(int32_t index) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD2870))(this, index);
  }
  void ProcessMenu(ModdingAPI::Exposed::System::Collections::Generic::List_T_* menuItems) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD29E0))(this, menuItems);
  }
  void UpdateDescription(int32_t buttonIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD3000))(this, buttonIndex);
  }
  void UpdateSelection(ModdingAPI::Exposed::System::Collections::Generic::List_T_* menuItems) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD3130))(this, menuItems);
  }
  void ClampSelectedIndex() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD3470))(this);
  }
  void RefreshEnableItems() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD3510))(this);
  }
  bool CanItemBeSelected(int32_t index) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD3CF0))(this, index);
  }
  void InternalClickAction(int32_t index, bool doAction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD3EB0))(this, index, doAction);
  }
  void RefreshButtonStateColors() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD3FD0))(this);
  }
  void RefreshScrollbarSettings() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD4390))(this);
  }
  void UpdateScrollbar() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD4580))(this);
  }
  void OnScrollbarChange() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD4750))(this);
  }
  void InstantiateMenuItems() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD4910))(this);
  }
  int32_t SelectNextValidItem(ModdingAPI::Exposed::System::Collections::Generic::List_T_* menuItems, int32_t index, int32_t delta) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BasicMenu*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD5030))(this, menuItems, index, delta);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BasicMenu*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD51E0))(this);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::BasicMenu* InstantiateMenu(ModdingAPI::Exposed::UnityEngine::GameObject* prefab, ModdingAPI::Exposed::UnityEngine::GameObject* root, ModdingAPI::Exposed::UnityEngine::GameObject* defaultRoot, ModdingAPI::Exposed::UnityEngine::MonoBehaviour* context) {
    return reinterpret_cast<ModdingAPI::Exposed::BasicMenu*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*, ModdingAPI::Exposed::UnityEngine::GameObject*, ModdingAPI::Exposed::UnityEngine::GameObject*, ModdingAPI::Exposed::UnityEngine::MonoBehaviour*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD1360))(prefab, root, defaultRoot, context);
  }
};
}