// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color32.hpp"
#include "ModdingAPI.Exposed.UnityEngine.ParticleSystem.Particle.hpp"
#include "ModdingAPI.Exposed.UnityEngine.ParticleSystem.MainModule.hpp"
#include "ModdingAPI.Exposed.UnityEngine.ParticleSystem.EmissionModule.hpp"
#include "ModdingAPI.Exposed.UnityEngine.ParticleSystem.ShapeModule.hpp"
#include "ModdingAPI.Exposed.UnityEngine.ParticleSystem.ExternalForcesModule.hpp"
#include "ModdingAPI.Exposed.UnityEngine.ParticleSystem.NoiseModule.hpp"
#include "ModdingAPI.Exposed.UnityEngine.ParticleSystem.CollisionModule.hpp"
#include "ModdingAPI.Exposed.UnityEngine.ParticleSystem.EmitParams.hpp"


namespace ModdingAPI::Exposed::UnityEngine {
struct __ParticleSystem_Il2CppStaticFields {
};

struct __ParticleSystem_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ParticleSystem_Il2CppClass {
  Il2CppClass_1 _1;
  __ParticleSystem_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ParticleSystem_Il2CppVtbl vtbl;
};

class ParticleSystem {
public:
  // Il2Cpp fields:
  __ParticleSystem_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;

  // Member methods:
  void Emit(ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::UnityEngine::Vector3 velocity, float size, float lifetime, ModdingAPI::Exposed::UnityEngine::Color32 color) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float, float, ModdingAPI::Exposed::UnityEngine::Color32)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576530))(this, position, velocity, size, lifetime, color);
  }
  void Emit(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle particle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15766F0))(this, particle);
  }
  bool get_isPlaying() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576750))(this);
  }
  bool get_isStopped() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15767A0))(this);
  }
  int32_t get_particleCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15767F0))(this);
  }
  float get_time() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576840))(this);
  }
  uint32_t get_randomSeed() {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576890))(this);
  }
  void set_randomSeed(uint32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15768E0))(this, value);
  }
  bool get_useAutoRandomSeed() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576940))(this);
  }
  void set_useAutoRandomSeed(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576990))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule get_main() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::ParticleSystem::MainModule(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCB29B0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::ParticleSystem::EmissionModule get_emission() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::ParticleSystem::EmissionModule(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCB29B0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::ParticleSystem::ShapeModule get_shape() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::ParticleSystem::ShapeModule(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCB29B0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::ParticleSystem::ExternalForcesModule get_externalForces() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::ParticleSystem::ExternalForcesModule(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCB29B0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::ParticleSystem::NoiseModule get_noise() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::ParticleSystem::NoiseModule(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCB29B0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::ParticleSystem::CollisionModule get_collision() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::ParticleSystem::CollisionModule(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCB29B0))(this);
  }
  void SetParticles(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle_array* particles, int32_t size, int32_t offset) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15769F0))(this, particles, size, offset);
  }
  void SetParticles(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle_array* particles, int32_t size) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576A70))(this, particles, size);
  }
  int32_t GetParticles(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle_array* particles, int32_t size, int32_t offset) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576AF0))(this, particles, size, offset);
  }
  int32_t GetParticles(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle_array* particles, int32_t size) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576B70))(this, particles, size);
  }
  int32_t GetParticles(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle_array* particles) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576BF0))(this, particles);
  }
  void Simulate(float t, bool withChildren, bool restart, bool fixedTimeStep) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, float, bool, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576C60))(this, t, withChildren, restart, fixedTimeStep);
  }
  void Simulate(float t, bool withChildren, bool restart) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, float, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576CF0))(this, t, withChildren, restart);
  }
  void Simulate(float t, bool withChildren) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576D80))(this, t, withChildren);
  }
  void Simulate(float t) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576DA0))(this, t);
  }
  void Play(bool withChildren) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576DC0))(this, withChildren);
  }
  void Play() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576E20))(this);
  }
  void Stop(bool withChildren, int32_t stopBehavior) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576E80))(this, withChildren, stopBehavior);
  }
  void Stop(bool withChildren) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576EF0))(this, withChildren);
  }
  void Stop() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576F60))(this);
  }
  void Clear(bool withChildren) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1576FC0))(this, withChildren);
  }
  void Clear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577020))(this);
  }
  bool IsAlive(bool withChildren) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577080))(this, withChildren);
  }
  void Emit(int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15770E0))(this, count);
  }
  void Emit_Internal(int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15770E0))(this, count);
  }
  void Emit(ModdingAPI::Exposed::UnityEngine::ParticleSystem::EmitParams emitParams, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::EmitParams, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577140))(this, emitParams, count);
  }
  void Internal_EmitOld(ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle particle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::Particle)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15771B0))(this, particle);
  }
  void Emit_Injected(ModdingAPI::Exposed::UnityEngine::ParticleSystem::EmitParams emitParams, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::ParticleSystem*, ModdingAPI::Exposed::UnityEngine::ParticleSystem::EmitParams, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1577210))(this, emitParams, count);
  }
};
}