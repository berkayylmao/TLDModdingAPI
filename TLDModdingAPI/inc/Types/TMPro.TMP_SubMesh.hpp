// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::TMPro::MaterialReference.hpp"


namespace ModdingAPI::Exposed::TMPro {
struct __TMP_SubMesh_Il2CppStaticFields {
};

struct __TMP_SubMesh_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __TMP_SubMesh_Il2CppClass {
  Il2CppClass_1 _1;
  __TMP_SubMesh_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TMP_SubMesh_Il2CppVtbl vtbl;
};

class TMP_SubMesh {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C56FB8;
  static inline    TMP_SubMesh* _pStaticObjectInstance = nullptr;

public:
// Singleton object getter:
  static inline TMP_SubMesh* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (TMP_SubMesh**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

  // Il2Cpp fields:
  __TMP_SubMesh_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::TMPro::TMP_FontAsset* m_fontAsset;
  ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* m_spriteAsset;
  ModdingAPI::Exposed::UnityEngine::Material* m_material;
  ModdingAPI::Exposed::UnityEngine::Material* m_sharedMaterial;
  ModdingAPI::Exposed::UnityEngine::Material* m_fallbackMaterial;
  ModdingAPI::Exposed::UnityEngine::Material* m_fallbackSourceMaterial;
  bool m_isDefaultMaterial;
  float m_padding;
  ModdingAPI::Exposed::UnityEngine::Renderer* m_renderer;
  ModdingAPI::Exposed::UnityEngine::MeshFilter* m_meshFilter;
  ModdingAPI::Exposed::UnityEngine::Mesh* m_mesh;
  ModdingAPI::Exposed::TMPro::TextMeshPro* m_TextComponent;
  bool m_isRegisteredForEvents;

  // Member methods:
  ModdingAPI::Exposed::TMPro::TMP_FontAsset* get_fontAsset() {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_FontAsset*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  void set_fontAsset(ModdingAPI::Exposed::TMPro::TMP_FontAsset* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*, ModdingAPI::Exposed::TMPro::TMP_FontAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3E0))(this, value);
  }
  ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* get_spriteAsset() {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110A0))(this);
  }
  void set_spriteAsset(ModdingAPI::Exposed::TMPro::TMP_SpriteAsset* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*, ModdingAPI::Exposed::TMPro::TMP_SpriteAsset*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x310F00))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Material* get_material() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EFC00))(this);
  }
  void set_material(ModdingAPI::Exposed::UnityEngine::Material* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EFC10))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Material* get_sharedMaterial() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335370))(this);
  }
  void set_sharedMaterial(ModdingAPI::Exposed::UnityEngine::Material* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EFD90))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Material* get_fallbackMaterial() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319970))(this);
  }
  void set_fallbackMaterial(ModdingAPI::Exposed::UnityEngine::Material* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EFDA0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Material* get_fallbackSourceMaterial() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319960))(this);
  }
  void set_fallbackSourceMaterial(ModdingAPI::Exposed::UnityEngine::Material* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x31F420))(this, value);
  }
  bool get_isDefaultMaterial() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EFF30))(this);
  }
  void set_isDefaultMaterial(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EFF40))(this, value);
  }
  float get_padding() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EFF50))(this);
  }
  void set_padding(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EFF60))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Renderer* get_renderer() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Renderer*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EFF70))(this);
  }
  ModdingAPI::Exposed::UnityEngine::MeshFilter* get_meshFilter() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::MeshFilter*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F0040))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Mesh* get_mesh() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Mesh*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F0110))(this);
  }
  void set_mesh(ModdingAPI::Exposed::UnityEngine::Mesh* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*, ModdingAPI::Exposed::UnityEngine::Mesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A4B0))(this, value);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F0310))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F04E0))(this);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F0620))(this);
  }
  void DestroySelf() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F0FD0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Material* GetMaterial(ModdingAPI::Exposed::UnityEngine::Material* mat) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F10F0))(this, mat);
  }
  ModdingAPI::Exposed::UnityEngine::Material* CreateMaterialInstance(ModdingAPI::Exposed::UnityEngine::Material* source) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F1360))(this, source);
  }
  ModdingAPI::Exposed::UnityEngine::Material* GetSharedMaterial() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F1580))(this);
  }
  void SetSharedMaterial(ModdingAPI::Exposed::UnityEngine::Material* mat) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F16A0))(this, mat);
  }
  float GetPaddingForMaterial() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F17D0))(this);
  }
  void UpdateMeshPadding(bool isExtraPadding, bool isUsingBold) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F18A0))(this, isExtraPadding, isUsingBold);
  }
  void SetVerticesDirty() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F1970))(this);
  }
  void SetMaterialDirty() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F1AC0))(this);
  }
  void UpdateMaterial() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F1AC0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::TMPro::TMP_SubMesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::TMPro::TMP_SubMesh* AddSubTextObject(ModdingAPI::Exposed::TMPro::TextMeshPro* textComponent, ModdingAPI::Exposed::TMPro::MaterialReference materialReference) {
    return reinterpret_cast<ModdingAPI::Exposed::TMPro::TMP_SubMesh*(__fastcall*)(ModdingAPI::Exposed::TMPro::TextMeshPro*, ModdingAPI::Exposed::TMPro::MaterialReference)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F0770))(textComponent, materialReference);
  }
};
}