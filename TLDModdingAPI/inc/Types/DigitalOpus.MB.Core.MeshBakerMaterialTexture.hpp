// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.DigitalOpus.MB.Core.DRect.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed::DigitalOpus::MB::Core {
struct __MeshBakerMaterialTexture_Il2CppStaticFields {
  bool readyToBuildAtlases;
};

struct __MeshBakerMaterialTexture_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __MeshBakerMaterialTexture_Il2CppClass {
  Il2CppClass_1 _1;
  __MeshBakerMaterialTexture_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MeshBakerMaterialTexture_Il2CppVtbl vtbl;
};

class MeshBakerMaterialTexture {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C537D0;
  static inline    __MeshBakerMaterialTexture_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __MeshBakerMaterialTexture_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__MeshBakerMaterialTexture_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __MeshBakerMaterialTexture_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::UnityEngine::Texture2D* _t;
  float texelDensity;
  ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect encapsulatingSamplingRect;
  ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect _matTilingRect_k__BackingField;

  // Member methods:
  void set_t(ModdingAPI::Exposed::UnityEngine::Texture2D* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture*, ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, value);
  }
  ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect get_matTilingRect() {
    return reinterpret_cast<ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD84F0))(this);
  }
  void set_matTilingRect(ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture*, ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD8510))(this, value);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void ::ctor(ModdingAPI::Exposed::UnityEngine::Texture* tx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture*, ModdingAPI::Exposed::UnityEngine::Texture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD8520))(this, tx);
  }
  void ::ctor(ModdingAPI::Exposed::UnityEngine::Texture* tx, ModdingAPI::Exposed::UnityEngine::Vector2 matTilingOffset, ModdingAPI::Exposed::UnityEngine::Vector2 matTilingScale, float texelDens) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture*, ModdingAPI::Exposed::UnityEngine::Texture*, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD8660))(this, tx, matTilingOffset, matTilingScale, texelDens);
  }
  ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect GetEncapsulatingSamplingRect() {
    return reinterpret_cast<ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD87E0))(this);
  }
  void SetEncapsulatingSamplingRect(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet* ts, ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect r) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_TexSet*, ModdingAPI::Exposed::DigitalOpus::MB::Core::DRect)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD8800))(this, ts, r);
  }
  ModdingAPI::Exposed::UnityEngine::Texture2D* GetTexture2D() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Texture2D*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD8820))(this);
  }
  bool get_isNull() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD8930))(this);
  }
  int32_t get_width() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD89D0))(this);
  }
  int32_t get_height() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD8AD0))(this);
  }
  System_String* GetTexName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD8BD0))(this);
  }
  bool AreTexturesEqual(ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture* b) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FD8CB0))(this, b);
  }

  // Static fields:
  static inline __CppStaticProperty<bool> readyToBuildAtlases = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->readyToBuildAtlases; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))();
  }
};
}