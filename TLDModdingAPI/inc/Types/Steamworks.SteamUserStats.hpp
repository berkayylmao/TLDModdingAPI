// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.Steamworks.SteamAPICall_t.hpp"
#include "ModdingAPI::Exposed::Steamworks::CSteamID.hpp"
#include "ModdingAPI::Exposed::Steamworks::SteamLeaderboard_t.hpp"
#include "ModdingAPI::Exposed::Steamworks::SteamLeaderboardEntries_t.hpp"
#include "ModdingAPI::Exposed::Steamworks::LeaderboardEntry_t.hpp"
#include "ModdingAPI::Exposed::Steamworks::UGCHandle_t.hpp"


namespace ModdingAPI::Exposed::Steamworks {
struct __SteamUserStats_Il2CppStaticFields {
};

struct __SteamUserStats_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SteamUserStats_Il2CppClass {
  Il2CppClass_1 _1;
  __SteamUserStats_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SteamUserStats_Il2CppVtbl vtbl;
};

class SteamUserStats {
public:
  // Il2Cpp fields:
  __SteamUserStats_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline bool RequestCurrentStats() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x28255C0))();
  }
  static inline bool GetStat(System_String* pchName, int32_t pData) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2825670))(pchName, pData);
  }
  static inline bool GetStat(System_String* pchName, float pData) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2825960))(pchName, pData);
  }
  static inline bool SetStat(System_String* pchName, int32_t nData) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2825C50))(pchName, nData);
  }
  static inline bool SetStat(System_String* pchName, float fData) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2825F40))(pchName, fData);
  }
  static inline bool UpdateAvgRateStat(System_String* pchName, float flCountThisSession, double dSessionLength) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, float, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2826230))(pchName, flCountThisSession, dSessionLength);
  }
  static inline bool GetAchievement(System_String* pchName, bool pbAchieved) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2826540))(pchName, pbAchieved);
  }
  static inline bool SetAchievement(System_String* pchName) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2826840))(pchName);
  }
  static inline bool ClearAchievement(System_String* pchName) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2826B20))(pchName);
  }
  static inline bool GetAchievementAndUnlockTime(System_String* pchName, bool pbAchieved, uint32_t punUnlockTime) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, bool, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2826E00))(pchName, pbAchieved, punUnlockTime);
  }
  static inline bool StoreStats() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2827110))();
  }
  static inline int32_t GetAchievementIcon(System_String* pchName) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28271C0))(pchName);
  }
  static inline System_String* GetAchievementDisplayAttribute(System_String* pchName, System_String* pchKey) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28274A0))(pchName, pchKey);
  }
  static inline bool IndicateAchievementProgress(System_String* pchName, uint32_t nCurProgress, uint32_t nMaxProgress) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2827900))(pchName, nCurProgress, nMaxProgress);
  }
  static inline uint32_t GetNumAchievements() {
    return reinterpret_cast<uint32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2827C00))();
  }
  static inline System_String* GetAchievementName(uint32_t iAchievement) {
    return reinterpret_cast<System_String*(__fastcall*)(uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2827CB0))(iAchievement);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t RequestUserStats(ModdingAPI::Exposed::Steamworks::CSteamID steamIDUser) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2827D70))(steamIDUser);
  }
  static inline bool GetUserStat(ModdingAPI::Exposed::Steamworks::CSteamID steamIDUser, System_String* pchName, int32_t pData) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2827EB0))(steamIDUser, pchName, pData);
  }
  static inline bool GetUserStat(ModdingAPI::Exposed::Steamworks::CSteamID steamIDUser, System_String* pchName, float pData) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, System_String*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28281B0))(steamIDUser, pchName, pData);
  }
  static inline bool GetUserAchievement(ModdingAPI::Exposed::Steamworks::CSteamID steamIDUser, System_String* pchName, bool pbAchieved) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28284B0))(steamIDUser, pchName, pbAchieved);
  }
  static inline bool GetUserAchievementAndUnlockTime(ModdingAPI::Exposed::Steamworks::CSteamID steamIDUser, System_String* pchName, bool pbAchieved, uint32_t punUnlockTime) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::CSteamID, System_String*, bool, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28287C0))(steamIDUser, pchName, pbAchieved, punUnlockTime);
  }
  static inline bool ResetAllStats(bool bAchievementsToo) {
    return reinterpret_cast<bool(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2828AC0))(bAchievementsToo);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t FindOrCreateLeaderboard(System_String* pchLeaderboardName, int32_t eLeaderboardSortMethod, int32_t eLeaderboardDisplayType) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(System_String*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2828B80))(pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t FindLeaderboard(System_String* pchLeaderboardName) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2828EA0))(pchLeaderboardName);
  }
  static inline System_String* GetLeaderboardName(ModdingAPI::Exposed::Steamworks::SteamLeaderboard_t hSteamLeaderboard) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamLeaderboard_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28291A0))(hSteamLeaderboard);
  }
  static inline int32_t GetLeaderboardEntryCount(ModdingAPI::Exposed::Steamworks::SteamLeaderboard_t hSteamLeaderboard) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamLeaderboard_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2829260))(hSteamLeaderboard);
  }
  static inline int32_t GetLeaderboardSortMethod(ModdingAPI::Exposed::Steamworks::SteamLeaderboard_t hSteamLeaderboard) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamLeaderboard_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2829320))(hSteamLeaderboard);
  }
  static inline int32_t GetLeaderboardDisplayType(ModdingAPI::Exposed::Steamworks::SteamLeaderboard_t hSteamLeaderboard) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamLeaderboard_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28293E0))(hSteamLeaderboard);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t DownloadLeaderboardEntries(ModdingAPI::Exposed::Steamworks::SteamLeaderboard_t hSteamLeaderboard, int32_t eLeaderboardDataRequest, int32_t nRangeStart, int32_t nRangeEnd) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamLeaderboard_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28294A0))(hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t DownloadLeaderboardEntriesForUsers(ModdingAPI::Exposed::Steamworks::SteamLeaderboard_t hSteamLeaderboard, ModdingAPI::Exposed::Steamworks::CSteamID_array* prgUsers, int32_t cUsers) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamLeaderboard_t, ModdingAPI::Exposed::Steamworks::CSteamID_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2829610))(hSteamLeaderboard, prgUsers, cUsers);
  }
  static inline bool GetDownloadedLeaderboardEntry(ModdingAPI::Exposed::Steamworks::SteamLeaderboardEntries_t hSteamLeaderboardEntries, int32_t index, ModdingAPI::Exposed::Steamworks::LeaderboardEntry_t pLeaderboardEntry, ModdingAPI::Exposed::System::Int32_array* pDetails, int32_t cDetailsMax) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamLeaderboardEntries_t, int32_t, ModdingAPI::Exposed::Steamworks::LeaderboardEntry_t, ModdingAPI::Exposed::System::Int32_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2829780))(hSteamLeaderboardEntries, index, pLeaderboardEntry, pDetails, cDetailsMax);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t UploadLeaderboardScore(ModdingAPI::Exposed::Steamworks::SteamLeaderboard_t hSteamLeaderboard, int32_t eLeaderboardUploadScoreMethod, int32_t nScore, ModdingAPI::Exposed::System::Int32_array* pScoreDetails, int32_t cScoreDetailsCount) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamLeaderboard_t, int32_t, int32_t, ModdingAPI::Exposed::System::Int32_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2829890))(hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t AttachLeaderboardUGC(ModdingAPI::Exposed::Steamworks::SteamLeaderboard_t hSteamLeaderboard, ModdingAPI::Exposed::Steamworks::UGCHandle_t hUGC) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamLeaderboard_t, ModdingAPI::Exposed::Steamworks::UGCHandle_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2829A10))(hSteamLeaderboard, hUGC);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t GetNumberOfCurrentPlayers() {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2829B60))();
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t RequestGlobalAchievementPercentages() {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2829C90))();
  }
  static inline int32_t GetMostAchievedAchievementInfo(System_String* pchName, uint32_t unNameBufLen, float pflPercent, bool pbAchieved) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*, uint32_t, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2829DC0))(pchName, unNameBufLen, pflPercent, pbAchieved);
  }
  static inline int32_t GetNextMostAchievedAchievementInfo(int32_t iIteratorPrevious, System_String* pchName, uint32_t unNameBufLen, float pflPercent, bool pbAchieved) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, System_String*, uint32_t, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2829F90))(iIteratorPrevious, pchName, unNameBufLen, pflPercent, pbAchieved);
  }
  static inline bool GetAchievementAchievedPercent(System_String* pchName, float pflPercent) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282A170))(pchName, pflPercent);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t RequestGlobalStats(int32_t nHistoryDays) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282A460))(nHistoryDays);
  }
  static inline bool GetGlobalStat(System_String* pchStatName, int64_t pData) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282A5A0))(pchStatName, pData);
  }
  static inline bool GetGlobalStat(System_String* pchStatName, double pData) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282A890))(pchStatName, pData);
  }
  static inline int32_t GetGlobalStatHistory(System_String* pchStatName, ModdingAPI::Exposed::System::Int64_array* pData, uint32_t cubData) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Int64_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282AB80))(pchStatName, pData, cubData);
  }
  static inline int32_t GetGlobalStatHistory(System_String* pchStatName, ModdingAPI::Exposed::System::Double_array* pData, uint32_t cubData) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Double_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x282AE80))(pchStatName, pData, cubData);
  }
};
}