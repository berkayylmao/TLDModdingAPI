// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Threading.CancellationToken.hpp"
#include "ModdingAPI.Exposed.System.Threading.CancellationTokenRegistration.hpp"
#include "ModdingAPI.Exposed.System.Threading.CancellationCallbackCoreWorkArguments.hpp"
#include "ModdingAPI::Exposed::System::Threading::CancellationToken.hpp"


namespace ModdingAPI::Exposed::System::Threading {
struct __CancellationTokenSource_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Threading::CancellationTokenSource* _staticSource_Set;
  ModdingAPI::Exposed::System::Threading::CancellationTokenSource* _staticSource_NotCancelable;
  int32_t s_nLists;
  ModdingAPI::Exposed::System::Action_T_* s_LinkedTokenCancelDelegate;
  ModdingAPI::Exposed::System::Threading::TimerCallback* s_timerCallback;
};

struct __CancellationTokenSource_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Dispose;
  VirtualInvokeData _5_Dispose;
};

struct __CancellationTokenSource_Il2CppClass {
  Il2CppClass_1 _1;
  __CancellationTokenSource_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CancellationTokenSource_Il2CppVtbl vtbl;
};

class CancellationTokenSource {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C5D078;
  static inline    __CancellationTokenSource_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __CancellationTokenSource_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__CancellationTokenSource_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __CancellationTokenSource_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Threading::ManualResetEvent* m_kernelEvent;
  ModdingAPI::Exposed::System::Threading::SparselyPopulatedArray_CancellationCallbackInfo__array* m_registeredCallbacksLists;
  int32_t m_state;
  int32_t m_threadIDExecutingCallbacks;
  bool m_disposed;
  ModdingAPI::Exposed::System::Threading::CancellationTokenRegistration_array* m_linkingRegistrations;
  ModdingAPI::Exposed::System::Threading::CancellationCallbackInfo* m_executingCallback;
  ModdingAPI::Exposed::System::Threading::Timer* m_timer;

  // Member methods:
  bool get_IsCancellationRequested() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F380))(this);
  }
  bool get_IsCancellationCompleted() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F390))(this);
  }
  bool get_IsDisposed() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3F0))(this);
  }
  void set_ThreadIDExecutingCallbacks(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F3A0))(this, value);
  }
  int32_t get_ThreadIDExecutingCallbacks() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F3B0))(this);
  }
  ModdingAPI::Exposed::System::Threading::CancellationToken get_Token() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::CancellationToken(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F3C0))(this);
  }
  bool get_CanBeCanceled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F3E0))(this);
  }
  ModdingAPI::Exposed::System::Threading::CancellationCallbackInfo* get_ExecutingCallback() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::CancellationCallbackInfo*(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F3F0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F400))(this);
  }
  void ::ctor(bool set) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F420))(this, set);
  }
  void Cancel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F440))(this);
  }
  void Cancel(bool throwOnFirstException) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F470))(this, throwOnFirstException);
  }
  void Dispose() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F5C0))(this);
  }
  void Dispose(bool disposing) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F670))(this, disposing);
  }
  void ThrowIfDisposed() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F760))(this);
  }
  ModdingAPI::Exposed::System::Threading::CancellationTokenRegistration InternalRegister(ModdingAPI::Exposed::System::Action_T_* callback, Il2CppObject* stateForCallback, ModdingAPI::Exposed::System::Threading::SynchronizationContext* targetSyncContext, ModdingAPI::Exposed::System::Threading::ExecutionContext* executionContext) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::CancellationTokenRegistration(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*, ModdingAPI::Exposed::System::Action_T_*, Il2CppObject*, ModdingAPI::Exposed::System::Threading::SynchronizationContext*, ModdingAPI::Exposed::System::Threading::ExecutionContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F950))(this, callback, stateForCallback, targetSyncContext, executionContext);
  }
  void NotifyCancellation(bool throwOnFirstException) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108FF30))(this, throwOnFirstException);
  }
  void ExecuteCallbackHandlers(bool throwOnFirstException) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10900A0))(this, throwOnFirstException);
  }
  void CancellationCallbackCoreWork_OnSyncContext(Il2CppObject* obj) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1090650))(this, obj);
  }
  void CancellationCallbackCoreWork(ModdingAPI::Exposed::System::Threading::CancellationCallbackCoreWorkArguments args) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*, ModdingAPI::Exposed::System::Threading::CancellationCallbackCoreWorkArguments)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1090710))(this, args);
  }
  void WaitForCallbackToComplete(ModdingAPI::Exposed::System::Threading::CancellationCallbackInfo* callbackInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationTokenSource*, ModdingAPI::Exposed::System::Threading::CancellationCallbackInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1090B50))(this, callbackInfo);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Threading::CancellationTokenSource*> _staticSource_Set = __CppStaticProperty<ModdingAPI::Exposed::System::Threading::CancellationTokenSource*>(
   []() { return &GetStaticClassInstance()->pStaticFields->_staticSource_Set; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Threading::CancellationTokenSource*> _staticSource_NotCancelable = __CppStaticProperty<ModdingAPI::Exposed::System::Threading::CancellationTokenSource*>(
   []() { return &GetStaticClassInstance()->pStaticFields->_staticSource_NotCancelable; }
  );
  static inline __CppStaticProperty<int32_t> s_nLists = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_nLists; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Action_T_*> s_LinkedTokenCancelDelegate = __CppStaticProperty<ModdingAPI::Exposed::System::Action_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_LinkedTokenCancelDelegate; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Threading::TimerCallback*> s_timerCallback = __CppStaticProperty<ModdingAPI::Exposed::System::Threading::TimerCallback*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_timerCallback; }
  );

  // Static methods:
  static inline void LinkedTokenCancelDelegate(Il2CppObject* source) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F270))(source);
  }
  static inline void TimerCallbackLogic(Il2CppObject* obj) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F4A0))(obj);
  }
  static inline void ThrowObjectDisposedException() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F800))();
  }
  static inline ModdingAPI::Exposed::System::Threading::CancellationTokenSource* InternalGetStaticSource(bool set) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::CancellationTokenSource*(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x108F870))(set);
  }
  static inline ModdingAPI::Exposed::System::Threading::CancellationTokenSource* CreateLinkedTokenSource(ModdingAPI::Exposed::System::Threading::CancellationToken token1, ModdingAPI::Exposed::System::Threading::CancellationToken token2) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::CancellationTokenSource*(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationToken, ModdingAPI::Exposed::System::Threading::CancellationToken)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1090840))(token1, token2);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1090C30))();
  }
};
}