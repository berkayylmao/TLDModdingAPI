// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.KeyCode.hpp"
#include "ModdingAPI.Exposed.Rewired.ElementAssignmentConflictInfo.hpp"

namespace ModdingAPI::Exposed::Rewired {
struct __ElementAssignmentConflictInfo_Il2CppObject {
  bool pzvixzgacLDyLQWPisapSqNxomI;
  bool siXbGxHxrmPBRQDrAHmVAUyGIRDN;
  int32_t RQvCtWMSaXdtWuElfcQyltnGehm;
  int32_t UKHPEgpfEMgaxeIYmcUTCbzFPYYc;
  int32_t OrRbFrDDytBuoavptrdUDRQWhpXD;
  int32_t qjofBqEGqOdfMkYvGjVwAMWFcbAe;
  int32_t ZlpCwTgkPZmHQfJpqpQGdSdWaLqE;
  int32_t TYBgbdohIbcllCPmugnsWwHLKQp;
  int32_t HDTmQvJrpXCrFCutlEbuBDHfGOZb;
  ModdingAPI::Exposed::UnityEngine::KeyCode IVEVzMKikQyAnNQGksxSOIqxgxG;
  int32_t jJMHMrmuCMlMrgWbBjtMPstYHOO;
  int32_t BXlRCANxPIHqvgTtMSzGnnLdTcg;
};
struct __ElementAssignmentConflictInfo_Il2CppStaticFields {
};

struct __ElementAssignmentConflictInfo_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ElementAssignmentConflictInfo_Il2CppClass {
  Il2CppClass_1 _1;
  __ElementAssignmentConflictInfo_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ElementAssignmentConflictInfo_Il2CppVtbl vtbl;
};

class ElementAssignmentConflictInfo {
  static constexpr uint64_t _rvaClassInstance     = 0x3C5E2F0;
  static inline    __ElementAssignmentConflictInfo_Il2CppClass* _pStaticClassInstance = nullptr;

public:
  // Static class getter:
  static inline __ElementAssignmentConflictInfo_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ElementAssignmentConflictInfo_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Member fields:
  bool pzvixzgacLDyLQWPisapSqNxomI;
  bool siXbGxHxrmPBRQDrAHmVAUyGIRDN;
  int32_t RQvCtWMSaXdtWuElfcQyltnGehm;
  int32_t UKHPEgpfEMgaxeIYmcUTCbzFPYYc;
  int32_t OrRbFrDDytBuoavptrdUDRQWhpXD;
  int32_t qjofBqEGqOdfMkYvGjVwAMWFcbAe;
  int32_t ZlpCwTgkPZmHQfJpqpQGdSdWaLqE;
  int32_t TYBgbdohIbcllCPmugnsWwHLKQp;
  int32_t HDTmQvJrpXCrFCutlEbuBDHfGOZb;
  ModdingAPI::Exposed::UnityEngine::KeyCode IVEVzMKikQyAnNQGksxSOIqxgxG;
  int32_t jJMHMrmuCMlMrgWbBjtMPstYHOO;
  int32_t BXlRCANxPIHqvgTtMSzGnnLdTcg;

  // Member methods:
  bool get_isConflict() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B020))(this);
  }
  void set_isConflict(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B030))(this, value);
  }
  bool get_isUserAssignable() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B040))(this);
  }
  void set_isUserAssignable(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B050))(this, value);
  }
  int32_t get_playerId() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5A20))(this);
  }
  void set_playerId(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE720))(this, value);
  }
  int32_t get_controllerType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5020))(this);
  }
  void set_controllerType(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF170))(this, value);
  }
  int32_t get_controllerId() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5A30))(this);
  }
  void set_controllerId(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A670))(this, value);
  }
  int32_t get_controllerMapId() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3380))(this);
  }
  void set_controllerMapId(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x121E0))(this, value);
  }
  int32_t get_elementMapId() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A680))(this);
  }
  void set_elementMapId(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x121F0))(this, value);
  }
  int32_t get_elementType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF1D0))(this);
  }
  void set_elementType(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF1E0))(this, value);
  }
  int32_t get_elementIdentifierId() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8490))(this);
  }
  void set_elementIdentifierId(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A690))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::KeyCode get_keyCode() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::KeyCode(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A6A0))(this);
  }
  void set_keyCode(ModdingAPI::Exposed::UnityEngine::KeyCode value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*, ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A6B0))(this, value);
  }
  int32_t get_modifierKeyFlags() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13170))(this);
  }
  void set_modifierKeyFlags(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A6C0))(this, value);
  }
  int32_t get_actionId() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6880))(this);
  }
  void set_actionId(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA5A0))(this, value);
  }
  ModdingAPI::Exposed::Rewired::Player* get_player() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::Player*(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B060))(this);
  }
  ModdingAPI::Exposed::Rewired::InputAction* get_action() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::InputAction*(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B070))(this);
  }
  ModdingAPI::Exposed::Rewired::Controller* get_controller() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::Controller*(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B160))(this);
  }
  ModdingAPI::Exposed::Rewired::ControllerMap* get_controllerMap() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::ControllerMap*(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B170))(this);
  }
  ModdingAPI::Exposed::Rewired::ControllerElementIdentifier* get_elementIdentifier() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B180))(this);
  }
  ModdingAPI::Exposed::Rewired::ActionElementMap* get_elementMap() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::ActionElementMap*(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B1D0))(this);
  }
  System_String* get_elementDisplayName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B220))(this);
  }
  void ::ctor(bool isConflict, bool isUserAssignable, int32_t playerId, int32_t controllerType, int32_t controllerId, int32_t controllerMapId, int32_t elementMapId, int32_t actionId, int32_t elementType, int32_t elementIdentifierId, ModdingAPI::Exposed::UnityEngine::KeyCode keyCode, int32_t modifierKeyFlags) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*, bool, bool, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::KeyCode, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B300))(this, isConflict, isUserAssignable, playerId, controllerType, controllerId, controllerMapId, elementMapId, actionId, elementType, elementIdentifierId, keyCode, modifierKeyFlags);
  }
  void ::ctor(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo source) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo*, ModdingAPI::Exposed::Rewired::ElementAssignmentConflictInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B350))(this, source);
  }

};
}