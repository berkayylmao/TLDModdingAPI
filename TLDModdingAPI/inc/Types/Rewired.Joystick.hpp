// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Guid.hpp"
#include "ModdingAPI.Exposed.Rewired.ControllerIdentifier.hpp"
#include "ModdingAPI.Exposed.System.Nullable_T_.hpp"
#include "ModdingAPI.Exposed.Rewired.HardwareControllerMapIdentifier.hpp"


namespace ModdingAPI::Exposed::Rewired {
struct __Joystick_Il2CppStaticFields {
};

struct __Joystick_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_deviceInstanceGuid;
  VirtualInvokeData _5_LwKpWazmuZDrpZtifwRMfBjlws;
  VirtualInvokeData _6_GetElementById;
  VirtualInvokeData _7_GetButton;
  VirtualInvokeData _8_GetButtonDown;
  VirtualInvokeData _9_GetButtonUp;
  VirtualInvokeData _10_GetButtonChanged;
  VirtualInvokeData _11_GetButtonPrev;
  VirtualInvokeData _12_GetButtonDoublePressHold;
  VirtualInvokeData _13_GetButtonDoublePressHold;
  VirtualInvokeData _14_GetButtonDoublePressDown;
  VirtualInvokeData _15_GetButtonDoublePressDown;
  VirtualInvokeData _16_GetButtonTimePressed;
  VirtualInvokeData _17_GetButtonTimeUnpressed;
  VirtualInvokeData _18_GetButtonLastTimePressed;
  VirtualInvokeData _19_GetButtonLastTimeUnpressed;
  VirtualInvokeData _20_GetAnyButton;
  VirtualInvokeData _21_GetAnyButtonDown;
  VirtualInvokeData _22_GetAnyButtonUp;
  VirtualInvokeData _23_GetAnyButtonPrev;
  VirtualInvokeData _24_GetAnyButtonChanged;
  VirtualInvokeData _25_GetButtonById;
  VirtualInvokeData _26_GetButtonDownById;
  VirtualInvokeData _27_GetButtonUpById;
  VirtualInvokeData _28_GetButtonDoublePressHoldById;
  VirtualInvokeData _29_GetButtonDoublePressDownById;
  VirtualInvokeData _30_GetButtonDoublePressHoldById;
  VirtualInvokeData _31_GetButtonDoublePressDownById;
  VirtualInvokeData _32_GetButtonPrevById;
  VirtualInvokeData _33_GetButtonTimePressedById;
  VirtualInvokeData _34_GetButtonTimeUnpressedById;
  VirtualInvokeData _35_GetButtonLastTimePressedById;
  VirtualInvokeData _36_GetButtonLastTimeUnpressedById;
  VirtualInvokeData _37_PollForFirstElement;
  VirtualInvokeData _38_PollForFirstElementDown;
  VirtualInvokeData _39_PollForFirstButton;
  VirtualInvokeData _40_PollForFirstButtonDown;
  VirtualInvokeData _41_PollForAllElements;
  VirtualInvokeData _42_PollForAllElementsDown;
  VirtualInvokeData _43_PollForAllButtons;
  VirtualInvokeData _44_PollForAllButtonsDown;
  VirtualInvokeData _45_GetLastTimeActive;
  VirtualInvokeData _46_GetLastTimeActive;
  VirtualInvokeData _47_GetLastTimeAnyElementChanged;
  VirtualInvokeData _48_GetLastTimeAnyElementChanged;
  VirtualInvokeData _49_UpdateData;
  VirtualInvokeData _50_DRJcjEhqhASTxhzJHuZkXgvjfRh;
  VirtualInvokeData _51_Clear;
  VirtualInvokeData _52_SetEnabled;
  VirtualInvokeData _53_BakeMap;
  VirtualInvokeData _54_BakeActionElementMap;
  VirtualInvokeData _55_rcgIUfpkYrjrUXGyTomqMGJeaVQ;
  VirtualInvokeData _56_Connected;
  VirtualInvokeData _57_Disconnected;
  VirtualInvokeData _58_IsPolledAxisActive;
};

struct __Joystick_Il2CppClass {
  Il2CppClass_1 _1;
  __Joystick_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Joystick_Il2CppVtbl vtbl;
};

class Joystick {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C7BCD0;
  static inline    Joystick* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C77B70;
  static inline    __Joystick_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline Joystick* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (Joystick**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __Joystick_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Joystick_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Joystick_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t id;
  System_String* _tag;
  System_String* _name;
  System_String* _hardwareName;
  int32_t _type;
  ModdingAPI::Exposed::System::Guid bgEbuinIyksHhzwbKkeQTdhvMfB;
  System_String* _hardwareIdentifier;
  bool _isConnected;
  ModdingAPI::Exposed::Rewired::Controller::Extension* Controller_mOyfABPQGnDTXmvUyuQvMOOPHRt;
  bool Controller_yIozJzFkooRCrVDgMYuKERLjtKT;
  ModdingAPI::Exposed::Rewired::ControllerIdentifier Controller_LWnIwzKSsriocXoXPzmdHMThaXh;
  int32_t CtWHpgOaCVZYpcBzymhejPsalLW;
  int32_t _buttonCount;
  ModdingAPI::Exposed::Rewired::Controller::Button_array* buttons;
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* buttons_readOnly;
  ModdingAPI::Exposed::System::Collections::Generic::IList_T_* Controller_zDYSoPuWRIUrndraUwJpaRdSJEG;
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* Controller_BOLhTANJNrAyZcBkNpOGdedkKspm;
  int32_t rxKCLleLOYchANMgnMBjKBqyofIy;
  ModdingAPI::Exposed::Rewired::ControllerDataUpdater* TjnaCYbBJvhWUcbafhPbJbpmEEHG;
  ModdingAPI::Exposed::Rewired::HardwareControllerMap_Game* kDCFjukcapMxkiTWjVJiJjJbuIc;
  uint32_t aUOBdeEozdjgtEVSBmIMjmsTwOc;
  uint32_t Controller_oPQfxVgUVqSNOHHPapJHfAitNsam;
  uint32_t Controller_xAEXTFehdQAtzbZMNQMxfdNgMSmN;
  ModdingAPI::Exposed::System::Action_T_* Controller_qFVtdtZKINIugHapYAWZixKJblw;
  ModdingAPI::Exposed::Rewired::IControllerTemplate_array* Controller_LBaGeVXHfBdEsIeJDbxApJJcZUhE;
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* Controller_DgrYEPdrtFPsDCgGnAGsRqMlbYt;
  int32_t _axisCount;
  int32_t _axis2DCount;
  ModdingAPI::Exposed::Rewired::Controller::Axis_array* axes;
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* axes_readOnly;
  ModdingAPI::Exposed::Rewired::Controller::Axis2D_array* axes2D;
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* axes2D_readOnly;
  ModdingAPI::Exposed::Rewired::CalibrationMap* _calibrationMap;
  ModdingAPI::Exposed::System::Single_array* ControllerWithAxes_FSbDHfKqfVALREeVCdZLrHCYudR;
  uint32_t ControllerWithAxes_aZuqnAtAIPIBenYEWUoRLYNQzMt;
  ModdingAPI::Exposed::System::Func_T__TResult_* ControllerWithAxes_lAbSPzytMMAohvgPWrXteCHrirM;
  ModdingAPI::Exposed::Rewired::Interfaces::IInputManagerJoystickPublic* _sourceJoystick;
  ModdingAPI::Exposed::Rewired::JoystickType_array* _joystickTypes;
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* _joystickTypes_readOnly;
  bool _supportsVibration;
  bool _supportsLocalVibration;
  bool _supportsVoice;
  int32_t _localVibrationMotorCount;
  ModdingAPI::Exposed::System::Single_array* _localVibrationMotorValues;
  ModdingAPI::Exposed::Rewired::Utils::Classes::Utility::TimerAbs_array* _localVibrationStopTimers;
  int32_t _hatCount;
  ModdingAPI::Exposed::Rewired::Controller::Hat_array* _hats;
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* hats_readOnly;

  // Member methods:
  ModdingAPI::Exposed::System::Collections::Generic::IList_T_* get_joystickTypes() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IList_T_*(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x74DC70))(this);
  }
  ModdingAPI::Exposed::System::Nullable_T_ get_systemId() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Nullable_T_(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x74DD70))(this);
  }
  int32_t get_unityId() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x74DE90))(this);
  }
  ModdingAPI::Exposed::System::Guid get_deviceInstanceGuid() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Guid(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x74DFA0))(this);
  }
  bool get_supportsVibration() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x74E0F0))(this);
  }
  float get_vibrationLeftMotor() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x74E210))(this);
  }
  void set_vibrationLeftMotor(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x74E3B0))(this, value);
  }
  float get_vibrationRightMotor() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x74E5E0))(this);
  }
  void set_vibrationRightMotor(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x74E780))(this, value);
  }
  int32_t get_vibrationMotorCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x74EB40))(this);
  }
  int32_t get_hatCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x74ECA0))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::IList_T_* get_Hats() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IList_T_*(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x74ED90))(this);
  }
  int32_t get_inputManagerId() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x74EE90))(this);
  }
  ModdingAPI::Exposed::Rewired::HardwareControllerMapIdentifier get_hardwareJoystickMapIdentifier() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::HardwareControllerMapIdentifier(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x74EF30))(this);
  }
  void ::ctor(ModdingAPI::Exposed::Rewired::BridgedController* controller) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*, ModdingAPI::Exposed::Rewired::BridgedController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x74EF90))(this, controller);
  }
  void ::ctor(int32_t controllerId, int32_t inputSource, System_String* name, System_String* hardwareName, System_String* hardwareIdentifier, ModdingAPI::Exposed::System::Guid hardwareTypeGuid, int32_t axisCount, int32_t buttonCount, ModdingAPI::Exposed::System::Boolean_array* isButtonPressureSensitive, ModdingAPI::Exposed::Rewired::HardwareControllerMap_Game* hardwareMap, ModdingAPI::Exposed::Rewired::Controller::Extension* extension, ModdingAPI::Exposed::Rewired::ControllerDataUpdater* dataUpdater) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*, int32_t, int32_t, System_String*, System_String*, System_String*, ModdingAPI::Exposed::System::Guid, int32_t, int32_t, ModdingAPI::Exposed::System::Boolean_array*, ModdingAPI::Exposed::Rewired::HardwareControllerMap_Game*, ModdingAPI::Exposed::Rewired::Controller::Extension*, ModdingAPI::Exposed::Rewired::ControllerDataUpdater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x74FD60))(this, controllerId, inputSource, name, hardwareName, hardwareIdentifier, hardwareTypeGuid, axisCount, buttonCount, isButtonPressureSensitive, hardwareMap, extension, dataUpdater);
  }
  bool IsType(int32_t joystickType) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x750C90))(this, joystickType);
  }
  ModdingAPI::Exposed::Rewired::JoystickCalibrationMapSaveData* GetCalibrationMapSaveData() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::JoystickCalibrationMapSaveData*(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x750E30))(this);
  }
  void SetVibration(float leftMotorLevel, float rightMotorLevel) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x751040))(this, leftMotorLevel, rightMotorLevel);
  }
  void SetVibration(float leftMotorLevel, float rightMotorLevel, float leftMotorDuration, float rightMotorDuration) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x751160))(this, leftMotorLevel, rightMotorLevel, leftMotorDuration, rightMotorDuration);
  }
  void SetVibration(int32_t motorIndex, float motorLevel) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x751490))(this, motorIndex, motorLevel);
  }
  void SetVibration(int32_t motorIndex, float motorLevel, float duration) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*, int32_t, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7514B0))(this, motorIndex, motorLevel, duration);
  }
  void SetVibration(int32_t motorIndex, float motorLevel, bool stopOtherMotors) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*, int32_t, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7514D0))(this, motorIndex, motorLevel, stopOtherMotors);
  }
  void SetVibration(int32_t motorIndex, float motorLevel, float duration, bool stopOtherMotors) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*, int32_t, float, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7514F0))(this, motorIndex, motorLevel, duration, stopOtherMotors);
  }
  float GetVibration(int32_t motorIndex) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x751750))(this, motorIndex);
  }
  void StopVibration() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7519C0))(this);
  }
  void UpdateData(int32_t updateLoop) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x751C30))(this, updateLoop);
  }
  void UpdateControllerInfo(ModdingAPI::Exposed::Rewired::UpdateControllerInfoEventArgs* args) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*, ModdingAPI::Exposed::Rewired::UpdateControllerInfoEventArgs*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x751E90))(this, args);
  }
  void UpdateControllerInfo(ModdingAPI::Exposed::Rewired::BridgedController* controller) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*, ModdingAPI::Exposed::Rewired::BridgedController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x752190))(this, controller);
  }
  void UpdateControllerInfo(ModdingAPI::Exposed::Rewired::Interfaces::IInputManagerJoystickPublic* joystick) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*, ModdingAPI::Exposed::Rewired::Interfaces::IInputManagerJoystickPublic*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7521B0))(this, joystick);
  }
  void Clear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x752370))(this);
  }
  void Disconnected() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x752390))(this);
  }
  void CheckVibrationTimeout() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x752560))(this);
  }
  void SetLocalVibration(int32_t motorIndex, float motorLevel, float motorDuration, bool stopOtherMotors, bool updateNow) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*, int32_t, float, float, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7526D0))(this, motorIndex, motorLevel, motorDuration, stopOtherMotors, updateNow);
  }
  void UpdateLocalControllerVibration() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x752A00))(this);
  }
  void StopAllVibration() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static methods:
  static inline int32_t CompareById_Ascending(ModdingAPI::Exposed::Rewired::Joystick* a, ModdingAPI::Exposed::Rewired::Joystick* b) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Joystick*, ModdingAPI::Exposed::Rewired::Joystick*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x752C00))(a, b);
  }
};
}