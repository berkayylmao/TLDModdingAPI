// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing {
struct __ColorGradingRenderer_Il2CppStaticFields {
  float s_Brightness;
};

struct __ColorGradingRenderer_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Init;
  VirtualInvokeData _5_GetCameraFlags;
  VirtualInvokeData _6_ResetHistory;
  VirtualInvokeData _7_Release;
  VirtualInvokeData _8_Render;
  VirtualInvokeData _9_SetSettings;
};

struct __ColorGradingRenderer_Il2CppClass {
  Il2CppClass_1 _1;
  __ColorGradingRenderer_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ColorGradingRenderer_Il2CppVtbl vtbl;
};

class ColorGradingRenderer {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C41100;
  static inline    ColorGradingRenderer* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C501B8;
  static inline    __ColorGradingRenderer_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline ColorGradingRenderer* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (ColorGradingRenderer**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __ColorGradingRenderer_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ColorGradingRenderer_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ColorGradingRenderer_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  bool m_ResetHistory;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGrading* PostProcessEffectRenderer_1__settings_k__BackingField;
  ModdingAPI::Exposed::UnityEngine::Texture2D* m_GradingCurves;
  ModdingAPI::Exposed::UnityEngine::Color_array* m_Pixels;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* m_InternalLdrLut;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* m_InternalLogLut;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* m_InternalBlendLut1A;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* m_InternalBlendLut1B;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* m_InternalBlendLut2A;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* m_InternalBlendLut2B;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* m_PainSettingsLut;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* m_StimSettingsLut;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* m_ElectrocutionSettingsLut;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* m_BoostSettingsLut;
  ModdingAPI::Exposed::UnityEngine::RenderTexture* m_HeadacheSettingsLut;
  ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::HableCurve* m_HableCurve;
  ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock* m_Settings1AProperties;
  ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock* m_Settings1BProperties;
  ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock* m_Settings2AProperties;
  ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock* m_Settings2BProperties;
  ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock* m_PainSettingsProperties;
  ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock* m_StimSettingsProperties;
  ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock* m_ElectrocutionSettingsProperties;
  ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock* m_BoostSettingsProperties;
  ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock* m_HeadacheSettingsProperties;

  // Member methods:
  void Render(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext* context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingRenderer*, ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2499C30))(this, context);
  }
  void RenderExternalPipeline3D(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext* context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingRenderer*, ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2499D20))(this, context);
  }
  void RenderHDRPipeline3D(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext* context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingRenderer*, ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x249A070))(this, context);
  }
  void RenderHDRPipeline2D(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext* context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingRenderer*, ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x249B560))(this, context);
  }
  void RenderHDRBlendPipeline2D(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext* context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingRenderer*, ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x249D130))(this, context);
  }
  void RenderLDRPipeline2D(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext* context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingRenderer*, ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::PostProcessRenderContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x249FE60))(this, context);
  }
  void CheckInternalLogLut() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingRenderer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24A12F0))(this);
  }
  void MaybeCreateLut(ModdingAPI::Exposed::UnityEngine::RenderTexture* lut) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingRenderer*, ModdingAPI::Exposed::UnityEngine::RenderTexture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24A1810))(this, lut);
  }
  void CheckInternalStripLut() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingRenderer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24A1C80))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Texture2D* GetCurveTexture(bool hdr) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Texture2D*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingRenderer*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24A1D30))(this, hdr);
  }
  void Release() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingRenderer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24A26E0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rendering::PostProcessing::ColorGradingRenderer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24A27B0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<float> s_Brightness = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_Brightness; }
  );

  // Static methods:
  static inline bool IsRenderTextureFormatSupportedForLinearFiltering(int32_t format) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24A2520))(format);
  }
  static inline int32_t GetLutFormat() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x24A25C0))();
  }
  static inline int32_t GetCurveFormat() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x24A26B0))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x24A2920))();
  }
};
}