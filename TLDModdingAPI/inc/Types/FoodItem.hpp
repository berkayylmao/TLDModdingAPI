// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __FoodItem_Il2CppStaticFields {
  ModdingAPI::Exposed::FoodItemSaveDataProxy* m_FoodItemSaveDataProxy;
};

struct __FoodItem_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __FoodItem_Il2CppClass {
  Il2CppClass_1 _1;
  __FoodItem_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __FoodItem_Il2CppVtbl vtbl;
};

class FoodItem {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C742E0;
  static inline    __FoodItem_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __FoodItem_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__FoodItem_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __FoodItem_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_DailyHPDecayInside;
  float m_DailyHPDecayOutside;
  float m_CaloriesRemaining;
  float m_CaloriesTotal;
  bool m_MustConsumeAll;
  float m_TimeToEatSeconds;
  float m_TimeToOpenAndEatSeconds;
  float m_ChanceFoodPoisoning;
  float m_ChanceFoodPoisoningLowCondition;
  float m_ChanceFoodPoisoningRuined;
  ModdingAPI::Exposed::System::Single_array* m_ParasiteRiskPercentIncrease;
  System_String* m_EatingAudio;
  System_String* m_OpenAndEatingAudio;
  bool m_IsDrink;
  bool m_IsMeat;
  bool m_IsFish;
  bool m_IsRawMeat;
  bool m_IsNatural;
  bool m_StayHeatedUntilInteraction;
  bool m_HeatedWhenCooked;
  float m_PercentHeatLossPerMinuteIndoors;
  float m_PercentHeatLossPerMinuteOutdoors;
  float m_ReduceThirst;
  bool m_Packaged;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_GearPrefabHarvestAfterFinishEatingNormal;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_GearPrefabHarvestAfterFinishEatingSmashed;
  bool m_Opened;
  bool m_GearRequiredToOpen;
  bool m_OpenedWithCanOpener;
  bool m_OpenedWithKnife;
  bool m_OpenedWithHatchet;
  float m_HeatPercent;
  bool m_ReturnToCookingAfterOpen;
  int32_t m_NumTimesHeatedUp;
  int32_t m_MeatType;
  bool m_HarvestedByPlayer;
  ModdingAPI::Exposed::GearItem* m_GearItem;
  bool m_PreventHeatLoss;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FoodItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E26E0))(this);
  }
  void UpdateHeatPercent(float gameMinutes) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FoodItem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E2770))(this, gameMinutes);
  }
  void SetPreventHeatLoss(bool shouldPrevent) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FoodItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x699F30))(this, shouldPrevent);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::FoodItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E2900))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FoodItem*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E2B20))(this, text);
  }
  bool IsHot() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::FoodItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E2D00))(this);
  }
  System_String* GetTemperatureTextForInspectMode() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::FoodItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E2D20))(this);
  }
  System_String* GetTemperatureTextPostfix() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::FoodItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E2E10))(this);
  }
  void MarkAsHarvested() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FoodItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E2F00))(this);
  }
  bool WasHarvested() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::FoodItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x931E50))(this);
  }
  void CopyHarvestedState(ModdingAPI::Exposed::FoodItem* fi) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FoodItem*, ModdingAPI::Exposed::FoodItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E2FC0))(this, fi);
  }
  float GetDailyHPDecay() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::FoodItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E3090))(this);
  }
  void DoGearHarvestAfterFinishEating() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FoodItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E31A0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FoodItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::FoodItemSaveDataProxy*> m_FoodItemSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::FoodItemSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_FoodItemSaveDataProxy; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E3460))();
  }
};
}