// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Decimal.hpp"
#include "ModdingAPI.Exposed.System.DateTime.hpp"
#include "ModdingAPI::Exposed::System::Nullable_T_.hpp"


namespace ModdingAPI::Exposed::Newtonsoft::Json::Linq {
struct __JValue_Il2CppStaticFields {
};

struct __JValue_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_System_Collections_Generic_IEnumerable_Newtonsoft_Json_Linq_JToken__GetEnumerator;
  VirtualInvokeData _5_System_Collections_IEnumerable_GetEnumerator;
  VirtualInvokeData _6_Newtonsoft_Json_IJsonLineInfo_HasLineInfo;
  VirtualInvokeData _7_Newtonsoft_Json_IJsonLineInfo_get_LineNumber;
  VirtualInvokeData _8_Newtonsoft_Json_IJsonLineInfo_get_LinePosition;
  VirtualInvokeData _9_System_ICloneable_Clone;
  VirtualInvokeData _10_CloneToken;
  VirtualInvokeData _11_DeepEquals;
  VirtualInvokeData _12_get_Type;
  VirtualInvokeData _13_get_HasValues;
  VirtualInvokeData _14_get_Item;
  VirtualInvokeData _15_get_First;
  VirtualInvokeData _16_get_Last;
  VirtualInvokeData _17_Children;
  VirtualInvokeData _18_WriteTo;
  VirtualInvokeData _19_GetDeepHashCode;
  VirtualInvokeData _20_ToString;
  VirtualInvokeData _21_System_IComparable_CompareTo;
  VirtualInvokeData _22_Equals;
  VirtualInvokeData _23_CompareTo;
  VirtualInvokeData _24_System_IConvertible_GetTypeCode;
  VirtualInvokeData _25_System_IConvertible_ToBoolean;
  VirtualInvokeData _26_System_IConvertible_ToChar;
  VirtualInvokeData _27_System_IConvertible_ToSByte;
  VirtualInvokeData _28_System_IConvertible_ToByte;
  VirtualInvokeData _29_System_IConvertible_ToInt16;
  VirtualInvokeData _30_System_IConvertible_ToUInt16;
  VirtualInvokeData _31_System_IConvertible_ToInt32;
  VirtualInvokeData _32_System_IConvertible_ToUInt32;
  VirtualInvokeData _33_System_IConvertible_ToInt64;
  VirtualInvokeData _34_System_IConvertible_ToUInt64;
  VirtualInvokeData _35_System_IConvertible_ToSingle;
  VirtualInvokeData _36_System_IConvertible_ToDouble;
  VirtualInvokeData _37_System_IConvertible_ToDecimal;
  VirtualInvokeData _38_System_IConvertible_ToDateTime;
  VirtualInvokeData _39_ToString;
  VirtualInvokeData _40_System_IConvertible_ToType;
};

struct __JValue_Il2CppClass {
  Il2CppClass_1 _1;
  __JValue_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __JValue_Il2CppVtbl vtbl;
};

class JValue {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C50F08;
  static inline    JValue* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C937B0;
  static inline    __JValue_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline JValue* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (JValue**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __JValue_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__JValue_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __JValue_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::Newtonsoft::Json::Linq::JContainer* JToken__parent;
  ModdingAPI::Exposed::Newtonsoft::Json::Linq::JToken* JToken__previous;
  ModdingAPI::Exposed::Newtonsoft::Json::Linq::JToken* JToken__next;
  Il2CppObject* JToken__annotations;
  int32_t _valueType;
  Il2CppObject* _value;

  // Member methods:
  void ::ctor(Il2CppObject* value, int32_t type) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, Il2CppObject*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85A1B0))(this, value, type);
  }
  void ::ctor(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue* other) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85A260))(this, other);
  }
  void ::ctor(Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85A340))(this, value);
  }
  bool DeepEquals(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JToken* node) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::Newtonsoft::Json::Linq::JToken*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85A380))(this, node);
  }
  bool get_HasValues() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this);
  }
  ModdingAPI::Exposed::Newtonsoft::Json::Linq::JToken* CloneToken() {
    return reinterpret_cast<ModdingAPI::Exposed::Newtonsoft::Json::Linq::JToken*(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85B030))(this);
  }
  int32_t get_Type() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D870))(this);
  }
  Il2CppObject* get_Value() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319970))(this);
  }
  void WriteTo(ModdingAPI::Exposed::Newtonsoft::Json::JsonWriter* writer, ModdingAPI::Exposed::Newtonsoft::Json::JsonConverter_array* converters) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::Newtonsoft::Json::JsonWriter*, ModdingAPI::Exposed::Newtonsoft::Json::JsonConverter_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85BA50))(this, writer, converters);
  }
  int32_t GetDeepHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85C470))(this);
  }
  bool Equals(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue* other) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85C510))(this, other);
  }
  bool Equals(Il2CppObject* obj) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85C560))(this, obj);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85C690))(this);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85C6B0))(this);
  }
  System_String* ToString(ModdingAPI::Exposed::System::IFormatProvider* formatProvider) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85C760))(this, formatProvider);
  }
  System_String* ToString(System_String* format, ModdingAPI::Exposed::System::IFormatProvider* formatProvider) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, System_String*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85C850))(this, format, formatProvider);
  }
  int32_t System::IComparable::CompareTo(Il2CppObject* obj) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85C960))(this, obj);
  }
  int32_t CompareTo(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue* obj) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85CAA0))(this, obj);
  }
  int32_t System::IConvertible::GetTypeCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85CAC0))(this);
  }
  bool System::IConvertible::ToBoolean(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85CB70))(this, provider);
  }
  wchar_t System::IConvertible::ToChar(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<wchar_t(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85CC10))(this, provider);
  }
  char System::IConvertible::ToSByte(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<char(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85CCB0))(this, provider);
  }
  uint8_t System::IConvertible::ToByte(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<uint8_t(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85CD50))(this, provider);
  }
  int16_t System::IConvertible::ToInt16(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<int16_t(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85CDF0))(this, provider);
  }
  uint16_t System::IConvertible::ToUInt16(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<uint16_t(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85CE90))(this, provider);
  }
  int32_t System::IConvertible::ToInt32(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85CF30))(this, provider);
  }
  uint32_t System::IConvertible::ToUInt32(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85CFD0))(this, provider);
  }
  int64_t System::IConvertible::ToInt64(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85D070))(this, provider);
  }
  uint64_t System::IConvertible::ToUInt64(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<uint64_t(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85D110))(this, provider);
  }
  float System::IConvertible::ToSingle(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85D1B0))(this, provider);
  }
  double System::IConvertible::ToDouble(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85D250))(this, provider);
  }
  ModdingAPI::Exposed::System::Decimal System::IConvertible::ToDecimal(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Decimal(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85D2F0))(this, provider);
  }
  ModdingAPI::Exposed::System::DateTime System::IConvertible::ToDateTime(ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85D3B0))(this, provider);
  }
  Il2CppObject* System::IConvertible::ToType(ModdingAPI::Exposed::System::Type* conversionType, ModdingAPI::Exposed::System::IFormatProvider* provider) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::IFormatProvider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85D450))(this, conversionType, provider);
  }

  // Static methods:
  static inline int32_t Compare(int32_t valueType, Il2CppObject* objA, Il2CppObject* objB) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, Il2CppObject*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85A4A0))(valueType, objA, objB);
  }
  static inline int32_t CompareFloat(Il2CppObject* objA, Il2CppObject* objB) {
    return reinterpret_cast<int32_t(__fastcall*)(Il2CppObject*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85AEF0))(objA, objB);
  }
  static inline ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue* CreateComment(System_String* value) {
    return reinterpret_cast<ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85B180))(value);
  }
  static inline ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue* CreateNull() {
    return reinterpret_cast<ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x85B2D0))();
  }
  static inline ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue* CreateUndefined() {
    return reinterpret_cast<ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x85B420))();
  }
  static inline int32_t GetValueType(ModdingAPI::Exposed::System::Nullable_T_ current, Il2CppObject* value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Nullable_T_, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85B570))(current, value);
  }
  static inline int32_t GetStringValueType(ModdingAPI::Exposed::System::Nullable_T_ current) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Nullable_T_)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85B9B0))(current);
  }
  static inline bool ValuesEquals(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue* v1, ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue* v2) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*, ModdingAPI::Exposed::Newtonsoft::Json::Linq::JValue*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x85C4B0))(v1, v2);
  }
};
}