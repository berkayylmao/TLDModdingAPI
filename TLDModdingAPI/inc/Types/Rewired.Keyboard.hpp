// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Guid.hpp"
#include "ModdingAPI.Exposed.Rewired.ControllerIdentifier.hpp"
#include "ModdingAPI.Exposed.Rewired.ControllerPollingInfo.hpp"


namespace ModdingAPI::Exposed::Rewired {
struct __Keyboard_Il2CppStaticFields {
  ModdingAPI::Exposed::Rewired::Keyboard* singleton;
  ModdingAPI::Exposed::Rewired::KeyboardKeyCode_array* __keyIndexToKeyboardKeyCode;
  ModdingAPI::Exposed::System::Guid s_deviceInstanceGuid;
};

struct __Keyboard_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_deviceInstanceGuid;
  VirtualInvokeData _5_LwKpWazmuZDrpZtifwRMfBjlws;
  VirtualInvokeData _6_GetElementById;
  VirtualInvokeData _7_GetButton;
  VirtualInvokeData _8_GetButtonDown;
  VirtualInvokeData _9_GetButtonUp;
  VirtualInvokeData _10_GetButtonChanged;
  VirtualInvokeData _11_GetButtonPrev;
  VirtualInvokeData _12_GetButtonDoublePressHold;
  VirtualInvokeData _13_GetButtonDoublePressHold;
  VirtualInvokeData _14_GetButtonDoublePressDown;
  VirtualInvokeData _15_GetButtonDoublePressDown;
  VirtualInvokeData _16_GetButtonTimePressed;
  VirtualInvokeData _17_GetButtonTimeUnpressed;
  VirtualInvokeData _18_GetButtonLastTimePressed;
  VirtualInvokeData _19_GetButtonLastTimeUnpressed;
  VirtualInvokeData _20_GetAnyButton;
  VirtualInvokeData _21_GetAnyButtonDown;
  VirtualInvokeData _22_GetAnyButtonUp;
  VirtualInvokeData _23_GetAnyButtonPrev;
  VirtualInvokeData _24_GetAnyButtonChanged;
  VirtualInvokeData _25_GetButtonById;
  VirtualInvokeData _26_GetButtonDownById;
  VirtualInvokeData _27_GetButtonUpById;
  VirtualInvokeData _28_GetButtonDoublePressHoldById;
  VirtualInvokeData _29_GetButtonDoublePressDownById;
  VirtualInvokeData _30_GetButtonDoublePressHoldById;
  VirtualInvokeData _31_GetButtonDoublePressDownById;
  VirtualInvokeData _32_GetButtonPrevById;
  VirtualInvokeData _33_GetButtonTimePressedById;
  VirtualInvokeData _34_GetButtonTimeUnpressedById;
  VirtualInvokeData _35_GetButtonLastTimePressedById;
  VirtualInvokeData _36_GetButtonLastTimeUnpressedById;
  VirtualInvokeData _37_PollForFirstElement;
  VirtualInvokeData _38_PollForFirstElementDown;
  VirtualInvokeData _39_PollForFirstButton;
  VirtualInvokeData _40_PollForFirstButtonDown;
  VirtualInvokeData _41_PollForAllElements;
  VirtualInvokeData _42_PollForAllElementsDown;
  VirtualInvokeData _43_PollForAllButtons;
  VirtualInvokeData _44_PollForAllButtonsDown;
  VirtualInvokeData _45_GetLastTimeActive;
  VirtualInvokeData _46_GetLastTimeActive;
  VirtualInvokeData _47_GetLastTimeAnyElementChanged;
  VirtualInvokeData _48_GetLastTimeAnyElementChanged;
  VirtualInvokeData _49_UpdateData;
  VirtualInvokeData _50_DRJcjEhqhASTxhzJHuZkXgvjfRh;
  VirtualInvokeData _51_Clear;
  VirtualInvokeData _52_SetEnabled;
  VirtualInvokeData _53_BakeMap;
  VirtualInvokeData _54_BakeActionElementMap;
  VirtualInvokeData _55_rcgIUfpkYrjrUXGyTomqMGJeaVQ;
  VirtualInvokeData _56_Connected;
  VirtualInvokeData _57_Disconnected;
};

struct __Keyboard_Il2CppClass {
  Il2CppClass_1 _1;
  __Keyboard_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Keyboard_Il2CppVtbl vtbl;
};

class Keyboard {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C7C108;
  static inline    Keyboard* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C612C8;
  static inline    __Keyboard_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline Keyboard* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (Keyboard**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __Keyboard_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Keyboard_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Keyboard_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t id;
  System_String* _tag;
  System_String* _name;
  System_String* _hardwareName;
  int32_t _type;
  ModdingAPI::Exposed::System::Guid bgEbuinIyksHhzwbKkeQTdhvMfB;
  System_String* _hardwareIdentifier;
  bool _isConnected;
  ModdingAPI::Exposed::Rewired::Controller::Extension* Controller_mOyfABPQGnDTXmvUyuQvMOOPHRt;
  bool Controller_yIozJzFkooRCrVDgMYuKERLjtKT;
  ModdingAPI::Exposed::Rewired::ControllerIdentifier Controller_LWnIwzKSsriocXoXPzmdHMThaXh;
  int32_t CtWHpgOaCVZYpcBzymhejPsalLW;
  int32_t _buttonCount;
  ModdingAPI::Exposed::Rewired::Controller::Button_array* buttons;
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* buttons_readOnly;
  ModdingAPI::Exposed::System::Collections::Generic::IList_T_* Controller_zDYSoPuWRIUrndraUwJpaRdSJEG;
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* Controller_BOLhTANJNrAyZcBkNpOGdedkKspm;
  int32_t rxKCLleLOYchANMgnMBjKBqyofIy;
  ModdingAPI::Exposed::Rewired::ControllerDataUpdater* TjnaCYbBJvhWUcbafhPbJbpmEEHG;
  ModdingAPI::Exposed::Rewired::HardwareControllerMap_Game* kDCFjukcapMxkiTWjVJiJjJbuIc;
  uint32_t aUOBdeEozdjgtEVSBmIMjmsTwOc;
  uint32_t Controller_oPQfxVgUVqSNOHHPapJHfAitNsam;
  uint32_t Controller_xAEXTFehdQAtzbZMNQMxfdNgMSmN;
  ModdingAPI::Exposed::System::Action_T_* Controller_qFVtdtZKINIugHapYAWZixKJblw;
  ModdingAPI::Exposed::Rewired::IControllerTemplate_array* Controller_LBaGeVXHfBdEsIeJDbxApJJcZUhE;
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* Controller_DgrYEPdrtFPsDCgGnAGsRqMlbYt;
  ModdingAPI::Exposed::Rewired::Interfaces::IUnifiedKeyboardSource* _source;
  int32_t currentModfierKeyFlags;
  int32_t currentModfierKeyFlagsDouble;
  ModdingAPI::Exposed::System::Func_T__TResult_* _getKeyIndexDelegate;
  ModdingAPI::Exposed::System::Int32_array* keyCodeToKeyIndex;
  int32_t maxKeyValue;

  // Member methods:
  void ::ctor(System_String* name, ModdingAPI::Exposed::Rewired::Interfaces::IUnifiedKeyboardSource* source) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, System_String*, ModdingAPI::Exposed::Rewired::Interfaces::IUnifiedKeyboardSource*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x753610))(this, name, source);
  }
  void ::ctor(int32_t controllerId, int32_t inputSource, System_String* name, System_String* hardwareIdentifier, ModdingAPI::Exposed::Rewired::HardwareControllerMap_Game* hardwareMap, int32_t buttonCount, ModdingAPI::Exposed::Rewired::ControllerDataUpdater* dataUpdater) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, int32_t, int32_t, System_String*, System_String*, ModdingAPI::Exposed::Rewired::HardwareControllerMap_Game*, int32_t, ModdingAPI::Exposed::Rewired::ControllerDataUpdater*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x753B50))(this, controllerId, inputSource, name, hardwareIdentifier, hardwareMap, buttonCount, dataUpdater);
  }
  ModdingAPI::Exposed::System::Guid get_deviceInstanceGuid() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Guid(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x753CD0))(this);
  }
  bool GetKey(ModdingAPI::Exposed::UnityEngine::KeyCode keyCode) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x753E10))(this, keyCode);
  }
  bool GetKeyDown(ModdingAPI::Exposed::UnityEngine::KeyCode keyCode) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x753F80))(this, keyCode);
  }
  bool GetKeyUp(ModdingAPI::Exposed::UnityEngine::KeyCode keyCode) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7540F0))(this, keyCode);
  }
  bool GetKeyDoublePressHold(ModdingAPI::Exposed::UnityEngine::KeyCode keyCode, float speed) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, ModdingAPI::Exposed::UnityEngine::KeyCode, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x754260))(this, keyCode, speed);
  }
  bool GetKeyDoublePressHold(ModdingAPI::Exposed::UnityEngine::KeyCode keyCode) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7543D0))(this, keyCode);
  }
  bool GetKeyDoublePressDown(ModdingAPI::Exposed::UnityEngine::KeyCode keyCode, float speed) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, ModdingAPI::Exposed::UnityEngine::KeyCode, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x754460))(this, keyCode, speed);
  }
  bool GetKeyDoublePressDown(ModdingAPI::Exposed::UnityEngine::KeyCode keyCode) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7545D0))(this, keyCode);
  }
  bool GetKeyPrev(ModdingAPI::Exposed::UnityEngine::KeyCode keyCode) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x754740))(this, keyCode);
  }
  float GetKeyTimePressed(ModdingAPI::Exposed::UnityEngine::KeyCode keyCode) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7548B0))(this, keyCode);
  }
  float GetKeyTimeUnpressed(ModdingAPI::Exposed::UnityEngine::KeyCode keyCode) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x754A20))(this, keyCode);
  }
  bool GetModifierKey(int32_t key) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x754BD0))(this, key);
  }
  bool GetModifierKeyDown(int32_t key) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x754D50))(this, key);
  }
  bool GetModifierKeyUp(int32_t key) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x754F50))(this, key);
  }
  bool GetModifierKeyPrev(int32_t key) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x755170))(this, key);
  }
  float GetModifierKeyTimePressed(int32_t key) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7552D0))(this, key);
  }
  float GetModifierKeyTimeUnpressed(int32_t key) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x755430))(this, key);
  }
  ModdingAPI::Exposed::UnityEngine::KeyCode GetKeyCodeByButtonIndex(int32_t buttonIndex) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::KeyCode(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x755590))(this, buttonIndex);
  }
  ModdingAPI::Exposed::UnityEngine::KeyCode GetKeyCodeById(int32_t elementIdentifierId) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::KeyCode(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7556C0))(this, elementIdentifierId);
  }
  int32_t GetButtonIndexByKeyCode(ModdingAPI::Exposed::UnityEngine::KeyCode keyCode) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7558B0))(this, keyCode);
  }
  ModdingAPI::Exposed::Rewired::ControllerElementIdentifier* GetElementIdentifierByKeyCode(ModdingAPI::Exposed::UnityEngine::KeyCode keyCode) {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::ControllerElementIdentifier*(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7559F0))(this, keyCode);
  }
  ModdingAPI::Exposed::Rewired::ControllerPollingInfo PollForFirstKey() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::ControllerPollingInfo(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x755B60))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_* PollForAllKeys() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_*(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x755E60))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_* PollForAllKeysDown() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_*(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x755FF0))(this);
  }
  ModdingAPI::Exposed::Rewired::ControllerPollingInfo PollForFirstKeyDown() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::ControllerPollingInfo(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x756180))(this);
  }
  ModdingAPI::Exposed::Rewired::ControllerPollingInfo PollForFirstButton() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::ControllerPollingInfo(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7564C0))(this);
  }
  ModdingAPI::Exposed::Rewired::ControllerPollingInfo PollForFirstButtonDown() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::ControllerPollingInfo(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x756500))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_* PollForAllButtons() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_*(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x756540))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_* PollForAllButtonsDown() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_*(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x756550))(this);
  }
  void UpdateData(int32_t updateLoop) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7572A0))(this, updateLoop);
  }
  void UpdateData_AndroidKeyboardDisabled(int32_t updateLoop) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x757360))(this, updateLoop);
  }
  bool GetKey(int32_t keyCode) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x757700))(this, keyCode);
  }
  bool GetKeyPrev(int32_t keyCode) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x757790))(this, keyCode);
  }
  bool AllRequiredKeysPressed(int32_t keyCode, int32_t doubledFlags) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x757820))(this, keyCode, doubledFlags);
  }
  bool IsAnyComponentKeyActive(int32_t keyCode, int32_t doubledFlags) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x757920))(this, keyCode, doubledFlags);
  }
  int32_t GetButtonIndex(int32_t keyCode) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x757B00))(this, keyCode);
  }
  void BakeMap(ModdingAPI::Exposed::Rewired::ControllerMap* controllerMap) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, ModdingAPI::Exposed::Rewired::ControllerMap*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x757B50))(this, controllerMap);
  }
  void BakeActionElementMap(ModdingAPI::Exposed::Rewired::ControllerMap* controllerMap, ModdingAPI::Exposed::Rewired::ActionElementMap* map) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, ModdingAPI::Exposed::Rewired::ControllerMap*, ModdingAPI::Exposed::Rewired::ActionElementMap*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x757DB0))(this, controllerMap, map);
  }
  void Clear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x757E10))(this);
  }
  bool GetControlButtons(ModdingAPI::Exposed::Rewired::Controller::Button* leftButton, ModdingAPI::Exposed::Rewired::Controller::Button* rightButton, int32_t key) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*, ModdingAPI::Exposed::Rewired::Controller::Button*, ModdingAPI::Exposed::Rewired::Controller::Button*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x757E30))(this, leftButton, rightButton, key);
  }
  void UpdateCurrentModifierKeyFlags() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Keyboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x758270))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::Rewired::Keyboard*> singleton = __CppStaticProperty<ModdingAPI::Exposed::Rewired::Keyboard*>(
   []() { return &GetStaticClassInstance()->pStaticFields->singleton; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::Rewired::KeyboardKeyCode_array*> __keyIndexToKeyboardKeyCode = __CppStaticProperty<ModdingAPI::Exposed::Rewired::KeyboardKeyCode_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->__keyIndexToKeyboardKeyCode; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Guid> s_deviceInstanceGuid = __CppStaticProperty<ModdingAPI::Exposed::System::Guid>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_deviceInstanceGuid; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::Rewired::KeyboardKeyCode_array* get_keyIndexToKeyboardKeyCode() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::KeyboardKeyCode_array*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x7533E0))();
  }
  static inline bool IsModifierKey(ModdingAPI::Exposed::UnityEngine::KeyCode key) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x756560))(key);
  }
  static inline bool IsModifierKey(int32_t key) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x756560))(key);
  }
  static inline int32_t KeyCodeToModifierKey(ModdingAPI::Exposed::UnityEngine::KeyCode key) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7565B0))(key);
  }
  static inline int32_t KeyCodeToModifierKeyFlags(ModdingAPI::Exposed::UnityEngine::KeyCode key) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x756620))(key);
  }
  static inline bool ModifierKeyFlagsContain(int32_t flags, int32_t key) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7566A0))(flags, key);
  }
  static inline bool ModifierKeyFlagsContain(int32_t flags, ModdingAPI::Exposed::UnityEngine::KeyCode key) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x756720))(flags, key);
  }
  static inline int32_t ModifierKeyFlagsToModifierKey(int32_t flags) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7567D0))(flags);
  }
  static inline ModdingAPI::Exposed::UnityEngine::KeyCode ModifierKeyFlagsToKeyCode(int32_t flags) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::KeyCode(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x756820))(flags);
  }
  static inline int32_t ModifierKeyToModifierKeyFlags(int32_t key) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7568B0))(key);
  }
  static inline System_String* GetKeyName(ModdingAPI::Exposed::UnityEngine::KeyCode key) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7568F0))(key);
  }
  static inline System_String* GetKeyName(ModdingAPI::Exposed::UnityEngine::KeyCode key, int32_t flags) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::KeyCode, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x756A30))(key, flags);
  }
  static inline System_String* ModifierKeyFlagsToString(int32_t flags, bool abbreviate) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x756AE0))(flags, abbreviate);
  }
  static inline System_String* ModifierKeyFlagsToString(int32_t flags) {
    return reinterpret_cast<System_String*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x756DC0))(flags);
  }
  static inline int32_t KeyCodeToKeyboardKeyCode(ModdingAPI::Exposed::UnityEngine::KeyCode keyCode) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FF1E0))(keyCode);
  }
  static inline ModdingAPI::Exposed::UnityEngine::KeyCode KeyboardKeyCodeToKeyCode(int32_t keyCode) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::KeyCode(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FF1E0))(keyCode);
  }
  static inline int32_t ConvertModifierKeyFlagsSingleToDouble(int32_t flags) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x756DD0))(flags);
  }
  static inline int32_t GetDoubledModifierKeyCount(int32_t flags) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x756EE0))(flags);
  }
  static inline int32_t GetKeyboardKeyCodeByButtonIndex(int32_t buttonIndex) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x757040))(buttonIndex);
  }
  static inline int32_t GetElementIdentifierIdByKeyCode(int32_t keyCode) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x757090))(keyCode);
  }
  static inline void FixKeyboardAssignments(int32_t elementIdentifierId, ModdingAPI::Exposed::UnityEngine::KeyCode keyCode) {
    reinterpret_cast<void(__fastcall*)(int32_t, ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7571A0))(elementIdentifierId, keyCode);
  }
};
}