// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.RuntimeMethodHandle.hpp"


namespace ModdingAPI::Exposed::System::Reflection {
struct __MonoCMethod_Il2CppStaticFields {
};

struct __MonoCMethod_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _7_get_MemberType;
  VirtualInvokeData _8_get_Name;
  VirtualInvokeData _9_get_DeclaringType;
  VirtualInvokeData _10_get_ReflectedType;
  VirtualInvokeData _11_GetCustomAttributes;
  VirtualInvokeData _12_GetCustomAttributes;
  VirtualInvokeData _13_IsDefined;
  VirtualInvokeData _14_GetCustomAttributesData;
  VirtualInvokeData _15_get_MetadataToken;
  VirtualInvokeData _16_get_Module;
  VirtualInvokeData _17_GetParametersNoCopy;
  VirtualInvokeData _18_GetParameters;
  VirtualInvokeData _19_GetMethodImplementationFlags;
  VirtualInvokeData _20_get_MethodHandle;
  VirtualInvokeData _21_get_Attributes;
  VirtualInvokeData _22_Invoke;
  VirtualInvokeData _23_get_CallingConvention;
  VirtualInvokeData _24_GetGenericArguments;
  VirtualInvokeData _25_get_IsGenericMethodDefinition;
  VirtualInvokeData _26_get_ContainsGenericParameters;
  VirtualInvokeData _27_get_IsGenericMethod;
  VirtualInvokeData _28_get_IsSecurityCritical;
  VirtualInvokeData _29_Invoke;
  VirtualInvokeData _30_get_IsPublic;
  VirtualInvokeData _31_get_IsStatic;
  VirtualInvokeData _32_get_IsFinal;
  VirtualInvokeData _33_get_IsVirtual;
  VirtualInvokeData _34_get_IsAbstract;
  VirtualInvokeData _35_get_IsSpecialName;
  VirtualInvokeData _36_get_IsConstructor;
  VirtualInvokeData _37_GetMethodBody;
  VirtualInvokeData _38_FormatNameAndSig;
  VirtualInvokeData _39_GetParameterTypes;
  VirtualInvokeData _40_GetParametersInternal;
  VirtualInvokeData _41_GetParametersCount;
  VirtualInvokeData _42_Invoke;
  VirtualInvokeData _43_GetObjectData;
};

struct __MonoCMethod_Il2CppClass {
  Il2CppClass_1 _1;
  __MonoCMethod_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MonoCMethod_Il2CppVtbl vtbl;
};

class MonoCMethod {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C86190;
  static inline    __MonoCMethod_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __MonoCMethod_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__MonoCMethod_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __MonoCMethod_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t mhandle;
  System_String* name;
  ModdingAPI::Exposed::System::Type* reftype;

  // Member methods:
  int32_t GetMethodImplementationFlags() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF21AF0))(this);
  }
  ModdingAPI::Exposed::System::Reflection::ParameterInfo_array* GetParameters() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Reflection::ParameterInfo_array*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF21B20))(this);
  }
  ModdingAPI::Exposed::System::Reflection::ParameterInfo_array* GetParametersInternal() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Reflection::ParameterInfo_array*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF21B20))(this);
  }
  int32_t GetParametersCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF21B60))(this);
  }
  Il2CppObject* InternalInvoke(Il2CppObject* obj, ModdingAPI::Exposed::System::Object_array* parameters, ModdingAPI::Exposed::System::Exception* exc) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*, Il2CppObject*, ModdingAPI::Exposed::System::Object_array*, ModdingAPI::Exposed::System::Exception*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF21BA0))(this, obj, parameters, exc);
  }
  Il2CppObject* Invoke(Il2CppObject* obj, int32_t invokeAttr, ModdingAPI::Exposed::System::Reflection::Binder* binder, ModdingAPI::Exposed::System::Object_array* parameters, ModdingAPI::Exposed::System::Globalization::CultureInfo* culture) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*, Il2CppObject*, int32_t, ModdingAPI::Exposed::System::Reflection::Binder*, ModdingAPI::Exposed::System::Object_array*, ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF21BB0))(this, obj, invokeAttr, binder, parameters, culture);
  }
  Il2CppObject* DoInvoke(Il2CppObject* obj, int32_t invokeAttr, ModdingAPI::Exposed::System::Reflection::Binder* binder, ModdingAPI::Exposed::System::Object_array* parameters, ModdingAPI::Exposed::System::Globalization::CultureInfo* culture) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*, Il2CppObject*, int32_t, ModdingAPI::Exposed::System::Reflection::Binder*, ModdingAPI::Exposed::System::Object_array*, ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF21D20))(this, obj, invokeAttr, binder, parameters, culture);
  }
  Il2CppObject* InternalInvoke(Il2CppObject* obj, ModdingAPI::Exposed::System::Object_array* parameters) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*, Il2CppObject*, ModdingAPI::Exposed::System::Object_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF21F70))(this, obj, parameters);
  }
  Il2CppObject* Invoke(int32_t invokeAttr, ModdingAPI::Exposed::System::Reflection::Binder* binder, ModdingAPI::Exposed::System::Object_array* parameters, ModdingAPI::Exposed::System::Globalization::CultureInfo* culture) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*, int32_t, ModdingAPI::Exposed::System::Reflection::Binder*, ModdingAPI::Exposed::System::Object_array*, ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF22080))(this, invokeAttr, binder, parameters, culture);
  }
  ModdingAPI::Exposed::System::RuntimeMethodHandle get_MethodHandle() {
    return reinterpret_cast<ModdingAPI::Exposed::System::RuntimeMethodHandle(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  int32_t get_Attributes() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF220B0))(this);
  }
  int32_t get_CallingConvention() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF220C0))(this);
  }
  bool get_ContainsGenericParameters() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF220F0))(this);
  }
  ModdingAPI::Exposed::System::Type* get_ReflectedType() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110A0))(this);
  }
  ModdingAPI::Exposed::System::Type* get_DeclaringType() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF22130))(this);
  }
  System_String* get_Name() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF22160))(this);
  }
  bool IsDefined(ModdingAPI::Exposed::System::Type* attributeType, bool inherit) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*, ModdingAPI::Exposed::System::Type*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF221A0))(this, attributeType, inherit);
  }
  ModdingAPI::Exposed::System::Object_array* GetCustomAttributes(bool inherit) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Object_array*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF22260))(this, inherit);
  }
  ModdingAPI::Exposed::System::Object_array* GetCustomAttributes(ModdingAPI::Exposed::System::Type* attributeType, bool inherit) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Object_array*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*, ModdingAPI::Exposed::System::Type*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF22310))(this, attributeType, inherit);
  }
  ModdingAPI::Exposed::System::Reflection::MethodBody* GetMethodBody() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Reflection::MethodBody*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF223D0))(this);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF223F0))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::IList_T_* GetCustomAttributesData() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IList_T_*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF226A0))(this);
  }
  bool get_IsSecurityCritical() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x403F70))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Reflection::MonoCMethod*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF226B0))(this);
  }

  // Static methods:
  static inline int32_t get_core_clr_security_level() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x4114C0))();
  }
};
}