// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed {
struct __UIDragDropItem_Il2CppStaticFields {
};

struct __UIDragDropItem_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Start;
  VirtualInvokeData _5_OnPress;
  VirtualInvokeData _6_Update;
  VirtualInvokeData _7_OnDragStart;
  VirtualInvokeData _8_StartDragging;
  VirtualInvokeData _9_OnDrag;
  VirtualInvokeData _10_OnDragEnd;
  VirtualInvokeData _11_OnDragDropStart;
  VirtualInvokeData _12_OnDragDropMove;
  VirtualInvokeData _13_OnDragDropRelease;
  VirtualInvokeData _14_OnDragDropEnd;
};

struct __UIDragDropItem_Il2CppClass {
  Il2CppClass_1 _1;
  __UIDragDropItem_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __UIDragDropItem_Il2CppVtbl vtbl;
};

class UIDragDropItem {
public:
  // Il2Cpp fields:
  __UIDragDropItem_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  int32_t restriction;
  bool cloneOnDrag;
  float pressAndHoldDelay;
  bool interactable;
  ModdingAPI::Exposed::UnityEngine::Transform* mTrans;
  ModdingAPI::Exposed::UnityEngine::Transform* mParent;
  ModdingAPI::Exposed::UnityEngine::Collider* mCollider;
  ModdingAPI::Exposed::UnityEngine::Collider2D* mCollider2D;
  ModdingAPI::Exposed::UIButton* mButton;
  ModdingAPI::Exposed::UIRoot* mRoot;
  ModdingAPI::Exposed::UIGrid* mGrid;
  ModdingAPI::Exposed::UITable* mTable;
  float mDragStartTime;
  ModdingAPI::Exposed::UIDragScrollView* mDragScrollView;
  bool mPressed;
  bool mDragging;
  ModdingAPI::Exposed::UICamera::MouseOrTouch* mTouch;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIDragDropItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x256A3B0))(this);
  }
  void OnPress(bool isPressed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIDragDropItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x256A560))(this, isPressed);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIDragDropItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x256A6A0))(this);
  }
  void OnDragStart() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIDragDropItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x256A730))(this);
  }
  void StartDragging() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIDragDropItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x256A950))(this);
  }
  void OnDrag(ModdingAPI::Exposed::UnityEngine::Vector2 delta) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIDragDropItem*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x256B040))(this, delta);
  }
  void OnDragEnd() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIDragDropItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x256B1D0))(this);
  }
  void StopDragging(ModdingAPI::Exposed::UnityEngine::GameObject* go) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIDragDropItem*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x256B320))(this, go);
  }
  void OnDragDropStart() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIDragDropItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x256B340))(this);
  }
  void OnDragDropMove(ModdingAPI::Exposed::UnityEngine::Vector2 delta) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIDragDropItem*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x256BA30))(this, delta);
  }
  void OnDragDropRelease(ModdingAPI::Exposed::UnityEngine::GameObject* surface) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIDragDropItem*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x256BBD0))(this, surface);
  }
  void OnDragDropEnd() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIDragDropItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* EnableDragScrollView() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::UIDragDropItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x256C3A0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UIDragDropItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1914950))(this);
  }
};
}