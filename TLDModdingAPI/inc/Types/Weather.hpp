// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector4.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Quaternion.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed {
struct __Weather_Il2CppStaticFields {
  ModdingAPI::Exposed::Weather::EnvironemntChangedEvent* OnEnvironmentChanged;
  System_String* m_RegionFromSaveSlot;
  bool m_DebugWeather;
  ModdingAPI::Exposed::WeatherSaveDataProxy* m_WeatherSaveDataProxy;
};

struct __Weather_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Weather_Il2CppClass {
  Il2CppClass_1 _1;
  __Weather_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Weather_Il2CppVtbl vtbl;
};

class Weather {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C753D8;
  static inline    __Weather_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Weather_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Weather_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Weather_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_IndoorTemperatureCelsius;
  float m_HighTempMinCelsius;
  float m_HighTempMaxCelsius;
  float m_LowTempMinCelsius;
  float m_LowTempMaxCelsius;
  float m_BlizzardDegreesDrop;
  float m_BlizzardDegreesChangePerSecond;
  int32_t m_HourWarmingBegins;
  int32_t m_HourCoolingBegins;
  int32_t m_MaxAirTemperature;
  int32_t m_AuroraActivationWindowStart;
  int32_t m_AuroraActivationWindowEnd;
  int32_t m_AuroraEarlyWindowProbability;
  int32_t m_AuroraLateWindowProbability;
  float m_DegreesPerSecondChangeLow;
  float m_DegreesPerSecondChangeMedium;
  float m_DegreesPerSecondChangeHigh;
  float m_TimeToDisplayTempWhenChanged;
  float m_MinWindSpeedForBlowingSnow;
  float m_BlowingSnowTransitionSeconds;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FallingSnowPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BlowingSnowPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BlowingSnowPrefabLowQuality;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BlowingSnowPrefabMediumQuality;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BlowingSnowPrefabHighQuality;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BlowingSnowPrefabUltraQuality;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BlowingSnowPrefabXboxOneQuality;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BlowingSnowPrefabPS4Quality;
  float m_ClothingDamagePerHourInBlizzard;
  bool _m_HasCalculatedTemperature_k__BackingField;
  ModdingAPI::Exposed::WeatherSet_array* m_DefaultWeatherSets;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_WeatherSetsForScene;
  ModdingAPI::Exposed::FallingSnowPreset* m_FallingSnowCurrentPreset;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FallingSnow;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BlowingSnow;
  float m_FallingSnowEnforceLifetimeLimit;
  ModdingAPI::Exposed::UnityEngine::ParticleSystem* m_FallingSnowParticleSystem;
  ModdingAPI::Exposed::UnityEngine::ParticleSystem* m_BlowingSnowParticleSystem;
  float m_TimeShelteredToDisplayMessage;
  ModdingAPI::Exposed::UnityEngine::Vector4 m_SkyboxHorizonAdjust;
  int32_t m_MinAirTemperature;
  ModdingAPI::Exposed::RegionOrientation_array* m_RegionOrientationValues;
  ModdingAPI::Exposed::FallingSnowPreset_array* m_FallingSnowPresets;
  ModdingAPI::Exposed::WeatherStage_array* m_FallingSnowStages;
  ModdingAPI::Exposed::WeatherStage_array* m_FallingSnowStagesTmp;
  float m_FallingSnowPresetBlend;
  ModdingAPI::Exposed::UnityEngine::Quaternion m_BlowingSnowRotation;
  float m_BlowingSnowAlphaMultiplier;
  bool m_WarmedWeatherState;
  int32_t m_CurrentWeatherStage;
  bool m_IsIndoors;
  float m_BaseTemperature;
  float m_CurrentTemperature;
  float m_CurrentTemperatureWithoutHeatSources;
  float m_CurrentWindChill;
  float m_TempHigh;
  float m_TempLow;
  bool m_GenerateNewTempHigh;
  bool m_GenerateNewTempLow;
  float m_ArtificalTempIncrease;
  float m_PrevBodyTemp;
  float m_NextTempCheckTime;
  float m_LastDegreeChangePerSecondCausingMessage;
  float m_CurrentBlizzardDegreesDrop;
  int32_t m_UpdateCount;
  bool m_WarmWeatherParticleEmittersInLateUpdate;
  float m_LastTemperatureSentToWise;
  float m_TimeSheltered;
  bool m_PlayedWindClothingLoop;
  float m_LockedAirTemperature;
  bool m_StartHasBeenCalled;

  // Member methods:
  bool get_m_HasCalculatedTemperature() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1892960))(this);
  }
  void set_m_HasCalculatedTemperature(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CA710))(this, value);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CA720))(this);
  }
  void InitializeWeatherSetsForScene() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CB4E0))(this);
  }
  bool MaybeLoadOverrideForced(System_String* baseName) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CBA50))(this, baseName);
  }
  bool MaybeLoadOverrideForHardcodedLocation(System_String* baseName) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CBB50))(this, baseName);
  }
  bool MaybeLoadOverrideForIndoors(System_String* baseName) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CBCD0))(this, baseName);
  }
  bool MaybeLoadOverrideForRegion(System_String* baseName) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CBDF0))(this, baseName);
  }
  bool MaybeLoadOverrideForScene(System_String* baseName) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CBF20))(this, baseName);
  }
  bool TryLoadOverridePrefabFromPath(System_String* path) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CBFF0))(this, path);
  }
  ModdingAPI::Exposed::WeatherSet* GetInstancedWeatherSet(ModdingAPI::Exposed::UnityEngine::GameObject* prefab, bool justAdd) {
    return reinterpret_cast<ModdingAPI::Exposed::WeatherSet*(__fastcall*)(ModdingAPI::Exposed::Weather*, ModdingAPI::Exposed::UnityEngine::GameObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CC250))(this, prefab, justAdd);
  }
  void RegisterSceneWeatherSets(ModdingAPI::Exposed::WeatherSet_array* sets) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*, ModdingAPI::Exposed::WeatherSet_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CC7D0))(this, sets);
  }
  ModdingAPI::Exposed::WeatherSet* ChooseWeatherSetOfType(int32_t reqType) {
    return reinterpret_cast<ModdingAPI::Exposed::WeatherSet*(__fastcall*)(ModdingAPI::Exposed::Weather*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CCB00))(this, reqType);
  }
  ModdingAPI::Exposed::WeatherSet* GetCustomWeatherSet(System_String* customTypeName) {
    return reinterpret_cast<ModdingAPI::Exposed::WeatherSet*(__fastcall*)(ModdingAPI::Exposed::Weather*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CCE90))(this, customTypeName);
  }
  ModdingAPI::Exposed::WeatherSet* GetWeatherSetByName(System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::WeatherSet*(__fastcall*)(ModdingAPI::Exposed::Weather*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CDB90))(this, name);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CE020))(this);
  }
  void LateUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CE4F0))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CE5B0))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CE780))(this, text);
  }
  ModdingAPI::Exposed::UnityEngine::GameObject* GetFallingSnowGameObject() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F4090))(this);
  }
  void SetSnowPresetBlend(int32_t a, int32_t b, float blend, float blendTimeRemaining) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*, int32_t, int32_t, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CE900))(this, a, b, blend, blendTimeRemaining);
  }
  void UpdateFallingSnowPreset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CF040))(this);
  }
  float GetFallingSnowIntensity() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CF0F0))(this);
  }
  void RampBlowingSnow() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CF220))(this);
  }
  void WarmWeather() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CF250))(this);
  }
  void WarmBlowingSnow() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CF290))(this);
  }
  void SetSnowColor(ModdingAPI::Exposed::UnityEngine::Color c) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CF370))(this, c);
  }
  void SetBlowingSnowColor(ModdingAPI::Exposed::UnityEngine::Color c) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CF430))(this, c);
  }
  void SetSnowDirection(float heading) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CF520))(this, heading);
  }
  bool IsBlizzard() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CF640))(this);
  }
  bool IsDenseFog() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CF6F0))(this);
  }
  bool IsFoggy() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CF7A0))(this);
  }
  bool IsSnowing() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CF890))(this);
  }
  bool IsClear() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CF9C0))(this);
  }
  bool IsLightSnow() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CFAB0))(this);
  }
  bool IsHeavySnow() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CFB60))(this);
  }
  int32_t GetWeatherStage() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CFC10))(this);
  }
  bool IsWeatherStatic() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CFCB0))(this);
  }
  float GetBaseTemperature() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CFD50))(this);
  }
  float GetCurrentTemperature() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CFD60))(this);
  }
  float GetCurrentTemperatureWithoutHeatSources() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7AA850))(this);
  }
  float GetCurrentWindchill() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CFD70))(this);
  }
  float GetCurrentTemperatureWithWindchill() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CFE20))(this);
  }
  void AddArtificalTempIncrease(float increase) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CFEE0))(this, increase);
  }
  void ForceIndoorEnvironment() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18CFF00))(this);
  }
  void ForceOutdoorEnvironment() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D0630))(this);
  }
  float GetRotationDegreesForRegion(System_String* regionName) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Weather*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D0CA0))(this, regionName);
  }
  bool IsIndoorEnvironment() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D0DC0))(this);
  }
  bool IsIndoorScene() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D0F00))(this);
  }
  bool UseOutdoorLightingForLightSources() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D0F10))(this);
  }
  void LockAirTemperature(float celsius) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D1080))(this, celsius);
  }
  bool IsTooDarkForAction(int32_t actionBeingChecked) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D1090))(this, actionBeingChecked);
  }
  bool IsWindyEnoughForBlowingSnow() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D2F40))(this);
  }
  void RampDownAllSnow() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D2FF0))(this);
  }
  void RampUpBlowingSnow() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D3060))(this);
  }
  void RampDownBlowingSnow() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D3270))(this);
  }
  void UpdateWeatherSwitchStats() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D3480))(this);
  }
  System_String* GetWeatherStageDisplayName(int32_t ws) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Weather*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D3540))(this, ws);
  }
  void UpdateTemperatureOnHUD() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D37B0))(this);
  }
  void CalculateCurrentTemperature() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D3EF0))(this);
  }
  void UpdateUniStormTemperature() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D47D0))(this);
  }
  void GenerateTempHigh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D4880))(this);
  }
  void GenerateTempLow() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D48B0))(this);
  }
  float GetTempHigh() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x79CB60))(this);
  }
  void SetTempHigh(float highTemp) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D48E0))(this, highTemp);
  }
  float GetTempLow() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D48F0))(this);
  }
  void SetTempLow(float lowTemp) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D4900))(this, lowTemp);
  }
  void UpdateBlizzardTemperatureDelta() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D4910))(this);
  }
  void WarmWeatherParticleEmitters() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D4AB0))(this);
  }
  void WarmWeatherState() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D4CB0))(this);
  }
  void ApplyClothingDamage() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D4EA0))(this);
  }
  void UpdateSnowEffectTransforms() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D5060))(this);
  }
  void MaybeUpdateWiseWithCurrentTemperature() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D5550))(this);
  }
  float GetMinAirTemp() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D56A0))(this);
  }
  void ToggleDownsampleWindEffect() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D5990))(this);
  }
  void DisableWindEffect() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D5AC0))(this);
  }
  void EnableWindEffect() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D5B30))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Weather*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D5BA0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::Weather::EnvironemntChangedEvent*> OnEnvironmentChanged = __CppStaticProperty<ModdingAPI::Exposed::Weather::EnvironemntChangedEvent*>(
   []() { return &GetStaticClassInstance()->pStaticFields->OnEnvironmentChanged; }
  );
  static inline __CppStaticProperty<System_String*> m_RegionFromSaveSlot = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_RegionFromSaveSlot; }
  );
  static inline __CppStaticProperty<bool> m_DebugWeather = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_DebugWeather; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::WeatherSaveDataProxy*> m_WeatherSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::WeatherSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_WeatherSaveDataProxy; }
  );

  // Static methods:
  static inline System_String* GetDebugWeatherText() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D1DA0))();
  }
  static inline bool IsClear(int32_t ws) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D5980))(ws);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x18D5BC0))();
  }
};
}