// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed {
struct __Panel_Diagnosis_Il2CppStaticFields {
};

struct __Panel_Diagnosis_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Panel_Diagnosis_Il2CppClass {
  Il2CppClass_1 _1;
  __Panel_Diagnosis_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Panel_Diagnosis_Il2CppVtbl vtbl;
};

class Panel_Diagnosis {
public:
  // Il2Cpp fields:
  __Panel_Diagnosis_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TimeWidgetPos;
  ModdingAPI::Exposed::ButtonLegendContainer* m_ButtonLegendContainer;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ClickBlocker;
  System_String* m_OpenFirstAidAudio;
  System_String* m_CloseFirstAidAudio;
  ModdingAPI::Exposed::UILabel* m_LabelConditionPercent;
  ModdingAPI::Exposed::System::String_array* m_ColdStatusLocIDs;
  ModdingAPI::Exposed::UILabel* m_ColdStatusLabel;
  ModdingAPI::Exposed::UISprite* m_SpriteStatusLine;
  ModdingAPI::Exposed::UnityEngine::Color m_GoodHealthStatusColor;
  float m_GoodHealthThreshold;
  ModdingAPI::Exposed::UnityEngine::Color m_FairHealthStatusColor;
  float m_FairHealthThreshold;
  ModdingAPI::Exposed::UnityEngine::Color m_PoorHealthStatusColor;
  float m_PoorHealthThreshold;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_RightPageHealthyObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_RightPageObject;
  ModdingAPI::Exposed::UILabel* m_LabelCause;
  ModdingAPI::Exposed::UILabel* m_LabelAfflictionDescription;
  ModdingAPI::Exposed::UILabel* m_LabelAfflictionDescriptionNoRest;
  ModdingAPI::Exposed::UITexture_array* m_SpriteListItemsNeeded;
  ModdingAPI::Exposed::UISprite_array* m_CheckmarksItemsNeeded;
  ModdingAPI::Exposed::UILabel_array* m_NumLabelItemsNeeded;
  ModdingAPI::Exposed::UILabel* m_LabelWaterAmount;
  ModdingAPI::Exposed::UILabel* m_altLabelWaterAmount;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_WaterAmountPixelOffset;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ObjectRestRemaining;
  ModdingAPI::Exposed::UILabel* m_LabelRestRemaining;
  ModdingAPI::Exposed::UILabel* m_LabelRestRequired;
  ModdingAPI::Exposed::UILabel_array* m_LabelPlus;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ItemsNeededOnlyOneObj;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ItemsNeededMultipleObj;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TreatAfflictionObj;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_SingleTreatmentBG;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_MultipleTreatmentsBG;
  ModdingAPI::Exposed::Panel_Diagnosis::TreatmentUI* m_StandardTreatment;
  ModdingAPI::Exposed::Panel_Diagnosis::TreatmentUI* m_AlternateTreatment;
  ModdingAPI::Exposed::ScrollList* m_ScrollListEffects;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ScrollbarObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_SpecialTreatmentWindow;
  ModdingAPI::Exposed::UILabel* m_LabelAfflictionName;
  ModdingAPI::Exposed::UILabel* m_LabelSpecialTreatment;
  ModdingAPI::Exposed::UILabel* m_LabelSpecialTreatmentDescription;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BuffWindow;
  ModdingAPI::Exposed::UISprite_array* m_BodyIconList;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BodyIconActiveAnimationObj;
  System_String* m_BodyIconSpriteNameAffliction;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_MultipleDosesObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ButtonBack;
  ModdingAPI::Exposed::UnityEngine::Color m_ColorAffliction;
  ModdingAPI::Exposed::UnityEngine::Color m_ColorNormal;
  ModdingAPI::Exposed::UISprite_array* m_TintedSprites;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TreatmentButtonSingle;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TreatmentButtonMultiLeft;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TreatmentButtonMultiRight;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TreatmentSwapIndictorLeft;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TreatmentSwapIndictorRight;
  ModdingAPI::Exposed::UIWidget* m_TreatmentWidgetSingle;
  ModdingAPI::Exposed::UIWidget* m_TreatmentWidgetMultiLeft;
  ModdingAPI::Exposed::UIWidget* m_TreatmentWidgetMultiRight;
  ModdingAPI::Exposed::UISprite* m_TreatmentBorderSingle;
  ModdingAPI::Exposed::UISprite* m_TreatmentBorderMultiLeft;
  ModdingAPI::Exposed::UISprite* m_TreatmentBorderMultiRight;
  ModdingAPI::Exposed::UILabel* m_TreatmentDontHaveItemsLabel;
  ModdingAPI::Exposed::UILabel* m_UsedAntibioticsAlreadyLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_DoingTreatmentOverlay;
  float m_DoingTreatmentAlpha;
  float m_HasTreatmentAlpha;
  float m_MissingTreatmentAlpha;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_DurationWidgetParentObj;
  ModdingAPI::Exposed::UILabel* m_DurationWidgetHoursLabel;
  ModdingAPI::Exposed::UILabel* m_DurationWidgetMinutesLabel;
  ModdingAPI::Exposed::UISprite* m_SelectStandardGamepadButtonSprite;
  ModdingAPI::Exposed::UISprite* m_SelectAlternateGamepadButtonSprite;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_OutlineInfos;
  ModdingAPI::Exposed::Panel_Diagnosis::ApplyTreatmentUI* m_ApplyTreatmentUI;
  ModdingAPI::Exposed::FirstAidKitButton_array* m_FakButtons;
  ModdingAPI::Exposed::FirstAidKitButton* m_SelectedFAKButton;
  ModdingAPI::Exposed::NPCAfflictionButton* m_SelectedAffButton;
  System_String* m_TreatmentSuccessVO;
  int32_t m_BodyIconWidthOriginal;
  int32_t m_BodyIconHeightOriginal;
  bool m_DoneFirstUpdate;
  uint32_t m_OpenCloseAudioID;
  System_String* m_ItemJustUsed;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_AfflictionsLastFrame;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_AfflictionsThisFrame;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_FakList;
  ModdingAPI::Exposed::Panel_Diagnosis::AfflictionsAtLocation_array* m_AfflictionsAtLocationArray;
  ModdingAPI::Exposed::UIPanel* m_Panel;
  ModdingAPI::Exposed::NPCStatusBar_array* m_SatusBars;
  ModdingAPI::Exposed::NPC* m_NPCComponent;
  ModdingAPI::Exposed::NPCAffliction* m_AfflictionTreatedInProgress;
  bool m_IsTreatmentInProgressSandard;
  float m_TreatmentTotalWaterVolumeLiters;
  bool m_IsWaterTreatmentInProgress;
  float m_CurrentWaterTreatmentVolumeUsedLiters;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_ScrollListAfflictions;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C08330))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C08770))(this);
  }
  void ApplyWaterTreatment(float progress) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C09850))(this, progress);
  }
  void DoScrollUp() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C098A0))(this);
  }
  void DoScrollDown() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C098D0))(this);
  }
  void OnScrollbarChange() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C09900))(this);
  }
  void UseItem(ModdingAPI::Exposed::GearItem* gi) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C09AE0))(this, gi);
  }
  void SelectItem(ModdingAPI::Exposed::FirstAidKitButton* fakButton) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::FirstAidKitButton*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C09C00))(this, fakButton);
  }
  void UseSelectedItem() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C09E80))(this);
  }
  void SelectNPCAffliction(ModdingAPI::Exposed::NPCAfflictionButton* affButton) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::NPCAfflictionButton*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0A0A0))(this, affButton);
  }
  void RefreshAll() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0A2A0))(this);
  }
  bool TreatmentInProgress() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0A450))(this);
  }
  void Enable(bool enable, ModdingAPI::Exposed::NPC* npc) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, bool, ModdingAPI::Exposed::NPC*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0A460))(this, enable, npc);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x165DF10))(this);
  }
  void OnBack() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0AC80))(this);
  }
  void SelectPrevFAKItem(bool playAudio) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0ADE0))(this, playAudio);
  }
  void SelectNextFAKItem(bool playAudio) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0B120))(this, playAudio);
  }
  int32_t GetSelectedAfflictionType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0B480))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Color GetColorForStatusLine() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0B560))(this);
  }
  bool IsSameAffliction(ModdingAPI::Exposed::NPCAffliction* afflictiona, ModdingAPI::Exposed::NPCAffliction* afflictionb) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::NPCAffliction*, ModdingAPI::Exposed::NPCAffliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0B8C0))(this, afflictiona, afflictionb);
  }
  bool IsSameAffliction(ModdingAPI::Exposed::NPCAffliction* afflictiona, ModdingAPI::Exposed::NPCAfflictionButton* afflictionButtonb) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::NPCAffliction*, ModdingAPI::Exposed::NPCAfflictionButton*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0B920))(this, afflictiona, afflictionButtonb);
  }
  void PostTreatment(ModdingAPI::Exposed::NPCAffliction* affliction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::NPCAffliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0B970))(this, affliction);
  }
  void MaybeReplaceExitAnimation(ModdingAPI::Exposed::NPCAffliction* affliction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::NPCAffliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0BD60))(this, affliction);
  }
  void ReplaceAnimation(ModdingAPI::Exposed::TimelineRef* timelineExitRef, ModdingAPI::Exposed::AnimatedInteraction* animatedInteraction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::TimelineRef*, ModdingAPI::Exposed::AnimatedInteraction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0BED0))(this, timelineExitRef, animatedInteraction);
  }
  void ApplyStandardTreatment() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0C090))(this);
  }
  bool IsWaterTreamentInProgress() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0C7A0))(this);
  }
  void OnTreatmentComplete(bool success, bool playerCancel, float progress) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, bool, bool, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0C8E0))(this, success, playerCancel, progress);
  }
  void ApplyAlternateTreatment() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0CC20))(this);
  }
  void RefreshStatusLabels() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0D1F0))(this);
  }
  void UpdateBodyIconActiveAnimation(int32_t affLocation, int32_t afflictionType) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0DA50))(this, affLocation, afflictionType);
  }
  void DisableAfflictionButtons() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0E130))(this);
  }
  void UpdateAllButSelectedBodyIconColors() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0E390))(this);
  }
  void HideRightPage() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0E610))(this);
  }
  ModdingAPI::Exposed::NPCAffliction* GetSelectedAffliction() {
    return reinterpret_cast<ModdingAPI::Exposed::NPCAffliction*(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0E7A0))(this);
  }
  void GatherStatusBars() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0E880))(this);
  }
  void HookupStatusBars() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0E910))(this);
  }
  void UpdateStatusBars() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0E990))(this);
  }
  void GetAlternateAfflictionsRemediesInfo(ModdingAPI::Exposed::System::String_array* altRemedySprites, ModdingAPI::Exposed::System::Boolean_array* altRemedyComplete, ModdingAPI::Exposed::System::Int32_array* altRemedyNumRequired) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::System::Boolean_array*, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0EA00))(this, altRemedySprites, altRemedyComplete, altRemedyNumRequired);
  }
  void GetAfflictionsRemediesInfo(ModdingAPI::Exposed::System::String_array* remedySprites, ModdingAPI::Exposed::System::Boolean_array* remedyComplete, ModdingAPI::Exposed::System::Int32_array* remedyNumRequired) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::System::Boolean_array*, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0EAB0))(this, remedySprites, remedyComplete, remedyNumRequired);
  }
  bool PlayerHasRemedy(ModdingAPI::Exposed::AfflictionRemedy* remedy, ModdingAPI::Exposed::AfflictionDefinition* afflictionDefinition) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::AfflictionRemedy*, ModdingAPI::Exposed::AfflictionDefinition*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0EB60))(this, remedy, afflictionDefinition);
  }
  bool PlayerCanUseRemedy(ModdingAPI::Exposed::NPCAffliction* npcAffliction, ModdingAPI::Exposed::AfflictionRemedy* afflictionRemedy1, bool remedy1Complete, ModdingAPI::Exposed::AfflictionRemedy* afflictionRemedy2, bool remedy2Complete) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::NPCAffliction*, ModdingAPI::Exposed::AfflictionRemedy*, bool, ModdingAPI::Exposed::AfflictionRemedy*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0ED40))(this, npcAffliction, afflictionRemedy1, remedy1Complete, afflictionRemedy2, remedy2Complete);
  }
  bool HasStandardTreatment(ModdingAPI::Exposed::NPCAffliction* npcAffliction) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::NPCAffliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0EDE0))(this, npcAffliction);
  }
  bool HasAlternateTreatment(ModdingAPI::Exposed::NPCAffliction* npcAffliction) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::NPCAffliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0EE90))(this, npcAffliction);
  }
  void EnableMultipleRemedies(ModdingAPI::Exposed::Panel_Diagnosis::TreatmentUI* ui, bool enabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::Panel_Diagnosis::TreatmentUI*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0EF40))(this, ui, enabled);
  }
  void EnableAlternateTreatment(bool enabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0F280))(this, enabled);
  }
  void UpdateRestUI(ModdingAPI::Exposed::NPCAffliction* affliction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::NPCAffliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0F300))(this, affliction);
  }
  bool CanSelectAlternateTreatment() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0F4E0))(this);
  }
  bool CanSelectStandardTreatment() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0F550))(this);
  }
  void UpdateStandardTreatmentUI(ModdingAPI::Exposed::NPCAffliction* affliction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::NPCAffliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0F5C0))(this, affliction);
  }
  void UpdateAlternateTreatmentUI(ModdingAPI::Exposed::NPCAffliction* affliction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::NPCAffliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0F8B0))(this, affliction);
  }
  void RefreshRightPage() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0FF80))(this);
  }
  void DisableMultiAndSingleTreatmentsBG() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C110F0))(this);
  }
  void EnableMultiTreatmentBG() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C11290))(this);
  }
  void EnableSingleTreatmentBG() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C11430))(this);
  }
  void EnableApplyTreatmentUI(bool canApplyTreatment) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C115D0))(this, canApplyTreatment);
  }
  bool CanApplyTreatment() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C11640))(this);
  }
  void RefreshSelection(ModdingAPI::Exposed::NPCAffliction* npcAffliction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::NPCAffliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C11750))(this, npcAffliction);
  }
  void EnableAlternateSelectionButtons(bool isEnabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C117B0))(this, isEnabled);
  }
  void EnableStandardSelectionButtons(bool isEnabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C117F0))(this, isEnabled);
  }
  void DisableTreatmentSelectionObjects() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C11830))(this);
  }
  void RefreshKit() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C11A10))(this);
  }
  void UpdateBodyIconColors(ModdingAPI::Exposed::NPCAfflictionButton* afflictionButton, bool isButtonSelected, int32_t bodyIconIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::NPCAfflictionButton*, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C11A80))(this, afflictionButton, isButtonSelected, bodyIconIndex);
  }
  void AddAfflictionAtLocation(int32_t bodyIconIndex, int32_t location, int32_t type) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C12000))(this, bodyIconIndex, location, type);
  }
  void RefreshScrollList() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C122C0))(this);
  }
  void CheckIfSelectedAfflictionHealed() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C12CD0))(this);
  }
  void CheckIfSelectedItemUsedUp() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C12F40))(this);
  }
  void ExitInterface() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C13020))(this);
  }
  void UpdateWaterRemedyUI(float waterNeeded, ModdingAPI::Exposed::Panel_Diagnosis::RemedyUI* ui, int32_t afflictionType) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, float, ModdingAPI::Exposed::Panel_Diagnosis::RemedyUI*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C13130))(this, waterNeeded, ui, afflictionType);
  }
  void SelectStandardTreatment() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C139E0))(this);
  }
  void SelectAlternateTreatment() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C13A00))(this);
  }
  void ApplyTreatment() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C13A20))(this);
  }
  void UpdateRemedyUI(ModdingAPI::Exposed::Panel_Diagnosis::RemedyUI* ui, ModdingAPI::Exposed::AfflictionRemedy* remedy, bool itemNeeded, float waterNeeded, int32_t afflictionType) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::Panel_Diagnosis::RemedyUI*, ModdingAPI::Exposed::AfflictionRemedy*, bool, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C13AC0))(this, ui, remedy, itemNeeded, waterNeeded, afflictionType);
  }
  void UpdateHasTreatments(bool hasMainTreatment, bool hasAltTreatment) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C13D50))(this, hasMainTreatment, hasAltTreatment);
  }
  bool HasAnyFirstAidItem() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C145B0))(this);
  }
  bool AfflictionTypeNeedsRestAfterItems(int32_t affType) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16719B0))(this, affType);
  }
  void UpdateButtonLegend() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C14620))(this);
  }
  void ClearAfflictionsAtLocationArray() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C14890))(this);
  }
  void UpdateScrollbar() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C14A10))(this);
  }
  void RefreshTintedImages() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C14BE0))(this);
  }
  void CheckForAfflictionListChange() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C14E70))(this);
  }
  bool AfflictionListHasChanged() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C150C0))(this);
  }
  void GetAllAfflictions(ModdingAPI::Exposed::System::Collections::Generic::List_T_* list) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C152A0))(this, list);
  }
  float GetColdPercent() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C15530))(this);
  }
  float GetConditionPercent() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C15660))(this);
  }
  float GetCriticalHP() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C157A0))(this);
  }
  float GetHP() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C158D0))(this);
  }
  void EnableOutline(ModdingAPI::Exposed::NPC* npc) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, ModdingAPI::Exposed::NPC*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C15A00))(this, npc);
  }
  void EnableApplyTreatmentButton(bool isEnabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C15C50))(this, isEnabled);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Diagnosis*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C15FA0))(this);
  }

  // Static methods:
  static inline void GetAfflictionsRemediesParams(ModdingAPI::Exposed::System::String_array* remedySprites, ModdingAPI::Exposed::System::Boolean_array* remedyComplete, ModdingAPI::Exposed::System::Int32_array* remedyNumRequired, ModdingAPI::Exposed::AfflictionRemedy* afflictionRemedy1, ModdingAPI::Exposed::AfflictionRemedy* afflictionRemedy2, bool remedy1Complete, bool remedy2Complete) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::System::Boolean_array*, ModdingAPI::Exposed::System::Int32_array*, ModdingAPI::Exposed::AfflictionRemedy*, ModdingAPI::Exposed::AfflictionRemedy*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C0FBA0))(remedySprites, remedyComplete, remedyNumRequired, afflictionRemedy1, afflictionRemedy2, remedy1Complete, remedy2Complete);
  }
};
}