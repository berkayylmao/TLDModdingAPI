// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Mono::Security::Cryptography {
struct __KeyPairPersistence_Il2CppStaticFields {
  bool _userPathExists;
  System_String* _userPath;
  bool _machinePathExists;
  System_String* _machinePath;
  Il2CppObject* lockobj;
};

struct __KeyPairPersistence_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __KeyPairPersistence_Il2CppClass {
  Il2CppClass_1 _1;
  __KeyPairPersistence_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __KeyPairPersistence_Il2CppVtbl vtbl;
};

class KeyPairPersistence {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C6A458;
  static inline    __KeyPairPersistence_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __KeyPairPersistence_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__KeyPairPersistence_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __KeyPairPersistence_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Security::Cryptography::CspParameters* _params;
  System_String* _keyvalue;
  System_String* _filename;
  System_String* _container;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Security::Cryptography::CspParameters* parameters) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::KeyPairPersistence*, ModdingAPI::Exposed::System::Security::Cryptography::CspParameters*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE75630))(this, parameters);
  }
  void ::ctor(ModdingAPI::Exposed::System::Security::Cryptography::CspParameters* parameters, System_String* keyPair) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::KeyPairPersistence*, ModdingAPI::Exposed::System::Security::Cryptography::CspParameters*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE75700))(this, parameters, keyPair);
  }
  System_String* get_Filename() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::KeyPairPersistence*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE757E0))(this);
  }
  System_String* get_KeyValue() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::KeyPairPersistence*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  void set_KeyValue(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::KeyPairPersistence*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE759C0))(this, value);
  }
  bool Load() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::KeyPairPersistence*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE759D0))(this);
  }
  void Save() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::KeyPairPersistence*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE75B50))(this);
  }
  void Remove() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::KeyPairPersistence*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE75F70))(this);
  }
  bool get_CanChange() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::KeyPairPersistence*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE76EB0))(this);
  }
  bool get_UseDefaultKeyContainer() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::KeyPairPersistence*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE76EC0))(this);
  }
  bool get_UseMachineKeyStore() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::KeyPairPersistence*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE76EE0))(this);
  }
  System_String* get_ContainerName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::KeyPairPersistence*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE76F00))(this);
  }
  ModdingAPI::Exposed::System::Security::Cryptography::CspParameters* Copy(ModdingAPI::Exposed::System::Security::Cryptography::CspParameters* p) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::Cryptography::CspParameters*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::KeyPairPersistence*, ModdingAPI::Exposed::System::Security::Cryptography::CspParameters*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE77130))(this, p);
  }
  void FromXml(System_String* xml) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::KeyPairPersistence*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE772D0))(this, xml);
  }
  System_String* ToXml() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::KeyPairPersistence*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE77510))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<bool> _userPathExists = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->_userPathExists; }
  );
  static inline __CppStaticProperty<System_String*> _userPath = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->_userPath; }
  );
  static inline __CppStaticProperty<bool> _machinePathExists = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->_machinePathExists; }
  );
  static inline __CppStaticProperty<System_String*> _machinePath = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->_machinePath; }
  );
  static inline __CppStaticProperty<Il2CppObject*> lockobj = __CppStaticProperty<Il2CppObject*>(
   []() { return &GetStaticClassInstance()->pStaticFields->lockobj; }
  );

  // Static methods:
  static inline System_String* get_UserPath() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xE75F90))();
  }
  static inline System_String* get_MachinePath() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xE76500))();
  }
  static inline bool _CanSecure(System_String* root) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(root);
  }
  static inline bool _ProtectUser(System_String* path) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(path);
  }
  static inline bool _ProtectMachine(System_String* path) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(path);
  }
  static inline bool _IsUserProtected(System_String* path) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(path);
  }
  static inline bool _IsMachineProtected(System_String* path) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(path);
  }
  static inline bool CanSecure(System_String* path) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE76A80))(path);
  }
  static inline bool ProtectUser(System_String* path) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE76B70))(path);
  }
  static inline bool ProtectMachine(System_String* path) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE76C40))(path);
  }
  static inline bool IsUserProtected(System_String* path) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE76D10))(path);
  }
  static inline bool IsMachineProtected(System_String* path) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE76DE0))(path);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xE777E0))();
  }
};
}