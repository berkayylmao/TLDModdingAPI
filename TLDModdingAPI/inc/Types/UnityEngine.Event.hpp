// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed::UnityEngine {
struct __Event_Il2CppStaticFields {
  ModdingAPI::Exposed::UnityEngine::Event* s_Current;
  ModdingAPI::Exposed::UnityEngine::Event* s_MasterEvent;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* __f__switch_map0;
};

struct __Event_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Event_Il2CppClass {
  Il2CppClass_1 _1;
  __Event_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Event_Il2CppVtbl vtbl;
};

class Event {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C26628;
  static inline    __Event_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Event_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Event_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Event_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t m_Ptr;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E7360))(this);
  }
  void ::ctor(int32_t displayIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E73C0))(this, displayIndex);
  }
  int32_t get_rawType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E7420))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_mousePosition() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E7470))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_delta() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E74E0))(this);
  }
  int32_t get_button() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E7550))(this);
  }
  int32_t get_modifiers() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E75A0))(this);
  }
  int32_t get_clickCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E75F0))(this);
  }
  wchar_t get_character() {
    return reinterpret_cast<wchar_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E7640))(this);
  }
  ModdingAPI::Exposed::UnityEngine::KeyCode get_keyCode() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::KeyCode(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E7690))(this);
  }
  void set_displayIndex(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E76E0))(this, value);
  }
  int32_t get_type() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E7740))(this);
  }
  System_String* get_commandName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E7790))(this);
  }
  void Internal_Use() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E77E0))(this);
  }
  int32_t GetTypeForControl(int32_t controlID) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E78D0))(this, controlID);
  }
  void Finalize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E7C60))(this);
  }
  bool get_isKey() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E7E00))(this);
  }
  bool get_isMouse() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E7E70))(this);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E7EF0))(this);
  }
  bool Equals(Il2CppObject* obj) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E8010))(this, obj);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E81E0))(this);
  }
  void Use() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E8CD0))(this);
  }
  void get_mousePosition_Injected(ModdingAPI::Exposed::UnityEngine::Vector2 ret) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E8F40))(this, ret);
  }
  void get_delta_Injected(ModdingAPI::Exposed::UnityEngine::Vector2 ret) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E8FA0))(this, ret);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Event*> s_Current = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Event*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_Current; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Event*> s_MasterEvent = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Event*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_MasterEvent; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> __f__switch_map0 = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->__f__switch_map0; }
  );

  // Static methods:
  static inline intptr_t Internal_Create(int32_t displayIndex) {
    return reinterpret_cast<intptr_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E7830))(displayIndex);
  }
  static inline void Internal_Destroy(intptr_t ptr) {
    reinterpret_cast<void(__fastcall*)(intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E7880))(ptr);
  }
  static inline bool PopEvent(ModdingAPI::Exposed::UnityEngine::Event* outEvent) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Event*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E7930))(outEvent);
  }
  static inline void Internal_SetNativeEvent(intptr_t ptr) {
    reinterpret_cast<void(__fastcall*)(intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E7980))(ptr);
  }
  static inline void Internal_MakeMasterEventCurrent(int32_t displayIndex) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E79D0))(displayIndex);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Event* get_current() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Event*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x13E7D80))();
  }
};
}