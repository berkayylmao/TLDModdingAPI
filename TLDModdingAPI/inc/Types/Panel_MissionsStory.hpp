// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed {
struct __Panel_MissionsStory_Il2CppStaticFields {
  int32_t OBJECT_POOL_SIZE;
  ModdingAPI::Exposed::StoryMissionSaveData* m_StoryMissionSaveData;
};

struct __Panel_MissionsStory_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Panel_MissionsStory_Il2CppClass {
  Il2CppClass_1 _1;
  __Panel_MissionsStory_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Panel_MissionsStory_Il2CppVtbl vtbl;
};

class Panel_MissionsStory {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C94148;
  static inline    __Panel_MissionsStory_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Panel_MissionsStory_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Panel_MissionsStory_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Panel_MissionsStory_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::ButtonLegendContainer* m_ButtonLegendContainer;
  ModdingAPI::Exposed::ScrollList* m_MissionScrollList;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_MissionListScrollbar;
  ModdingAPI::Exposed::UITexture* m_EpisodeOnePoster;
  ModdingAPI::Exposed::UITexture* m_EpisodeTwoPoster;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TabsObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TabsMainObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TabsSideObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_RightPageObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_MissionObjectivePrefab;
  ModdingAPI::Exposed::UnityEngine::Transform* m_MissionObjetivePoolParent;
  ModdingAPI::Exposed::UnityEngine::Transform* m_MissionObjetiveActiveObjects;
  ModdingAPI::Exposed::UILabel* m_SelectedMissionName;
  ModdingAPI::Exposed::UILabel* m_TimerLabel;
  ModdingAPI::Exposed::UISprite* m_TimerBGSprite;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TimerObject;
  ModdingAPI::Exposed::UILabel* m_MissionDescLabel;
  ModdingAPI::Exposed::UIPanel* m_MissionDescPanel;
  ModdingAPI::Exposed::UnityEngine::Transform* m_MissionDescPanelOffset;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_MissionDescScrollbar;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Button_Back;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Button_SeeMap;
  ModdingAPI::Exposed::GamepadButtonSprite_array* m_GamepadButtonSprites;
  float m_LowTimeValue;
  int32_t m_PixelBufferDescAndObjectives;
  int32_t m_PixelBufferTimer;
  ModdingAPI::Exposed::UnityEngine::Color m_TimerColorNormal;
  ModdingAPI::Exposed::UnityEngine::Color m_TimerColorLowTime;
  bool m_HasBeenUpdated;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_MissionInfoList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_MissionsToShowScrollList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_ObjectiveInfoList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_ObjectivesToShowRightPage;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_MissionScrollListEntries;
  bool m_ShowingMainStory;
  int32_t m_CurrentMissionIndex;
  bool m_StartHasBeenCalled;
  float m_MissionDescPanelHeight;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_QueueNotificationHeaders;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_QueueNotificationBodies;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_ResourceMissionInfoList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_ResourceObjectiveInfoList;
  ModdingAPI::Exposed::UISlider* m_MissionListScrollbarSlider;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4F6C0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4FCC0))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A4FF30))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A50080))(this, text);
  }
  void Enable(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A50730))(this, enable);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x165DF10))(this);
  }
  void DeselectAllMissions() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A50A00))(this);
  }
  void ClearMissions() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A50B90))(this);
  }
  void SelectMissionListEntry(System_String* missionID) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A50C70))(this, missionID);
  }
  void OnCancel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A50DC0))(this);
  }
  void OnMainStorySelected() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A50E80))(this);
  }
  void OnSideMissionSelected() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A50FD0))(this);
  }
  void OnMissionListEntrySelected(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A51130))(this, index);
  }
  void OnExamineCollectible() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnSeeLocationOnMap() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  bool ObjectiveIsActiveOrComplete(System_String* objectiveID) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A51370))(this, objectiveID);
  }
  ModdingAPI::Exposed::StoryMissionObjective* GetActiveObjective(System_String* objectiveID) {
    return reinterpret_cast<ModdingAPI::Exposed::StoryMissionObjective*(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A51390))(this, objectiveID);
  }
  void AddMission(System_String* missionID, bool suppressUI, bool suppressMission, bool suppressChapter) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*, bool, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A51470))(this, missionID, suppressUI, suppressMission, suppressChapter);
  }
  void UpdateMissionName(System_String* missionID, System_String* nameLocID, bool suppressUI) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A51990))(this, missionID, nameLocID, suppressUI);
  }
  void UpdateMissionDesc(System_String* missionID, System_String* descriptionLocID, bool suppressUI) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A51B50))(this, missionID, descriptionLocID, suppressUI);
  }
  void UpdateMissionTexture(System_String* missionID, System_String* textureName, bool suppressUI) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A51D10))(this, missionID, textureName, suppressUI);
  }
  void UpdateMissionTimer(System_String* missionID, System_String* timerID, bool suppressUI) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A51ED0))(this, missionID, timerID, suppressUI);
  }
  bool TryGetObjectiveIsComplete(System_String* objectiveID, bool result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A52090))(this, objectiveID, result);
  }
  void MarkMissionComplete(System_String* missionID, bool missionSuccess, bool suppressUI) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A52180))(this, missionID, missionSuccess, suppressUI);
  }
  void AddObjective(System_String* objectiveID, bool suppressUI) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A52540))(this, objectiveID, suppressUI);
  }
  void UpdateObjectiveDesc(System_String* objectiveID, System_String* descriptionLocID, bool suppressUI) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A52860))(this, objectiveID, descriptionLocID, suppressUI);
  }
  void UpdateObjectiveTimer(System_String* objectiveID, System_String* timerID, bool suppressUI) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A52A20))(this, objectiveID, timerID, suppressUI);
  }
  void MarkObjectiveComplete(System_String* objectiveID, bool suppressUI) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A52BE0))(this, objectiveID, suppressUI);
  }
  void MarkObjectiveInvisible(System_String* objectiveID) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A52D90))(this, objectiveID);
  }
  void MaybeShowNotificationsInQueue() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A52ED0))(this);
  }
  ModdingAPI::Exposed::StoryMissionInfo* GetMissionInfoFromID(System_String* missionID) {
    return reinterpret_cast<ModdingAPI::Exposed::StoryMissionInfo*(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A53040))(this, missionID);
  }
  bool IsSideMission(System_String* missionID) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A531A0))(this, missionID);
  }
  void OnScrollbarMissionDescUp() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A53310))(this);
  }
  void OnScrollbarMissionDescDown() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A534F0))(this);
  }
  void OnScrollbarMissionDescChange() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A536D0))(this);
  }
  void OnInventoryNav() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A53770))(this);
  }
  void OnClothingNav() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A53870))(this);
  }
  void OnFirstAidNav() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A53960))(this);
  }
  void OnMapNav() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A53A50))(this);
  }
  void OnDailyLogButton() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A53CD0))(this);
  }
  void OnStatsButton() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A53DC0))(this);
  }
  void OnCollectibleButton() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A53EB0))(this);
  }
  void OnSkillsButton() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A53FA0))(this);
  }
  void OnCraftingButton() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A54090))(this);
  }
  ModdingAPI::Exposed::StoryMissionInfo* GetTrackedMainMission() {
    return reinterpret_cast<ModdingAPI::Exposed::StoryMissionInfo*(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A54180))(this);
  }
  ModdingAPI::Exposed::StoryMissionInfo* GetTrackedMission() {
    return reinterpret_cast<ModdingAPI::Exposed::StoryMissionInfo*(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A54290))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* GetObjectivesToShow() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E100))(this);
  }
  ModdingAPI::Exposed::StoryMissionObjective* GetObjective(System_String* objectiveID) {
    return reinterpret_cast<ModdingAPI::Exposed::StoryMissionObjective*(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A54380))(this, objectiveID);
  }
  System_String* GetCurrentMissionId() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A54450))(this);
  }
  void UpdateButtonLegend() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A54530))(this);
  }
  void UpdateGamepadControls() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A54850))(this);
  }
  void RefreshScrollList() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A54A20))(this);
  }
  void OnScrollbarMissionListChanged() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A55320))(this);
  }
  void UpdateMissionListScrollingForCurrentIndex() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A55430))(this);
  }
  int32_t GetMissionListScrollIndex() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A55670))(this);
  }
  void RefreshDescriptionPage() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A55770))(this);
  }
  void RefreshMissionsToShow() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A55EF0))(this);
  }
  bool HasSideMissionsInLog() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A56040))(this);
  }
  void RefreshObjectivesToShow(System_String* missionID) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A56120))(this, missionID);
  }
  ModdingAPI::Exposed::StoryMissionObjective* GetActiveObjectiveForMission(System_String* missionID) {
    return reinterpret_cast<ModdingAPI::Exposed::StoryMissionObjective*(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A56330))(this, missionID);
  }
  void GetAllActiveObjectivesForMission(System_String* missionID, ModdingAPI::Exposed::System::Collections::Generic::List_T_* results) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A564C0))(this, missionID, results);
  }
  int32_t GetNumObjectivesForMission(System_String* missionID) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A566C0))(this, missionID);
  }
  int32_t GetNumCompletedObjectivesForMission(System_String* missionID) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A568C0))(this, missionID);
  }
  void QueueMissionNotification(System_String* header, System_String* body) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A56AE0))(this, header, body);
  }
  void LoadMissionDataFromResources() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A56C80))(this);
  }
  int32_t GetMissionIndex(System_String* missionID) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A575E0))(this, missionID);
  }
  int32_t GetObjectiveIndex(System_String* objectiveID) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A57710))(this, objectiveID);
  }
  int32_t GetMissionListEntryIndex(System_String* missionID) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A57840))(this, missionID);
  }
  void SetupMissionDescScrollbar(float pixelHeightRightSide) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A57990))(this, pixelHeightRightSide);
  }
  void UpdateMissionDescScrollbar() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A57B80))(this);
  }
  void FSMForceRefresh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A57D70))(this);
  }
  void RefreshGamepadButtons() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A57DB0))(this);
  }
  void UpdateTabsObjects() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A57E40))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_MissionsStory*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A57F30))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<int32_t> OBJECT_POOL_SIZE = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->OBJECT_POOL_SIZE; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::StoryMissionSaveData*> m_StoryMissionSaveData = __CppStaticProperty<ModdingAPI::Exposed::StoryMissionSaveData*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_StoryMissionSaveData; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A583C0))();
  }
};
}