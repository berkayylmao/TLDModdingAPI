// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector4.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Matrix4x4.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed {
struct __UILabel_Il2CppStaticFields {
  ModdingAPI::Exposed::BetterList_T_* mList;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* mFontUsage;
  bool mTexRebuildAdded;
  ModdingAPI::Exposed::BetterList_T_* mTempVerts;
  ModdingAPI::Exposed::BetterList_T_* mTempIndices;
};

struct __UILabel_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_isAnchoredHorizontally;
  VirtualInvokeData _5_get_isAnchoredVertically;
  VirtualInvokeData _6_get_canBeAnchored;
  VirtualInvokeData _7_get_alpha;
  VirtualInvokeData _8_set_alpha;
  VirtualInvokeData _9_CalculateFinalAlpha;
  VirtualInvokeData _10_get_localCorners;
  VirtualInvokeData _11_get_worldCorners;
  VirtualInvokeData _12_Invalidate;
  VirtualInvokeData _13_GetSides;
  VirtualInvokeData _14_OnEnable;
  VirtualInvokeData _15_OnInit;
  VirtualInvokeData _16_OnDisable;
  VirtualInvokeData _17_OnAnchor;
  VirtualInvokeData _18_SetRect;
  VirtualInvokeData _19_ParentHasChanged;
  VirtualInvokeData _20_OnStart;
  VirtualInvokeData _21_OnUpdate;
  VirtualInvokeData _22_get_localSize;
  VirtualInvokeData _23_get_drawingDimensions;
  VirtualInvokeData _24_get_material;
  VirtualInvokeData _25_set_material;
  VirtualInvokeData _26_get_mainTexture;
  VirtualInvokeData _27_set_mainTexture;
  VirtualInvokeData _28_get_shader;
  VirtualInvokeData _29_set_shader;
  VirtualInvokeData _30_MarkAsChanged;
  VirtualInvokeData _31_Awake;
  VirtualInvokeData _32_UpgradeFrom265;
  VirtualInvokeData _33_MakePixelPerfect;
  VirtualInvokeData _34_get_minWidth;
  VirtualInvokeData _35_get_minHeight;
  VirtualInvokeData _36_get_border;
  VirtualInvokeData _37_set_border;
  VirtualInvokeData _38_OnFill;
};

struct __UILabel_Il2CppClass {
  Il2CppClass_1 _1;
  __UILabel_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __UILabel_Il2CppVtbl vtbl;
};

class UILabel {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C7ADF0;
  static inline    UILabel* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C78208;
  static inline    __UILabel_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline UILabel* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (UILabel**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __UILabel_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__UILabel_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __UILabel_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UIRect::AnchorPoint* leftAnchor;
  ModdingAPI::Exposed::UIRect::AnchorPoint* rightAnchor;
  ModdingAPI::Exposed::UIRect::AnchorPoint* bottomAnchor;
  ModdingAPI::Exposed::UIRect::AnchorPoint* topAnchor;
  int32_t updateAnchors;
  ModdingAPI::Exposed::UnityEngine::GameObject* mGo;
  ModdingAPI::Exposed::UnityEngine::Transform* mTrans;
  ModdingAPI::Exposed::BetterList_T_* mChildren;
  bool mChanged;
  bool mStarted;
  bool mParentFound;
  bool UIRect_mUpdateAnchors;
  int32_t UIRect_mUpdateFrame;
  bool UIRect_mAnchorsCached;
  ModdingAPI::Exposed::UIRoot* UIRect_mRoot;
  ModdingAPI::Exposed::UIRect* UIRect_mParent;
  bool UIRect_mRootSet;
  ModdingAPI::Exposed::UnityEngine::Camera* mCam;
  float finalAlpha;
  ModdingAPI::Exposed::UnityEngine::Color mColor;
  int32_t mPivot;
  int32_t mWidth;
  int32_t mHeight;
  int32_t mDepth;
  ModdingAPI::Exposed::UIWidget::OnDimensionsChanged* onChange;
  ModdingAPI::Exposed::UIWidget::OnPostFillCallback* onPostFill;
  ModdingAPI::Exposed::UIDrawCall::OnRenderCallback* mOnRender;
  bool autoResizeBoxCollider;
  bool hideIfOffScreen;
  int32_t keepAspectRatio;
  float aspectRatio;
  ModdingAPI::Exposed::UIWidget::HitCheck* hitCheck;
  ModdingAPI::Exposed::UIPanel* panel;
  ModdingAPI::Exposed::UIGeometry* geometry;
  bool fillGeometry;
  bool mPlayMode;
  ModdingAPI::Exposed::UnityEngine::Vector4 mDrawRegion;
  ModdingAPI::Exposed::UnityEngine::Matrix4x4 UIWidget_mLocalToPanel;
  bool UIWidget_mIsVisibleByAlpha;
  bool UIWidget_mIsVisibleByPanel;
  bool UIWidget_mIsInFront;
  float UIWidget_mLastAlpha;
  bool UIWidget_mMoved;
  ModdingAPI::Exposed::UIDrawCall* drawCall;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* mCorners;
  int32_t UIWidget_mAlphaFrameID;
  int32_t UIWidget_mMatrixFrame;
  ModdingAPI::Exposed::UnityEngine::Vector3 UIWidget_mOldV0;
  ModdingAPI::Exposed::UnityEngine::Vector3 UIWidget_mOldV1;
  int32_t keepCrispWhenShrunk;
  ModdingAPI::Exposed::UnityEngine::Font* mTrueTypeFont;
  ModdingAPI::Exposed::UIFont* mFont;
  System_String* mText;
  int32_t mFontSize;
  int32_t mFontSizeAsianOverride;
  int32_t mFontSizeCyrillicOverride;
  int32_t mFontStyle;
  int32_t mAlignment;
  bool mEncoding;
  int32_t mMaxLineCount;
  int32_t mEffectStyle;
  ModdingAPI::Exposed::UnityEngine::Color mEffectColor;
  int32_t mSymbols;
  ModdingAPI::Exposed::UnityEngine::Vector2 mEffectDistance;
  int32_t mOverflow;
  ModdingAPI::Exposed::UnityEngine::Material* mMaterial;
  bool mApplyGradient;
  ModdingAPI::Exposed::UnityEngine::Color mGradientTop;
  ModdingAPI::Exposed::UnityEngine::Color mGradientBottom;
  int32_t mSpacingX;
  int32_t mSpacingY;
  bool mUseFloatSpacing;
  float mFloatSpacingX;
  float mFloatSpacingY;
  bool mCapsLock;
  bool m_Bulleted;
  int32_t m_BulletSpacing;
  bool mShrinkToFit;
  int32_t mMaxLineWidth;
  int32_t mMaxLineHeight;
  float mLineWidth;
  bool mMultiline;
  ModdingAPI::Exposed::UnityEngine::Font* mActiveTTF;
  float mDensity;
  bool mShouldBeProcessed;
  System_String* mProcessedText;
  bool mPremultiply;
  ModdingAPI::Exposed::UnityEngine::Vector2 mCalculatedSize;
  float mScale;
  int32_t mPrintedSize;
  int32_t mLastWidth;
  int32_t mLastHeight;
  bool mContainsAsianGlyph;
  ModdingAPI::Exposed::BetterList_T_* mDynamicSymbolSprites;

  // Member methods:
  bool get_shouldBeProcessed() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B6960))(this);
  }
  void set_shouldBeProcessed(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B6970))(this, value);
  }
  bool get_capsLock() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B6990))(this);
  }
  void set_capsLock(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B69A0))(this, value);
  }
  bool get_isAnchoredHorizontally() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B69B0))(this);
  }
  bool get_isAnchoredVertically() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B6AD0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Material* get_material() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Material*(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B6BF0))(this);
  }
  void set_material(ModdingAPI::Exposed::UnityEngine::Material* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B6D70))(this, value);
  }
  ModdingAPI::Exposed::UIFont* get_font() {
    return reinterpret_cast<ModdingAPI::Exposed::UIFont*(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1310))(this);
  }
  void set_font(ModdingAPI::Exposed::UIFont* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B6E50))(this, value);
  }
  ModdingAPI::Exposed::UIFont* get_bitmapFont() {
    return reinterpret_cast<ModdingAPI::Exposed::UIFont*(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1310))(this);
  }
  void set_bitmapFont(ModdingAPI::Exposed::UIFont* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UIFont*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B6E60))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Font* get_trueTypeFont() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Font*(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B6F50))(this);
  }
  void set_trueTypeFont(ModdingAPI::Exposed::UnityEngine::Font* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UnityEngine::Font*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7070))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Object* get_ambigiousFont() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Object*(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B71C0))(this);
  }
  void set_ambigiousFont(ModdingAPI::Exposed::UnityEngine::Object* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UnityEngine::Object*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7290))(this, value);
  }
  System_String* get_text() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B73C0))(this);
  }
  void set_text(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7400))(this, value);
  }
  int32_t get_defaultFontSize() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7540))(this);
  }
  int32_t get_fontSize() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7670))(this);
  }
  void set_fontSize(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B77F0))(this, value);
  }
  int32_t get_fontSizeAsianOverride() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B78D0))(this);
  }
  void set_fontSizeAsianOverride(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B78E0))(this, value);
  }
  int32_t get_fontSizeCyrillicOverride() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C1D130))(this);
  }
  void set_fontSizeCyrillicOverride(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B79C0))(this, value);
  }
  int32_t get_fontStyle() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17F3E90))(this);
  }
  void set_fontStyle(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7AA0))(this, value);
  }
  int32_t get_alignment() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C1D480))(this);
  }
  void set_alignment(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7AD0))(this, value);
  }
  bool get_applyGradient() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7B00))(this);
  }
  void set_applyGradient(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7B10))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Color get_gradientTop() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7B30))(this);
  }
  void set_gradientTop(ModdingAPI::Exposed::UnityEngine::Color value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7B40))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Color get_gradientBottom() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7BB0))(this);
  }
  void set_gradientBottom(ModdingAPI::Exposed::UnityEngine::Color value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7BC0))(this, value);
  }
  int32_t get_spacingX() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7C30))(this);
  }
  void set_spacingX(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7C40))(this, value);
  }
  int32_t get_spacingY() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CCFD70))(this);
  }
  void set_spacingY(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7C60))(this, value);
  }
  bool get_useFloatSpacing() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7C80))(this);
  }
  void set_useFloatSpacing(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7C90))(this, value);
  }
  float get_floatSpacingX() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7CB0))(this);
  }
  void set_floatSpacingX(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7CC0))(this, value);
  }
  float get_floatSpacingY() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7DA0))(this);
  }
  void set_floatSpacingY(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7DB0))(this, value);
  }
  float get_effectiveSpacingY() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7E90))(this);
  }
  float get_effectiveSpacingX() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7EB0))(this);
  }
  bool get_keepCrisp() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7ED0))(this);
  }
  bool get_supportEncoding() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7FA0))(this);
  }
  void set_supportEncoding(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7FB0))(this, value);
  }
  int32_t get_symbolStyle() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7FD0))(this);
  }
  void set_symbolStyle(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B7FE0))(this, value);
  }
  int32_t get_overflowMethod() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B8000))(this);
  }
  void set_overflowMethod(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B8010))(this, value);
  }
  int32_t get_lineWidth() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5F1040))(this);
  }
  void set_lineWidth(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B8030))(this, value);
  }
  int32_t get_lineHeight() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD6CB0))(this);
  }
  void set_lineHeight(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B8040))(this, value);
  }
  bool get_multiLine() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B8050))(this);
  }
  void set_multiLine(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B8060))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3_array* get_localCorners() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3_array*(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B8090))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3_array* get_worldCorners() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3_array*(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B8260))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector4 get_drawingDimensions() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector4(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B8290))(this);
  }
  int32_t get_maxLineCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B82E0))(this);
  }
  void set_maxLineCount(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B82F0))(this, value);
  }
  int32_t get_effectStyle() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B83D0))(this);
  }
  void set_effectStyle(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B83E0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Color get_effectColor() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B8400))(this);
  }
  void set_effectColor(ModdingAPI::Exposed::UnityEngine::Color value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B8410))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_effectDistance() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B8480))(this);
  }
  void set_effectDistance(ModdingAPI::Exposed::UnityEngine::Vector2 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B84A0))(this, value);
  }
  bool get_shrinkToFit() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B85A0))(this);
  }
  void set_shrinkToFit(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B85B0))(this, value);
  }
  System_String* get_processedText() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B85E0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_printedSize() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B8660))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_localSize() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B86A0))(this);
  }
  bool get_isValid() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B87F0))(this);
  }
  void OnInit() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B88E0))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B89C0))(this);
  }
  void PreDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B8AA0))(this);
  }
  void ControlTypeChanged() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B8AB0))(this);
  }
  void SetActiveFont(ModdingAPI::Exposed::UnityEngine::Font* fnt) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UnityEngine::Font*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B8C00))(this, fnt);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3_array* GetSides(ModdingAPI::Exposed::UnityEngine::Transform* relativeTo) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3_array*(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B92B0))(this, relativeTo);
  }
  void UpgradeFrom265() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B92F0))(this);
  }
  void OnAnchor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B9510))(this);
  }
  void ProcessAndRequest() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B9660))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B9730))(this);
  }
  void OnStart() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B9920))(this);
  }
  void MarkAsChanged() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B9BD0))(this);
  }
  void CheckForAsianText() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B9BF0))(this);
  }
  void ProcessText() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B9CC0))(this);
  }
  void ProcessText(bool legacyMode, bool full) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B9CD0))(this, legacyMode, full);
  }
  void MakePixelPerfect() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BAA90))(this);
  }
  void AssumeNaturalSize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BAF80))(this);
  }
  int32_t GetCharacterIndex(ModdingAPI::Exposed::UnityEngine::Vector3 worldPos) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BB0F0))(this, worldPos);
  }
  int32_t GetCharacterIndex(ModdingAPI::Exposed::UnityEngine::Vector2 localPos) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BB120))(this, localPos);
  }
  int32_t GetCharacterIndexAtPosition(ModdingAPI::Exposed::UnityEngine::Vector3 worldPos, bool precise) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UnityEngine::Vector3, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BB130))(this, worldPos, precise);
  }
  int32_t GetCharacterIndexAtPosition(ModdingAPI::Exposed::UnityEngine::Vector2 localPos, bool precise) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UnityEngine::Vector2, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BB290))(this, localPos, precise);
  }
  System_String* GetWordAtPosition(ModdingAPI::Exposed::UnityEngine::Vector3 worldPos) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BB690))(this, worldPos);
  }
  System_String* GetWordAtPosition(ModdingAPI::Exposed::UnityEngine::Vector2 localPos) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BB6D0))(this, localPos);
  }
  System_String* GetWordAtCharacterIndex(int32_t characterIndex) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UILabel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BB700))(this, characterIndex);
  }
  System_String* GetUrlAtPosition(ModdingAPI::Exposed::UnityEngine::Vector3 worldPos) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BB930))(this, worldPos);
  }
  System_String* GetUrlAtPosition(ModdingAPI::Exposed::UnityEngine::Vector2 localPos) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BB970))(this, localPos);
  }
  System_String* GetUrlAtCharacterIndex(int32_t characterIndex) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UILabel*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BB9A0))(this, characterIndex);
  }
  int32_t GetCharacterIndex(int32_t currentIndex, ModdingAPI::Exposed::UnityEngine::KeyCode key) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*, int32_t, ModdingAPI::Exposed::UnityEngine::KeyCode)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BBC10))(this, currentIndex, key);
  }
  void PrintOverlay(int32_t start, int32_t end, ModdingAPI::Exposed::UIGeometry* caret, ModdingAPI::Exposed::UIGeometry* highlight, ModdingAPI::Exposed::UnityEngine::Color caretColor, ModdingAPI::Exposed::UnityEngine::Color highlightColor) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, int32_t, int32_t, ModdingAPI::Exposed::UIGeometry*, ModdingAPI::Exposed::UIGeometry*, ModdingAPI::Exposed::UnityEngine::Color, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BC1A0))(this, start, end, caret, highlight, caretColor, highlightColor);
  }
  void OnFill(ModdingAPI::Exposed::BetterList_T_* verts, ModdingAPI::Exposed::BetterList_T_* uvs, ModdingAPI::Exposed::BetterList_T_* cols) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BC700))(this, verts, uvs, cols);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 ApplyOffset(ModdingAPI::Exposed::BetterList_T_* verts, int32_t start) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::BetterList_T_*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BCC70))(this, verts, start);
  }
  void ApplyShadow(ModdingAPI::Exposed::BetterList_T_* verts, ModdingAPI::Exposed::BetterList_T_* uvs, ModdingAPI::Exposed::BetterList_T_* cols, int32_t start, int32_t end, float x, float y) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*, ModdingAPI::Exposed::BetterList_T_*, int32_t, int32_t, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BCE90))(this, verts, uvs, cols, start, end, x, y);
  }
  int32_t CalculateOffsetToFit(System_String* text) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BD560))(this, text);
  }
  void SetCurrentProgress() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BD670))(this);
  }
  void SetCurrentPercent() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BD790))(this);
  }
  void SetCurrentSelection() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BD8F0))(this);
  }
  bool Wrap(System_String* text, System_String* final) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UILabel*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BDA40))(this, text, final);
  }
  bool Wrap(System_String* text, System_String* final, int32_t height) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UILabel*, System_String*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BDB60))(this, text, final, height);
  }
  void UpdateNGUIText() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BDC80))(this);
  }
  void AddDynamicSymbolSprite(ModdingAPI::Exposed::UISprite* uiSprite) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*, ModdingAPI::Exposed::UISprite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BE670))(this, uiSprite);
  }
  void ClearDynamicSymbolSprites() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BE7F0))(this);
  }
  int32_t DetermineProcessedLineCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BE910))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UILabel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BEA70))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::BetterList_T_*> mList = __CppStaticProperty<ModdingAPI::Exposed::BetterList_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->mList; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> mFontUsage = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->mFontUsage; }
  );
  static inline __CppStaticProperty<bool> mTexRebuildAdded = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->mTexRebuildAdded; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::BetterList_T_*> mTempVerts = __CppStaticProperty<ModdingAPI::Exposed::BetterList_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->mTempVerts; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::BetterList_T_*> mTempIndices = __CppStaticProperty<ModdingAPI::Exposed::BetterList_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->mTempIndices; }
  );

  // Static methods:
  static inline void OnFontChanged(ModdingAPI::Exposed::UnityEngine::Font* font) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Font*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24B8F50))(font);
  }
  static inline bool IsUsingCyrillicFont() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BE980))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x24BEBF0))();
  }
};
}