// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __Panel_Repair_Il2CppStaticFields {
};

struct __Panel_Repair_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Panel_Repair_Il2CppClass {
  Il2CppClass_1 _1;
  __Panel_Repair_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Panel_Repair_Il2CppVtbl vtbl;
};

class Panel_Repair {
public:
  // Il2Cpp fields:
  __Panel_Repair_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_SkillIncreaseChanceOnSuccess;
  float m_SkillIncreaseChanceOnFailure;
  float m_RepairTimeSeconds;
  ModdingAPI::Exposed::UITexture* m_ItemBGSprite;
  ModdingAPI::Exposed::UILabel* m_ItemNameLabel;
  ModdingAPI::Exposed::UILabel* m_SkillLabel;
  ModdingAPI::Exposed::UILabel* m_AmountLabel;
  ModdingAPI::Exposed::UILabel* m_ChanceSuccessLabel;
  ModdingAPI::Exposed::UILabel* m_TimeLabel;
  ModdingAPI::Exposed::HarvestRepairMaterial_array* m_RequiredMaterials;
  float m_RequiredMaterialCenteredX;
  float m_RequiredMaterialSpacing;
  ModdingAPI::Exposed::UISlider* m_Slider_RepairProgress;
  ModdingAPI::Exposed::UITexture* m_ToolSprite;
  ModdingAPI::Exposed::UILabel* m_ToolNameLabel;
  ModdingAPI::Exposed::UISprite* m_ToolConditionSprite;
  ModdingAPI::Exposed::UILabel* m_ToolConditionLabel;
  ModdingAPI::Exposed::UnityEngine::Color m_CantRepairTextColor;
  ModdingAPI::Exposed::UnityEngine::Color m_HighConditionColor;
  System_String* m_NoToolSpriteName;
  ModdingAPI::Exposed::UnityEngine::Color m_NoToolSpriteColor;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_NoToolSpriteSizeModifier;
  ModdingAPI::Exposed::GearItem* m_AutoSelectItem;
  bool m_EnableDiaryOnExit;
  float m_ElapsedProgressBarSeconds;
  float m_ProgressBarTimeSeconds;
  bool m_RepairWillSucceed;
  bool m_RepairFailed;
  bool m_RepairSucceeded;
  float m_FailureAtProgressPercentage;
  float m_ElapsedDisplayRepairOutcomeTime;
  float m_DayLengthScaleBeforeRepair;
  int32_t m_SelectedToolIndex;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Tools;
  ModdingAPI::Exposed::WorkBench* m_Workbench;
  uint32_t m_ProgressBarAudio;
  bool m_TimeAccelerated;
  bool m_RepairInProgress;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18947A0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1894890))(this);
  }
  void Enable(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1894960))(this, enable);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x165DF10))(this);
  }
  void OnNextTool() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1894BC0))(this);
  }
  void OnPrevTool() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1894CF0))(this);
  }
  void OnRepair() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1894E10))(this);
  }
  void SetRepairInProgress(bool on) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18956D0))(this, on);
  }
  void ExitInterface() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18956E0))(this);
  }
  void OnCancel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1895900))(this);
  }
  void SetWorkbench(ModdingAPI::Exposed::WorkBench* wb) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*, ModdingAPI::Exposed::WorkBench*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E0D0))(this, wb);
  }
  bool RepairInProgress() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1895AB0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::GameObject* GetSelectedTool() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1895AC0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::GameObject* GetSelectedRepairableItem() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1895B60))(this);
  }
  void RefreshTools() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1895BC0))(this);
  }
  void RefreshMaterialsTable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1895F20))(this);
  }
  float GetChanceSuccess() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1896510))(this);
  }
  void RefreshRepairSkillLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1896780))(this);
  }
  void RefreshChanceSuccessLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1896880))(this);
  }
  void RefreshLabels() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1896F50))(this);
  }
  void DisableProgressBar() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1897880))(this);
  }
  void Refresh() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1897930))(this);
  }
  void DegradeToolUsedForRepair() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1897960))(this);
  }
  void ConsumeMaterialsUsedForRepair() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1897A50))(this);
  }
  void StopProgressBarAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1897C40))(this);
  }
  void RepairFinished() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1897D40))(this);
  }
  void RepairFailed() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18980D0))(this);
  }
  void RepairSuccessful() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18981D0))(this);
  }
  void UpdateRepair() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18983C0))(this);
  }
  bool RollForRepairSuccess() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1898730))(this);
  }
  void RestoreTimeOfDay() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1898860))(this);
  }
  void AccelerateTimeOfDay(int32_t minutes) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1898930))(this, minutes);
  }
  void StartRepair(int32_t durationMinutes, System_String* repairAudio) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1898A30))(this, durationMinutes, repairAudio);
  }
  bool RollForSkillIncrease(bool success) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1898EC0))(this, success);
  }
  void UpdateSkillAfterRepair(bool success) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1898FA0))(this, success);
  }
  int32_t GetModifiedRepairDuration(ModdingAPI::Exposed::Repairable* r, int32_t baseMinutes) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*, ModdingAPI::Exposed::Repairable*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1899200))(this, r, baseMinutes);
  }
  bool ToolCanRepairSelectedItem(ModdingAPI::Exposed::UnityEngine::GameObject* toolObject) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1899470))(this, toolObject);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_Repair*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18996A0))(this);
  }
};
}