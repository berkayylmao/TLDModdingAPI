// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Runtime.Serialization.StreamingContext.hpp"
#include "ModdingAPI::Exposed::System::Threading::ExecutionContextSwitcher.hpp"
#include "ModdingAPI.Exposed.System.Threading.ExecutionContextSwitcher.hpp"


namespace ModdingAPI::Exposed::System::Threading {
struct __ExecutionContext_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Threading::ExecutionContext* s_dummyDefaultEC;
};

struct __ExecutionContext_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Dispose;
  VirtualInvokeData _5_GetObjectData;
};

struct __ExecutionContext_Il2CppClass {
  Il2CppClass_1 _1;
  __ExecutionContext_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ExecutionContext_Il2CppVtbl vtbl;
};

class ExecutionContext {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C552E8;
  static inline    __ExecutionContext_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ExecutionContext_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ExecutionContext_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ExecutionContext_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Threading::SynchronizationContext* _syncContext;
  ModdingAPI::Exposed::System::Threading::SynchronizationContext* _syncContextNoFlow;
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::LogicalCallContext* _logicalCallContext;
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IllogicalCallContext* _illogicalCallContext;
  int32_t _flags;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* _localValues;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* _localChangeNotifications;

  // Member methods:
  bool get_isNewCapture() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1091650))(this);
  }
  void set_isNewCapture(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1091660))(this, value);
  }
  bool get_isFlowSuppressed() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1091680))(this);
  }
  void set_isFlowSuppressed(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1091690))(this, value);
  }
  bool get_IsPreAllocatedDefault() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1091750))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void ::ctor(bool isPreAllocatedDefault) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1091760))(this, isPreAllocatedDefault);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::LogicalCallContext* get_LogicalCallContext() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::LogicalCallContext*(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10921E0))(this);
  }
  void set_LogicalCallContext(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::LogicalCallContext* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*, ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::LogicalCallContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x310F00))(this, value);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IllogicalCallContext* get_IllogicalCallContext() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IllogicalCallContext*(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1092330))(this);
  }
  void set_IllogicalCallContext(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IllogicalCallContext* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*, ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IllogicalCallContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110C0))(this, value);
  }
  ModdingAPI::Exposed::System::Threading::SynchronizationContext* get_SynchronizationContext() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::SynchronizationContext*(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  void set_SynchronizationContext(ModdingAPI::Exposed::System::Threading::SynchronizationContext* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*, ModdingAPI::Exposed::System::Threading::SynchronizationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, value);
  }
  ModdingAPI::Exposed::System::Threading::SynchronizationContext* get_SynchronizationContextNoFlow() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::SynchronizationContext*(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  void set_SynchronizationContextNoFlow(ModdingAPI::Exposed::System::Threading::SynchronizationContext* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*, ModdingAPI::Exposed::System::Threading::SynchronizationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3E0))(this, value);
  }
  void Dispose() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x40B4A0))(this);
  }
  ModdingAPI::Exposed::System::Threading::ExecutionContext* CreateCopy() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::ExecutionContext*(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1092C30))(this);
  }
  ModdingAPI::Exposed::System::Threading::ExecutionContext* CreateMutableCopy() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::ExecutionContext*(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1092E50))(this);
  }
  void GetObjectData(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo* info, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*, ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093480))(this, info, context);
  }
  void ::ctor(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo* info, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*, ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10935A0))(this, info, context);
  }
  bool IsDefaultFTContext(bool ignoreSyncCtx) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10936D0))(this, ignoreSyncCtx);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Threading::ExecutionContext*> s_dummyDefaultEC = __CppStaticProperty<ModdingAPI::Exposed::System::Threading::ExecutionContext*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_dummyDefaultEC; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::System::Threading::ExecutionContext* get_PreAllocatedDefault() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::ExecutionContext*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10916B0))();
  }
  static inline Il2CppObject* GetLocalValue(ModdingAPI::Exposed::System::Threading::IAsyncLocal* local) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Threading::IAsyncLocal*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1091770))(local);
  }
  static inline void SetLocalValue(ModdingAPI::Exposed::System::Threading::IAsyncLocal* local, Il2CppObject* newValue, bool needChangeNotifications) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::IAsyncLocal*, Il2CppObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10917B0))(local, newValue, needChangeNotifications);
  }
  static inline void OnAsyncLocalContextChanged(ModdingAPI::Exposed::System::Threading::ExecutionContext* previous, ModdingAPI::Exposed::System::Threading::ExecutionContext* current) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*, ModdingAPI::Exposed::System::Threading::ExecutionContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1091D20))(previous, current);
  }
  static inline void Run(ModdingAPI::Exposed::System::Threading::ExecutionContext* executionContext, ModdingAPI::Exposed::System::Threading::ContextCallback* callback, Il2CppObject* state) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*, ModdingAPI::Exposed::System::Threading::ContextCallback*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1092480))(executionContext, callback, state);
  }
  static inline void Run(ModdingAPI::Exposed::System::Threading::ExecutionContext* executionContext, ModdingAPI::Exposed::System::Threading::ContextCallback* callback, Il2CppObject* state, bool preserveSyncCtx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*, ModdingAPI::Exposed::System::Threading::ContextCallback*, Il2CppObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10925D0))(executionContext, callback, state, preserveSyncCtx);
  }
  static inline void RunInternal(ModdingAPI::Exposed::System::Threading::ExecutionContext* executionContext, ModdingAPI::Exposed::System::Threading::ContextCallback* callback, Il2CppObject* state, bool preserveSyncCtx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*, ModdingAPI::Exposed::System::Threading::ContextCallback*, Il2CppObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10926B0))(executionContext, callback, state, preserveSyncCtx);
  }
  static inline void EstablishCopyOnWriteScope(ModdingAPI::Exposed::System::Threading::ExecutionContextSwitcher ecsw) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContextSwitcher)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10929B0))(ecsw);
  }
  static inline void EstablishCopyOnWriteScope(ModdingAPI::Exposed::System::Threading::Thread* currentThread, bool knownNullWindowsIdentity, ModdingAPI::Exposed::System::Threading::ExecutionContextSwitcher ecsw) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Thread*, bool, ModdingAPI::Exposed::System::Threading::ExecutionContextSwitcher)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1092A80))(currentThread, knownNullWindowsIdentity, ecsw);
  }
  static inline ModdingAPI::Exposed::System::Threading::ExecutionContextSwitcher SetExecutionContext(ModdingAPI::Exposed::System::Threading::ExecutionContext* executionContext, bool preserveSyncCtx) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::ExecutionContextSwitcher(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1092AB0))(executionContext, preserveSyncCtx);
  }
  static inline bool IsFlowSuppressed() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093060))();
  }
  static inline ModdingAPI::Exposed::System::Threading::ExecutionContext* Capture() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::ExecutionContext*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093090))();
  }
  static inline ModdingAPI::Exposed::System::Threading::ExecutionContext* FastCapture() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::ExecutionContext*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093130))();
  }
  static inline ModdingAPI::Exposed::System::Threading::ExecutionContext* Capture(int32_t stackMark, int32_t options) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::ExecutionContext*(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10931D0))(stackMark, options);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093770))();
  }
};
}