// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __BrokenRib_Il2CppStaticFields {
  ModdingAPI::Exposed::BrokenRibSaveDataProxy* m_BrokenRibSaveDataProxy;
};

struct __BrokenRib_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __BrokenRib_Il2CppClass {
  Il2CppClass_1 _1;
  __BrokenRib_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __BrokenRib_Il2CppVtbl vtbl;
};

class BrokenRib {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C3FA08;
  static inline    __BrokenRib_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __BrokenRib_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__BrokenRib_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __BrokenRib_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::LocalizedString* m_LocalizedDisplayName;
  ModdingAPI::Exposed::LocalizedString* m_LocalizedDescription;
  float m_FirstRibRecoveryTimeDays;
  float m_SecondaryRibRecoveryTimeDays;
  float m_SprintStaminaReduction;
  float m_CarryingCapacityReduction;
  int32_t m_PainKillersRequiredPerInstance;
  int32_t m_BandagesRequiredPerInstance;
  System_String* m_StartAudioID;
  System_String* m_BrokenRibVO;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_CausesLocIDs;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Locations;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_PainKillersTaken;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_BandagesApplied;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_ElapsedRestList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_NumHoursRestForCureList;
  bool m_StartHasBeenCalled;

  // Member methods:
  System_String* get_m_DisplayName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::BrokenRib*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E35A0))(this);
  }
  System_String* get_m_Description() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::BrokenRib*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E35C0))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BrokenRib*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1822050))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BrokenRib*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18221C0))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::BrokenRib*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1822400))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BrokenRib*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18227F0))(this, text);
  }
  bool LocationAvailable() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BrokenRib*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x403F70))(this);
  }
  void PlayBrokenRibAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BrokenRib*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1822F60))(this);
  }
  void BrokenRibStart(System_String* causeID, bool displayIcon, bool noVO, bool isMinor) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BrokenRib*, System_String*, bool, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18230B0))(this, causeID, displayIcon, noVO, isMinor);
  }
  int32_t GetIndexFromLocation(int32_t area) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BrokenRib*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18237A0))(this, area);
  }
  void BrokenRibEnd(int32_t localIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BrokenRib*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1823880))(this, localIndex);
  }
  bool RequiresBandage(int32_t localIndex) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BrokenRib*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1823CC0))(this, localIndex);
  }
  int32_t GetRequiredBandages(int32_t localIndex) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BrokenRib*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1823D90))(this, localIndex);
  }
  bool RequiresPainKiller(int32_t localIndex) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BrokenRib*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1823E70))(this, localIndex);
  }
  int32_t GetRequiredPainKiller(int32_t localIndex) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BrokenRib*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1823F40))(this, localIndex);
  }
  int32_t GetLocation(int32_t index) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BrokenRib*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1824020))(this, index);
  }
  bool HasBrokenRib() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::BrokenRib*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18240F0))(this);
  }
  ModdingAPI::Exposed::System::String_array* GetCauseLocIDList() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::BrokenRib*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1824110))(this);
  }
  int32_t GetBrokenRibCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BrokenRib*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18241A0))(this);
  }
  int32_t GetAfflictionsCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::BrokenRib*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1824230))(this);
  }
  System_String* GetAfflictionCauseLocalizationId(int32_t localAfflictionIndex) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::BrokenRib*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1824240))(this, localAfflictionIndex);
  }
  void TakePainKillers(int32_t localAfflictionIndex, int32_t paintKillerCount) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BrokenRib*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1824310))(this, localAfflictionIndex, paintKillerCount);
  }
  void ApplyBandage(int32_t localAfflictionIndex, int32_t bandageCount) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BrokenRib*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18243F0))(this, localAfflictionIndex, bandageCount);
  }
  void Cure() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BrokenRib*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18244D0))(this);
  }
  void AddRest(float hours) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BrokenRib*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1824580))(this, hours);
  }
  float GetRestAmountRemaining(int32_t index) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::BrokenRib*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1824790))(this, index);
  }
  float GetNumHoursRestForCure(int32_t index) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::BrokenRib*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18248A0))(this, index);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::BrokenRib*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1824950))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::BrokenRibSaveDataProxy*> m_BrokenRibSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::BrokenRibSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_BrokenRibSaveDataProxy; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1825210))();
  }
};
}