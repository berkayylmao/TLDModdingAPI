// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::Unity::Mathematics::float2.hpp"
#include "ModdingAPI::Exposed::Unity::Mathematics::float3.hpp"
#include "ModdingAPI::Exposed::Unity::Mathematics::float4.hpp"
#include "ModdingAPI.Exposed.Unity.Mathematics.uint2.hpp"
#include "ModdingAPI.Exposed.Unity.Mathematics.uint3.hpp"
#include "ModdingAPI.Exposed.Unity.Mathematics.uint4.hpp"
#include "ModdingAPI::Exposed::Unity::Mathematics::uint2.hpp"
#include "ModdingAPI::Exposed::Unity::Mathematics::uint3.hpp"
#include "ModdingAPI::Exposed::Unity::Mathematics::uint4.hpp"


namespace ModdingAPI::Exposed::Unity::Mathematics {
struct __math_Il2CppStaticFields {
};

struct __math_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __math_Il2CppClass {
  Il2CppClass_1 _1;
  __math_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __math_Il2CppVtbl vtbl;
};

class math {
public:
  // Il2Cpp fields:
  __math_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline uint32_t hash(ModdingAPI::Exposed::Unity::Mathematics::float2 v) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Unity::Mathematics::float2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x153AE20))(v);
  }
  static inline uint32_t hash(ModdingAPI::Exposed::Unity::Mathematics::float3 v) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Unity::Mathematics::float3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x153AEA0))(v);
  }
  static inline uint32_t hash(ModdingAPI::Exposed::Unity::Mathematics::float4 v) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Unity::Mathematics::float4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x153AF40))(v);
  }
  static inline int32_t asint(float x) {
    return reinterpret_cast<int32_t(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x802520))(x);
  }
  static inline uint32_t asuint(float x) {
    return reinterpret_cast<uint32_t(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x802520))(x);
  }
  static inline ModdingAPI::Exposed::Unity::Mathematics::uint2 asuint(ModdingAPI::Exposed::Unity::Mathematics::float2 x) {
    return reinterpret_cast<ModdingAPI::Exposed::Unity::Mathematics::uint2(__fastcall*)(ModdingAPI::Exposed::Unity::Mathematics::float2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x153B020))(x);
  }
  static inline ModdingAPI::Exposed::Unity::Mathematics::uint3 asuint(ModdingAPI::Exposed::Unity::Mathematics::float3 x) {
    return reinterpret_cast<ModdingAPI::Exposed::Unity::Mathematics::uint3(__fastcall*)(ModdingAPI::Exposed::Unity::Mathematics::float3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x153B060))(x);
  }
  static inline ModdingAPI::Exposed::Unity::Mathematics::uint4 asuint(ModdingAPI::Exposed::Unity::Mathematics::float4 x) {
    return reinterpret_cast<ModdingAPI::Exposed::Unity::Mathematics::uint4(__fastcall*)(ModdingAPI::Exposed::Unity::Mathematics::float4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x153B0D0))(x);
  }
  static inline uint32_t csum(ModdingAPI::Exposed::Unity::Mathematics::uint2 x) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Unity::Mathematics::uint2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x153B130))(x);
  }
  static inline uint32_t csum(ModdingAPI::Exposed::Unity::Mathematics::uint3 x) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Unity::Mathematics::uint3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x153B140))(x);
  }
  static inline uint32_t csum(ModdingAPI::Exposed::Unity::Mathematics::uint4 x) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Unity::Mathematics::uint4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x153B170))(x);
  }
  static inline ModdingAPI::Exposed::Unity::Mathematics::uint2 uint2(uint32_t x, uint32_t y) {
    return reinterpret_cast<ModdingAPI::Exposed::Unity::Mathematics::uint2(__fastcall*)(uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x153B1B0))(x, y);
  }
  static inline uint32_t hash(ModdingAPI::Exposed::Unity::Mathematics::uint2 v) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Unity::Mathematics::uint2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x153B1C0))(v);
  }
  static inline ModdingAPI::Exposed::Unity::Mathematics::uint3 uint3(uint32_t x, uint32_t y, uint32_t z) {
    return reinterpret_cast<ModdingAPI::Exposed::Unity::Mathematics::uint3(__fastcall*)(uint32_t, uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x153B210))(x, y, z);
  }
  static inline uint32_t hash(ModdingAPI::Exposed::Unity::Mathematics::uint3 v) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Unity::Mathematics::uint3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x153B220))(v);
  }
  static inline ModdingAPI::Exposed::Unity::Mathematics::uint4 uint4(uint32_t x, uint32_t y, uint32_t z, uint32_t w) {
    return reinterpret_cast<ModdingAPI::Exposed::Unity::Mathematics::uint4(__fastcall*)(uint32_t, uint32_t, uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x153B2A0))(x, y, z, w);
  }
  static inline uint32_t hash(ModdingAPI::Exposed::Unity::Mathematics::uint4 v) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Unity::Mathematics::uint4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x153B2C0))(v);
  }
};
}