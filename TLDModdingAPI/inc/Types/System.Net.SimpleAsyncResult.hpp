// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Nullable_T_.hpp"


namespace ModdingAPI::Exposed::System::Net {
struct __SimpleAsyncResult_Il2CppStaticFields {
};

struct __SimpleAsyncResult_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_IsCompleted;
  VirtualInvokeData _5_get_AsyncWaitHandle;
  VirtualInvokeData _6_get_AsyncState;
  VirtualInvokeData _7_get_CompletedSynchronously;
};

struct __SimpleAsyncResult_Il2CppClass {
  Il2CppClass_1 _1;
  __SimpleAsyncResult_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SimpleAsyncResult_Il2CppVtbl vtbl;
};

class SimpleAsyncResult {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C40AD8;
  static inline    __SimpleAsyncResult_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __SimpleAsyncResult_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__SimpleAsyncResult_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __SimpleAsyncResult_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Threading::ManualResetEvent* handle;
  bool synch;
  bool isCompleted;
  ModdingAPI::Exposed::System::Net::SimpleAsyncCallback* cb;
  Il2CppObject* state;
  bool callbackDone;
  ModdingAPI::Exposed::System::Exception* exc;
  Il2CppObject* locker;
  ModdingAPI::Exposed::System::Nullable_T_ user_read_synch;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Net::SimpleAsyncCallback* cb) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::SimpleAsyncResult*, ModdingAPI::Exposed::System::Net::SimpleAsyncCallback*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB26390))(this, cb);
  }
  void ::ctor(ModdingAPI::Exposed::System::AsyncCallback* cb, Il2CppObject* state) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::SimpleAsyncResult*, ModdingAPI::Exposed::System::AsyncCallback*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB264E0))(this, cb, state);
  }
  void Reset_internal() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::SimpleAsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB26DF0))(this);
  }
  void SetCompleted(bool synch, ModdingAPI::Exposed::System::Exception* e) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::SimpleAsyncResult*, bool, ModdingAPI::Exposed::System::Exception*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB26EE0))(this, synch, e);
  }
  void SetCompleted(bool synch) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::SimpleAsyncResult*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB26F20))(this, synch);
  }
  void SetCompleted_internal(bool synch, ModdingAPI::Exposed::System::Exception* e) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::SimpleAsyncResult*, bool, ModdingAPI::Exposed::System::Exception*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB26F60))(this, synch, e);
  }
  void SetCompleted_internal(bool synch) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::SimpleAsyncResult*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB27050))(this, synch);
  }
  void DoCallback_private() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::SimpleAsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB27060))(this);
  }
  void DoCallback_internal() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::SimpleAsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAF70B0))(this);
  }
  void WaitUntilComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::SimpleAsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB27090))(this);
  }
  bool WaitUntilComplete(int32_t timeout, bool exitContext) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::SimpleAsyncResult*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB270E0))(this, timeout, exitContext);
  }
  Il2CppObject* get_AsyncState() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Net::SimpleAsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110B0))(this);
  }
  ModdingAPI::Exposed::System::Threading::WaitHandle* get_AsyncWaitHandle() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::WaitHandle*(__fastcall*)(ModdingAPI::Exposed::System::Net::SimpleAsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB27160))(this);
  }
  bool get_CompletedSynchronously() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::SimpleAsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB273B0))(this);
  }
  bool get_CompletedSynchronouslyPeek() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::SimpleAsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x318510))(this);
  }
  bool get_IsCompleted() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::SimpleAsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB27570))(this);
  }
  bool get_GotException() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::SimpleAsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB27660))(this);
  }
  ModdingAPI::Exposed::System::Exception* get_Exception() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Net::SimpleAsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319970))(this);
  }

  // Static methods:
  static inline void Run(ModdingAPI::Exposed::System::Func_T__TResult_* func, ModdingAPI::Exposed::System::Net::SimpleAsyncCallback* callback) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Func_T__TResult_*, ModdingAPI::Exposed::System::Net::SimpleAsyncCallback*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB267E0))(func, callback);
  }
  static inline void RunWithLock(Il2CppObject* locker, ModdingAPI::Exposed::System::Func_T__TResult_* func, ModdingAPI::Exposed::System::Net::SimpleAsyncCallback* callback) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*, ModdingAPI::Exposed::System::Func_T__TResult_*, ModdingAPI::Exposed::System::Net::SimpleAsyncCallback*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xB26AD0))(locker, func, callback);
  }
};
}