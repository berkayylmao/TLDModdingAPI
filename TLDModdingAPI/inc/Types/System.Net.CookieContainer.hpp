// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Net {
struct __CookieContainer_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Net::HeaderVariantInfo_array* HeaderInfo;
};

struct __CookieContainer_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __CookieContainer_Il2CppClass {
  Il2CppClass_1 _1;
  __CookieContainer_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CookieContainer_Il2CppVtbl vtbl;
};

class CookieContainer {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C41110;
  static inline    __CookieContainer_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __CookieContainer_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__CookieContainer_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __CookieContainer_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Collections::Hashtable* m_domainTable;
  int32_t m_maxCookieSize;
  int32_t m_maxCookies;
  int32_t m_maxCookiesPerDomain;
  int32_t m_count;
  System_String* m_fqdnMyDomain;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::CookieContainer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x912050))(this);
  }
  void AddRemoveDomain(System_String* key, ModdingAPI::Exposed::System::Net::PathList* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::CookieContainer*, System_String*, ModdingAPI::Exposed::System::Net::PathList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x912220))(this, key, value);
  }
  void Add(ModdingAPI::Exposed::System::Net::Cookie* cookie, bool throwOnError) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::CookieContainer*, ModdingAPI::Exposed::System::Net::Cookie*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x912380))(this, cookie, throwOnError);
  }
  bool AgeCookies(System_String* domain) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::CookieContainer*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x912CB0))(this, domain);
  }
  int32_t ExpireCollection(ModdingAPI::Exposed::System::Net::CookieCollection* cc) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Net::CookieContainer*, ModdingAPI::Exposed::System::Net::CookieCollection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x913BD0))(this, cc);
  }
  bool IsLocalDomain(System_String* host) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Net::CookieContainer*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x913D60))(this, host);
  }
  ModdingAPI::Exposed::System::Net::CookieCollection* CookieCutter(ModdingAPI::Exposed::System::Uri* uri, System_String* headerName, System_String* setCookieHeader, bool isThrow) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Net::CookieCollection*(__fastcall*)(ModdingAPI::Exposed::System::Net::CookieContainer*, ModdingAPI::Exposed::System::Uri*, System_String*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x914180))(this, uri, headerName, setCookieHeader, isThrow);
  }
  ModdingAPI::Exposed::System::Net::CookieCollection* InternalGetCookies(ModdingAPI::Exposed::System::Uri* uri) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Net::CookieCollection*(__fastcall*)(ModdingAPI::Exposed::System::Net::CookieContainer*, ModdingAPI::Exposed::System::Uri*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x914AE0))(this, uri);
  }
  void BuildCookieCollectionFromDomainMatches(ModdingAPI::Exposed::System::Uri* uri, bool isSecure, int32_t port, ModdingAPI::Exposed::System::Net::CookieCollection* cookies, ModdingAPI::Exposed::System::Collections::Generic::List_T_* domainAttribute, bool matchOnlyPlainCookie) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::CookieContainer*, ModdingAPI::Exposed::System::Uri*, bool, int32_t, ModdingAPI::Exposed::System::Net::CookieCollection*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x915090))(this, uri, isSecure, port, cookies, domainAttribute, matchOnlyPlainCookie);
  }
  void MergeUpdateCollections(ModdingAPI::Exposed::System::Net::CookieCollection* destination, ModdingAPI::Exposed::System::Net::CookieCollection* source, int32_t port, bool isSecure, bool isPlainOnly) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Net::CookieContainer*, ModdingAPI::Exposed::System::Net::CookieCollection*, ModdingAPI::Exposed::System::Net::CookieCollection*, int32_t, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x915770))(this, destination, source, port, isSecure, isPlainOnly);
  }
  System_String* GetCookieHeader(ModdingAPI::Exposed::System::Uri* uri) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Net::CookieContainer*, ModdingAPI::Exposed::System::Uri*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9159B0))(this, uri);
  }
  System_String* GetCookieHeader(ModdingAPI::Exposed::System::Uri* uri, System_String* optCookie2) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Net::CookieContainer*, ModdingAPI::Exposed::System::Uri*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x915AA0))(this, uri, optCookie2);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Net::HeaderVariantInfo_array*> HeaderInfo = __CppStaticProperty<ModdingAPI::Exposed::System::Net::HeaderVariantInfo_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->HeaderInfo; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x915DB0))();
  }
};
}