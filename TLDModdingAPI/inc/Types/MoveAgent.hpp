// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __MoveAgent_Il2CppStaticFields {
};

struct __MoveAgent_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __MoveAgent_Il2CppClass {
  Il2CppClass_1 _1;
  __MoveAgent_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MoveAgent_Il2CppVtbl vtbl;
};

class MoveAgent {
public:
  // Il2Cpp fields:
  __MoveAgent_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_RotationSpeed;
  float m_MaxSpeed;
  ModdingAPI::Exposed::UnityEngine::Transform* m_Target;
  float m_RotationThreshold;
  float m_SpeedScalar;
  bool m_AnimatedTurns;
  float m_AnimatedTurnAngleScalar;
  bool m_AnimatedHeadTurns;
  float m_VerticalAdjustmentOnWarp;
  float m_RotationSpeedScale;
  ModdingAPI::Exposed::BaseAi* m_BaseAiOwner;
  ModdingAPI::Exposed::UnityEngine::AI::NavMeshAgent* m_Agent;
  ModdingAPI::Exposed::UnityEngine::Animator* m_Animator;
  int32_t m_AnimParameter_Speed;
  int32_t m_AnimParameter_AiState;
  int32_t m_IdleState;
  int32_t m_MoveState;
  bool m_DestinationReached;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_PreviousPosition;
  float m_DeltaAngleSmooth;
  float m_DeltaHeadAngleSmooth;
  ModdingAPI::Exposed::AiTarget* m_OverrideAnimatedTurnTarget;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_RampRanges;
  float m_RampSpeed;
  float m_Acceleration;
  float m_DefaultAcceleration;
  bool m_Enabled;
  int32_t m_CurrentAnimState;

  // Member methods:
  void Initialize(ModdingAPI::Exposed::BaseAi* owner, ModdingAPI::Exposed::UnityEngine::Vector3 position) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoveAgent*, ModdingAPI::Exposed::BaseAi*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D7F840))(this, owner, position);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD6CC0))(this);
  }
  void Enable(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoveAgent*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D7FAB0))(this, enable);
  }
  float GetMaxSpeed() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x79C3E0))(this);
  }
  float GetRampSpeed() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C97620))(this);
  }
  float GetDesiredSpeed() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D7FB30))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetVelocity() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D7FB90))(this);
  }
  float GetAcceleration() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D7FC20))(this);
  }
  float GetCurrentSpeed() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D7FC80))(this);
  }
  bool IsOnNavMesh() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D7FD10))(this);
  }
  bool HasPath() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D7FD70))(this);
  }
  float GetRemainingDistance() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D7FE40))(this);
  }
  int32_t GetPathState() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D7FEA0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetDestination() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D7FF00))(this);
  }
  float GetRadius() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D7FF90))(this);
  }
  void SetAnimState(int32_t moveState, int32_t animState) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoveAgent*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D7FFF0))(this, moveState, animState);
  }
  bool RotateTowards(ModdingAPI::Exposed::UnityEngine::Vector3 direction) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MoveAgent*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D802B0))(this, direction);
  }
  void PointTowardsDirection(ModdingAPI::Exposed::UnityEngine::Vector3 dir) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoveAgent*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D806A0))(this, dir);
  }
  void AdjustModelVerticalOnWarp() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D80A70))(this);
  }
  bool Warp(ModdingAPI::Exposed::UnityEngine::Vector3 position, float radius, bool findClosestPoint, int32_t areaMask) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MoveAgent*, ModdingAPI::Exposed::UnityEngine::Vector3, float, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D80C40))(this, position, radius, findClosestPoint, areaMask);
  }
  bool CanFindPath(ModdingAPI::Exposed::UnityEngine::Vector3 destination, int32_t minPathRequirement) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MoveAgent*, ModdingAPI::Exposed::UnityEngine::Vector3, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D81020))(this, destination, minPathRequirement);
  }
  int32_t CanFindPathStatus(ModdingAPI::Exposed::UnityEngine::Vector3 destination) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MoveAgent*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D812A0))(this, destination);
  }
  bool IsDestinationSafe(ModdingAPI::Exposed::UnityEngine::Vector3 destination) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MoveAgent*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D814B0))(this, destination);
  }
  bool ProcessDestination(ModdingAPI::Exposed::UnityEngine::Vector3 destination, bool processImmediate) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MoveAgent*, ModdingAPI::Exposed::UnityEngine::Vector3, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D81890))(this, destination, processImmediate);
  }
  bool SetDestination(ModdingAPI::Exposed::UnityEngine::Vector3 destination, float radius, bool findClosestPoint, int32_t areaMask, bool processImmediate, ModdingAPI::Exposed::AiTarget* overrideTarget) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MoveAgent*, ModdingAPI::Exposed::UnityEngine::Vector3, float, bool, int32_t, bool, ModdingAPI::Exposed::AiTarget*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D81C50))(this, destination, radius, findClosestPoint, areaMask, processImmediate, overrideTarget);
  }
  void SetMoveSpeed(float speed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoveAgent*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D820A0))(this, speed);
  }
  void Stop() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D822A0))(this);
  }
  void SwitchToIdleAnim() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D82740))(this);
  }
  void SetDebugSphere(ModdingAPI::Exposed::UnityEngine::Vector3 position, float radius, ModdingAPI::Exposed::UnityEngine::Color color) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoveAgent*, ModdingAPI::Exposed::UnityEngine::Vector3, float, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, position, radius, color);
  }
  int32_t GetAnimState() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1BD6CB0))(this);
  }
  bool HasReachedDestination() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6C1CD0))(this);
  }
  void SetAnimationParameters(int32_t animState, float speed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoveAgent*, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D82750))(this, animState, speed);
  }
  void UpdateAnimatedTurns() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D82850))(this);
  }
  void UpdateAnimatedHeadTurns() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D82BA0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D83020))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoveAgent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D83710))(this);
  }

  // Static methods:
  static inline bool FindRandomPointWithinRadius(ModdingAPI::Exposed::UnityEngine::Vector3 center, float radius, ModdingAPI::Exposed::UnityEngine::Vector3 result, int32_t areaMask) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, float, ModdingAPI::Exposed::UnityEngine::Vector3, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D80040))(center, radius, result, areaMask);
  }
};
}