// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Xml.XmlCharType.hpp"

namespace ModdingAPI::Exposed::System::Xml {
struct __XmlCharType_Il2CppObject {
  ModdingAPI::Exposed::System::Byte_array* charProperties;
};
struct __XmlCharType_Il2CppStaticFields {
  Il2CppObject* s_Lock;
  ModdingAPI::Exposed::System::Byte_array* s_CharProperties;
};

struct __XmlCharType_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __XmlCharType_Il2CppClass {
  Il2CppClass_1 _1;
  __XmlCharType_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __XmlCharType_Il2CppVtbl vtbl;
};

class XmlCharType {
  static constexpr uint64_t _rvaClassInstance     = 0x3C65A40;
  static inline    __XmlCharType_Il2CppClass* _pStaticClassInstance = nullptr;

public:
  // Static class getter:
  static inline __XmlCharType_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__XmlCharType_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Member fields:
  ModdingAPI::Exposed::System::Byte_array* charProperties;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Byte_array* charProperties) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlCharType*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2C00))(this, charProperties);
  }
  bool IsWhiteSpace(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlCharType*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x214B0))(this, ch);
  }
  bool IsNCNameSingleChar(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlCharType*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x214F0))(this, ch);
  }
  bool IsStartNCNameSingleChar(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlCharType*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21530))(this, ch);
  }
  bool IsNameSingleChar(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlCharType*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21570))(this, ch);
  }
  bool IsCharData(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlCharType*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x215C0))(this, ch);
  }
  bool IsPubidChar(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlCharType*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21600))(this, ch);
  }
  bool IsTextChar(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlCharType*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21610))(this, ch);
  }
  bool IsLetter(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlCharType*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21650))(this, ch);
  }
  bool IsNCNameCharXml4e(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlCharType*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21690))(this, ch);
  }
  bool IsStartNCNameCharXml4e(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlCharType*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x216D0))(this, ch);
  }
  bool IsNameCharXml4e(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlCharType*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21720))(this, ch);
  }
  bool IsOnlyWhitespace(System_String* str) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlCharType*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21770))(this, str);
  }
  int32_t IsOnlyWhitespaceWithPos(System_String* str) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlCharType*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21790))(this, str);
  }
  int32_t IsOnlyCharData(System_String* str) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlCharType*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x217A0))(this, str);
  }
  int32_t IsPublicId(System_String* str) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlCharType*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x217B0))(this, str);
  }

  // Static methods:
  static inline Il2CppObject* get_StaticLock() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x9C1B60))();
  }
  static inline void InitInstance() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x9C1CD0))();
  }
  static inline void SetProperties(System_String* ranges, uint8_t value) {
    reinterpret_cast<void(__fastcall*)(System_String*, uint8_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9C2030))(ranges, value);
  }
  static inline ModdingAPI::Exposed::System::Xml::XmlCharType get_Instance() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlCharType(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x9C2150))();
  }
  static inline bool IsDigit(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9C23A0))(ch);
  }
  static inline bool IsHighSurrogate(int32_t ch) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9C23B0))(ch);
  }
  static inline bool IsLowSurrogate(int32_t ch) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9C23C0))(ch);
  }
  static inline bool IsSurrogate(int32_t ch) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9C23D0))(ch);
  }
  static inline int32_t CombineSurrogateChar(int32_t lowChar, int32_t highChar) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9C23E0))(lowChar, highChar);
  }
  static inline void SplitSurrogateChar(int32_t combinedChar, wchar_t lowChar, wchar_t highChar) {
    reinterpret_cast<void(__fastcall*)(int32_t, wchar_t, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9C2400))(combinedChar, lowChar, highChar);
  }
  static inline bool IsOnlyDigits(System_String* str, int32_t startPos, int32_t len) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9C25A0))(str, startPos, len);
  }
  static inline bool InRange(int32_t value, int32_t start, int32_t end) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9C2670))(value, start, end);
  }

};
}