// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Mono::Math::BigInteger {
struct __Kernel_Duplicate1_Il2CppStaticFields {
};

struct __Kernel_Duplicate1_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Kernel_Duplicate1_Il2CppClass {
  Il2CppClass_1 _1;
  __Kernel_Duplicate1_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Kernel_Duplicate1_Il2CppVtbl vtbl;
};

class Kernel_Duplicate1 {
public:
  // Il2Cpp fields:
  __Kernel_Duplicate1_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* Subtract(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* big, ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* small) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B4EF0))(big, small);
  }
  static inline void MinusEq(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* big, ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* small) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDC14A0))(big, small);
  }
  static inline void PlusEq(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* bi1, ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* bi2) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDC1640))(bi1, bi2);
  }
  static inline int32_t Compare(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* bi1, ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* bi2) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDC18F0))(bi1, bi2);
  }
  static inline uint32_t SingleByteDivideInPlace(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* n, uint32_t d) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDC1AF0))(n, d);
  }
  static inline uint32_t DwordMod(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* n, uint32_t d) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDBE900))(n, d);
  }
  static inline ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1_array* DwordDivMod(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* n, uint32_t d) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1_array*(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B5290))(n, d);
  }
  static inline ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1_array* multiByteDivide(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* bi1, ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* bi2) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1_array*(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B55F0))(bi1, bi2);
  }
  static inline ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* LeftShift(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* bi, int32_t n) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B60F0))(bi, n);
  }
  static inline ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* RightShift(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* bi, int32_t n) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B65F0))(bi, n);
  }
  static inline void Multiply(ModdingAPI::Exposed::System::UInt32_array* x, uint32_t xOffset, uint32_t xLen, ModdingAPI::Exposed::System::UInt32_array* y, uint32_t yOffset, uint32_t yLen, ModdingAPI::Exposed::System::UInt32_array* d, uint32_t dOffset) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::UInt32_array*, uint32_t, uint32_t, ModdingAPI::Exposed::System::UInt32_array*, uint32_t, uint32_t, ModdingAPI::Exposed::System::UInt32_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDC35A0))(x, xOffset, xLen, y, yOffset, yLen, d, dOffset);
  }
  static inline void MultiplyMod2p32pmod(ModdingAPI::Exposed::System::UInt32_array* x, int32_t xOffset, int32_t xLen, ModdingAPI::Exposed::System::UInt32_array* y, int32_t yOffest, int32_t yLen, ModdingAPI::Exposed::System::UInt32_array* d, int32_t dOffset, int32_t mod) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::UInt32_array*, int32_t, int32_t, ModdingAPI::Exposed::System::UInt32_array*, int32_t, int32_t, ModdingAPI::Exposed::System::UInt32_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDC36F0))(x, xOffset, xLen, y, yOffest, yLen, d, dOffset, mod);
  }
  static inline uint32_t modInverse(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* bi, uint32_t modulus) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B69B0))(bi, modulus);
  }
  static inline ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* modInverse(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* bi, ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1* modulus) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*(__fastcall*)(ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*, ModdingAPI::Exposed::Mono::Math::BigInteger_Duplicate1*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x11B6AB0))(bi, modulus);
  }
};
}