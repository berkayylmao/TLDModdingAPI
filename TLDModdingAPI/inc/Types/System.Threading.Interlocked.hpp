// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Threading {
struct __Interlocked_Il2CppStaticFields {
};

struct __Interlocked_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Interlocked_Il2CppClass {
  Il2CppClass_1 _1;
  __Interlocked_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Interlocked_Il2CppVtbl vtbl;
};

class Interlocked {
public:
  // Il2Cpp fields:
  __Interlocked_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline int32_t CompareExchange(int32_t location1, int32_t value, int32_t comparand) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093B40))(location1, value, comparand);
  }
  static inline int32_t CompareExchange(int32_t location1, int32_t value, int32_t comparand, bool succeeded) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093B50))(location1, value, comparand, succeeded);
  }
  static inline Il2CppObject* CompareExchange(Il2CppObject* location1, Il2CppObject* value, Il2CppObject* comparand) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(Il2CppObject*, Il2CppObject*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093B60))(location1, value, comparand);
  }
  static inline float CompareExchange(float location1, float value, float comparand) {
    return reinterpret_cast<float(__fastcall*)(float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093B70))(location1, value, comparand);
  }
  static inline int32_t Decrement(int32_t location) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093BA0))(location);
  }
  static inline int32_t Increment(int32_t location) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093BB0))(location);
  }
  static inline int64_t Increment(int64_t location) {
    return reinterpret_cast<int64_t(__fastcall*)(int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093BC0))(location);
  }
  static inline int32_t Exchange(int32_t location1, int32_t value) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093BD0))(location1, value);
  }
  static inline Il2CppObject* Exchange(Il2CppObject* location1, Il2CppObject* value) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(Il2CppObject*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093BE0))(location1, value);
  }
  static inline float Exchange(float location1, float value) {
    return reinterpret_cast<float(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093BF0))(location1, value);
  }
  static inline int64_t CompareExchange(int64_t location1, int64_t value, int64_t comparand) {
    return reinterpret_cast<int64_t(__fastcall*)(int64_t, int64_t, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093B60))(location1, value, comparand);
  }
  static inline intptr_t CompareExchange(intptr_t location1, intptr_t value, intptr_t comparand) {
    return reinterpret_cast<intptr_t(__fastcall*)(intptr_t, intptr_t, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093B60))(location1, value, comparand);
  }
  static inline double CompareExchange(double location1, double value, double comparand) {
    return reinterpret_cast<double(__fastcall*)(double, double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093C10))(location1, value, comparand);
  }
  static inline int64_t Exchange(int64_t location1, int64_t value) {
    return reinterpret_cast<int64_t(__fastcall*)(int64_t, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093BE0))(location1, value);
  }
  static inline intptr_t Exchange(intptr_t location1, intptr_t value) {
    return reinterpret_cast<intptr_t(__fastcall*)(intptr_t, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093BE0))(location1, value);
  }
  static inline double Exchange(double location1, double value) {
    return reinterpret_cast<double(__fastcall*)(double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093C40))(location1, value);
  }
  static inline int64_t Read(int64_t location) {
    return reinterpret_cast<int64_t(__fastcall*)(int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093C60))(location);
  }
  static inline int32_t Add(int32_t location1, int32_t value) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1093C70))(location1, value);
  }
};
}