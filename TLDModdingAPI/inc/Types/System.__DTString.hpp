// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.DTSubString.hpp"

namespace ModdingAPI::Exposed::System {
struct ____DTString_Il2CppObject {
  System_String* Value;
  int32_t Index;
  int32_t len;
  wchar_t m_current;
  ModdingAPI::Exposed::System::Globalization::CompareInfo* m_info;
  bool m_checkDigitToken;
};
struct ____DTString_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Char_array* WhiteSpaceChecks;
};

struct ____DTString_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct ____DTString_Il2CppClass {
  Il2CppClass_1 _1;
  ____DTString_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  ____DTString_Il2CppVtbl vtbl;
};

class __DTString {
  static constexpr uint64_t _rvaClassInstance     = 0x3C28DA8;
  static inline    ____DTString_Il2CppClass* _pStaticClassInstance = nullptr;

public:
  // Static class getter:
  static inline ____DTString_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (____DTString_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Member fields:
  System_String* Value;
  int32_t Index;
  int32_t len;
  wchar_t m_current;
  ModdingAPI::Exposed::System::Globalization::CompareInfo* m_info;
  bool m_checkDigitToken;

  // Member methods:
  void ::ctor(System_String* str, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, bool checkDigitToken) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::__DTString*, System_String*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5CF70))(this, str, dtfi, checkDigitToken);
  }
  void ::ctor(System_String* str, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::__DTString*, System_String*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5CFA0))(this, str, dtfi);
  }
  ModdingAPI::Exposed::System::Globalization::CompareInfo* get_CompareInfo() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CompareInfo*(__fastcall*)(ModdingAPI::Exposed::System::__DTString*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2BD0))(this);
  }
  bool GetNext() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5CFB0))(this);
  }
  bool AtEnd() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5CFF0))(this);
  }
  bool Advance(int32_t count) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D000))(this, count);
  }
  void GetRegularToken(int32_t tokenType, int32_t tokenValue, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::__DTString*, int32_t, int32_t, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D040))(this, tokenType, tokenValue, dtfi);
  }
  int32_t GetSeparatorToken(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t indexBeforeSeparator, wchar_t charBeforeSeparator) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::__DTString*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D050))(this, dtfi, indexBeforeSeparator, charBeforeSeparator);
  }
  bool MatchSpecifiedWord(System_String* target) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D060))(this, target);
  }
  bool MatchSpecifiedWord(System_String* target, int32_t endIndex) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D070))(this, target, endIndex);
  }
  bool MatchSpecifiedWords(System_String* target, bool checkWordBoundary, int32_t matchLength) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString*, System_String*, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D080))(this, target, checkWordBoundary, matchLength);
  }
  bool Match(System_String* str) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D090))(this, str);
  }
  bool Match(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D0A0))(this, ch);
  }
  int32_t MatchLongestWords(ModdingAPI::Exposed::System::String_array* words, int32_t maxMatchStrLen) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::__DTString*, ModdingAPI::Exposed::System::String_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D100))(this, words, maxMatchStrLen);
  }
  int32_t GetRepeatCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::__DTString*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D110))(this);
  }
  bool GetNextDigit() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D120))(this);
  }
  wchar_t GetChar() {
    return reinterpret_cast<wchar_t(__fastcall*)(ModdingAPI::Exposed::System::__DTString*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D130))(this);
  }
  int32_t GetDigit() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::__DTString*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D160))(this);
  }
  void SkipWhiteSpaces() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::__DTString*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D190))(this);
  }
  bool SkipWhiteSpaceCurrent() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D1A0))(this);
  }
  void TrimTail() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::__DTString*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D1B0))(this);
  }
  void RemoveTrailingInQuoteSpaces() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::__DTString*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D1C0))(this);
  }
  void RemoveLeadingInQuoteSpaces() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::__DTString*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D1D0))(this);
  }
  ModdingAPI::Exposed::System::DTSubString GetSubString() {
    return reinterpret_cast<ModdingAPI::Exposed::System::DTSubString(__fastcall*)(ModdingAPI::Exposed::System::__DTString*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D1E0))(this);
  }
  void ConsumeSubString(ModdingAPI::Exposed::System::DTSubString sub) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::__DTString*, ModdingAPI::Exposed::System::DTSubString)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5D210))(this, sub);
  }

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x157F8C0))();
  }

};
}