// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector4.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Matrix4x4.hpp"


namespace ModdingAPI::Exposed::UnityEngine {
struct __MaterialPropertyBlock_Il2CppStaticFields {
};

struct __MaterialPropertyBlock_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __MaterialPropertyBlock_Il2CppClass {
  Il2CppClass_1 _1;
  __MaterialPropertyBlock_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MaterialPropertyBlock_Il2CppVtbl vtbl;
};

class MaterialPropertyBlock {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C94BB8;
  static inline    __MaterialPropertyBlock_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __MaterialPropertyBlock_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__MaterialPropertyBlock_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __MaterialPropertyBlock_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t m_Ptr;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1067640))(this);
  }
  void SetFloatImpl(int32_t name, float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10676A0))(this, name, value);
  }
  void SetVectorImpl(int32_t name, ModdingAPI::Exposed::UnityEngine::Vector4 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1067710))(this, name, value);
  }
  void SetColorImpl(int32_t name, ModdingAPI::Exposed::UnityEngine::Color value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1067780))(this, name, value);
  }
  void SetMatrixImpl(int32_t name, ModdingAPI::Exposed::UnityEngine::Matrix4x4 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::UnityEngine::Matrix4x4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10677F0))(this, name, value);
  }
  void SetTextureImpl(int32_t name, ModdingAPI::Exposed::UnityEngine::Texture* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::UnityEngine::Texture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1067860))(this, name, value);
  }
  void SetBufferImpl(int32_t name, ModdingAPI::Exposed::UnityEngine::ComputeBuffer* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::UnityEngine::ComputeBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10678D0))(this, name, value);
  }
  void SetFloatArrayImpl(int32_t name, ModdingAPI::Exposed::System::Single_array* values, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::System::Single_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1067940))(this, name, values, count);
  }
  void SetVectorArrayImpl(int32_t name, ModdingAPI::Exposed::UnityEngine::Vector4_array* values, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector4_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10679C0))(this, name, values, count);
  }
  void Clear(bool keepMemory) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1067AE0))(this, keepMemory);
  }
  void Clear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1067B40))(this);
  }
  void SetFloatArray(int32_t name, ModdingAPI::Exposed::System::Single_array* values, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::System::Single_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1067BA0))(this, name, values, count);
  }
  void SetVectorArray(int32_t name, ModdingAPI::Exposed::UnityEngine::Vector4_array* values, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector4_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1067D30))(this, name, values, count);
  }
  void Finalize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1067EC0))(this);
  }
  void Dispose() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1068010))(this);
  }
  void SetFloat(System_String* name, float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, System_String*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1068110))(this, name, value);
  }
  void SetFloat(int32_t nameID, float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10676A0))(this, nameID, value);
  }
  void SetVector(System_String* name, ModdingAPI::Exposed::UnityEngine::Vector4 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, System_String*, ModdingAPI::Exposed::UnityEngine::Vector4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10681D0))(this, name, value);
  }
  void SetVector(int32_t nameID, ModdingAPI::Exposed::UnityEngine::Vector4 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1068290))(this, nameID, value);
  }
  void SetColor(System_String* name, ModdingAPI::Exposed::UnityEngine::Color value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, System_String*, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1068300))(this, name, value);
  }
  void SetColor(int32_t nameID, ModdingAPI::Exposed::UnityEngine::Color value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10683C0))(this, nameID, value);
  }
  void SetMatrix(int32_t nameID, ModdingAPI::Exposed::UnityEngine::Matrix4x4 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::UnityEngine::Matrix4x4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1068430))(this, nameID, value);
  }
  void SetBuffer(int32_t nameID, ModdingAPI::Exposed::UnityEngine::ComputeBuffer* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::UnityEngine::ComputeBuffer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10678D0))(this, nameID, value);
  }
  void SetTexture(System_String* name, ModdingAPI::Exposed::UnityEngine::Texture* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, System_String*, ModdingAPI::Exposed::UnityEngine::Texture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10684C0))(this, name, value);
  }
  void SetTexture(int32_t nameID, ModdingAPI::Exposed::UnityEngine::Texture* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::UnityEngine::Texture*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1067860))(this, nameID, value);
  }
  void SetFloatArray(int32_t nameID, ModdingAPI::Exposed::System::Single_array* values) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::System::Single_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1068580))(this, nameID, values);
  }
  void SetVectorArray(int32_t nameID, ModdingAPI::Exposed::UnityEngine::Vector4_array* values) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector4_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10686E0))(this, nameID, values);
  }
  void SetVectorImpl_Injected(int32_t name, ModdingAPI::Exposed::UnityEngine::Vector4 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1068840))(this, name, value);
  }
  void SetColorImpl_Injected(int32_t name, ModdingAPI::Exposed::UnityEngine::Color value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10688B0))(this, name, value);
  }
  void SetMatrixImpl_Injected(int32_t name, ModdingAPI::Exposed::UnityEngine::Matrix4x4 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock*, int32_t, ModdingAPI::Exposed::UnityEngine::Matrix4x4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1068920))(this, name, value);
  }

  // Static methods:
  static inline intptr_t CreateImpl() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1067A40))();
  }
  static inline void DestroyImpl(intptr_t mpb) {
    reinterpret_cast<void(__fastcall*)(intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1067A90))(mpb);
  }
};
}