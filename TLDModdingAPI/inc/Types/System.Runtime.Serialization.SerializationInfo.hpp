// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.DateTime.hpp"


namespace ModdingAPI::Exposed::System::Runtime::Serialization {
struct __SerializationInfo_Il2CppStaticFields {
};

struct __SerializationInfo_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SerializationInfo_Il2CppClass {
  Il2CppClass_1 _1;
  __SerializationInfo_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SerializationInfo_Il2CppVtbl vtbl;
};

class SerializationInfo {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C93508;
  static inline    SerializationInfo* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C562D8;
  static inline    __SerializationInfo_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline SerializationInfo* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (SerializationInfo**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __SerializationInfo_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__SerializationInfo_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __SerializationInfo_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::String_array* m_members;
  ModdingAPI::Exposed::System::Object_array* m_data;
  ModdingAPI::Exposed::System::Type_array* m_types;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_nameToIndex;
  int32_t m_currMember;
  ModdingAPI::Exposed::System::Runtime::Serialization::IFormatterConverter* m_converter;
  System_String* m_fullTypeName;
  System_String* m_assemName;
  ModdingAPI::Exposed::System::Type* objectType;
  bool isFullTypeNameSetExplicit;
  bool isAssemblyNameSetExplicit;
  bool requireSameTokenInPartialTrust;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Type* type, ModdingAPI::Exposed::System::Runtime::Serialization::IFormatterConverter* converter) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Runtime::Serialization::IFormatterConverter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4BA20))(this, type, converter);
  }
  void ::ctor(ModdingAPI::Exposed::System::Type* type, ModdingAPI::Exposed::System::Runtime::Serialization::IFormatterConverter* converter, bool requireSameTokenInPartialTrust) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Type*, ModdingAPI::Exposed::System::Runtime::Serialization::IFormatterConverter*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4BA40))(this, type, converter, requireSameTokenInPartialTrust);
  }
  System_String* get_FullTypeName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319960))(this);
  }
  System_String* get_AssemblyName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319980))(this);
  }
  void SetType(ModdingAPI::Exposed::System::Type* type) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4BD00))(this, type);
  }
  int32_t get_MemberCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D870))(this);
  }
  ModdingAPI::Exposed::System::Type* get_ObjectType() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A440))(this);
  }
  bool get_IsFullTypeNameSetExplicit() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3199B0))(this);
  }
  bool get_IsAssemblyNameSetExplicit() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A470))(this);
  }
  ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfoEnumerator* GetEnumerator() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfoEnumerator*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4C460))(this);
  }
  void ExpandArrays() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4C5E0))(this);
  }
  void AddValue(System_String* name, Il2CppObject* value, ModdingAPI::Exposed::System::Type* type) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*, Il2CppObject*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4C700))(this, name, value, type);
  }
  void AddValue(System_String* name, Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4C830))(this, name, value);
  }
  void AddValue(System_String* name, bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4C920))(this, name, value);
  }
  void AddValue(System_String* name, wchar_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4CA20))(this, name, value);
  }
  void AddValue(System_String* name, uint8_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*, uint8_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4CB20))(this, name, value);
  }
  void AddValue(System_String* name, int16_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*, int16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4CC20))(this, name, value);
  }
  void AddValue(System_String* name, int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4CD20))(this, name, value);
  }
  void AddValue(System_String* name, int64_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4CE20))(this, name, value);
  }
  void AddValue(System_String* name, uint64_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4CF10))(this, name, value);
  }
  void AddValue(System_String* name, float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4D000))(this, name, value);
  }
  void AddValue(System_String* name, ModdingAPI::Exposed::System::DateTime value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4D100))(this, name, value);
  }
  void AddValueInternal(System_String* name, Il2CppObject* value, ModdingAPI::Exposed::System::Type* type) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*, Il2CppObject*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4D1F0))(this, name, value, type);
  }
  void UpdateValue(System_String* name, Il2CppObject* value, ModdingAPI::Exposed::System::Type* type) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*, Il2CppObject*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4D590))(this, name, value, type);
  }
  int32_t FindElement(System_String* name) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4D6B0))(this, name);
  }
  Il2CppObject* GetElement(System_String* name, ModdingAPI::Exposed::System::Type* foundType) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4D7E0))(this, name, foundType);
  }
  Il2CppObject* GetElementNoThrow(System_String* name, ModdingAPI::Exposed::System::Type* foundType) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4D960))(this, name, foundType);
  }
  Il2CppObject* GetValue(System_String* name, ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4DA00))(this, name, type);
  }
  Il2CppObject* GetValueNoThrow(System_String* name, ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4DBE0))(this, name, type);
  }
  bool GetBoolean(System_String* name) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4DD60))(this, name);
  }
  int32_t GetInt32(System_String* name) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4DEA0))(this, name);
  }
  int64_t GetInt64(System_String* name) {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4DFE0))(this, name);
  }
  float GetSingle(System_String* name) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4E120))(this, name);
  }
  System_String* GetString(System_String* name) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4E260))(this, name);
  }

  // Static methods:
  static inline bool Compare(ModdingAPI::Exposed::System::Byte_array* a, ModdingAPI::Exposed::System::Byte_array* b) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4BED0))(a, b);
  }
  static inline void DemandForUnsafeAssemblyNameAssignments(System_String* originalAssemblyName, System_String* newAssemblyName) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4BF60))(originalAssemblyName, newAssemblyName);
  }
  static inline bool IsAssemblyNameAssignmentSafe(System_String* originalAssemblyName, System_String* newAssemblyName) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA4BF70))(originalAssemblyName, newAssemblyName);
  }
};
}