// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"

namespace ModdingAPI::Exposed::System::Xml::XmlEventCache {
struct __XmlEvent_Il2CppObject {
  int32_t eventType;
  System_String* s1;
  System_String* s2;
  System_String* s3;
  Il2CppObject* o;
};
struct __XmlEvent_Il2CppStaticFields {
};

struct __XmlEvent_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __XmlEvent_Il2CppClass {
  Il2CppClass_1 _1;
  __XmlEvent_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __XmlEvent_Il2CppVtbl vtbl;
};

class XmlEvent {
public:
  // Member fields:
  int32_t eventType;
  System_String* s1;
  System_String* s2;
  System_String* s3;
  Il2CppObject* o;

  // Member methods:
  void InitEvent(int32_t eventType) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlEventCache::XmlEvent*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3020))(this, eventType);
  }
  void InitEvent(int32_t eventType, System_String* s1) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlEventCache::XmlEvent*, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE310))(this, eventType, s1);
  }
  void InitEvent(int32_t eventType, System_String* s1, System_String* s2) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlEventCache::XmlEvent*, int32_t, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F150))(this, eventType, s1, s2);
  }
  void InitEvent(int32_t eventType, System_String* s1, System_String* s2, System_String* s3) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlEventCache::XmlEvent*, int32_t, System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F160))(this, eventType, s1, s2, s3);
  }
  void InitEvent(int32_t eventType, System_String* s1, System_String* s2, System_String* s3, Il2CppObject* o) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlEventCache::XmlEvent*, int32_t, System_String*, System_String*, System_String*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F180))(this, eventType, s1, s2, s3, o);
  }
  void InitEvent(int32_t eventType, Il2CppObject* o) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlEventCache::XmlEvent*, int32_t, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F1A0))(this, eventType, o);
  }
  int32_t get_EventType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlEventCache::XmlEvent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3030))(this);
  }
  System_String* get_String1() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlEventCache::XmlEvent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3370))(this);
  }
  System_String* get_String2() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlEventCache::XmlEvent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6360))(this);
  }
  System_String* get_String3() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlEventCache::XmlEvent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2BD0))(this);
  }
  Il2CppObject* get_Object() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Xml::XmlEventCache::XmlEvent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2BE0))(this);
  }

};
}