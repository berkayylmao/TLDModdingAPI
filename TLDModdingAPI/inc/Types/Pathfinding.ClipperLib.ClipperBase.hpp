// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.Pathfinding.ClipperLib.IntPoint.hpp"
#include "ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint.hpp"


namespace ModdingAPI::Exposed::Pathfinding::ClipperLib {
struct __ClipperBase_Il2CppStaticFields {
};

struct __ClipperBase_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Clear;
  VirtualInvokeData _5_Reset;
};

struct __ClipperBase_Il2CppClass {
  Il2CppClass_1 _1;
  __ClipperBase_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ClipperBase_Il2CppVtbl vtbl;
};

class ClipperBase {
public:
  // Il2Cpp fields:
  __ClipperBase_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::Pathfinding::ClipperLib::LocalMinima* m_MinimaList;
  ModdingAPI::Exposed::Pathfinding::ClipperLib::LocalMinima* m_CurrentLM;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_edges;
  bool m_UseFullRange;
  bool m_HasOpenPaths;
  bool _PreserveCollinear_k__BackingField;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E6F00))(this);
  }
  bool get_PreserveCollinear() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E7060))(this);
  }
  void set_PreserveCollinear(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E7070))(this, value);
  }
  bool PointOnLineSegment(ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint pt, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint linePt1, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint linePt2, bool UseFullRange) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E70A0))(this, pt, linePt1, linePt2, UseFullRange);
  }
  bool PointOnPolygon(ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint pt, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* pp, bool UseFullRange) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E7240))(this, pt, pp, UseFullRange);
  }
  bool PointInPolygon(ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint pt, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt* pp, bool UseFullRange) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint, ModdingAPI::Exposed::Pathfinding::ClipperLib::OutPt*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E7450))(this, pt, pp, UseFullRange);
  }
  void Clear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E77E0))(this);
  }
  void DisposeLocalMinimaList() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E79E0))(this);
  }
  void RangeTest(ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint Pt, bool useFullRange) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E7A10))(this, Pt, useFullRange);
  }
  void InitEdge(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* eNext, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* ePrev, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint pt) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E7B50))(this, e, eNext, ePrev, pt);
  }
  void InitEdge2(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e, int32_t polyType) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E7B80))(this, e, polyType);
  }
  bool AddPath(ModdingAPI::Exposed::System::Collections::Generic::List_T_* pg, int32_t polyType, bool Closed) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E7C40))(this, pg, polyType, Closed);
  }
  bool AddPolygon(ModdingAPI::Exposed::System::Collections::Generic::List_T_* pg, int32_t polyType) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E8AE0))(this, pg, polyType);
  }
  bool Pt2IsBetweenPt1AndPt3(ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint pt1, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint pt2, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint pt3) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E8B00))(this, pt1, pt2, pt3);
  }
  ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* RemoveEdge(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E8BC0))(this, e);
  }
  ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* GetLastHorz(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* Edge) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E8C10))(this, Edge);
  }
  bool SharedVertWithPrevAtTop(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* Edge) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E8C70))(this, Edge);
  }
  bool SharedVertWithNextIsBot(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* Edge) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E8D70))(this, Edge);
  }
  bool MoreBelow(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* Edge) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E8F10))(this, Edge);
  }
  bool JustBeforeLocMin(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* Edge) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E9070))(this, Edge);
  }
  bool MoreAbove(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* Edge) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E9100))(this, Edge);
  }
  bool AllHorizontal(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* Edge) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E9230))(this, Edge);
  }
  void SetDx(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E9280))(this, e);
  }
  void DoMinimaLML(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* E1, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* E2, bool IsClosed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E92E0))(this, E1, E2, IsClosed);
  }
  ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* DescendToMin(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* E) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E9670))(this, E);
  }
  void AscendToMax(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* E, bool Appending, bool IsClosed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E9990))(this, E, Appending, IsClosed);
  }
  ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* AddBoundsToLML(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* E, bool Closed) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E9C10))(this, E, Closed);
  }
  void InsertLocalMinima(ModdingAPI::Exposed::Pathfinding::ClipperLib::LocalMinima* newLm) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::LocalMinima*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E9F30))(this, newLm);
  }
  void PopLocalMinima() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E9F90))(this);
  }
  void ReverseHorizontal(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E9FB0))(this, e);
  }
  void Reset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::ClipperBase*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E9FE0))(this);
  }

  // Static methods:
  static inline bool IsHorizontal(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E7080))(e);
  }
  static inline bool SlopesEqual(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e1, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge* e2, bool UseFullRange) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, ModdingAPI::Exposed::Pathfinding::ClipperLib::TEdge*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E7630))(e1, e2, UseFullRange);
  }
  static inline bool SlopesEqual(ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint pt1, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint pt2, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint pt3, bool UseFullRange) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint, ModdingAPI::Exposed::Pathfinding::ClipperLib::IntPoint, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14E7700))(pt1, pt2, pt3, UseFullRange);
  }
};
}