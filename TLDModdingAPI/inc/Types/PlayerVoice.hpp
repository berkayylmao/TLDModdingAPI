// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __PlayerVoice_Il2CppStaticFields {
  bool s_DebugVerbose;
};

struct __PlayerVoice_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __PlayerVoice_Il2CppClass {
  Il2CppClass_1 _1;
  __PlayerVoice_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __PlayerVoice_Il2CppVtbl vtbl;
};

class PlayerVoice {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C8B958;
  static inline    __PlayerVoice_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __PlayerVoice_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__PlayerVoice_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __PlayerVoice_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::PlayerVoice::RequestEventDelegate* m_EventTrigger;
  ModdingAPI::Exposed::PlayerVoice::VoicePersonaChangedDelegate* m_VoicePersonaChanged;
  float m_MinSecondsBetweenNonCriticalLines;
  float m_NonCriticalVoiceQueueTimeout;
  float m_ForcedSubtitleDelayTime;
  float m_TimeoutBufferDuration;
  float m_LastPlayTime;
  float m_BlockNonCriticalLineTime;
  float m_NextNonCriticalLineTime;
  bool m_HasUpdatedFirstFrame;
  int32_t m_RestrictedPriority;
  float m_SubtitleEventDelay;
  bool m_WasCinematicActive;
  ModdingAPI::Exposed::Voice::ActiveRequest* m_ActiveRequest;
  ModdingAPI::Exposed::Voice::Request* m_NextRequest;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Queue;

  // Member methods:
  void BlockNonCriticalVoiceForDuration(float duration) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C5FC0))(this, duration);
  }
  ModdingAPI::Exposed::Voice::ActiveRequest* GetActiveRequest() {
    return reinterpret_cast<ModdingAPI::Exposed::Voice::ActiveRequest*(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C6030))(this);
  }
  float GetNonCriticalDelayTime() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56EE20))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* GetQueue() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319930))(this);
  }
  int32_t GetRestrictedPriority() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383900))(this);
  }
  bool IsSpeaking() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C6060))(this);
  }
  uint32_t Play(System_String* eventName, int32_t priority, uint32_t options, ModdingAPI::Exposed::System::Action* completionCallback) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*, System_String*, int32_t, uint32_t, ModdingAPI::Exposed::System::Action*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C60A0))(this, eventName, priority, options, completionCallback);
  }
  uint32_t Play(uint32_t eventID, int32_t priority, uint32_t options, ModdingAPI::Exposed::System::Action* completionCallback) {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*, uint32_t, int32_t, uint32_t, ModdingAPI::Exposed::System::Action*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C6290))(this, eventID, priority, options, completionCallback);
  }
  bool Queue(System_String* eventName, int32_t priority, ModdingAPI::Exposed::System::Action* completionCallback) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*, System_String*, int32_t, ModdingAPI::Exposed::System::Action*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C63B0))(this, eventName, priority, completionCallback);
  }
  void RestrictBelowPriority(int32_t priority) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383910))(this, priority);
  }
  void SetPlayerVoicePersona() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C66D0))(this);
  }
  void Stop(uint32_t playingID) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C6930))(this, playingID);
  }
  void StopBelowPriority(int32_t priority) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C6980))(this, priority);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C69C0))(this);
  }
  void CompleteActiveRequest() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C6CD0))(this);
  }
  bool CanPlayNextRequest() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C6E70))(this);
  }
  bool CanPlayNonCriticalVoiceLine() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C6F20))(this);
  }
  bool CanPlayPlayerVoiceEvents() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C7150))(this);
  }
  void EventTrigger(ModdingAPI::Exposed::Voice::Request* request, int32_t reason) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*, ModdingAPI::Exposed::Voice::Request*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C74F0))(this, request, reason);
  }
  bool HandleNextRequest() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C7510))(this);
  }
  void LogRequestIgnored(System_String* reason) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C7980))(this, reason);
  }
  void MaybeForceSubtitles(System_String* eventName, bool applyDelay) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C7A10))(this, eventName, applyDelay);
  }
  void MaybeHandleNextQueuedRequest() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C7B50))(this);
  }
  void MaybeShowInitialSubtitle(System_String* eventName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C7C70))(this, eventName);
  }
  bool StartNextRequest() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C7E60))(this);
  }
  void UpdateActive() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C8270))(this);
  }
  void UpdateQueued() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C8480))(this);
  }
  void OnAkVoiceEvent(Il2CppObject* in_cookie, int32_t in_type, Il2CppObject* in_info) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*, Il2CppObject*, int32_t, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C86D0))(this, in_cookie, in_type, in_info);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::PlayerVoice*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17C8950))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<bool> s_DebugVerbose = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_DebugVerbose; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))();
  }
};
}