// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"

namespace ModdingAPI::Exposed::UnityEngine {
struct __Keyframe_Il2CppObject {
  float m_Time;
  float m_Value;
  float m_InTangent;
  float m_OutTangent;
  int32_t m_WeightedMode;
  float m_InWeight;
  float m_OutWeight;
};
struct __Keyframe_Il2CppStaticFields {
};

struct __Keyframe_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Keyframe_Il2CppClass {
  Il2CppClass_1 _1;
  __Keyframe_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Keyframe_Il2CppVtbl vtbl;
};

class Keyframe {
  static constexpr uint64_t _rvaClassInstance     = 0x3C652C0;
  static inline    __Keyframe_Il2CppClass* _pStaticClassInstance = nullptr;

public:
  // Static class getter:
  static inline __Keyframe_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Keyframe_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Member fields:
  float m_Time;
  float m_Value;
  float m_InTangent;
  float m_OutTangent;
  int32_t m_WeightedMode;
  float m_InWeight;
  float m_OutWeight;

  // Member methods:
  void ::ctor(float time, float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Keyframe*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x43340))(this, time, value);
  }
  void ::ctor(float time, float value, float inTangent, float outTangent) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Keyframe*, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x43360))(this, time, value, inTangent, outTangent);
  }
  float get_time() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Keyframe*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3B350))(this);
  }
  void set_time(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Keyframe*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6DC0))(this, value);
  }
  float get_value() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Keyframe*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3B360))(this);
  }
  void set_value(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Keyframe*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6DE0))(this, value);
  }
  float get_inTangent() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Keyframe*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x27FA0))(this);
  }
  void set_inTangent(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Keyframe*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6E00))(this, value);
  }
  float get_outTangent() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Keyframe*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x27FB0))(this);
  }
  void set_outTangent(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Keyframe*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6E20))(this, value);
  }
  int32_t get_tangentMode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Keyframe*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x43390))(this);
  }
  void set_tangentMode(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Keyframe*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3340))(this, value);
  }
  int32_t get_tangentModeInternal() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Keyframe*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x43390))(this);
  }
  void set_tangentModeInternal(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Keyframe*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3340))(this, value);
  }

};
}