// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Runtime.Serialization.StreamingContext.hpp"


namespace ModdingAPI::Exposed::System::Globalization {
struct __CompareInfo_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* collators;
  bool managedCollation;
  bool managedCollationChecked;
};

struct __CompareInfo_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization;
  VirtualInvokeData _5_get_Name;
  VirtualInvokeData _6_Compare;
  VirtualInvokeData _7_Compare;
  VirtualInvokeData _8_Compare;
  VirtualInvokeData _9_IsPrefix;
  VirtualInvokeData _10_IsSuffix;
  VirtualInvokeData _11_IndexOf;
  VirtualInvokeData _12_LastIndexOf;
  VirtualInvokeData _13_GetSortKey;
};

struct __CompareInfo_Il2CppClass {
  Il2CppClass_1 _1;
  __CompareInfo_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CompareInfo_Il2CppVtbl vtbl;
};

class CompareInfo {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C71480;
  static inline    CompareInfo* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C261E0;
  static inline    __CompareInfo_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline CompareInfo* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (CompareInfo**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __CompareInfo_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__CompareInfo_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __CompareInfo_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  System_String* m_name;
  System_String* m_sortName;
  int32_t win32LCID;
  int32_t culture;
  ModdingAPI::Exposed::System::Globalization::SortVersion* m_SortVersion;
  ModdingAPI::Exposed::Mono::Globalization::Unicode::SimpleCollator* collator;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Globalization::CultureInfo* culture) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x663720))(this, culture);
  }
  void OnDeserializing(ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0x663840))(this, ctx);
  }
  void OnDeserialized() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x663850))(this);
  }
  void OnDeserialized(ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0x663950))(this, ctx);
  }
  void OnSerializing(ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0x663960))(this, ctx);
  }
  void System::Runtime::Serialization::IDeserializationCallback::OnDeserialization(Il2CppObject* sender) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x663950))(this, sender);
  }
  System_String* get_Name() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x663A40))(this);
  }
  int32_t Compare(System_String* string1, System_String* string2) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x663B20))(this, string1, string2);
  }
  int32_t Compare(System_String* string1, System_String* string2, int32_t options) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, System_String*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x663B50))(this, string1, string2, options);
  }
  int32_t Compare(System_String* string1, int32_t offset1, int32_t length1, System_String* string2, int32_t offset2, int32_t length2, int32_t options) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, System_String*, int32_t, int32_t, System_String*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x663E20))(this, string1, offset1, length1, string2, offset2, length2, options);
  }
  bool IsPrefix(System_String* source, System_String* prefix, int32_t options) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, System_String*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x664220))(this, source, prefix, options);
  }
  bool IsSuffix(System_String* source, System_String* suffix, int32_t options) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, System_String*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x664540))(this, source, suffix, options);
  }
  int32_t IndexOf(System_String* source, System_String* value, int32_t startIndex, int32_t count, int32_t options) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, System_String*, System_String*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6648B0))(this, source, value, startIndex, count, options);
  }
  int32_t LastIndexOf(System_String* source, System_String* value, int32_t startIndex, int32_t count, int32_t options) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, System_String*, System_String*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x664B80))(this, source, value, startIndex, count, options);
  }
  ModdingAPI::Exposed::System::Globalization::SortKey* GetSortKey(System_String* source, int32_t options) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::SortKey*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x664E50))(this, source, options);
  }
  ModdingAPI::Exposed::System::Globalization::SortKey* CreateSortKey(System_String* source, int32_t options) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::SortKey*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x664E50))(this, source, options);
  }
  bool Equals(Il2CppObject* value) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x664F80))(this, value);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6650C0))(this);
  }
  int32_t GetHashCodeOfString(System_String* source, int32_t options) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x665100))(this, source, options);
  }
  int32_t GetHashCodeOfString(System_String* source, int32_t options, bool forceRandomizedHashing, int64_t additionalEntropy) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, System_String*, int32_t, bool, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x665260))(this, source, options, forceRandomizedHashing, additionalEntropy);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6653D0))(this);
  }
  ModdingAPI::Exposed::Mono::Globalization::Unicode::SimpleCollator* GetCollator() {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Globalization::Unicode::SimpleCollator*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6655A0))(this);
  }
  ModdingAPI::Exposed::System::Globalization::SortKey* CreateSortKeyCore(System_String* source, int32_t options) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::SortKey*(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6659E0))(this, source, options);
  }
  int32_t internal_index_switch(System_String* s1, int32_t sindex, int32_t count, System_String* s2, int32_t opt, bool first) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, System_String*, int32_t, int32_t, System_String*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x665C50))(this, s1, sindex, count, s2, opt, first);
  }
  int32_t internal_compare_switch(System_String* str1, int32_t offset1, int32_t length1, System_String* str2, int32_t offset2, int32_t length2, int32_t options) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, System_String*, int32_t, int32_t, System_String*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x665E30))(this, str1, offset1, length1, str2, offset2, length2, options);
  }
  int32_t internal_compare_managed(System_String* str1, int32_t offset1, int32_t length1, System_String* str2, int32_t offset2, int32_t length2, int32_t options) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, System_String*, int32_t, int32_t, System_String*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x665F10))(this, str1, offset1, length1, str2, offset2, length2, options);
  }
  int32_t internal_index_managed(System_String* s1, int32_t sindex, int32_t count, System_String* s2, int32_t opt, bool first) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, System_String*, int32_t, int32_t, System_String*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x665F70))(this, s1, sindex, count, s2, opt, first);
  }
  void assign_sortkey(Il2CppObject* key, System_String* source, int32_t options) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, Il2CppObject*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x666010))(this, key, source, options);
  }
  int32_t internal_compare(System_String* str1, int32_t offset1, int32_t length1, System_String* str2, int32_t offset2, int32_t length2, int32_t options) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, System_String*, int32_t, int32_t, System_String*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x666100))(this, str1, offset1, length1, str2, offset2, length2, options);
  }
  int32_t internal_index(System_String* source, int32_t sindex, int32_t count, System_String* value, int32_t options, bool first) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*, System_String*, int32_t, int32_t, System_String*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x666110))(this, source, sindex, count, value, options, first);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::CompareInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x666200))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> collators = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->collators; }
  );
  static inline __CppStaticProperty<bool> managedCollation = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->managedCollation; }
  );
  static inline __CppStaticProperty<bool> managedCollationChecked = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->managedCollationChecked; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::System::Globalization::CompareInfo* GetCompareInfo(System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CompareInfo*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x663750))(name);
  }
  static inline int32_t CompareOrdinal(System_String* string1, int32_t offset1, int32_t length1, System_String* string2, int32_t offset2, int32_t length2) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*, int32_t, int32_t, System_String*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6641C0))(string1, offset1, length1, string2, offset2, length2);
  }
  static inline bool get_UseManagedCollation() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x665470))();
  }
};
}