// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::Mono::Net::CFStreamClientContext.hpp"


namespace ModdingAPI::Exposed::Mono::Net {
struct __CFNetwork_Il2CppStaticFields {
  Il2CppObject* lock_obj;
  ModdingAPI::Exposed::System::Collections::Generic::Queue_T_* get_proxy_queue;
  ModdingAPI::Exposed::System::Threading::AutoResetEvent* proxy_event;
};

struct __CFNetwork_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __CFNetwork_Il2CppClass {
  Il2CppClass_1 _1;
  __CFNetwork_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CFNetwork_Il2CppVtbl vtbl;
};

class CFNetwork {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C35880;
  static inline    __CFNetwork_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __CFNetwork_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__CFNetwork_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __CFNetwork_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<Il2CppObject*> lock_obj = __CppStaticProperty<Il2CppObject*>(
   []() { return &GetStaticClassInstance()->pStaticFields->lock_obj; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Queue_T_*> get_proxy_queue = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Queue_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->get_proxy_queue; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Threading::AutoResetEvent*> proxy_event = __CppStaticProperty<ModdingAPI::Exposed::System::Threading::AutoResetEvent*>(
   []() { return &GetStaticClassInstance()->pStaticFields->proxy_event; }
  );

  // Static methods:
  static inline intptr_t CFNetworkCopyProxiesForAutoConfigurationScriptSequential(intptr_t proxyAutoConfigurationScript, intptr_t targetURL, intptr_t error) {
    return reinterpret_cast<intptr_t(__fastcall*)(intptr_t, intptr_t, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC354C0))(proxyAutoConfigurationScript, targetURL, error);
  }
  static inline intptr_t CFNetworkExecuteProxyAutoConfigurationURL(intptr_t proxyAutoConfigURL, intptr_t targetURL, ModdingAPI::Exposed::Mono::Net::CFNetwork::CFProxyAutoConfigurationResultCallback* cb, ModdingAPI::Exposed::Mono::Net::CFStreamClientContext clientContext) {
    return reinterpret_cast<intptr_t(__fastcall*)(intptr_t, intptr_t, ModdingAPI::Exposed::Mono::Net::CFNetwork::CFProxyAutoConfigurationResultCallback*, ModdingAPI::Exposed::Mono::Net::CFStreamClientContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC35570))(proxyAutoConfigURL, targetURL, cb, clientContext);
  }
  static inline void CFNetworkCopyProxiesForAutoConfigurationScriptThread() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC35640))();
  }
  static inline intptr_t CFNetworkCopyProxiesForAutoConfigurationScript(intptr_t proxyAutoConfigurationScript, intptr_t targetURL, intptr_t error) {
    return reinterpret_cast<intptr_t(__fastcall*)(intptr_t, intptr_t, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC35A20))(proxyAutoConfigurationScript, targetURL, error);
  }
  static inline ModdingAPI::Exposed::Mono::Net::CFArray* CopyProxiesForAutoConfigurationScript(intptr_t proxyAutoConfigurationScript, ModdingAPI::Exposed::Mono::Net::CFUrl* targetURL) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Net::CFArray*(__fastcall*)(intptr_t, ModdingAPI::Exposed::Mono::Net::CFUrl*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC362B0))(proxyAutoConfigurationScript, targetURL);
  }
  static inline ModdingAPI::Exposed::Mono::Net::CFProxy_array* GetProxiesForAutoConfigurationScript(intptr_t proxyAutoConfigurationScript, ModdingAPI::Exposed::Mono::Net::CFUrl* targetURL) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Net::CFProxy_array*(__fastcall*)(intptr_t, ModdingAPI::Exposed::Mono::Net::CFUrl*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC36470))(proxyAutoConfigurationScript, targetURL);
  }
  static inline ModdingAPI::Exposed::Mono::Net::CFProxy_array* GetProxiesForAutoConfigurationScript(intptr_t proxyAutoConfigurationScript, ModdingAPI::Exposed::System::Uri* targetUri) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Net::CFProxy_array*(__fastcall*)(intptr_t, ModdingAPI::Exposed::System::Uri*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC36860))(proxyAutoConfigurationScript, targetUri);
  }
  static inline ModdingAPI::Exposed::Mono::Net::CFProxy_array* ExecuteProxyAutoConfigurationURL(intptr_t proxyAutoConfigURL, ModdingAPI::Exposed::System::Uri* targetURL) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Net::CFProxy_array*(__fastcall*)(intptr_t, ModdingAPI::Exposed::System::Uri*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC369D0))(proxyAutoConfigURL, targetURL);
  }
  static inline intptr_t CFNetworkCopyProxiesForURL(intptr_t url, intptr_t proxySettings) {
    return reinterpret_cast<intptr_t(__fastcall*)(intptr_t, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC36F00))(url, proxySettings);
  }
  static inline ModdingAPI::Exposed::Mono::Net::CFArray* CopyProxiesForURL(ModdingAPI::Exposed::Mono::Net::CFUrl* url, ModdingAPI::Exposed::Mono::Net::CFDictionary* proxySettings) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Net::CFArray*(__fastcall*)(ModdingAPI::Exposed::Mono::Net::CFUrl*, ModdingAPI::Exposed::Mono::Net::CFDictionary*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC36FB0))(url, proxySettings);
  }
  static inline ModdingAPI::Exposed::Mono::Net::CFProxy_array* GetProxiesForURL(ModdingAPI::Exposed::Mono::Net::CFUrl* url, ModdingAPI::Exposed::Mono::Net::CFProxySettings* proxySettings) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Net::CFProxy_array*(__fastcall*)(ModdingAPI::Exposed::Mono::Net::CFUrl*, ModdingAPI::Exposed::Mono::Net::CFProxySettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC371F0))(url, proxySettings);
  }
  static inline ModdingAPI::Exposed::Mono::Net::CFProxy_array* GetProxiesForUri(ModdingAPI::Exposed::System::Uri* uri, ModdingAPI::Exposed::Mono::Net::CFProxySettings* proxySettings) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Net::CFProxy_array*(__fastcall*)(ModdingAPI::Exposed::System::Uri*, ModdingAPI::Exposed::Mono::Net::CFProxySettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC375F0))(uri, proxySettings);
  }
  static inline intptr_t CFNetworkCopySystemProxySettings() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC37730))();
  }
  static inline ModdingAPI::Exposed::Mono::Net::CFProxySettings* GetSystemProxySettings() {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::Net::CFProxySettings*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC377C0))();
  }
  static inline ModdingAPI::Exposed::System::Net::IWebProxy* GetDefaultProxy() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Net::IWebProxy*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC37A90))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC37BD0))();
  }
};
}