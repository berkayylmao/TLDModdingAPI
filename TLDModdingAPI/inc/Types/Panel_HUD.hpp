// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __Panel_HUD_Il2CppStaticFields {
  int32_t s_AnimState_PackMoraleIn;
  int32_t s_AnimState_PackMoraleOut;
  int32_t s_AnimState_PackMoraleIdle;
  bool m_DebugHeavyBreathing;
  bool m_HideTestBuildWatermark;
  float DISPLAYED_MISSION_UPDATE_DELAY;
  int32_t NUM_CACHED_OBJECTIVES;
  ModdingAPI::Exposed::System::String_array* AUDIO_EVENT_REPLACEMENTS;
  bool s_DebugStoryHUD;
};

struct __Panel_HUD_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Panel_HUD_Il2CppClass {
  Il2CppClass_1 _1;
  __Panel_HUD_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Panel_HUD_Il2CppVtbl vtbl;
};

class Panel_HUD {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C77880;
  static inline    __Panel_HUD_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Panel_HUD_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Panel_HUD_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Panel_HUD_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BuffNotificationParent;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BuffNotificationAimingParent;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BuffNotificationPanel;
  ModdingAPI::Exposed::UILabel* m_BuffHeaderLabel;
  ModdingAPI::Exposed::UILabel* m_BuffNameLabel;
  ModdingAPI::Exposed::UISprite* m_BuffSprite;
  float m_BuffNotificationDurationSeconds;
  System_String* m_BuffSpriteWellFed;
  System_String* m_BuffSpriteFatigueBuff;
  System_String* m_BuffSpriteFreezingBuff;
  System_String* m_BuffSpriteRestBuff;
  System_String* m_BuffSpriteConditionOverTimeBuff;
  ModdingAPI::Exposed::UIWidget_array* m_BuffWidgetsToChangeColor;
  ModdingAPI::Exposed::UnityEngine::Color m_BuffGainColor;
  ModdingAPI::Exposed::UnityEngine::Color m_BuffLossColor;
  bool m_IsShowingBuffNotification;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_BuffNotificationQueue;
  float m_BuffNotificationElapsedSeconds;
  ModdingAPI::Exposed::TweenAlpha* m_CairnNotificationTween;
  ModdingAPI::Exposed::UILabel* m_CairnNameLabel;
  ModdingAPI::Exposed::UILabel* m_CairnQuoteLabel;
  ModdingAPI::Exposed::UILabel* m_CairnBackerLabel;
  ModdingAPI::Exposed::UILabel* m_CairnThanksLabel;
  bool m_IsShowingCairnNotification;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_CollectibleNoteObject;
  ModdingAPI::Exposed::UILabel* m_CollectibleNoteObjectText;
  ModdingAPI::Exposed::UILabel* m_CollectibleNoteObjectTitle;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_CollectibleNoteScrollObject;
  ModdingAPI::Exposed::UIScrollView* m_CollectibleNoteScrollView;
  float m_ScrollPanelHeight;
  ModdingAPI::Exposed::UnityEngine::Color m_SliderDefaultColor;
  float m_TitleY;
  float m_TitleYOffset;
  float m_TextFadeOutTimeSeconds;
  float m_ConditionTweenNormalizedThreshold;
  ModdingAPI::Exposed::UIWidget* m_Widget_Affliction;
  ModdingAPI::Exposed::UISprite* m_Sprite_HasAffliction;
  ModdingAPI::Exposed::UISprite* m_Sprite_HasAfflictionRisk;
  ModdingAPI::Exposed::UISprite* m_Sprite_Crouching;
  ModdingAPI::Exposed::UITexture* m_Texture_InspectItem;
  ModdingAPI::Exposed::UILabel* m_Label_Calories;
  ModdingAPI::Exposed::UILabel* m_Label_Condition;
  ModdingAPI::Exposed::UILabel* m_Label_DebugLines;
  ModdingAPI::Exposed::UILabel* m_Label_DebugPlayerInfo;
  ModdingAPI::Exposed::UILabel* m_Label_DebugString;
  ModdingAPI::Exposed::UILabel* m_Label_DebugStruggleEvents;
  ModdingAPI::Exposed::UILabel* m_Label_DebugHeavyBreathing;
  ModdingAPI::Exposed::UILabel* m_Label_FPS;
  ModdingAPI::Exposed::UILabel* m_Label_SurvivalTime;
  ModdingAPI::Exposed::UILabel* m_Label_Location;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_LocationPosAlone;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_LocationPosUnderRegion;
  float m_LocationDurationSeconds;
  ModdingAPI::Exposed::UnityEngine::AnimationCurve* m_LocationAnimationCurve;
  ModdingAPI::Exposed::UILabel* m_Label_Region;
  ModdingAPI::Exposed::UILabel* m_Label_Message;
  ModdingAPI::Exposed::UILabel* m_Label_MessageBottom;
  ModdingAPI::Exposed::UILabel* m_Label_ItemProgressBar;
  ModdingAPI::Exposed::UILabel* m_Label_WarningMessage;
  ModdingAPI::Exposed::UnityEngine::Animator* m_ThinIceAnimator;
  ModdingAPI::Exposed::UIWidget* m_ThinIceWidget;
  ModdingAPI::Exposed::UILabel* m_Label_DebugCompass;
  ModdingAPI::Exposed::UILabel* m_Label_DebugMissionText;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ClickHoldCancelButton;
  ModdingAPI::Exposed::ButtonPrompt* m_ExitDialogueButtonPrompt;
  ModdingAPI::Exposed::UISprite* m_ProgressBar_Item;
  ModdingAPI::Exposed::UISlider* m_Slider_TOD;
  ModdingAPI::Exposed::UILabel* m_SliderLabel_TOD;
  ModdingAPI::Exposed::UISprite* m_Sprite_Crosshair;
  ModdingAPI::Exposed::UISprite* m_Sprite_CrosshairClickHold;
  ModdingAPI::Exposed::UISlider* m_Slider_StruggleWolfHealth;
  ModdingAPI::Exposed::UILabel* m_Label_WolfHealth;
  ModdingAPI::Exposed::UISprite* m_Sprite_UnarmedIcon;
  ModdingAPI::Exposed::UITexture* m_Texture_StruggleWeapon;
  ModdingAPI::Exposed::UILabel* m_Label_StruggleWeaponBonus;
  ModdingAPI::Exposed::UILabel* m_Label_StruggleLMB;
  ModdingAPI::Exposed::UILabel* m_Label_StruggleRMB;
  ModdingAPI::Exposed::UILabel* m_Label_StruggleCaption;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_StruggleWidget;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_StruggleRevolverWidget;
  ModdingAPI::Exposed::TweenAlpha_array* m_Struggle_TweenAlpha;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Struggle_Button_Mouse;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Struggle_Button_Key;
  ModdingAPI::Exposed::UISprite* m_Struggle_Button_Key_Sprite;
  ModdingAPI::Exposed::UISprite* m_Struggle_Button_Key_Feedback;
  ModdingAPI::Exposed::UILabel* m_Struggle_Button_Key_Label;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Struggle_Button_Gamepad;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Struggle_Revolver_Shoot_Button_Mouse;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Struggle_Revolver_Shoot_Button_Key;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Struggle_Revolver_Shoot_Button_Gamepad;
  ModdingAPI::Exposed::UILabel* m_Label_Struggle_Revolver_Shoot_Caption;
  ModdingAPI::Exposed::UISprite* m_Sprite_SystemFadeOverlay;
  ModdingAPI::Exposed::UISprite* m_Sprite_CinematicFadeOverlay;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_NonEssentialHud;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_EssentialHud;
  ModdingAPI::Exposed::AccelTimePopup* m_AccelTimePopup;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FreeTrialMode;
  ModdingAPI::Exposed::UILabel* m_FreeTrialModeTimeLabel;
  ModdingAPI::Exposed::UILabel* m_ExperimentalBuildLabel;
  ModdingAPI::Exposed::EquipItemPopup* m_EquipItemPopup;
  ModdingAPI::Exposed::TwoButtonsChoiceUI* m_TwoButtonsChoiceUI;
  ModdingAPI::Exposed::UnityEngine::Animator* m_SprainWarningAnimator;
  ModdingAPI::Exposed::UIWidget* m_SprainWarningWidget;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_SubtitlesHud;
  ModdingAPI::Exposed::UILabel* m_Label_Subtitles;
  ModdingAPI::Exposed::UISprite* m_Background_Subtitles;
  ModdingAPI::Exposed::UILabel* m_Label_Subtitles_Oversized;
  ModdingAPI::Exposed::UISprite* m_Background_Subtitles_Oversized;
  int32_t m_SubtitleSizeNormal;
  int32_t m_SubtitleSizeLarge;
  int32_t m_MaximumSubtitleLineCount;
  ModdingAPI::Exposed::UnityEngine::Transform* m_SmallSizeGroup;
  ModdingAPI::Exposed::UnityEngine::Transform* m_RegularSizeGroup;
  ModdingAPI::Exposed::UnityEngine::Transform* m_LargeSizeGroup;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BearSpearTarget;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BearSpearVisorDebug;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BearSpearTopRightCorner;
  ModdingAPI::Exposed::UIWidget* m_SprintBar;
  ModdingAPI::Exposed::UISprite* m_Sprite_SprintBarX;
  ModdingAPI::Exposed::UISprite* m_Sprite_SprintBar;
  ModdingAPI::Exposed::UISprite* m_Sprite_SprintBarGlow;
  ModdingAPI::Exposed::UISprite* m_Sprite_SprintBarBackground;
  ModdingAPI::Exposed::UISprite* m_Sprite_SprintReductionBar;
  ModdingAPI::Exposed::UnityEngine::Color m_SprintBarNoSprintColor;
  ModdingAPI::Exposed::UnityEngine::Color m_SprintBarGlowNoSprintColor;
  ModdingAPI::Exposed::UnityEngine::Color m_SprintBarBackgroundNoSprintColor;
  ModdingAPI::Exposed::UnityEngine::Color m_SprintIconOriginalColor;
  ModdingAPI::Exposed::UnityEngine::Color m_SprintBarOrigionalColor;
  ModdingAPI::Exposed::UnityEngine::Color m_SprintBarGlowOrigionalColor;
  ModdingAPI::Exposed::UnityEngine::Color m_SprintBarBackgroundOrigionalColor;
  float m_SprintBar_SecondsBeforeFadeOut;
  float m_SprintBar_SecondsToFadeOut;
  ModdingAPI::Exposed::UIWidget* m_AimingStaminaBar;
  ModdingAPI::Exposed::UIWidget* m_AimingLimitedMobility;
  ModdingAPI::Exposed::UISprite* m_Sprite_AimingStaminaBar;
  ModdingAPI::Exposed::UISprite* m_Sprite_AimingStaminaBarGlow;
  ModdingAPI::Exposed::UISprite* m_Sprite_AimingStaminaBarCenter;
  ModdingAPI::Exposed::UISprite* m_Sprite_AimingStaminaBarBackground;
  ModdingAPI::Exposed::UISprite* m_Sprite_AimingStaminaBarReductionBar;
  float m_AimingStaminaBar_SecondsBeforeFadeOut;
  float m_AimingStaminaBar_SecondsToFadeOut;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Button_InspectModePutBack_Mac;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Button_InspectModePutBack_PC;
  ModdingAPI::Exposed::UISprite* m_Sprite_GamepadTake;
  ModdingAPI::Exposed::UISprite* m_Sprite_GamepadPutback;
  ModdingAPI::Exposed::UISprite* m_Sprite_GamepadEquip;
  ModdingAPI::Exposed::UISprite* m_Sprite_GamepadStruggleTap;
  ModdingAPI::Exposed::UIGrid* m_PlayerDamageEventsGrid;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_PlayerDamageEventPrefab;
  ModdingAPI::Exposed::UISprite* m_StruggleBar;
  float m_StruggleBarFillOffset;
  ModdingAPI::Exposed::UISprite* m_Sprite_GamepadRevolverShoot;
  ModdingAPI::Exposed::UISprite* m_Sprite_Encumbered;
  ModdingAPI::Exposed::UISprite* m_Sprite_CapacityBuff;
  ModdingAPI::Exposed::UISprite* m_Sprite_Sheltered;
  ModdingAPI::Exposed::UISprite* m_Sprite_Cold;
  ModdingAPI::Exposed::UISprite* m_Sprite_Thirsty;
  ModdingAPI::Exposed::UISprite* m_Sprite_Tired;
  ModdingAPI::Exposed::UISprite* m_Sprite_Hungry;
  ModdingAPI::Exposed::UISprite* m_Sprite_SprintCenter;
  ModdingAPI::Exposed::UISprite* m_Sprite_ClimbCenter;
  ModdingAPI::Exposed::UISprite* m_Sprite_SpearCenter;
  ModdingAPI::Exposed::UISprite* m_Sprite_CarryRestrictions;
  ModdingAPI::Exposed::UIWidget* m_Widget_GearMessage;
  ModdingAPI::Exposed::UISprite* m_Sprite_GearMessageIcon;
  ModdingAPI::Exposed::UITexture* m_Texture_GearMessageIcon;
  ModdingAPI::Exposed::UILabel* m_Label_GearMessageHeader;
  ModdingAPI::Exposed::UILabel* m_Label_GearMessageText;
  ModdingAPI::Exposed::UILabel* m_Label_GearMessageQuickKeyText;
  ModdingAPI::Exposed::UnityEngine::Transform* m_GearMessageNormalLocation;
  ModdingAPI::Exposed::UnityEngine::Transform* m_GearMessageOffsetLocation;
  ModdingAPI::Exposed::TMPro::TextMeshPro* m_TMP_Location;
  ModdingAPI::Exposed::TMPro::TextMeshPro* m_TMP_Region;
  ModdingAPI::Exposed::LocationRevealText* m_TMP_Location_FadeComponent;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_TMPLocationPosAlone;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_TMPLocationPosUnderRegion;
  ModdingAPI::Exposed::TweenAlpha* m_NewLocationDiscovered;
  float m_StatusIconsHorizontalOffset;
  float m_StatusIconVerticalOffset;
  float m_StatusIconsPadding;
  ModdingAPI::Exposed::UnityEngine::Color m_StatusIconRedColor;
  ModdingAPI::Exposed::ButtonLegendContainer* m_FlyModeButtonLegendContainer;
  ModdingAPI::Exposed::ButtonLegendContainer* m_TimePopupButtonLegendContainer;
  ModdingAPI::Exposed::ButtonLegendContainer* m_GenericButtonLegendContainer;
  float m_DamageEventDisplaySeconds;
  float m_DamageEventFadeOutSeconds;
  ModdingAPI::Exposed::UISprite* m_FireGamepadButtonSprite;
  ModdingAPI::Exposed::UISprite* m_AltFireGamepadButtonSprite;
  ModdingAPI::Exposed::UISprite* m_InspectMode_InventoryStatusSprite;
  ModdingAPI::Exposed::UIWidget* m_SkillIncreaseWidget;
  ModdingAPI::Exposed::UISprite* m_SkillIncreaseIcon;
  ModdingAPI::Exposed::UIWidget* m_SkillLevelUpWidget;
  ModdingAPI::Exposed::UISprite* m_SkillLevelUpBackgroundIcon;
  ModdingAPI::Exposed::UILabel* m_SkillLevelUpLabel;
  ModdingAPI::Exposed::UILabel* m_SkillLevelUpHeader;
  ModdingAPI::Exposed::UILabel* m_SkillLevelUpFooter;
  ModdingAPI::Exposed::UIWidget* m_FeatUnlockedWidget;
  ModdingAPI::Exposed::UITexture* m_FeatUnlockedBadgeIcon;
  ModdingAPI::Exposed::UILabel* m_FeatUnlockedFooter;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_HoverTextObject;
  ModdingAPI::Exposed::UILabel* m_Label_ObjectName;
  ModdingAPI::Exposed::UILabel* m_Label_SubText;
  ModdingAPI::Exposed::UILabel* m_Label_FireTime;
  ModdingAPI::Exposed::UILabel* m_Label_FireTemp;
  ModdingAPI::Exposed::UISprite* m_HoverTextBG;
  ModdingAPI::Exposed::UISprite* m_HoverTextLinebreak;
  int32_t m_HoverTextLinebreakOffset;
  ModdingAPI::Exposed::UISprite_array* m_HoverTextIcons;
  ModdingAPI::Exposed::UISprite_array* m_HoverTextIconsRow2;
  ModdingAPI::Exposed::UISprite_array* m_HoverTextIconsRow3;
  int32_t m_HoverTextBGPadding;
  int32_t m_HoverTextBGPaddingBonusWithIcons;
  int32_t m_HoverTextBGSizePerIcon;
  int32_t m_HoverTextBGHeightWithSub;
  int32_t m_HoverTextBGHeightWithFire;
  ModdingAPI::Exposed::UIGrid* m_HoverTextGrid;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_HoverTextGridRow1;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_HoverTextGridRow2;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_HoverTextGridRow3;
  ModdingAPI::Exposed::UnityEngine::Color m_HoverTextNormalColor;
  ModdingAPI::Exposed::UnityEngine::Color m_HoverTextTheftColor;
  ModdingAPI::Exposed::UnityEngine::Color m_HoverTextUnlockedColor;
  ModdingAPI::Exposed::UnityEngine::Color m_HoverTextLockedColor;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_InspectMode_StandardElementsParent;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_InspectMode_InspectPrompts;
  ModdingAPI::Exposed::UnityEngine::Transform* m_InspectMode_StatDetails;
  float m_StatDetailsOffsetFromDesc;
  float m_StatDetailsOffsetFromContains;
  ModdingAPI::Exposed::UISprite* m_Sprite_Condition;
  ModdingAPI::Exposed::UISprite* m_Sprite_ConditionBarBG;
  ModdingAPI::Exposed::UISprite* m_Sprite_ConditionBarFG;
  ModdingAPI::Exposed::UISprite* m_Sprite_ContainsFG;
  ModdingAPI::Exposed::UISprite* m_Sprite_ContainsBG;
  ModdingAPI::Exposed::UISprite* m_Sprite_Weight;
  ModdingAPI::Exposed::UISprite* m_InspectMode_FoodHot;
  ModdingAPI::Exposed::UISprite* m_InspectMode_FoodCold;
  ModdingAPI::Exposed::UILabel* m_InspectMode_Conditon;
  ModdingAPI::Exposed::UILabel* m_InspectMode_Contains;
  ModdingAPI::Exposed::UILabel* m_InspectMode_Description;
  ModdingAPI::Exposed::UILabel* m_InspectMode_Equip;
  ModdingAPI::Exposed::UILabel* m_InspectMode_PutBack;
  ModdingAPI::Exposed::UILabel* m_InspectMode_Take;
  ModdingAPI::Exposed::UILabel* m_InspectMode_Title;
  ModdingAPI::Exposed::UILabel* m_InspectMode_Weight;
  ModdingAPI::Exposed::UILabel* m_InspectMode_InventoryStatus;
  ModdingAPI::Exposed::UILabel* m_InspectMode_ResearchBenefit;
  System_String* m_UnitsSprite_Calories;
  System_String* m_UnitsSprite_WaterPotable;
  System_String* m_UnitsSprite_WaterNonPotable;
  System_String* m_UnitsSprite_Time;
  ModdingAPI::Exposed::UISprite_array* m_InspectModeItemTypeIcons;
  float m_InspectFadeAlphaPerSecond;
  float m_InspectStartFadeSecondsFast;
  ModdingAPI::Exposed::UIWidget_array* m_InspectElementsToFadeFast;
  float m_InspectStartFadeSecondsMediumFast;
  ModdingAPI::Exposed::UIWidget_array* m_InspectElementsToFadeMediumFast;
  float m_InspectStartFadeSecondsMedium;
  ModdingAPI::Exposed::UIWidget_array* m_InspectElementsToFadeMedium;
  float m_InspectStartFadeSecondsSlow;
  ModdingAPI::Exposed::UIWidget_array* m_InspectElementsToFadeSlow;
  float m_InspectStartFadeSecondsSlowest;
  ModdingAPI::Exposed::UIWidget_array* m_InspectElementsToFadeSlowest;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BearHuntWidget;
  ModdingAPI::Exposed::UISprite* m_BearHuntProgressBar;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FullScreenMessageObject;
  ModdingAPI::Exposed::TMPro::TextMeshPro* m_FullScreenMessageTMP;
  ModdingAPI::Exposed::UILabel* m_FullScreenMessageLabel;
  ModdingAPI::Exposed::MissionInfoHUD* m_MissionInfoHUD;
  ModdingAPI::Exposed::HUDChapter* m_ChapterPanel;
  ModdingAPI::Exposed::HUDMission* m_MissionPanel;
  ModdingAPI::Exposed::HUDObjectives* m_ObjectivesPanel;
  ModdingAPI::Exposed::HUDTutorial* m_TutorialPanel;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_NPCStatusBarSpawners;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_NpcStatusHudObjects;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_NpcNames;
  float m_MaxDistanceToShowNpcCondition;
  ModdingAPI::Exposed::UILabel* m_InspectMode_ToolTip;
  bool m_EnableDiscoveryText;
  float m_MaxMoraleMeterPackSize;
  ModdingAPI::Exposed::UnityEngine::Animator* m_MoraleMeterAnimator;
  ModdingAPI::Exposed::UIWidget* m_MoraleMeterWidget;
  ModdingAPI::Exposed::UITexture* m_MoraleMeter;
  ModdingAPI::Exposed::UITexture* m_MoraleMeterBackground;
  ModdingAPI::Exposed::UILabel* m_MoralePackNumber;
  float m_FillBarPercentPerMember;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_TitleCards;
  int32_t m_MoraleMeterState;
  bool m_ForceTimeOfDayDisplay;
  bool m_ForceHideNotifications;
  bool m_ForceDisableTimeOfDayDisplay;
  bool m_DisplayLocationLabel;
  float m_LocationLabelDisplayTimeSeconds;
  float m_LocationLabelElapsedDisplayTimeSeconds;
  float m_LocationLabelAlpha;
  bool m_DisplaySurvivalTimeAfterRest;
  float m_SurvivalTimeLabelDisplayTimeSeconds;
  float m_SurvivalTimeLabelElapsedDisplayTimeSeconds;
  float m_SurvivalTimeLabelAlpha;
  float m_ItemProgressBarTimer;
  float m_ItemProgressBarDuration;
  ModdingAPI::Exposed::System::Action* m_ItemProgressBarCallback;
  ModdingAPI::Exposed::GearItem* m_ItemProgressBarRelatedItem;
  bool m_ItemProgressBarCancelled;
  bool m_ItemProgressBarActive;
  float m_RegisterClickAsHoldDelay;
  float m_ItemProgressBarMinDuration;
  int32_t m_HudDisplayMode;
  bool m_SetDisplayModeOnce;
  float m_TimeToHideSubtitles;
  ModdingAPI::Exposed::UIPanel* m_Panel;
  float m_AspectRatioBonusSize;
  int32_t m_HoverTextSizeOrig;
  bool m_WasFadedDueToSleep;
  int32_t m_PanelDepthOrig;
  bool m_FadeOutDamageEvents;
  float m_DamageEventsTimeSinceFadoutStarted;
  float m_DamageEventsFadeOutTimerStartsInSeconds;
  float m_DamageEventsFadeoutTime;
  int32_t m_HoverTextBGHeightOrig;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_StatusIconTransforms;
  bool m_CinematicBlackout;
  bool m_HideHudElements;
  bool m_HideReticle;
  ModdingAPI::Exposed::TweenScale* m_TweenScaleAffliction;
  System_String* m_CurrentObjectiveLocID;
  System_String* m_DisplayedMissionID;
  float m_DisplayedMissionNextUpdate;
  float m_SprintFadeTimeTracker;
  float m_AimStaminaFadeTimeTracker;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_LocationRevealQueue;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_LastObjectiveIDs;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_TempObjectives;
  ModdingAPI::Exposed::UnityEngine::Animator* m_StruggleWidgetAnimator;
  int32_t m_AnimParameter_EnableRevolverPointBlank;
  uint32_t m_TimerwolfCombatMusicPlayingID;
  ModdingAPI::Exposed::NPCStatusBar_array* m_SatusBars;
  ModdingAPI::Exposed::TimedActionPopup* m_TimedActionPopup;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_CreditsParentObject;
  ModdingAPI::Exposed::TweenAlpha* m_CenterLabelTween;
  ModdingAPI::Exposed::TweenAlpha* m_SideLabelTopTween;
  ModdingAPI::Exposed::TweenAlpha* m_SideLabelCenterTween;
  ModdingAPI::Exposed::TweenAlpha* m_SideLabelBottomTween;
  float m_MinTimeBetweenCredits;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_CreditsQueue;
  float m_CreditsQueueTimer;
  float m_CreditsWaitTimer;
  ModdingAPI::Exposed::Panel_HUD::ScentIndicator* m_ScentIndicator;

  // Member methods:
  void ShowBuffNotification(System_String* buffNameLocID, System_String* buffHeaderLocId, System_String* buffSpriteName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167A2E0))(this, buffNameLocID, buffHeaderLocId, buffSpriteName);
  }
  void ShowBuffLossNotification(System_String* buffNameLocID, System_String* buffHeaderLocId, System_String* buffSpriteName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167A480))(this, buffNameLocID, buffHeaderLocId, buffSpriteName);
  }
  void HideBuffNotification() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167A620))(this);
  }
  void UpdateBuffNotification() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167A710))(this);
  }
  void StartBuffNotificationTweeens(ModdingAPI::Exposed::UnityEngine::GameObject* parent) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167AB50))(this, parent);
  }
  void DoShowBuffNotification(ModdingAPI::Exposed::Panel_HUD::BuffNotification* buffNotification) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, ModdingAPI::Exposed::Panel_HUD::BuffNotification*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167AD20))(this, buffNotification);
  }
  void ShowCairnNotification(ModdingAPI::Exposed::Cairn* cairn) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, ModdingAPI::Exposed::Cairn*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167B2B0))(this, cairn);
  }
  void HideCairnNotification() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167B690))(this);
  }
  void UpdateCairnNotification() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167B790))(this);
  }
  void SetupCollectibleNote() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167B8B0))(this);
  }
  void ShowCollectibleNote(ModdingAPI::Exposed::GearItem* gearItem) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167BBB0))(this, gearItem);
  }
  void OnCollectibleNoteReadingClickBack() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167C680))(this);
  }
  void HideCollectibleNote(ModdingAPI::Exposed::GearItem* gearItem) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167C750))(this, gearItem);
  }
  void UpdateCollectibleNote() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167CC40))(this);
  }
  bool IsShowingCollectibleNote() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167CEF0))(this);
  }
  void ShowReadNoteButtonLegend() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167CF50))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167D120))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167E8C0))(this);
  }
  void LateUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167FE50))(this);
  }
  void EnableTimeOfDayScaleDisplay(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x167FE60))(this, enable);
  }
  void ForceDisableTimeOfDayScaleDisplay(bool disable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16801F0))(this, disable);
  }
  void EnableForcedTimeOfDayScaleDisplay(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1680200))(this, enable);
  }
  void SetConditionLabelDepth() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1680380))(this);
  }
  void Enable(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1680650))(this, enable);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x165DF10))(this);
  }
  void SetStruggleBarFillAmount(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1680790))(this, value);
  }
  void ShowStruggleWidget(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1680890))(this, enable);
  }
  void ShowStruggleRevolverWidget(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1680B00))(this, enable);
  }
  void ShowSurvivalTimeAfterRest(System_String* text, float numSeconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1680C40))(this, text, numSeconds);
  }
  void ShowLocationLabel(System_String* text, System_String* subText, float numSeconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*, System_String*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1680C80))(this, text, subText, numSeconds);
  }
  void ShowLocationReveal(System_String* text, System_String* subText, bool showNewLocation) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1680F70))(this, text, subText, showNewLocation);
  }
  void ShowRegionReveal(System_String* text, System_String* subText, bool showNewLocation) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16817A0))(this, text, subText, showNewLocation);
  }
  void ShowNewLocationDiscovered() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1681880))(this);
  }
  bool ShouldHideNotification() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1681A00))(this);
  }
  void MaybeHideNewLocationDiscovered() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1681B10))(this);
  }
  void HideLocationLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1681BE0))(this);
  }
  ModdingAPI::Exposed::UILabel* GetUILabel(System_String* label) {
    return reinterpret_cast<ModdingAPI::Exposed::UILabel*(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1681DD0))(this, label);
  }
  void OnSliderTODChange() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1681EE0))(this);
  }
  void StartItemProgressBar(float duration, System_String* progressLabel, ModdingAPI::Exposed::GearItem* relatedItem, ModdingAPI::Exposed::System::Action* callbackDelegate) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, float, System_String*, ModdingAPI::Exposed::GearItem*, ModdingAPI::Exposed::System::Action*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1682090))(this, duration, progressLabel, relatedItem, callbackDelegate);
  }
  void CancelItemProgressBar() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1682110))(this);
  }
  bool IsItemProgressBarActive() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1682130))(this);
  }
  bool IsProgressBarRelatedItem(ModdingAPI::Exposed::GearItem* item) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, ModdingAPI::Exposed::GearItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1682140))(this, item);
  }
  void SetHudDisplayMode(int32_t hudDisplayMode) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1682200))(this, hudDisplayMode);
  }
  void RefreshHudDisplayMode() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1682230))(this);
  }
  bool MaybeShowSubtitleForAudioEvent(System_String* eventName, bool forced) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16828D0))(this, eventName, forced);
  }
  bool ShowSubtitles(System_String* message) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1682BF0))(this, message);
  }
  void ShowSubtitlesForced(System_String* message) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1682D80))(this, message);
  }
  void DisplaySubtitleText(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1682DA0))(this, text);
  }
  void HideSubtitles(float secondsUntilHide) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1683180))(this, secondsUntilHide);
  }
  void HideSubtitlesImmediate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1683360))(this);
  }
  void DisplayWarningMessage(System_String* msg) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1683500))(this, msg);
  }
  void ClearWarningMessage() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16835F0))(this);
  }
  void FadeOutDamageEvents(float delayTime, float fadeOutTime) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1683730))(this, delayTime, fadeOutTime);
  }
  void ShowMissionTimer(bool visible) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1683760))(this, visible);
  }
  void RefreshMissionTimer(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16839B0))(this, text);
  }
  void ShowMissionMessage(bool visible) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1683AC0))(this, visible);
  }
  void RefreshObjectiveLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1683EC0))(this);
  }
  void RefreshMissionMessage(System_String* locID, ModdingAPI::Exposed::UnityEngine::Color col, bool allowSkipFirstTime) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*, ModdingAPI::Exposed::UnityEngine::Color, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1684100))(this, locID, col, allowSkipFirstTime);
  }
  void RefreshMissionMessageNoLoc(System_String* mesasge, ModdingAPI::Exposed::UnityEngine::Color col, bool allowSkipFirstTime) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*, ModdingAPI::Exposed::UnityEngine::Color, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1684A40))(this, mesasge, col, allowSkipFirstTime);
  }
  void ShowDebugMissionText(bool visible) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1685370))(this, visible);
  }
  void RefreshDebugMissionText(System_String* str, ModdingAPI::Exposed::UnityEngine::Color col) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1685430))(this, str, col);
  }
  void SetHoverText(System_String* hoverText, ModdingAPI::Exposed::UnityEngine::GameObject* itemUnderCrosshairs, int32_t textState) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*, ModdingAPI::Exposed::UnityEngine::GameObject*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1685600))(this, hoverText, itemUnderCrosshairs, textState);
  }
  bool GetCinematicBlackout() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16871E0))(this);
  }
  void SetCinematicBlackout(bool enabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16871F0))(this, enabled);
  }
  void HideHudElements(bool hide) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16872F0))(this, hide);
  }
  bool GetHideHudElements() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1687300))(this);
  }
  void HideReticle(bool hide) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1687310))(this, hide);
  }
  bool ShouldHideReticle() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1687320))(this);
  }
  void CleanupDamageEventTable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1687330))(this);
  }
  void SetExperimentalBuildLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void DoClickHoldCancel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16876C0))(this);
  }
  void DoExitDialogue() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16878C0))(this);
  }
  System_String* GetStoryHUDDebugText() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16879D0))(this);
  }
  void HideNotifications() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1687A50))(this);
  }
  void UpdateLocationLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1687CE0))(this);
  }
  bool LocationRevealIsShowing() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16882E0))(this);
  }
  void UpdateSurvivalTimeLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1688320))(this);
  }
  void ItemProgressBarCheck() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1688800))(this);
  }
  bool IsDialogueExitButtonAvailable() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1689120))(this);
  }
  void ExitDialogueUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1689210))(this);
  }
  void MaybeHideHudElementsThatOverlapPauseMenuIcon() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1689500))(this);
  }
  void UpdateDebugCompass() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1689740))(this);
  }
  bool ShouldHideConditionRelatedLabels() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16899F0))(this);
  }
  bool ShouldHideCaloriesLabel() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1689C80))(this);
  }
  bool ShouldShowAlternateColor() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1689EB0))(this);
  }
  void UpdateStaminaBar() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1689FA0))(this);
  }
  void UpdateAimingStaminaBar() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168ABE0))(this);
  }
  void UpdateStatusIcons() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168B840))(this);
  }
  void CreateFlyModeIcons() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void UpdateFlyModeIcons() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void MaintainOriginalObjectSize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168C410))(this);
  }
  void FadeOutAllEvents() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168C500))(this);
  }
  void MaybeFadeOutIndividualDamageEvents() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168C980))(this);
  }
  void UpdateDamageEventFade() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168CE20))(this);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168CE50))(this);
  }
  bool IsNonRadialOverlayActive() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168CE60))(this);
  }
  void SetUpConditionTween() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168CF50))(this);
  }
  void ToggleConditionTween(bool toggle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168D290))(this, toggle);
  }
  void UpdateBuffCapacityIcon(bool isEncumbered) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168D560))(this, isEncumbered);
  }
  void SetupPopupPanels() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168D980))(this);
  }
  void UpdatePopupPanels() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168D9B0))(this);
  }
  void MaybeHideCurrentMissionDisplay() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168E3C0))(this);
  }
  void SetCurrentMissionDisplay(System_String* missionName, System_String* objectives) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168E490))(this, missionName, objectives);
  }
  void ShowCurrentMissionDisplay(bool show) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168E630))(this, show);
  }
  void UpdateCurrentMissionDisplay() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168E850))(this);
  }
  void UpdateCurrentNPCCondition() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168EFA0))(this);
  }
  bool IsPackMoraleMeterIdle() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168F770))(this);
  }
  void SetMoraleMeterState(int32_t state) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168F9F0))(this, state);
  }
  bool IsMoraleMeterOptionEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168FC60))(this);
  }
  void UpdatePackMorale() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x168FD30))(this);
  }
  void QuietlyResetTimberWolfCombatMusic() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1690360))(this);
  }
  void ForceCurrentMissionDisplayUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1690460))(this);
  }
  System_String* GetDisplayedMissionId() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1690520))(this);
  }
  bool ShouldShowAfflictionSprite() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1690700))(this);
  }
  bool ShouldShowAfflictionRiskSprite() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16908F0))(this);
  }
  void OnControllerScheme(bool isController) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1690B20))(this, isController);
  }
  void EnableLargeSubtitles(bool enableLargeSubtitles) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1690C30))(this, enableLargeSubtitles);
  }
  void UpdateEnvironmentStateIconVisibility() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1690CC0))(this);
  }
  bool AreSubtitlesVisible() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1690EA0))(this);
  }
  void ShowCreditsCenter(System_String* msg, float tweenDuration, float waitDuration) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1690F70))(this, msg, tweenDuration, waitDuration);
  }
  void ShowCreditsSide(System_String* msgTop, System_String* msgCenter, System_String* msgBottom, float waitDuration) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*, System_String*, System_String*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1691140))(this, msgTop, msgCenter, msgBottom, waitDuration);
  }
  void ShowQueuedCredits(ModdingAPI::Exposed::Panel_HUD::CreditsQueueInfo* creditsInfo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, ModdingAPI::Exposed::Panel_HUD::CreditsQueueInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1691310))(this, creditsInfo);
  }
  void ShowQueuedCreditsCenter(System_String* msg) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16913A0))(this, msg);
  }
  void ShowQueuedCreditsSide(System_String* msgTop, System_String* msgCenter, System_String* msgBottom) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*, System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1691590))(this, msgTop, msgCenter, msgBottom);
  }
  void HideCredits() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1691890))(this);
  }
  void UpdateCredits() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1691970))(this);
  }
  void UpdateScentIndicator() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1691BD0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_HUD*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1691C40))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<int32_t> s_AnimState_PackMoraleIn = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_AnimState_PackMoraleIn; }
  );
  static inline __CppStaticProperty<int32_t> s_AnimState_PackMoraleOut = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_AnimState_PackMoraleOut; }
  );
  static inline __CppStaticProperty<int32_t> s_AnimState_PackMoraleIdle = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_AnimState_PackMoraleIdle; }
  );
  static inline __CppStaticProperty<bool> m_DebugHeavyBreathing = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_DebugHeavyBreathing; }
  );
  static inline __CppStaticProperty<bool> m_HideTestBuildWatermark = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_HideTestBuildWatermark; }
  );
  static inline __CppStaticProperty<float> DISPLAYED_MISSION_UPDATE_DELAY = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->DISPLAYED_MISSION_UPDATE_DELAY; }
  );
  static inline __CppStaticProperty<int32_t> NUM_CACHED_OBJECTIVES = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->NUM_CACHED_OBJECTIVES; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::String_array*> AUDIO_EVENT_REPLACEMENTS = __CppStaticProperty<ModdingAPI::Exposed::System::String_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->AUDIO_EVENT_REPLACEMENTS; }
  );
  static inline __CppStaticProperty<bool> s_DebugStoryHUD = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_DebugStoryHUD; }
  );

  // Static methods:
  static inline System_String* LocIdFromEvent(System_String* eventName, System_String* audioPrefix) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1682A10))(eventName, audioPrefix);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x16924F0))();
  }
};
}