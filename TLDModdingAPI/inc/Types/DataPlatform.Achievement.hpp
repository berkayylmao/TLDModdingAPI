// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::DataPlatform {
struct __Achievement_Il2CppStaticFields {
};

struct __Achievement_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_SetNativePtr;
  VirtualInvokeData _5_GetNativePtr;
  VirtualInvokeData _6_Dispose;
};

struct __Achievement_Il2CppClass {
  Il2CppClass_1 _1;
  __Achievement_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Achievement_Il2CppVtbl vtbl;
};

class Achievement {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C7EB30;
  static inline    __Achievement_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Achievement_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Achievement_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Achievement_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t m_Self;
  ModdingAPI::Exposed::DataPlatform::AchievementTimeWindow* m_Available;
  System_String* m_DeepLink;
  System_String* m_Id;
  System_String* m_LockedDescription;
  ModdingAPI::Exposed::DataPlatform::AchievementMediaAssetList* m_MediaAssets;
  System_String* m_Name;
  ModdingAPI::Exposed::DataPlatform::PlatformsAvailableOnList* m_PlatformsAvailableOn;
  System_String* m_ProductId;
  ModdingAPI::Exposed::DataPlatform::AchievementProgression* m_Progression;
  ModdingAPI::Exposed::DataPlatform::AchievementRewardList* m_Rewards;
  System_String* m_ServiceConfigurationId;
  ModdingAPI::Exposed::DataPlatform::AchievementTitleAssociationList* m_TitleAssociations;
  System_String* m_UnlockedDescription;

  // Member methods:
  int32_t get_GetAchievementType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F765C0))(this);
  }
  ModdingAPI::Exposed::DataPlatform::AchievementTimeWindow* get_Available() {
    return reinterpret_cast<ModdingAPI::Exposed::DataPlatform::AchievementTimeWindow*(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F76660))(this);
  }
  System_String* get_DeepLink() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F76850))(this);
  }
  int64_t get_EstimatedUnlockTime() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F769C0))(this);
  }
  System_String* get_Id() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F76A60))(this);
  }
  bool get_IsRevoked() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F76BD0))(this);
  }
  bool get_IsSecret() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F76C70))(this);
  }
  System_String* get_LockedDescription() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F76D10))(this);
  }
  ModdingAPI::Exposed::DataPlatform::AchievementMediaAssetList* get_MediaAssets() {
    return reinterpret_cast<ModdingAPI::Exposed::DataPlatform::AchievementMediaAssetList*(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F76E80))(this);
  }
  System_String* get_Name() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F770F0))(this);
  }
  int32_t get_ParticipationType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F77260))(this);
  }
  ModdingAPI::Exposed::DataPlatform::PlatformsAvailableOnList* get_PlatformsAvailableOn() {
    return reinterpret_cast<ModdingAPI::Exposed::DataPlatform::PlatformsAvailableOnList*(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F77300))(this);
  }
  System_String* get_ProductId() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F77570))(this);
  }
  ModdingAPI::Exposed::DataPlatform::AchievementProgression* get_Progression() {
    return reinterpret_cast<ModdingAPI::Exposed::DataPlatform::AchievementProgression*(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F776E0))(this);
  }
  int32_t get_ProgressState() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F778D0))(this);
  }
  ModdingAPI::Exposed::DataPlatform::AchievementRewardList* get_Rewards() {
    return reinterpret_cast<ModdingAPI::Exposed::DataPlatform::AchievementRewardList*(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F77970))(this);
  }
  System_String* get_ServiceConfigurationId() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F77BE0))(this);
  }
  ModdingAPI::Exposed::DataPlatform::AchievementTitleAssociationList* get_TitleAssociations() {
    return reinterpret_cast<ModdingAPI::Exposed::DataPlatform::AchievementTitleAssociationList*(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F77D50))(this);
  }
  System_String* get_UnlockedDescription() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F77FC0))(this);
  }
  void ::ctor(intptr_t self) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, self);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F78130))(this);
  }
  void SetNativePtr(intptr_t self) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, self);
  }
  intptr_t GetNativePtr() {
    return reinterpret_cast<intptr_t(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  void Finalize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F781C0))(this);
  }
  void Dispose() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F78330))(this);
  }
  intptr_t _get_DeepLink_b__5_0() {
    return reinterpret_cast<intptr_t(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F78450))(this);
  }
  intptr_t _get_Id_b__9_0() {
    return reinterpret_cast<intptr_t(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F784F0))(this);
  }
  intptr_t _get_LockedDescription_b__15_0() {
    return reinterpret_cast<intptr_t(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F78590))(this);
  }
  intptr_t _get_Name_b__19_0() {
    return reinterpret_cast<intptr_t(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F78630))(this);
  }
  intptr_t _get_ProductId_b__25_0() {
    return reinterpret_cast<intptr_t(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F786D0))(this);
  }
  intptr_t _get_ServiceConfigurationId_b__33_0() {
    return reinterpret_cast<intptr_t(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F78770))(this);
  }
  intptr_t _get_UnlockedDescription_b__37_0() {
    return reinterpret_cast<intptr_t(__fastcall*)(ModdingAPI::Exposed::DataPlatform::Achievement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F78810))(this);
  }
};
}