// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Bounds.hpp"


namespace ModdingAPI::Exposed::UnityEngine {
struct __AnimationClip_Il2CppStaticFields {
};

struct __AnimationClip_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __AnimationClip_Il2CppClass {
  Il2CppClass_1 _1;
  __AnimationClip_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AnimationClip_Il2CppVtbl vtbl;
};

class AnimationClip {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C94368;
  static inline    __AnimationClip_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __AnimationClip_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__AnimationClip_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __AnimationClip_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool Motion__isAnimatorMotion_k__BackingField;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14EC600))(this);
  }
  void SampleAnimation(ModdingAPI::Exposed::UnityEngine::GameObject* go, float time) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*, ModdingAPI::Exposed::UnityEngine::GameObject*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14EC720))(this, go, time);
  }
  float get_length() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14EC860))(this);
  }
  float get_startTime() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14EC8B0))(this);
  }
  float get_stopTime() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14EC900))(this);
  }
  float get_frameRate() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14EC950))(this);
  }
  void set_frameRate(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14EC9A0))(this, value);
  }
  void SetCurve(System_String* relativePath, ModdingAPI::Exposed::System::Type* type, System_String* propertyName, ModdingAPI::Exposed::UnityEngine::AnimationCurve* curve) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*, System_String*, ModdingAPI::Exposed::System::Type*, System_String*, ModdingAPI::Exposed::UnityEngine::AnimationCurve*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ECA00))(this, relativePath, type, propertyName, curve);
  }
  void EnsureQuaternionContinuity() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ECA90))(this);
  }
  void ClearCurves() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ECAE0))(this);
  }
  int32_t get_wrapMode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ECB30))(this);
  }
  void set_wrapMode(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ECB80))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Bounds get_localBounds() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Bounds(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ECBE0))(this);
  }
  void set_localBounds(ModdingAPI::Exposed::UnityEngine::Bounds value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*, ModdingAPI::Exposed::UnityEngine::Bounds)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ECC70))(this, value);
  }
  bool get_legacy() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ECCD0))(this);
  }
  void set_legacy(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ECD20))(this, value);
  }
  bool get_humanMotion() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ECD80))(this);
  }
  bool get_empty() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ECDD0))(this);
  }
  bool get_hasGenericRootTransform() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ECE20))(this);
  }
  bool get_hasMotionFloatCurves() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ECE70))(this);
  }
  bool get_hasMotionCurves() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ECEC0))(this);
  }
  bool get_hasRootCurves() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ECF10))(this);
  }
  bool get_hasRootMotion() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ECF60))(this);
  }
  void AddEvent(ModdingAPI::Exposed::UnityEngine::AnimationEvent* evt) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*, ModdingAPI::Exposed::UnityEngine::AnimationEvent*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ECFB0))(this, evt);
  }
  void AddEventInternal(Il2CppObject* evt) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ED0B0))(this, evt);
  }
  ModdingAPI::Exposed::UnityEngine::AnimationEvent_array* get_events() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::AnimationEvent_array*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ED110))(this);
  }
  void set_events(ModdingAPI::Exposed::UnityEngine::AnimationEvent_array* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*, ModdingAPI::Exposed::UnityEngine::AnimationEvent_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ED200))(this, value);
  }
  void SetEventsInternal(ModdingAPI::Exposed::System::Array* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*, ModdingAPI::Exposed::System::Array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ED200))(this, value);
  }
  ModdingAPI::Exposed::System::Array* GetEventsInternal() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Array*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ED260))(this);
  }
  void get_localBounds_Injected(ModdingAPI::Exposed::UnityEngine::Bounds ret) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*, ModdingAPI::Exposed::UnityEngine::Bounds)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ED2B0))(this, ret);
  }
  void set_localBounds_Injected(ModdingAPI::Exposed::UnityEngine::Bounds value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*, ModdingAPI::Exposed::UnityEngine::Bounds)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14ED310))(this, value);
  }

  // Static methods:
  static inline void Internal_CreateAnimationClip(ModdingAPI::Exposed::UnityEngine::AnimationClip* self) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14EC6D0))(self);
  }
  static inline void SampleAnimation(ModdingAPI::Exposed::UnityEngine::GameObject* go, ModdingAPI::Exposed::UnityEngine::AnimationClip* clip, float inTime, int32_t wrapMode) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*, ModdingAPI::Exposed::UnityEngine::AnimationClip*, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x14EC7E0))(go, clip, inTime, wrapMode);
  }
};
}