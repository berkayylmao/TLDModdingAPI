// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Rect.hpp"


namespace ModdingAPI::Exposed::UnityEngine {
struct __Texture2D_Il2CppStaticFields {
};

struct __Texture2D_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_width;
  VirtualInvokeData _5_set_width;
  VirtualInvokeData _6_get_height;
  VirtualInvokeData _7_set_height;
  VirtualInvokeData _8_get_dimension;
  VirtualInvokeData _9_set_dimension;
  VirtualInvokeData _10_get_isReadable;
};

struct __Texture2D_Il2CppClass {
  Il2CppClass_1 _1;
  __Texture2D_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Texture2D_Il2CppVtbl vtbl;
};

class Texture2D {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C45378;
  static inline    Texture2D* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C26718;
  static inline    __Texture2D_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline Texture2D* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (Texture2D**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __Texture2D_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Texture2D_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Texture2D_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;

  // Member methods:
  void ::ctor(int32_t width, int32_t height, int32_t format, int32_t flags, intptr_t nativeTex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, int32_t, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B2900))(this, width, height, format, flags, nativeTex);
  }
  void ::ctor(int32_t width, int32_t height, int32_t format, int32_t flags) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B2980))(this, width, height, format, flags);
  }
  void ::ctor(int32_t width, int32_t height, int32_t textureFormat, bool mipChain, bool linear, intptr_t nativeTex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, bool, bool, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B2A70))(this, width, height, textureFormat, mipChain, linear, nativeTex);
  }
  void ::ctor(int32_t width, int32_t height, int32_t textureFormat, bool mipChain, bool linear) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B2B80))(this, width, height, textureFormat, mipChain, linear);
  }
  void ::ctor(int32_t width, int32_t height, int32_t textureFormat, bool mipChain) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B2C50))(this, width, height, textureFormat, mipChain);
  }
  void ::ctor(int32_t width, int32_t height) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B2D20))(this, width, height);
  }
  int32_t get_mipmapCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B2E40))(this);
  }
  int32_t get_format() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B2E90))(this);
  }
  void Compress(bool highQuality) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B2F80))(this, highQuality);
  }
  bool get_isReadable() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3190))(this);
  }
  void ApplyImpl(bool updateMipmaps, bool makeNoLongerReadable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B31E0))(this, updateMipmaps, makeNoLongerReadable);
  }
  bool ResizeImpl(int32_t width, int32_t height) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3260))(this, width, height);
  }
  void SetPixelImpl(int32_t image, int32_t x, int32_t y, ModdingAPI::Exposed::UnityEngine::Color color) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B32D0))(this, image, x, y, color);
  }
  ModdingAPI::Exposed::UnityEngine::Color GetPixelImpl(int32_t image, int32_t x, int32_t y) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3360))(this, image, x, y);
  }
  ModdingAPI::Exposed::UnityEngine::Color GetPixelBilinearImpl(int32_t image, float x, float y) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3410))(this, image, x, y);
  }
  bool ResizeWithFormatImpl(int32_t width, int32_t height, int32_t format, bool hasMipMap) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B34C0))(this, width, height, format, hasMipMap);
  }
  void ReadPixelsImpl(ModdingAPI::Exposed::UnityEngine::Rect source, int32_t destX, int32_t destY, bool recalculateMipMaps) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, ModdingAPI::Exposed::UnityEngine::Rect, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3550))(this, source, destX, destY, recalculateMipMaps);
  }
  void SetPixelsImpl(int32_t x, int32_t y, int32_t w, int32_t h, ModdingAPI::Exposed::UnityEngine::Color_array* pixel, int32_t miplevel, int32_t frame) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Color_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B35E0))(this, x, y, w, h, pixel, miplevel, frame);
  }
  bool LoadRawTextureDataImpl(intptr_t data, int32_t size) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, intptr_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3660))(this, data, size);
  }
  bool LoadRawTextureDataImplArray(ModdingAPI::Exposed::System::Byte_array* data) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B36D0))(this, data);
  }
  intptr_t GetWritableImageData(int32_t frame) {
    return reinterpret_cast<intptr_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3730))(this, frame);
  }
  int64_t GetRawImageDataSize() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3790))(this);
  }
  bool get_streamingMipmaps() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3860))(this);
  }
  int32_t get_streamingMipmapsPriority() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B38B0))(this);
  }
  int32_t get_requestedMipmapLevel() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3900))(this);
  }
  void set_requestedMipmapLevel(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3950))(this, value);
  }
  int32_t get_desiredMipmapLevel() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B39B0))(this);
  }
  int32_t get_loadingMipmapLevel() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3A00))(this);
  }
  int32_t get_loadedMipmapLevel() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3A50))(this);
  }
  void ClearRequestedMipmapLevel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3AA0))(this);
  }
  bool IsRequestedMipmapLevelLoaded() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3AF0))(this);
  }
  void UpdateExternalTexture(intptr_t nativeTex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3B40))(this, nativeTex);
  }
  void SetAllPixels32(ModdingAPI::Exposed::UnityEngine::Color32_array* colors, int32_t miplevel) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, ModdingAPI::Exposed::UnityEngine::Color32_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3BA0))(this, colors, miplevel);
  }
  void SetBlockOfPixels32(int32_t x, int32_t y, int32_t blockWidth, int32_t blockHeight, ModdingAPI::Exposed::UnityEngine::Color32_array* colors, int32_t miplevel) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Color32_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3C10))(this, x, y, blockWidth, blockHeight, colors, miplevel);
  }
  ModdingAPI::Exposed::System::Byte_array* GetRawTextureData() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3C90))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Color_array* GetPixels(int32_t x, int32_t y, int32_t blockWidth, int32_t blockHeight, int32_t miplevel) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color_array*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3CE0))(this, x, y, blockWidth, blockHeight, miplevel);
  }
  ModdingAPI::Exposed::UnityEngine::Color_array* GetPixels(int32_t x, int32_t y, int32_t blockWidth, int32_t blockHeight) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color_array*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3D60))(this, x, y, blockWidth, blockHeight);
  }
  ModdingAPI::Exposed::UnityEngine::Color32_array* GetPixels32(int32_t miplevel) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color32_array*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3DF0))(this, miplevel);
  }
  ModdingAPI::Exposed::UnityEngine::Color32_array* GetPixels32() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color32_array*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3E50))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Rect_array* PackTextures(ModdingAPI::Exposed::UnityEngine::Texture2D_array* textures, int32_t padding, int32_t maximumAtlasSize, bool makeNoLongerReadable) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect_array*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, ModdingAPI::Exposed::UnityEngine::Texture2D_array*, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3EB0))(this, textures, padding, maximumAtlasSize, makeNoLongerReadable);
  }
  ModdingAPI::Exposed::UnityEngine::Rect_array* PackTextures(ModdingAPI::Exposed::UnityEngine::Texture2D_array* textures, int32_t padding, int32_t maximumAtlasSize) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect_array*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, ModdingAPI::Exposed::UnityEngine::Texture2D_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3F40))(this, textures, padding, maximumAtlasSize);
  }
  ModdingAPI::Exposed::UnityEngine::Rect_array* PackTextures(ModdingAPI::Exposed::UnityEngine::Texture2D_array* textures, int32_t padding) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect_array*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, ModdingAPI::Exposed::UnityEngine::Texture2D_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3F60))(this, textures, padding);
  }
  void SetPixel(int32_t x, int32_t y, ModdingAPI::Exposed::UnityEngine::Color color) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B4170))(this, x, y, color);
  }
  void SetPixels(int32_t x, int32_t y, int32_t blockWidth, int32_t blockHeight, ModdingAPI::Exposed::UnityEngine::Color_array* colors, int32_t miplevel) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Color_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B42A0))(this, x, y, blockWidth, blockHeight, colors, miplevel);
  }
  void SetPixels(int32_t x, int32_t y, int32_t blockWidth, int32_t blockHeight, ModdingAPI::Exposed::UnityEngine::Color_array* colors) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Color_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B43D0))(this, x, y, blockWidth, blockHeight, colors);
  }
  void SetPixels(ModdingAPI::Exposed::UnityEngine::Color_array* colors, int32_t miplevel) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, ModdingAPI::Exposed::UnityEngine::Color_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B4400))(this, colors, miplevel);
  }
  void SetPixels(ModdingAPI::Exposed::UnityEngine::Color_array* colors) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, ModdingAPI::Exposed::UnityEngine::Color_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B44B0))(this, colors);
  }
  ModdingAPI::Exposed::UnityEngine::Color GetPixel(int32_t x, int32_t y) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B4520))(this, x, y);
  }
  ModdingAPI::Exposed::UnityEngine::Color GetPixelBilinear(float x, float y) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B4660))(this, x, y);
  }
  void LoadRawTextureData(intptr_t data, int32_t size) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, intptr_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B47A0))(this, data, size);
  }
  void LoadRawTextureData(ModdingAPI::Exposed::System::Byte_array* data) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B4920))(this, data);
  }
  void Apply(bool updateMipmaps, bool makeNoLongerReadable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B4A90))(this, updateMipmaps, makeNoLongerReadable);
  }
  void Apply(bool updateMipmaps) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B4BA0))(this, updateMipmaps);
  }
  void Apply() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B4BB0))(this);
  }
  bool Resize(int32_t width, int32_t height) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B4BC0))(this, width, height);
  }
  bool Resize(int32_t width, int32_t height, int32_t format, bool hasMipMap) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B4CD0))(this, width, height, format, hasMipMap);
  }
  void ReadPixels(ModdingAPI::Exposed::UnityEngine::Rect source, int32_t destX, int32_t destY, bool recalculateMipMaps) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, ModdingAPI::Exposed::UnityEngine::Rect, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B4E00))(this, source, destX, destY, recalculateMipMaps);
  }
  void ReadPixels(ModdingAPI::Exposed::UnityEngine::Rect source, int32_t destX, int32_t destY) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, ModdingAPI::Exposed::UnityEngine::Rect, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B4F30))(this, source, destX, destY);
  }
  void SetPixels32(ModdingAPI::Exposed::UnityEngine::Color32_array* colors, int32_t miplevel) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, ModdingAPI::Exposed::UnityEngine::Color32_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3BA0))(this, colors, miplevel);
  }
  void SetPixels32(ModdingAPI::Exposed::UnityEngine::Color32_array* colors) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, ModdingAPI::Exposed::UnityEngine::Color32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B5260))(this, colors);
  }
  void SetPixels32(int32_t x, int32_t y, int32_t blockWidth, int32_t blockHeight, ModdingAPI::Exposed::UnityEngine::Color32_array* colors, int32_t miplevel) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Color32_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3C10))(this, x, y, blockWidth, blockHeight, colors, miplevel);
  }
  void SetPixels32(int32_t x, int32_t y, int32_t blockWidth, int32_t blockHeight, ModdingAPI::Exposed::UnityEngine::Color32_array* colors) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Color32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B52D0))(this, x, y, blockWidth, blockHeight, colors);
  }
  ModdingAPI::Exposed::UnityEngine::Color_array* GetPixels(int32_t miplevel) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color_array*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B5360))(this, miplevel);
  }
  ModdingAPI::Exposed::UnityEngine::Color_array* GetPixels() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color_array*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B5430))(this);
  }
  void SetPixelImpl_Injected(int32_t image, int32_t x, int32_t y, ModdingAPI::Exposed::UnityEngine::Color color) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B54F0))(this, image, x, y, color);
  }
  void GetPixelImpl_Injected(int32_t image, int32_t x, int32_t y, ModdingAPI::Exposed::UnityEngine::Color ret) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B5570))(this, image, x, y, ret);
  }
  void GetPixelBilinearImpl_Injected(int32_t image, float x, float y, ModdingAPI::Exposed::UnityEngine::Color ret) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, float, float, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B55F0))(this, image, x, y, ret);
  }
  void ReadPixelsImpl_Injected(ModdingAPI::Exposed::UnityEngine::Rect source, int32_t destX, int32_t destY, bool recalculateMipMaps) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, ModdingAPI::Exposed::UnityEngine::Rect, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B5670))(this, source, destX, destY, recalculateMipMaps);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::UnityEngine::Texture2D* get_whiteTexture() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Texture2D*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B2EE0))();
  }
  static inline ModdingAPI::Exposed::UnityEngine::Texture2D* get_blackTexture() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Texture2D*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B2F30))();
  }
  static inline bool Internal_CreateImpl(ModdingAPI::Exposed::UnityEngine::Texture2D* mono, int32_t w, int32_t h, int32_t format, int32_t flags, intptr_t nativeTex) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, int32_t, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B2FE0))(mono, w, h, format, flags, nativeTex);
  }
  static inline void Internal_Create(ModdingAPI::Exposed::UnityEngine::Texture2D* mono, int32_t w, int32_t h, int32_t format, int32_t flags, intptr_t nativeTex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Texture2D*, int32_t, int32_t, int32_t, int32_t, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3060))(mono, w, h, format, flags, nativeTex);
  }
  static inline void GenerateAtlasImpl(ModdingAPI::Exposed::UnityEngine::Vector2_array* sizes, int32_t padding, int32_t atlasSize, ModdingAPI::Exposed::UnityEngine::Rect_array* rect) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2_array*, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Rect_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B37E0))(sizes, padding, atlasSize, rect);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Texture2D* CreateExternalTexture(int32_t width, int32_t height, int32_t format, bool mipChain, bool linear, intptr_t nativeTex) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Texture2D*(__fastcall*)(int32_t, int32_t, int32_t, bool, bool, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B3F90))(width, height, format, mipChain, linear, nativeTex);
  }
  static inline bool GenerateAtlas(ModdingAPI::Exposed::UnityEngine::Vector2_array* sizes, int32_t padding, int32_t atlasSize, ModdingAPI::Exposed::System::Collections::Generic::List_T_* results) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2_array*, int32_t, int32_t, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10B4F60))(sizes, padding, atlasSize, results);
  }
};
}