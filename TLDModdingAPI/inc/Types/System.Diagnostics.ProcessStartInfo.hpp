// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Diagnostics {
struct __ProcessStartInfo_Il2CppStaticFields {
  ModdingAPI::Exposed::System::String_array* empty;
};

struct __ProcessStartInfo_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ProcessStartInfo_Il2CppClass {
  Il2CppClass_1 _1;
  __ProcessStartInfo_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ProcessStartInfo_Il2CppVtbl vtbl;
};

class ProcessStartInfo {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C79FB8;
  static inline    __ProcessStartInfo_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ProcessStartInfo_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ProcessStartInfo_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ProcessStartInfo_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  System_String* fileName;
  System_String* arguments;
  System_String* directory;
  System_String* verb;
  int32_t windowStyle;
  bool errorDialog;
  intptr_t errorDialogParentHandle;
  bool useShellExecute;
  System_String* userName;
  System_String* domain;
  ModdingAPI::Exposed::System::Security::SecureString* password;
  System_String* passwordInClearText;
  bool loadUserProfile;
  bool redirectStandardInput;
  bool redirectStandardOutput;
  bool redirectStandardError;
  ModdingAPI::Exposed::System::Text::Encoding* standardOutputEncoding;
  ModdingAPI::Exposed::System::Text::Encoding* standardErrorEncoding;
  bool createNoWindow;
  ModdingAPI::Exposed::System::WeakReference* weakParentProcess;
  ModdingAPI::Exposed::System::Collections::Specialized::StringDictionary* environmentVariables;
  ModdingAPI::Exposed::System::Collections::Generic::IDictionary_TKey__TValue_* environment;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Diagnostics::Process* parent) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::ProcessStartInfo*, ModdingAPI::Exposed::System::Diagnostics::Process*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC22540))(this, parent);
  }
  void ::ctor(System_String* fileName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::ProcessStartInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC226A0))(this, fileName);
  }
  System_String* get_Arguments() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::ProcessStartInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC226B0))(this);
  }
  ModdingAPI::Exposed::System::Collections::Specialized::StringDictionary* get_EnvironmentVariables() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Specialized::StringDictionary*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::ProcessStartInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC22740))(this);
  }
  bool get_RedirectStandardInput() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::ProcessStartInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC22D10))(this);
  }
  bool get_RedirectStandardOutput() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::ProcessStartInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xBF3E90))(this);
  }
  bool get_RedirectStandardError() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::ProcessStartInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC22D20))(this);
  }
  ModdingAPI::Exposed::System::Text::Encoding* get_StandardErrorEncoding() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::Encoding*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::ProcessStartInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319950))(this);
  }
  ModdingAPI::Exposed::System::Text::Encoding* get_StandardOutputEncoding() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::Encoding*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::ProcessStartInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319940))(this);
  }
  bool get_UseShellExecute() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::ProcessStartInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE420))(this);
  }
  System_String* get_UserName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::ProcessStartInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC22D30))(this);
  }
  ModdingAPI::Exposed::System::Security::SecureString* get_Password() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::SecureString*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::ProcessStartInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383960))(this);
  }
  System_String* get_Domain() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::ProcessStartInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC22DC0))(this);
  }
  bool get_LoadUserProfile() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::ProcessStartInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7DA960))(this);
  }
  System_String* get_FileName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::ProcessStartInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC22E50))(this);
  }
  System_String* get_WorkingDirectory() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::ProcessStartInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC22EE0))(this);
  }
  bool get_HaveEnvVars() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Diagnostics::ProcessStartInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC22F70))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::String_array*> empty = __CppStaticProperty<ModdingAPI::Exposed::System::String_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->empty; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xC22F80))();
  }
};
}