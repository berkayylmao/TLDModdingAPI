// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __Frostbite_Il2CppStaticFields {
  ModdingAPI::Exposed::FrostbiteSaveDataProxy* m_FrostbiteSaveDataProxy;
};

struct __Frostbite_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Frostbite_Il2CppClass {
  Il2CppClass_1 _1;
  __Frostbite_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Frostbite_Il2CppVtbl vtbl;
};

class Frostbite {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C4E4E0;
  static inline    __Frostbite_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Frostbite_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Frostbite_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Frostbite_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::LocalizedString* m_LocalizedDisplayName;
  ModdingAPI::Exposed::LocalizedString* m_LocalizedDescription;
  float m_TemperatureToBeginFrostbiteDamage;
  float m_DamagePerHourBase;
  float m_DamagePerHourIncreasePerDegree;
  float m_MaxDamagePerHour;
  float m_DamageMultiplierInnerFrozenClothing;
  float m_PilgrimDamageMultiplier;
  float m_VoyageurDamageMultiplier;
  float m_StalkerDamageMultiplier;
  float m_InterloperDamageMultiplier;
  float m_TemperatureToBeginFrostbiteHeal;
  float m_HealPerHourBase;
  float m_HealPerHourIncreasePerDegree;
  float m_MaxHealPerHour;
  ModdingAPI::Exposed::Frostbite::BodyAreaFrostbiteHP_array* m_BodyAreaFrostbiteMaxHPList;
  float m_HPPercentThresholdToStartRisk;
  float m_MaxPlayerHPReductionPerInstance;
  System_String* m_FrostbiteVO;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_LocationsWithActiveFrostbite;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_LocationsWithFrostbiteRisk;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_LocationsCurrentFrostbiteDamage;
  bool m_StartHasBeenCalled;
  bool m_SuppressFrostbite;
  ModdingAPI::Exposed::System::Single_array* m_MaxHPList;

  // Member methods:
  System_String* get_m_DisplayName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E35A0))(this);
  }
  System_String* get_m_Description() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E35C0))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F44E0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F46F0))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F4810))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Frostbite*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F4AB0))(this, text);
  }
  void FrostbiteStart(int32_t location, bool displayIcon, bool nofx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Frostbite*, int32_t, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F4E30))(this, location, displayIcon, nofx);
  }
  void FrostbiteEnd() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F5290))(this);
  }
  float GetTotalHitPointReduction() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F5400))(this);
  }
  int32_t NumInstancesFrostbite() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F5500))(this);
  }
  int32_t NumInstancesFrostbiteAtLocation(int32_t location) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Frostbite*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F55F0))(this, location);
  }
  bool HasFrostbite() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F56D0))(this);
  }
  bool HasFrostbiteRisk() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F5760))(this);
  }
  bool HasFrostbiteAffliction() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F57F0))(this);
  }
  bool HasFrostbiteRiskAffliction() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F5810))(this);
  }
  int32_t GetFrostbiteRiskAfflictionCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F5830))(this);
  }
  int32_t GetFrostbiteAfflictionCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F5930))(this);
  }
  float GetFrostbiteRiskValue(int32_t location) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Frostbite*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F5A50))(this, location);
  }
  int32_t GetFrostBiteRiskLocation(int32_t localAfflictionIndex) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Frostbite*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F5B70))(this, localAfflictionIndex);
  }
  int32_t GetFrostBiteLocation(int32_t localAfflictionIndex) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Frostbite*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F5CE0))(this, localAfflictionIndex);
  }
  void SetSuppressFrostbite(bool suppress) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Frostbite*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAFE180))(this, suppress);
  }
  bool GetSuppressFrostbite() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA011C0))(this);
  }
  bool LocationIsIgnored(int32_t location) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Frostbite*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F5E60))(this, location);
  }
  void UpdateFrostbite() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F5E80))(this);
  }
  void DealFrostbiteDamageToRegion(float damageValue, int32_t region) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Frostbite*, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F6440))(this, damageValue, region);
  }
  bool DealFrostbiteDamageToLocation(float damageValue, int32_t bodyArea) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Frostbite*, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F65F0))(this, damageValue, bodyArea);
  }
  float CalculateBodyTemperatureWithoutClothing() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F6C00))(this);
  }
  float GetXPModeMultiplier() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F6E30))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Frostbite*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F7190))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::FrostbiteSaveDataProxy*> m_FrostbiteSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::FrostbiteSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_FrostbiteSaveDataProxy; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x15F7710))();
  }
};
}