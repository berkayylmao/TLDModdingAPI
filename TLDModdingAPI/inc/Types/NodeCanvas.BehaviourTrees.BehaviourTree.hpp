// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed::NodeCanvas::BehaviourTrees {
struct __BehaviourTree_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Action_T1__T2_* onRootStatusChanged;
};

struct __BehaviourTree_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_agent;
  VirtualInvokeData _5_get_blackboard;
  VirtualInvokeData _6_get_elapsedTime;
  VirtualInvokeData _7_NodeCanvas_Framework_ITaskSystem_get_contextObject;
  VirtualInvokeData _8_SendTaskOwnerDefaults;
  VirtualInvokeData _9_SendEvent;
  VirtualInvokeData _10_RecordUndo;
  VirtualInvokeData _11_UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize;
  VirtualInvokeData _12_UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize;
  VirtualInvokeData _13_OnDerivedDataSerialization;
  VirtualInvokeData _14_OnDerivedDataDeserialization;
  VirtualInvokeData _15_OnGraphValidate;
  VirtualInvokeData _16_get_baseNodeType;
  VirtualInvokeData _17_get_requiresAgent;
  VirtualInvokeData _18_get_requiresPrimeNode;
  VirtualInvokeData _19_get_isTree;
  VirtualInvokeData _20_get_useLocalBlackboard;
  VirtualInvokeData _21_get_canAcceptVariableDrops;
  VirtualInvokeData _22_OnGraphStarted;
  VirtualInvokeData _23_OnGraphUpdate;
  VirtualInvokeData _24_OnGraphStoped;
  VirtualInvokeData _25_OnGraphPaused;
  VirtualInvokeData _26_OnGraphUnpaused;
};

struct __BehaviourTree_Il2CppClass {
  Il2CppClass_1 _1;
  __BehaviourTree_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __BehaviourTree_Il2CppVtbl vtbl;
};

class BehaviourTree {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C78838;
  static inline    BehaviourTree* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C62940;
  static inline    __BehaviourTree_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline BehaviourTree* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (BehaviourTree**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __BehaviourTree_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__BehaviourTree_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __BehaviourTree_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  System_String* Graph__serializedGraph;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* Graph__objectReferences;
  bool Graph__deserializationFailed;
  bool Graph_hasDeserialized;
  System_String* Graph__category;
  System_String* Graph__comments;
  ModdingAPI::Exposed::UnityEngine::Vector2 Graph__translation;
  float Graph__zoomFactor;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* Graph__nodes;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* Graph__canvasGroups;
  ModdingAPI::Exposed::NodeCanvas::Framework::Internal::BlackboardSource* Graph__localBlackboard;
  ModdingAPI::Exposed::System::Action_T_* Graph_onFinish;
  ModdingAPI::Exposed::UnityEngine::Component* Graph__agent;
  ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* Graph__blackboard;
  float Graph_timeStarted;
  bool Graph_initialReferencesUpdated;
  bool Graph__isAutoUpdated;
  bool Graph__isRunning;
  bool Graph__isPaused;
  bool repeat;
  float updateInterval;
  float intervalCounter;
  int32_t _rootStatus;

  // Member methods:
  Il2CppObject* OnDerivedDataSerialization() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::BehaviourTrees::BehaviourTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E8F980))(this);
  }
  void OnDerivedDataDeserialization(Il2CppObject* data) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::BehaviourTrees::BehaviourTree*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E8FA40))(this, data);
  }
  int32_t get_rootStatus() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::BehaviourTrees::BehaviourTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383AC0))(this);
  }
  void set_rootStatus(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::BehaviourTrees::BehaviourTree*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E8FD30))(this, value);
  }
  ModdingAPI::Exposed::System::Type* get_baseNodeType() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::BehaviourTrees::BehaviourTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E8FDF0))(this);
  }
  bool get_requiresAgent() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::BehaviourTrees::BehaviourTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x403F70))(this);
  }
  bool get_requiresPrimeNode() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::BehaviourTrees::BehaviourTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x403F70))(this);
  }
  bool get_isTree() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::BehaviourTrees::BehaviourTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x403F70))(this);
  }
  bool get_useLocalBlackboard() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::BehaviourTrees::BehaviourTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this);
  }
  bool get_canAcceptVariableDrops() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::BehaviourTrees::BehaviourTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this);
  }
  void OnGraphStarted() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::BehaviourTrees::BehaviourTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E8FE90))(this);
  }
  void OnGraphUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::BehaviourTrees::BehaviourTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E8FED0))(this);
  }
  int32_t Tick(ModdingAPI::Exposed::UnityEngine::Component* agent, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* blackboard) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::BehaviourTrees::BehaviourTree*, ModdingAPI::Exposed::UnityEngine::Component*, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E90050))(this, agent, blackboard);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::BehaviourTrees::BehaviourTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E90100))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Action_T1__T2_*> onRootStatusChanged = __CppStaticProperty<ModdingAPI::Exposed::System::Action_T1__T2_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->onRootStatusChanged; }
  );

  // Static methods:
  static inline void add_onRootStatusChanged(ModdingAPI::Exposed::System::Action_T1__T2_* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Action_T1__T2_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E8FB30))(value);
  }
  static inline void remove_onRootStatusChanged(ModdingAPI::Exposed::System::Action_T1__T2_* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Action_T1__T2_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E8FC30))(value);
  }
};
}