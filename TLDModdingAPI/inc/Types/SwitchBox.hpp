// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __SwitchBox_Il2CppStaticFields {
  ModdingAPI::Exposed::SwitchBoxSaveDataProxy* s_SwitchBoxSaveDataProxy;
};

struct __SwitchBox_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SwitchBox_Il2CppClass {
  Il2CppClass_1 _1;
  __SwitchBox_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SwitchBox_Il2CppVtbl vtbl;
};

class SwitchBox {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C57CC0;
  static inline    __SwitchBox_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __SwitchBox_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__SwitchBox_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __SwitchBox_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::LocalizedString* m_LocalizedDisplayName;
  int32_t m_SwitchToggleState;
  bool m_IsLocked;
  float m_AuroraThreshold;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BoxBase;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_PowerLever;
  ModdingAPI::Exposed::UnityEngine::Light* m_LightOn;
  ModdingAPI::Exposed::UnityEngine::Light* m_LightOff;
  float m_TransitionTime;
  float m_NeedleAngle;
  System_String* m_LoopAudio;
  System_String* m_TurnOffAudio;
  float m_Timer;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_NeedleOn;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_NeedleOff;
  ModdingAPI::Exposed::UnityEngine::Renderer* m_SwitchBox;
  uint32_t m_LoopAudioID;
  bool m_UpdateImmediate;

  // Member methods:
  System_String* get_m_DisplayName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::SwitchBox*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E35A0))(this);
  }
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SwitchBox*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EB6810))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SwitchBox*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EB6A00))(this);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SwitchBox*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EB6B50))(this);
  }
  void SetState(int32_t state) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SwitchBox*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3838E0))(this, state);
  }
  void SetLocked(bool isLocked) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SwitchBox*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56ED10))(this, isLocked);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SwitchBox*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EB6CF0))(this);
  }
  void UpdateLights() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SwitchBox*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EB6EE0))(this);
  }
  void UpdateHandle(float lerpTime) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SwitchBox*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EB72B0))(this, lerpTime);
  }
  bool ProcessInteraction() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::SwitchBox*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EB74F0))(this);
  }
  void TurnOn() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SwitchBox*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EB7640))(this);
  }
  void TurnOff() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SwitchBox*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EB7750))(this);
  }
  System_String* GetHoverText() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::SwitchBox*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15E35A0))(this);
  }
  void TurnAudioOn() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SwitchBox*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EB78D0))(this);
  }
  void TurnAudioOff() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SwitchBox*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EB79E0))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::SwitchBox*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EB7B60))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SwitchBox*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EB7CF0))(this, text);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::SwitchBox*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EB7DC0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::SwitchBoxSaveDataProxy*> s_SwitchBoxSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::SwitchBoxSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_SwitchBoxSaveDataProxy; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1EB7DE0))();
  }
};
}