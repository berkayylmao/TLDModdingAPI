// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Runtime.Serialization.StreamingContext.hpp"
#include "ModdingAPI::Exposed::Mono::MonoAssemblyName.hpp"


namespace ModdingAPI::Exposed::System::Reflection {
struct __AssemblyName_Il2CppStaticFields {
};

struct __AssemblyName_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Clone;
  VirtualInvokeData _5_GetObjectData;
  VirtualInvokeData _6_OnDeserialization;
};

struct __AssemblyName_Il2CppClass {
  Il2CppClass_1 _1;
  __AssemblyName_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AssemblyName_Il2CppVtbl vtbl;
};

class AssemblyName {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C54AC0;
  static inline    __AssemblyName_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __AssemblyName_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__AssemblyName_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __AssemblyName_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  System_String* name;
  System_String* codebase;
  int32_t major;
  int32_t minor;
  int32_t build;
  int32_t revision;
  ModdingAPI::Exposed::System::Globalization::CultureInfo* cultureinfo;
  int32_t flags;
  int32_t hashalg;
  ModdingAPI::Exposed::System::Reflection::StrongNameKeyPair* keypair;
  ModdingAPI::Exposed::System::Byte_array* publicKey;
  ModdingAPI::Exposed::System::Byte_array* keyToken;
  int32_t versioncompat;
  ModdingAPI::Exposed::System::Version* version;
  int32_t processor_architecture;
  int32_t contentType;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF44E0))(this);
  }
  void ::ctor(System_String* assemblyName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF4500))(this, assemblyName);
  }
  void ::ctor(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo* si, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext sc) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*, ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF47E0))(this, si, sc);
  }
  System_String* get_Name() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  void set_Name(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, value);
  }
  ModdingAPI::Exposed::System::Globalization::CultureInfo* get_CultureInfo() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Globalization::CultureInfo*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335370))(this);
  }
  void set_CultureInfo(ModdingAPI::Exposed::System::Globalization::CultureInfo* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*, ModdingAPI::Exposed::System::Globalization::CultureInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A410))(this, value);
  }
  int32_t get_Flags() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8A0))(this);
  }
  void set_Flags(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8B0))(this, value);
  }
  System_String* get_FullName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF4C60))(this);
  }
  ModdingAPI::Exposed::System::Version* get_Version() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Version*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3199C0))(this);
  }
  void set_Version(ModdingAPI::Exposed::System::Version* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*, ModdingAPI::Exposed::System::Version*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF5160))(this, value);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF52D0))(this);
  }
  ModdingAPI::Exposed::System::Byte_array* GetPublicKey() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319980))(this);
  }
  ModdingAPI::Exposed::System::Byte_array* GetPublicKeyToken() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF5320))(this);
  }
  bool get_IsPublicKeyValid() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF5430))(this);
  }
  ModdingAPI::Exposed::System::Byte_array* InternalGetPublicKeyToken() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF5500))(this);
  }
  ModdingAPI::Exposed::System::Byte_array* ComputePublicKeyToken() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF5610))(this);
  }
  void SetPublicKey(ModdingAPI::Exposed::System::Byte_array* publicKey) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF5700))(this, publicKey);
  }
  void GetObjectData(ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo* info, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*, ModdingAPI::Exposed::System::Runtime::Serialization::SerializationInfo*, ModdingAPI::Exposed::System::Runtime::Serialization::StreamingContext)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF5720))(this, info, context);
  }
  Il2CppObject* Clone() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF5970))(this);
  }
  void OnDeserialization(Il2CppObject* sender) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF5B20))(this, sender);
  }
  void FillName(ModdingAPI::Exposed::Mono::MonoAssemblyName* native, System_String* codeBase, bool addVersion, bool addPublickey, bool defaultToken, bool assemblyRef) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Reflection::AssemblyName*, ModdingAPI::Exposed::Mono::MonoAssemblyName*, System_String*, bool, bool, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF5B40))(this, native, codeBase, addVersion, addPublickey, defaultToken, assemblyRef);
  }

  // Static methods:
  static inline bool ParseAssemblyName(intptr_t name, ModdingAPI::Exposed::Mono::MonoAssemblyName aname, bool is_version_definited, bool is_token_defined) {
    return reinterpret_cast<bool(__fastcall*)(intptr_t, ModdingAPI::Exposed::Mono::MonoAssemblyName, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF44F0))(name, aname, is_version_definited, is_token_defined);
  }
  static inline void get_public_token(uint8_t* token, uint8_t* pubkey, int32_t len) {
    reinterpret_cast<void(__fastcall*)(uint8_t*, uint8_t*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6DF1D0))(token, pubkey, len);
  }
  static inline ModdingAPI::Exposed::Mono::MonoAssemblyName* GetNativeName(intptr_t assembly_ptr) {
    return reinterpret_cast<ModdingAPI::Exposed::Mono::MonoAssemblyName*(__fastcall*)(intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF5B30))(assembly_ptr);
  }
  static inline ModdingAPI::Exposed::System::Reflection::AssemblyName* Create(ModdingAPI::Exposed::System::Reflection::Assembly* assembly, bool fillCodebase) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Reflection::AssemblyName*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::Assembly*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCF5FF0))(assembly, fillCodebase);
  }
};
}