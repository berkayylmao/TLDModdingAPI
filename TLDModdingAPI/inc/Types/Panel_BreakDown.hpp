// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __Panel_BreakDown_Il2CppStaticFields {
};

struct __Panel_BreakDown_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Panel_BreakDown_Il2CppClass {
  Il2CppClass_1 _1;
  __Panel_BreakDown_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Panel_BreakDown_Il2CppVtbl vtbl;
};

class Panel_BreakDown {
public:
  // Il2Cpp fields:
  __Panel_BreakDown_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::ButtonLegendContainer* m_ButtonLegendContainer;
  float m_SecondsToBreakDown;
  ModdingAPI::Exposed::UILabel* m_BreakDownNameLabel;
  ModdingAPI::Exposed::UILabel* m_ToolToUseLabel;
  ModdingAPI::Exposed::UILabel* m_DurationLabel;
  ModdingAPI::Exposed::UILabel* m_EstimatedCaloriesBurnedLabel;
  ModdingAPI::Exposed::UILabel* m_CurrentCaloriesLabel;
  ModdingAPI::Exposed::UILabel* m_CurrentCaloriesValLabel;
  ModdingAPI::Exposed::UITexture* m_SelectedToolTexture;
  ModdingAPI::Exposed::UISprite* m_ToolConditionSprite;
  ModdingAPI::Exposed::UILabel* m_ToolConditionLabel;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_PanelElements;
  System_String* m_NoToolSpriteName;
  ModdingAPI::Exposed::UnityEngine::Color m_NoToolSpriteColor;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_NoToolSpriteSizeModifier;
  ModdingAPI::Exposed::HarvestRepairMaterial_array* m_YieldObjects;
  float m_YieldObjectCenteredX;
  float m_YieldObjectSpacing;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BreakDownButton;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_RequiresToolLabel;
  ModdingAPI::Exposed::BreakDown* m_BreakDown;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ToolSelectObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ToolSelectButtons;
  float m_DurationHours;
  int32_t m_SelectedToolItemIndex;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Tools;
  bool m_IsBreakingDown;
  float m_TimeSpentBreakingDown;
  bool m_TimeIsAccelerated;
  float m_StoredDayLengthScale;
  int32_t m_FramesInPanel;
  uint32_t m_BreakDownAudio;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B31070))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B311C0))(this);
  }
  void Enable(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B31A40))(this, enable);
  }
  bool IsEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x165DF10))(this);
  }
  bool IsTimeAccelerated() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x86FCE0))(this);
  }
  bool IsBreakingDown() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4F22B0))(this);
  }
  void ExitInterface() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B31ED0))(this);
  }
  void OnNextTool() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B31EE0))(this);
  }
  void OnPrevTool() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B31FF0))(this);
  }
  void OnCancel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B320F0))(this);
  }
  void OnBreakDown() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B321A0))(this);
  }
  void BreakDownFinished() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B32630))(this);
  }
  void UpdateDurationLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B32970))(this);
  }
  void UpdateEstimatedCaloriesBurnedLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B32B70))(this);
  }
  void UpdateCurrentCaloriesLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B32D10))(this);
  }
  void UpdateToolLabel() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B32F30))(this);
  }
  void UpdateIcons() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B33080))(this);
  }
  ModdingAPI::Exposed::GearItem* GetSelectedTool() {
    return reinterpret_cast<ModdingAPI::Exposed::GearItem*(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B33890))(this);
  }
  void RefreshTools() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B33930))(this);
  }
  void MakeDefaultSelections() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B33C50))(this);
  }
  System_String* GetSignedInt(int32_t value) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B33D80))(this, value);
  }
  System_String* GetSignedPercentage(float value) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B33E70))(this, value);
  }
  void RefreshYield() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B33FA0))(this);
  }
  bool ToolIsUsable(ModdingAPI::Exposed::UnityEngine::GameObject* tool) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B34480))(this, tool);
  }
  void DegradeToolUsed() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B34630))(this);
  }
  void UpdateButtonLegend() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B34700))(this);
  }
  void StartAudioAndRumbleEffects() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B34830))(this);
  }
  void StopAudioAndRumbleEffects() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B34950))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Panel_BreakDown*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B34A90))(this);
  }
};
}