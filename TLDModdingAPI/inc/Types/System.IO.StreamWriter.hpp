// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::IO {
struct __StreamWriter_Il2CppStaticFields {
  ModdingAPI::Exposed::System::IO::StreamWriter* Null;
  ModdingAPI::Exposed::System::Text::Encoding* _UTF8NoBOM;
};

struct __StreamWriter_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_CreateObjRef;
  VirtualInvokeData _5_InitializeLifetimeService;
  VirtualInvokeData _6_Dispose;
  VirtualInvokeData _7_get_FormatProvider;
  VirtualInvokeData _8_Close;
  VirtualInvokeData _9_Dispose;
  VirtualInvokeData _10_Flush;
  VirtualInvokeData _11_get_Encoding;
  VirtualInvokeData _12_Write;
  VirtualInvokeData _13_Write;
  VirtualInvokeData _14_Write;
  VirtualInvokeData _15_Write;
  VirtualInvokeData _16_Write;
  VirtualInvokeData _17_WriteLine;
  VirtualInvokeData _18_WriteLine;
  VirtualInvokeData _19_WriteLine;
  VirtualInvokeData _20_WriteLine;
  VirtualInvokeData _21_WriteLine;
  VirtualInvokeData _22_WriteLine;
  VirtualInvokeData _23_WriteLine;
  VirtualInvokeData _24_set_AutoFlush;
};

struct __StreamWriter_Il2CppClass {
  Il2CppClass_1 _1;
  __StreamWriter_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __StreamWriter_Il2CppVtbl vtbl;
};

class StreamWriter {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C7E5E8;
  static inline    __StreamWriter_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __StreamWriter_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__StreamWriter_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __StreamWriter_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  Il2CppObject* MarshalByRefObject__identity;
  ModdingAPI::Exposed::System::Char_array* CoreNewLine;
  ModdingAPI::Exposed::System::IFormatProvider* TextWriter_InternalFormatProvider;
  ModdingAPI::Exposed::System::IO::Stream* stream;
  ModdingAPI::Exposed::System::Text::Encoding* encoding;
  ModdingAPI::Exposed::System::Text::Encoder* encoder;
  ModdingAPI::Exposed::System::Byte_array* byteBuffer;
  ModdingAPI::Exposed::System::Char_array* charBuffer;
  int32_t charPos;
  int32_t charLen;
  bool autoFlush;
  bool haveWrittenPreamble;
  bool closable;
  ModdingAPI::Exposed::System::Threading::Tasks::Task* _asyncWriteTask;

  // Member methods:
  void CheckAsyncTaskInProgress() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA7EC0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA81A0))(this);
  }
  void ::ctor(ModdingAPI::Exposed::System::IO::Stream* stream) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*, ModdingAPI::Exposed::System::IO::Stream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA8240))(this, stream);
  }
  void ::ctor(ModdingAPI::Exposed::System::IO::Stream* stream, ModdingAPI::Exposed::System::Text::Encoding* encoding) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*, ModdingAPI::Exposed::System::IO::Stream*, ModdingAPI::Exposed::System::Text::Encoding*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA8310))(this, stream, encoding);
  }
  void ::ctor(ModdingAPI::Exposed::System::IO::Stream* stream, ModdingAPI::Exposed::System::Text::Encoding* encoding, int32_t bufferSize, bool leaveOpen) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*, ModdingAPI::Exposed::System::IO::Stream*, ModdingAPI::Exposed::System::Text::Encoding*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA8340))(this, stream, encoding, bufferSize, leaveOpen);
  }
  void ::ctor(System_String* path) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA8530))(this, path);
  }
  void ::ctor(System_String* path, bool append) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA8600))(this, path, append);
  }
  void ::ctor(System_String* path, bool append, ModdingAPI::Exposed::System::Text::Encoding* encoding) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*, System_String*, bool, ModdingAPI::Exposed::System::Text::Encoding*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA86E0))(this, path, append, encoding);
  }
  void ::ctor(System_String* path, bool append, ModdingAPI::Exposed::System::Text::Encoding* encoding, int32_t bufferSize) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*, System_String*, bool, ModdingAPI::Exposed::System::Text::Encoding*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA8710))(this, path, append, encoding, bufferSize);
  }
  void ::ctor(System_String* path, bool append, ModdingAPI::Exposed::System::Text::Encoding* encoding, int32_t bufferSize, bool checkHost) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*, System_String*, bool, ModdingAPI::Exposed::System::Text::Encoding*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA8740))(this, path, append, encoding, bufferSize, checkHost);
  }
  void Init(ModdingAPI::Exposed::System::IO::Stream* streamArg, ModdingAPI::Exposed::System::Text::Encoding* encodingArg, int32_t bufferSize, bool shouldLeaveOpen) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*, ModdingAPI::Exposed::System::IO::Stream*, ModdingAPI::Exposed::System::Text::Encoding*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA8980))(this, streamArg, encodingArg, bufferSize, shouldLeaveOpen);
  }
  void Close() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA8CB0))(this);
  }
  void Dispose(bool disposing) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA8D60))(this, disposing);
  }
  void Flush() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA8ED0))(this);
  }
  void Flush(bool flushStream, bool flushEncoder) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA8F00))(this, flushStream, flushEncoder);
  }
  void set_AutoFlush(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA9110))(this, value);
  }
  bool get_LeaveOpen() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA9150))(this);
  }
  ModdingAPI::Exposed::System::Text::Encoding* get_Encoding() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::Encoding*(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335370))(this);
  }
  void Write(wchar_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*, wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA9160))(this, value);
  }
  void Write(ModdingAPI::Exposed::System::Char_array* buffer) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*, ModdingAPI::Exposed::System::Char_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA91F0))(this, buffer);
  }
  void Write(ModdingAPI::Exposed::System::Char_array* buffer, int32_t index, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*, ModdingAPI::Exposed::System::Char_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA92C0))(this, buffer, index, count);
  }
  void Write(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::StreamWriter*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA9510))(this, value);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::IO::StreamWriter*> Null = __CppStaticProperty<ModdingAPI::Exposed::System::IO::StreamWriter*>(
   []() { return &GetStaticClassInstance()->pStaticFields->Null; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Text::Encoding*> _UTF8NoBOM = __CppStaticProperty<ModdingAPI::Exposed::System::Text::Encoding*>(
   []() { return &GetStaticClassInstance()->pStaticFields->_UTF8NoBOM; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::System::Text::Encoding* get_UTF8NoBOM() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::Encoding*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA7FA0))();
  }
  static inline ModdingAPI::Exposed::System::IO::Stream* CreateFile(System_String* path, bool append, bool checkHost) {
    return reinterpret_cast<ModdingAPI::Exposed::System::IO::Stream*(__fastcall*)(System_String*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA8AF0))(path, append, checkHost);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xCA95E0))();
  }
};
}