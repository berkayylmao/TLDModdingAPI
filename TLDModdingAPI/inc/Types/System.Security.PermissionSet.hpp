// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Security {
struct __PermissionSet_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Object_array* psUnrestricted;
  ModdingAPI::Exposed::System::Object_array* action;
};

struct __PermissionSet_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _9_GetEnumerator;
  VirtualInvokeData _10_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization;
  VirtualInvokeData _11_CopyTo;
  VirtualInvokeData _12_Demand;
  VirtualInvokeData _13_ToXml;
  VirtualInvokeData _14_get_Count;
  VirtualInvokeData _15_get_IsSynchronized;
  VirtualInvokeData _16_get_SyncRoot;
};

struct __PermissionSet_Il2CppClass {
  Il2CppClass_1 _1;
  __PermissionSet_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __PermissionSet_Il2CppVtbl vtbl;
};

class PermissionSet {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C4AFB8;
  static inline    __PermissionSet_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __PermissionSet_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__PermissionSet_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __PermissionSet_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t state;
  ModdingAPI::Exposed::System::Collections::ArrayList* list;
  bool _declsec;
  ModdingAPI::Exposed::System::Boolean_array* _ignored;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::PermissionSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x947580))(this);
  }
  void ::ctor(int32_t state) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::PermissionSet*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9476D0))(this, state);
  }
  void ::ctor(ModdingAPI::Exposed::System::Security::IPermission* perm) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::PermissionSet*, ModdingAPI::Exposed::System::Security::IPermission*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x947700))(this, perm);
  }
  void CopyTo(ModdingAPI::Exposed::System::Array* array, int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::PermissionSet*, ModdingAPI::Exposed::System::Array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x947750))(this, array, index);
  }
  void Demand() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::PermissionSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9478F0))(this);
  }
  void CasOnlyDemand(int32_t skip) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::PermissionSet*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x947B40))(this, skip);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* GetEnumerator() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::System::Security::PermissionSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x947BF0))(this);
  }
  bool IsEmpty() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Security::PermissionSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x947C20))(this);
  }
  bool IsUnrestricted() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Security::PermissionSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x947E60))(this);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Security::PermissionSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x947E70))(this);
  }
  ModdingAPI::Exposed::System::Security::SecurityElement* ToXml() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::SecurityElement*(__fastcall*)(ModdingAPI::Exposed::System::Security::PermissionSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x947EB0))(this);
  }
  int32_t get_Count() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Security::PermissionSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9114C0))(this);
  }
  bool get_IsSynchronized() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Security::PermissionSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9482F0))(this);
  }
  Il2CppObject* get_SyncRoot() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Security::PermissionSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3201B0))(this);
  }
  void System::Runtime::Serialization::IDeserializationCallback::OnDeserialization(Il2CppObject* sender) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::PermissionSet*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, sender);
  }
  bool Equals(Il2CppObject* obj) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Security::PermissionSet*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x948320))(this, obj);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Security::PermissionSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x948550))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Object_array*> psUnrestricted = __CppStaticProperty<ModdingAPI::Exposed::System::Object_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->psUnrestricted; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Object_array*> action = __CppStaticProperty<ModdingAPI::Exposed::System::Object_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->action; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x9485A0))();
  }
};
}