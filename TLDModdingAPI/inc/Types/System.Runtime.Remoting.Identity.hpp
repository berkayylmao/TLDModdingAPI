// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Runtime::Remoting {
struct __Identity_Il2CppStaticFields {
};

struct __Identity_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _65535__ctor;
};

struct __Identity_Il2CppClass {
  Il2CppClass_1 _1;
  __Identity_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Identity_Il2CppVtbl vtbl;
};

class Identity {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C64268;
  static inline    __Identity_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Identity_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Identity_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Identity_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  System_String* _objectUri;
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessageSink* _channelSink;
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessageSink* _envoySink;
  ModdingAPI::Exposed::System::Runtime::Remoting::Contexts::DynamicPropertyCollection* _clientDynamicProperties;
  ModdingAPI::Exposed::System::Runtime::Remoting::Contexts::DynamicPropertyCollection* _serverDynamicProperties;
  ModdingAPI::Exposed::System::Runtime::Remoting::ObjRef* _objRef;
  bool _disposed;

  // Member methods:
  void ::ctor(System_String* objectUri) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Identity*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, objectUri);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessageSink* get_ChannelSink() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessageSink*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Identity*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  void set_ChannelSink(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessageSink* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Identity*, ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessageSink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3E0))(this, value);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessageSink* get_EnvoySink() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessageSink*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Identity*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110A0))(this);
  }
  System_String* get_ObjectUri() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Identity*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  void set_ObjectUri(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Identity*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, value);
  }
  bool get_IsConnected() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Identity*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF59E70))(this);
  }
  bool get_Disposed() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Identity*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5DE420))(this);
  }
  void set_Disposed(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Identity*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAD5550))(this, value);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::Contexts::DynamicPropertyCollection* get_ClientDynamicProperties() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::Contexts::DynamicPropertyCollection*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Identity*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF59E80))(this);
  }
  bool get_HasServerDynamicSinks() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Identity*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF59FE0))(this);
  }
  void NotifyClientDynamicSinks(bool start, ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessage* req_msg, bool client_site, bool async) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Identity*, bool, ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessage*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF5A020))(this, start, req_msg, client_site, async);
  }
  void NotifyServerDynamicSinks(bool start, ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessage* req_msg, bool client_site, bool async) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Identity*, bool, ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessage*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF5A0C0))(this, start, req_msg, client_site, async);
  }
};
}