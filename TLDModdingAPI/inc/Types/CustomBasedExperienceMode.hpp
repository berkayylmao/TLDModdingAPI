// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __CustomBasedExperienceMode_Il2CppStaticFields {
};

struct __CustomBasedExperienceMode_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_AwakeInternal;
};

struct __CustomBasedExperienceMode_Il2CppClass {
  Il2CppClass_1 _1;
  __CustomBasedExperienceMode_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CustomBasedExperienceMode_Il2CppVtbl vtbl;
};

class CustomBasedExperienceMode {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C85650;
  static inline    __CustomBasedExperienceMode_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __CustomBasedExperienceMode_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__CustomBasedExperienceMode_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __CustomBasedExperienceMode_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  int32_t m_ModeType;
  ModdingAPI::Exposed::LocalizedString* m_LocalizedDisplayName;
  float m_DayNightDurationScale;
  float m_WeatherDurationScale;
  float m_ChanceOfBlizzardScale;
  bool m_WeatherStartForceClear;
  bool m_WeatherWindForceCalm;
  float m_CalorieBurnScale;
  float m_ThirstRateScale;
  float m_FreezingRateScale;
  float m_FatigueRateScale;
  float m_ConditonRecoveryFromRestScale;
  float m_ConditonRecoveryWhileAwakeScale;
  float m_DecayScale;
  float m_GearSpawnChanceScale;
  int32_t m_ReduceMaxItemsInContainer;
  int32_t m_ChanceForEmptyContainer;
  float m_SpawnRegionChanceActiveScale;
  float m_ClosestSpawnDistanceAfterTransitionScale;
  float m_SmellRangeScale;
  bool m_SetWildlifeNotAttackUnprovoked;
  bool m_SetWildlifeInterruptRest;
  float m_StruggleTapStrengthScale;
  float m_StrugglePlayerDamageReceivedIntervalScale;
  float m_StrugglePlayerDamageReceivedScale;
  float m_StrugglePlayerClothingDamageScale;
  float m_StugglePlayerPercentLossFromBearScale;
  float m_OutdoorTempDropCelsiusMax;
  int32_t m_OutdoorTempDropDayStart;
  int32_t m_OutdoorTempDropDayFinal;
  float m_RespawnHoursScaleMax;
  int32_t m_RespawnHoursScaleDayStart;
  int32_t m_RespawnHoursScaleDayFinal;
  float m_FishCatchTimeScaleMax;
  int32_t m_FishCatchTimeScaleDayStart;
  int32_t m_FishCatchTimeScaleDayFinal;
  float m_RadialRespawnTimeScaleMax;
  int32_t m_RadialRespawnTimeScaleDayStart;
  int32_t m_RadialRespawnTimeScaleDayFinal;
  float m_NumHoursWarmForHypothermiaCureScale;
  bool m_AllowInteriorStartingSpawn;
  bool m_SurvivorVoiceOver;
  bool m_WeakIce;
  bool m_UseMinAirTempValue;
  bool m_EnableDysentery;
  bool m_EnableSprains;
  bool m_EnableFoodPoisoning;
  bool m_EnableBrokenRibs;
  bool m_LimitedRest;
  bool m_AdjustFreezingDueToNearbyFire;
  bool m_InterruptIfFreezingWhileSleeping;
  bool m_RiflesInWorld;
  bool m_RevolversInWorld;
  bool m_IsBirchBarkTreeCraftable;
  int32_t m_BaseWorldDifficulty;
  int32_t m_StruggleClothingDamageBonus;
  int32_t m_DayNightLengthMultiplier;
  int32_t m_WeatherChangeFrequency;
  int32_t m_StrugglePlayerStrengthBonus;
  int32_t m_GradualTempReductionRate;
  int32_t m_AuroraFrequency;
  int32_t m_CalorieBurnRate;
  int32_t m_ThirstIncrease;
  int32_t m_FatigueIncrease;
  int32_t m_FreezingIncrease;
  int32_t m_HoursWarmthToCureHypothermia;
  int32_t m_ItemDecayRate;
  int32_t m_ItemSpawnChance;
  int32_t m_ReduceWildlifePopOverTime;
  int32_t m_EmptyContainerChance;
  int32_t m_StickBranchStoneSpawnFrequency;
  int32_t m_StartingGear;
  int32_t m_StruggleDamageReceivedBonus;
  int32_t m_ScentIncreaseFromMeatBlood;
  int32_t m_WolfFleeChance;
  int32_t m_TimberWolfPackFear;
  int32_t m_StruggleDamageEventSeverity;
  int32_t m_WildlifeSmellRange;
  int32_t m_WildlifeSpawnFrequency;
  bool m_WildlifeNotAttackUnprovoked;
  bool m_NoPredatorsFirstDay;
  bool m_CabinFeverEnabled;
  bool m_ParasitesEnabled;
  int32_t m_ConditionRecoveryRest;
  int32_t m_ConditionRecoveryAwake;
  int32_t m_FrosbiteRisk;
  int32_t m_RabbitSpawnChance;
  int32_t m_BearSpawnChance;
  int32_t m_BlizzardFrequency;
  int32_t m_DeerSpawnChance;
  int32_t m_FishSpawnChance;
  int32_t m_WolfSpawnChance;
  int32_t m_TimberWolfSpawnChance;
  int32_t m_StartTimeOfDay;
  bool m_WildlifeInterruptRest;
  int32_t m_WindVariability;
  int32_t m_PlantSpawnFrequency;
  int32_t m_ReduceMaxItemsContainers;
  int32_t m_StartWeather;
  int32_t m_WolfSpawnDistance;
  int32_t m_WildlifeDetectionRange;
  int32_t m_MooseSpawnChance;
  int32_t m_Version;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CustomBasedExperienceMode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1987D80))(this);
  }
};
}