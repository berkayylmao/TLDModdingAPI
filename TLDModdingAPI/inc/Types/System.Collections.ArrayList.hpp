// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Collections {
struct __ArrayList_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Object_array* emptyArray;
};

struct __ArrayList_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _21_set_Capacity;
  VirtualInvokeData _22_get_Count;
  VirtualInvokeData _23_get_IsFixedSize;
  VirtualInvokeData _24_get_IsReadOnly;
  VirtualInvokeData _25_get_IsSynchronized;
  VirtualInvokeData _26_get_SyncRoot;
  VirtualInvokeData _27_get_Item;
  VirtualInvokeData _28_set_Item;
  VirtualInvokeData _29_Add;
  VirtualInvokeData _30_AddRange;
  VirtualInvokeData _31_Clear;
  VirtualInvokeData _32_Clone;
  VirtualInvokeData _33_Contains;
  VirtualInvokeData _34_CopyTo;
  VirtualInvokeData _35_CopyTo;
  VirtualInvokeData _36_CopyTo;
  VirtualInvokeData _37_GetEnumerator;
  VirtualInvokeData _38_IndexOf;
  VirtualInvokeData _39_Insert;
  VirtualInvokeData _40_InsertRange;
  VirtualInvokeData _41_Remove;
  VirtualInvokeData _42_RemoveAt;
  VirtualInvokeData _43_RemoveRange;
  VirtualInvokeData _44_Sort;
  VirtualInvokeData _45_Sort;
  VirtualInvokeData _46_ToArray;
  VirtualInvokeData _47_ToArray;
};

struct __ArrayList_Il2CppClass {
  Il2CppClass_1 _1;
  __ArrayList_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ArrayList_Il2CppVtbl vtbl;
};

class ArrayList {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C355D0;
  static inline    ArrayList* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C410E0;
  static inline    __ArrayList_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline ArrayList* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (ArrayList**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __ArrayList_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ArrayList_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ArrayList_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Object_array* _items;
  int32_t _size;
  int32_t _version;
  Il2CppObject* _syncRoot;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFC500))(this);
  }
  void ::ctor(int32_t capacity) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFC5B0))(this, capacity);
  }
  void ::ctor(ModdingAPI::Exposed::System::Collections::ICollection* c) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, ModdingAPI::Exposed::System::Collections::ICollection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFC710))(this, c);
  }
  void set_Capacity(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFC860))(this, value);
  }
  int32_t get_Count() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FED20))(this);
  }
  bool get_IsFixedSize() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this);
  }
  bool get_IsReadOnly() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this);
  }
  bool get_IsSynchronized() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this);
  }
  Il2CppObject* get_SyncRoot() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFC9A0))(this);
  }
  Il2CppObject* get_Item(int32_t index) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFCB00))(this, index);
  }
  void set_Item(int32_t index, Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, int32_t, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFCC00))(this, index, value);
  }
  int32_t Add(Il2CppObject* value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFCED0))(this, value);
  }
  void AddRange(ModdingAPI::Exposed::System::Collections::ICollection* c) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, ModdingAPI::Exposed::System::Collections::ICollection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFCF90))(this, c);
  }
  void Clear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFCFB0))(this);
  }
  Il2CppObject* Clone() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFCFF0))(this);
  }
  bool Contains(Il2CppObject* item) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFD180))(this, item);
  }
  void CopyTo(ModdingAPI::Exposed::System::Array* array) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, ModdingAPI::Exposed::System::Array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFD290))(this, array);
  }
  void CopyTo(ModdingAPI::Exposed::System::Array* array, int32_t arrayIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, ModdingAPI::Exposed::System::Array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFD2B0))(this, array, arrayIndex);
  }
  void CopyTo(int32_t index, ModdingAPI::Exposed::System::Array* array, int32_t arrayIndex, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, int32_t, ModdingAPI::Exposed::System::Array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFD3B0))(this, index, array, arrayIndex, count);
  }
  void EnsureCapacity(int32_t min) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFD510))(this, min);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* GetEnumerator() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFD580))(this);
  }
  int32_t IndexOf(Il2CppObject* value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFD7B0))(this, value);
  }
  void Insert(int32_t index, Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, int32_t, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFD7E0))(this, index, value);
  }
  void InsertRange(int32_t index, ModdingAPI::Exposed::System::Collections::ICollection* c) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, int32_t, ModdingAPI::Exposed::System::Collections::ICollection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFD970))(this, index, c);
  }
  void Remove(Il2CppObject* obj) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFDCE0))(this, obj);
  }
  void RemoveAt(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFDD20))(this, index);
  }
  void RemoveRange(int32_t index, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFDE50))(this, index, count);
  }
  void Sort(ModdingAPI::Exposed::System::Collections::IComparer* comparer) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, ModdingAPI::Exposed::System::Collections::IComparer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFE060))(this, comparer);
  }
  void Sort(int32_t index, int32_t count, ModdingAPI::Exposed::System::Collections::IComparer* comparer) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, int32_t, int32_t, ModdingAPI::Exposed::System::Collections::IComparer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFE0B0))(this, index, count, comparer);
  }
  ModdingAPI::Exposed::System::Object_array* ToArray() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Object_array*(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFE250))(this);
  }
  ModdingAPI::Exposed::System::Array* ToArray(ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Array*(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFE310))(this, type);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Object_array*> emptyArray = __CppStaticProperty<ModdingAPI::Exposed::System::Object_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->emptyArray; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::System::Collections::ArrayList* Adapter(ModdingAPI::Exposed::System::Collections::IList* list) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::ArrayList*(__fastcall*)(ModdingAPI::Exposed::System::Collections::IList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFCD40))(list);
  }
  static inline ModdingAPI::Exposed::System::Collections::ArrayList* ReadOnly(ModdingAPI::Exposed::System::Collections::ArrayList* list) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::ArrayList*(__fastcall*)(ModdingAPI::Exposed::System::Collections::ArrayList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFDB50))(list);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xDFE460))();
  }
};
}