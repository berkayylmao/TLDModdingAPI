// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Timeline.DiscreteTime.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Quaternion.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Playables.Playable.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Playables.PlayableGraph.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Animations.AnimationLayerMixerPlayable.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Playables::PlayableGraph.hpp"


namespace ModdingAPI::Exposed::UnityEngine::Timeline {
struct __AnimationTrack_Il2CppStaticFields {
};

struct __AnimationTrack_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _6_CreatePlayable;
  VirtualInvokeData _7_get_duration;
  VirtualInvokeData _8_get_outputs;
  VirtualInvokeData _10_UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize;
  VirtualInvokeData _11_UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize;
  VirtualInvokeData _12_get_isEmpty;
  VirtualInvokeData _13_get_compilable;
  VirtualInvokeData _14_CreateTrackMixer;
  VirtualInvokeData _15_OnCreatePlayableGraph;
  VirtualInvokeData _16_GetEvaluationTime;
  VirtualInvokeData _17_GetSequenceTime;
  VirtualInvokeData _18_GatherProperties;
  VirtualInvokeData _19_OnCreateClip;
  VirtualInvokeData _20_UpdateDuration;
  VirtualInvokeData _21_CreatePlayable;
  VirtualInvokeData _22_Hash;
  VirtualInvokeData _23_OnBeforeTrackSerialize;
  VirtualInvokeData _24_OnAfterTrackDeserialize;
  VirtualInvokeData _25_OnUpgradeFromVersion;
};

struct __AnimationTrack_Il2CppClass {
  Il2CppClass_1 _1;
  __AnimationTrack_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AnimationTrack_Il2CppVtbl vtbl;
};

class AnimationTrack {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C3D798;
  static inline    AnimationTrack* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C74F80;
  static inline    __AnimationTrack_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline AnimationTrack* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (AnimationTrack**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __AnimationTrack_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__AnimationTrack_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __AnimationTrack_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool TrackAsset_m_Locked;
  bool TrackAsset_m_Muted;
  System_String* TrackAsset_m_CustomPlayableFullTypename;
  ModdingAPI::Exposed::UnityEngine::AnimationClip* TrackAsset_m_AnimClip;
  ModdingAPI::Exposed::UnityEngine::Playables::PlayableAsset* TrackAsset_m_Parent;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* TrackAsset_m_Children;
  int32_t TrackAsset_m_ItemsHash;
  ModdingAPI::Exposed::UnityEngine::Timeline::TimelineClip_array* TrackAsset_m_ClipsCache;
  ModdingAPI::Exposed::UnityEngine::Timeline::DiscreteTime TrackAsset_m_Start;
  ModdingAPI::Exposed::UnityEngine::Timeline::DiscreteTime TrackAsset_m_End;
  bool TrackAsset_m_CacheSorted;
  ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_* TrackAsset_m_ChildTrackCache;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Clips;
  int32_t TrackAsset_m_Version;
  int32_t m_OpenClipPreExtrapolation;
  int32_t m_OpenClipPostExtrapolation;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_OpenClipOffsetPosition;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_OpenClipOffsetEulerAngles;
  double m_OpenClipTimeOffset;
  bool m_OpenClipRemoveOffset;
  bool m_InfiniteClipApplyFootIK;
  int32_t m_MatchTargetFields;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_Position;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_EulerAngles;
  ModdingAPI::Exposed::UnityEngine::AvatarMask* m_AvatarMask;
  bool m_ApplyAvatarMask;
  int32_t m_TrackOffset;
  ModdingAPI::Exposed::UnityEngine::Quaternion m_OpenClipOffsetRotation;
  ModdingAPI::Exposed::UnityEngine::Quaternion m_Rotation;
  bool m_ApplyOffsets;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA6AE0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_position() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA6CC0))(this);
  }
  void set_position(ModdingAPI::Exposed::UnityEngine::Vector3 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA6CE0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Quaternion get_rotation() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Quaternion(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA6D00))(this);
  }
  void set_rotation(ModdingAPI::Exposed::UnityEngine::Quaternion value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::UnityEngine::Quaternion)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA6DE0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_eulerAngles() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA6E10))(this);
  }
  void set_eulerAngles(ModdingAPI::Exposed::UnityEngine::Vector3 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA6E30))(this, value);
  }
  bool get_applyOffsets() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x67FC90))(this);
  }
  void set_applyOffsets(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, value);
  }
  int32_t get_trackOffset() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA6E50))(this);
  }
  void set_trackOffset(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA6E60))(this, value);
  }
  int32_t get_matchTargetFields() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA6E70))(this);
  }
  void set_matchTargetFields(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA6E80))(this, value);
  }
  bool get_openClipRemoveOffset() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA6F40))(this);
  }
  void set_openClipRemoveOffset(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x699F30))(this, value);
  }
  bool get_compilableIsolated() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA6F50))(this);
  }
  ModdingAPI::Exposed::UnityEngine::AvatarMask* get_avatarMask() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::AvatarMask*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA7060))(this);
  }
  void set_avatarMask(ModdingAPI::Exposed::UnityEngine::AvatarMask* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::UnityEngine::AvatarMask*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5253C0))(this, value);
  }
  bool get_applyAvatarMask() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA7070))(this);
  }
  void set_applyAvatarMask(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA7080))(this, value);
  }
  bool get_compilable() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA7090))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_* get_outputs() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA7270))(this);
  }
  bool get_inClipMode() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA73D0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_openClipOffsetPosition() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA7420))(this);
  }
  void set_openClipOffsetPosition(ModdingAPI::Exposed::UnityEngine::Vector3 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA7440))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Quaternion get_openClipOffsetRotation() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Quaternion(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA7460))(this);
  }
  void set_openClipOffsetRotation(ModdingAPI::Exposed::UnityEngine::Quaternion value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::UnityEngine::Quaternion)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA7540))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_openClipOffsetEulerAngles() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA7570))(this);
  }
  void set_openClipOffsetEulerAngles(ModdingAPI::Exposed::UnityEngine::Vector3 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA7590))(this, value);
  }
  bool get_infiniteClipApplyFootIK() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA75B0))(this);
  }
  void set_infiniteClipApplyFootIK(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA75C0))(this, value);
  }
  double get_openClipTimeOffset() {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA75D0))(this);
  }
  void set_openClipTimeOffset(double value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA75E0))(this, value);
  }
  int32_t get_openClipPreExtrapolation() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA3600))(this);
  }
  void set_openClipPreExtrapolation(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x308500))(this, value);
  }
  int32_t get_openClipPostExtrapolation() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA75F0))(this);
  }
  void set_openClipPostExtrapolation(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383A50))(this, value);
  }
  void ResetOffsets() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA7600))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Timeline::TimelineClip* CreateClip(ModdingAPI::Exposed::UnityEngine::AnimationClip* clip) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Timeline::TimelineClip*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA76E0))(this, clip);
  }
  void OnCreateClip(ModdingAPI::Exposed::UnityEngine::Timeline::TimelineClip* clip) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::UnityEngine::Timeline::TimelineClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA7860))(this, clip);
  }
  void UpdateClipOffsets() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Playables::Playable CompileTrackPlayable(ModdingAPI::Exposed::UnityEngine::Playables::PlayableGraph graph, ModdingAPI::Exposed::UnityEngine::Timeline::TrackAsset* track, ModdingAPI::Exposed::UnityEngine::GameObject* go, ModdingAPI::Exposed::UnityEngine::IntervalTree_T_* tree, int32_t mode) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Playables::Playable(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::UnityEngine::Playables::PlayableGraph, ModdingAPI::Exposed::UnityEngine::Timeline::TrackAsset*, ModdingAPI::Exposed::UnityEngine::GameObject*, ModdingAPI::Exposed::UnityEngine::IntervalTree_T_*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA78E0))(this, graph, track, go, tree, mode);
  }
  ModdingAPI::Exposed::UnityEngine::Playables::Playable OnCreatePlayableGraph(ModdingAPI::Exposed::UnityEngine::Playables::PlayableGraph graph, ModdingAPI::Exposed::UnityEngine::GameObject* go, ModdingAPI::Exposed::UnityEngine::IntervalTree_T_* tree) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Playables::Playable(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::UnityEngine::Playables::PlayableGraph, ModdingAPI::Exposed::UnityEngine::GameObject*, ModdingAPI::Exposed::UnityEngine::IntervalTree_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA7F30))(this, graph, go, tree);
  }
  bool RequiresMotionXPlayable(int32_t mode, ModdingAPI::Exposed::UnityEngine::GameObject* gameObject) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, int32_t, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA8940))(this, mode, gameObject);
  }
  bool HasController(ModdingAPI::Exposed::UnityEngine::GameObject* gameObject) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA8AF0))(this, gameObject);
  }
  ModdingAPI::Exposed::UnityEngine::Animator* GetBinding(ModdingAPI::Exposed::UnityEngine::Playables::PlayableDirector* director) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Animator*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::UnityEngine::Playables::PlayableDirector*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA8CB0))(this, director);
  }
  ModdingAPI::Exposed::UnityEngine::Playables::Playable CreateInfiniteTrackPlayable(ModdingAPI::Exposed::UnityEngine::Playables::PlayableGraph graph, ModdingAPI::Exposed::UnityEngine::GameObject* go, ModdingAPI::Exposed::UnityEngine::IntervalTree_T_* tree, int32_t mode) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Playables::Playable(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::UnityEngine::Playables::PlayableGraph, ModdingAPI::Exposed::UnityEngine::GameObject*, ModdingAPI::Exposed::UnityEngine::IntervalTree_T_*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA9060))(this, graph, go, tree, mode);
  }
  ModdingAPI::Exposed::UnityEngine::Playables::Playable ApplyTrackOffset(ModdingAPI::Exposed::UnityEngine::Playables::PlayableGraph graph, ModdingAPI::Exposed::UnityEngine::Playables::Playable root, ModdingAPI::Exposed::UnityEngine::GameObject* go, int32_t mode) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Playables::Playable(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::UnityEngine::Playables::PlayableGraph, ModdingAPI::Exposed::UnityEngine::Playables::Playable, ModdingAPI::Exposed::UnityEngine::GameObject*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA9530))(this, graph, root, go, mode);
  }
  void GetEvaluationTime(double outStart, double outDuration) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA9850))(this, outStart, outDuration);
  }
  void GetSequenceTime(double outStart, double outDuration) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA9960))(this, outStart, outDuration);
  }
  void AssignAnimationClip(ModdingAPI::Exposed::UnityEngine::Timeline::TimelineClip* clip, ModdingAPI::Exposed::UnityEngine::AnimationClip* animClip) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::UnityEngine::Timeline::TimelineClip*, ModdingAPI::Exposed::UnityEngine::AnimationClip*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA9AD0))(this, clip, animClip);
  }
  void GatherProperties(ModdingAPI::Exposed::UnityEngine::Playables::PlayableDirector* director, ModdingAPI::Exposed::UnityEngine::Timeline::IPropertyCollector* driver) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::UnityEngine::Playables::PlayableDirector*, ModdingAPI::Exposed::UnityEngine::Timeline::IPropertyCollector*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, director, driver);
  }
  void GetAnimationClips(ModdingAPI::Exposed::System::Collections::Generic::List_T_* animClips) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA9D80))(this, animClips);
  }
  int32_t GetOffsetMode(ModdingAPI::Exposed::UnityEngine::GameObject* go, bool animatesRootTransform) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, ModdingAPI::Exposed::UnityEngine::GameObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFAA140))(this, go, animatesRootTransform);
  }
  bool AnimatesRootTransform() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFAA1C0))(this);
  }
  void OnUpgradeFromVersion(int32_t oldVersion) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Timeline::AnimationTrack*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFAA440))(this, oldVersion);
  }

  // Static methods:
  static inline bool UsesAbsoluteMotion(int32_t mode) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA8AE0))(mode);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Animations::AnimationLayerMixerPlayable CreateGroupMixer(ModdingAPI::Exposed::UnityEngine::Playables::PlayableGraph graph, ModdingAPI::Exposed::UnityEngine::GameObject* go, int32_t inputCount) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Animations::AnimationLayerMixerPlayable(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Playables::PlayableGraph, ModdingAPI::Exposed::UnityEngine::GameObject*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFA8EE0))(graph, go, inputCount);
  }
};
}