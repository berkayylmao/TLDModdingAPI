// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Threading.CancellationToken.hpp"


namespace ModdingAPI::Exposed::System::IO {
struct __FileStream_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Byte_array* buf_recycle;
  Il2CppObject* buf_recycle_lock;
};

struct __FileStream_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_CreateObjRef;
  VirtualInvokeData _5_InitializeLifetimeService;
  VirtualInvokeData _6_Dispose;
  VirtualInvokeData _7_get_CanRead;
  VirtualInvokeData _8_get_CanSeek;
  VirtualInvokeData _9_get_CanWrite;
  VirtualInvokeData _10_get_Length;
  VirtualInvokeData _11_get_Position;
  VirtualInvokeData _12_set_Position;
  VirtualInvokeData _13_get_ReadTimeout;
  VirtualInvokeData _14_get_WriteTimeout;
  VirtualInvokeData _15_Close;
  VirtualInvokeData _16_Dispose;
  VirtualInvokeData _17_Flush;
  VirtualInvokeData _18_BeginRead;
  VirtualInvokeData _19_EndRead;
  VirtualInvokeData _20_ReadAsync;
  VirtualInvokeData _21_BeginWrite;
  VirtualInvokeData _22_EndWrite;
  VirtualInvokeData _23_WriteAsync;
  VirtualInvokeData _24_Seek;
  VirtualInvokeData _25_Read;
  VirtualInvokeData _26_ReadByte;
  VirtualInvokeData _27_Write;
  VirtualInvokeData _28_WriteByte;
  VirtualInvokeData _29_get_SafeFileHandle;
};

struct __FileStream_Il2CppClass {
  Il2CppClass_1 _1;
  __FileStream_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __FileStream_Il2CppVtbl vtbl;
};

class FileStream {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C55E38;
  static inline    __FileStream_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __FileStream_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__FileStream_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __FileStream_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  Il2CppObject* MarshalByRefObject__identity;
  ModdingAPI::Exposed::System::IO::Stream::ReadWriteTask* Stream__activeReadWriteTask;
  ModdingAPI::Exposed::System::Threading::SemaphoreSlim* Stream__asyncActiveSemaphore;
  ModdingAPI::Exposed::System::Byte_array* buf;
  System_String* name;
  ModdingAPI::Exposed::Microsoft::Win32::SafeHandles::SafeFileHandle* safeHandle;
  bool isExposed;
  int64_t append_startpos;
  int32_t access;
  bool owner;
  bool async;
  bool canseek;
  bool anonymous;
  bool buf_dirty;
  int32_t buf_size;
  int32_t buf_length;
  int32_t buf_offset;
  int64_t buf_start;

  // Member methods:
  void ::ctor(intptr_t handle, int32_t access, bool ownsHandle, int32_t bufferSize) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, intptr_t, int32_t, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA2870))(this, handle, access, ownsHandle, bufferSize);
  }
  void ::ctor(intptr_t handle, int32_t access, bool ownsHandle, int32_t bufferSize, bool isAsync, bool isConsoleWrapper) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, intptr_t, int32_t, bool, int32_t, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA28A0))(this, handle, access, ownsHandle, bufferSize, isAsync, isConsoleWrapper);
  }
  void ::ctor(System_String* path, int32_t mode) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA2AF0))(this, path, mode);
  }
  void ::ctor(System_String* path, int32_t mode, int32_t access) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, System_String*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA2B40))(this, path, mode, access);
  }
  void ::ctor(System_String* path, int32_t mode, int32_t access, int32_t share) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, System_String*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA2B90))(this, path, mode, access, share);
  }
  void ::ctor(System_String* path, int32_t mode, int32_t access, int32_t share, int32_t bufferSize) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, System_String*, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA2BC0))(this, path, mode, access, share, bufferSize);
  }
  void ::ctor(System_String* path, int32_t mode, int32_t access, int32_t share, int32_t bufferSize, bool useAsync) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, System_String*, int32_t, int32_t, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA2C00))(this, path, mode, access, share, bufferSize, useAsync);
  }
  void ::ctor(System_String* path, int32_t mode, int32_t access, int32_t share, int32_t bufferSize, int32_t options) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, System_String*, int32_t, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA2C50))(this, path, mode, access, share, bufferSize, options);
  }
  void ::ctor(System_String* path, int32_t mode, int32_t access, int32_t share, int32_t bufferSize, int32_t options, System_String* msgPath, bool bFromProxy, bool useLongPath, bool checkHost) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, System_String*, int32_t, int32_t, int32_t, int32_t, int32_t, System_String*, bool, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA2C90))(this, path, mode, access, share, bufferSize, options, msgPath, bFromProxy, useLongPath, checkHost);
  }
  void ::ctor(System_String* path, int32_t mode, int32_t access, int32_t share, int32_t bufferSize, bool isAsync, bool anonymous) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, System_String*, int32_t, int32_t, int32_t, int32_t, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA2CB0))(this, path, mode, access, share, bufferSize, isAsync, anonymous);
  }
  void ::ctor(System_String* path, int32_t mode, int32_t access, int32_t share, int32_t bufferSize, bool anonymous, int32_t options) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, System_String*, int32_t, int32_t, int32_t, int32_t, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA2D10))(this, path, mode, access, share, bufferSize, anonymous, options);
  }
  void Init(ModdingAPI::Exposed::Microsoft::Win32::SafeHandles::SafeFileHandle* safeHandle, int32_t access, bool ownsHandle, int32_t bufferSize, bool isAsync, bool isConsoleWrapper) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, ModdingAPI::Exposed::Microsoft::Win32::SafeHandles::SafeFileHandle*, int32_t, bool, int32_t, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA3650))(this, safeHandle, access, ownsHandle, bufferSize, isAsync, isConsoleWrapper);
  }
  bool get_CanRead() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA39A0))(this);
  }
  bool get_CanWrite() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA39B0))(this);
  }
  bool get_CanSeek() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA39D0))(this);
  }
  int64_t get_Length() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA39E0))(this);
  }
  int64_t get_Position() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA3B90))(this);
  }
  void set_Position(int64_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA3D50))(this, value);
  }
  ModdingAPI::Exposed::Microsoft::Win32::SafeHandles::SafeFileHandle* get_SafeFileHandle() {
    return reinterpret_cast<ModdingAPI::Exposed::Microsoft::Win32::SafeHandles::SafeFileHandle*(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA3E40))(this);
  }
  void ExposeHandle() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA3E80))(this);
  }
  int32_t ReadByte() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA3EB0))(this);
  }
  void WriteByte(uint8_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, uint8_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA4090))(this, value);
  }
  int32_t Read(ModdingAPI::Exposed::System::Byte_array* array, int32_t offset, int32_t count) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA4260))(this, array, offset, count);
  }
  int32_t ReadInternal(ModdingAPI::Exposed::System::Byte_array* dest, int32_t offset, int32_t count) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA45B0))(this, dest, offset, count);
  }
  ModdingAPI::Exposed::System::IAsyncResult* BeginRead(ModdingAPI::Exposed::System::Byte_array* array, int32_t offset, int32_t numBytes, ModdingAPI::Exposed::System::AsyncCallback* userCallback, Il2CppObject* stateObject) {
    return reinterpret_cast<ModdingAPI::Exposed::System::IAsyncResult*(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, ModdingAPI::Exposed::System::AsyncCallback*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA4680))(this, array, offset, numBytes, userCallback, stateObject);
  }
  int32_t EndRead(ModdingAPI::Exposed::System::IAsyncResult* asyncResult) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, ModdingAPI::Exposed::System::IAsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA4A80))(this, asyncResult);
  }
  void Write(ModdingAPI::Exposed::System::Byte_array* array, int32_t offset, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA4C80))(this, array, offset, count);
  }
  void WriteInternal(ModdingAPI::Exposed::System::Byte_array* src, int32_t offset, int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA4F10))(this, src, offset, count);
  }
  ModdingAPI::Exposed::System::IAsyncResult* BeginWrite(ModdingAPI::Exposed::System::Byte_array* array, int32_t offset, int32_t numBytes, ModdingAPI::Exposed::System::AsyncCallback* userCallback, Il2CppObject* stateObject) {
    return reinterpret_cast<ModdingAPI::Exposed::System::IAsyncResult*(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, ModdingAPI::Exposed::System::AsyncCallback*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA51A0))(this, array, offset, numBytes, userCallback, stateObject);
  }
  void EndWrite(ModdingAPI::Exposed::System::IAsyncResult* asyncResult) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, ModdingAPI::Exposed::System::IAsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA5690))(this, asyncResult);
  }
  int64_t Seek(int64_t offset, int32_t origin) {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, int64_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA5870))(this, offset, origin);
  }
  void Flush() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA5B30))(this);
  }
  void Finalize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA5BF0))(this);
  }
  void Dispose(bool disposing) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA5C70))(this, disposing);
  }
  ModdingAPI::Exposed::System::Threading::Tasks::Task_TResult_* ReadAsync(ModdingAPI::Exposed::System::Byte_array* buffer, int32_t offset, int32_t count, ModdingAPI::Exposed::System::Threading::CancellationToken cancellationToken) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task_TResult_*(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, ModdingAPI::Exposed::System::Threading::CancellationToken)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA6020))(this, buffer, offset, count, cancellationToken);
  }
  ModdingAPI::Exposed::System::Threading::Tasks::Task* WriteAsync(ModdingAPI::Exposed::System::Byte_array* buffer, int32_t offset, int32_t count, ModdingAPI::Exposed::System::Threading::CancellationToken cancellationToken) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task*(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, ModdingAPI::Exposed::System::Threading::CancellationToken)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA6030))(this, buffer, offset, count, cancellationToken);
  }
  int32_t ReadSegment(ModdingAPI::Exposed::System::Byte_array* dest, int32_t dest_offset, int32_t count) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA6040))(this, dest, dest_offset, count);
  }
  int32_t WriteSegment(ModdingAPI::Exposed::System::Byte_array* src, int32_t src_offset, int32_t count) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA6140))(this, src, src_offset, count);
  }
  void FlushBuffer() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA61B0))(this);
  }
  void FlushBufferIfDirty() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA63E0))(this);
  }
  void RefillBuffer() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA63F0))(this);
  }
  int32_t ReadData(ModdingAPI::Exposed::System::Runtime::InteropServices::SafeHandle* safeHandle, ModdingAPI::Exposed::System::Byte_array* buf, int32_t offset, int32_t count) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, ModdingAPI::Exposed::System::Runtime::InteropServices::SafeHandle*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA6430))(this, safeHandle, buf, offset, count);
  }
  void InitBuffer(int32_t size, bool isZeroSize) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA65A0))(this, size, isZeroSize);
  }
  System_String* GetSecureFileName(System_String* filename) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA6890))(this, filename);
  }
  System_String* GetSecureFileName(System_String* filename, bool full) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::IO::FileStream*, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA6970))(this, filename, full);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*> buf_recycle = __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->buf_recycle; }
  );
  static inline __CppStaticProperty<Il2CppObject*> buf_recycle_lock = __CppStaticProperty<Il2CppObject*>(
   []() { return &GetStaticClassInstance()->pStaticFields->buf_recycle_lock; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xAA6A80))();
  }
};
}