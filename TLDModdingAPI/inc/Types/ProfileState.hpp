// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Resolution.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed {
struct __ProfileState_Il2CppStaticFields {
};

struct __ProfileState_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __ProfileState_Il2CppClass {
  Il2CppClass_1 _1;
  __ProfileState_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __ProfileState_Il2CppVtbl vtbl;
};

class ProfileState {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C4B160;
  static inline    __ProfileState_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __ProfileState_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__ProfileState_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __ProfileState_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t m_Version;
  bool m_ShowTimeOfDaySlider;
  bool m_ShowFrametime;
  float m_MasterVolume;
  float m_SoundVolume;
  float m_MusicVolume;
  float m_VoiceVolume;
  int32_t m_QualityLevel;
  int32_t m_GraphicsMode;
  int32_t m_DisplayNumber;
  ModdingAPI::Exposed::UnityEngine::Resolution m_Resolution;
  bool m_SSAOEnabled;
  int32_t m_Units;
  int32_t m_HudPref;
  int32_t m_HudSize;
  int32_t m_HudType;
  bool m_InvertY;
  bool m_InvertX;
  bool m_LockMouseToScreen;
  bool m_EnableGamepad;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_MouseSensitivity;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_ZoomSensitivity;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_AnalogSticksSensitivity;
  float m_MouseSensitivityPercentage;
  float m_ZoomSensitivityPercentage;
  float m_GamepadCameraSensitivityPercentage;
  bool m_ConsoleUnlocked;
  float m_FieldOfView;
  int32_t m_NumGamesPlayed;
  int32_t m_VoicePersona;
  int32_t m_StartRegion;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* m_KeyBindings;
  bool m_VsyncEnabled;
  int32_t m_SubtitlesState;
  int32_t m_LanguageState;
  System_String* m_Language;
  bool m_CoastalRegionLocked;
  bool m_RuralRegionLocked;
  bool m_WhalingStationRegionLocked;
  bool m_CrashMountainRegionLocked;
  bool m_FrameDumperUnlocked;
  bool m_HasSeenIntroVideo;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_RewiredKeyboardMap;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_RewiredMouseMap;
  bool m_NoResumeSave;
  System_String* m_AllTimeStats;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_SandboxRecords;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_UpsellsViewed;
  float m_BestTimeHunted;
  float m_BestTimeRescue;
  float m_BestTimeWhiteout;
  float m_BestTimeNomad;
  float m_BestTimeHunted2;
  float m_BestTimeArchivist;
  float m_BestTimeDeadMan;
  int32_t m_MostRecentSandboxMode;
  int32_t m_MostRecentChallengeMode;
  int32_t m_MostRecentEpisodeMode;
  float m_Brightness;
  float m_PaperWhite;
  float m_PeakBrightness;
  bool m_DoneBrightnessAdjustment;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_UnlockedBadgesViewed;
  ModdingAPI::Exposed::System::Collections::Generic::HashSet_T_* m_CinematicsViewed;
  System_String* m_FeatsSerialized;
  System_String* m_EpisodeManagerSerialized;
  System_String* m_QualityLevelSettingsSerialized;
  bool m_DisableClickHold;
  int32_t m_AutosaveMinutes;
  System_String* m_NewGameCustomModeString;
  bool m_FoundAllCachesEpisodeOne;
  bool m_FoundAllCachesEpisodeTwo;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_UnlockedAchievements;
  bool m_ReduceCameraMotion;
  bool m_LargeSubtitles;
  bool m_AccessibleStruggle;
  bool m_MouseSmoothing;
  bool m_WolfMeterEnabled;
  ModdingAPI::Exposed::System::Collections::Generic::HashSet_T_* m_ViewedNotifications;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_DaysCompleted4DON;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_DaysCompleted4DON2019;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::ProfileState*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x17D6660))(this);
  }
};
}