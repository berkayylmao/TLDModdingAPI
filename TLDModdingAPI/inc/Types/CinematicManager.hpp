// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __CinematicManager_Il2CppStaticFields {
  bool s_IsCutsceneActive;
  float s_AnimationTimeWhenMoviePlayStarted;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* s_AnimationTimeArrayDict;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* s_StateHashArrayDict;
};

struct __CinematicManager_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __CinematicManager_Il2CppClass {
  Il2CppClass_1 _1;
  __CinematicManager_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CinematicManager_Il2CppVtbl vtbl;
};

class CinematicManager {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C8EA70;
  static inline    __CinematicManager_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __CinematicManager_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__CinematicManager_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __CinematicManager_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool m_HasLockedPlayer;
  int32_t m_ControlModeToRestore;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_CinematicTracks;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_CameraEffectsBone;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8D9C0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8DB00))(this);
  }
  void LateUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8DD90))(this);
  }
  void StartLoading(ModdingAPI::Exposed::CinematicTrack* track, System_String* assetBundleFilemame, System_String* prefabPath) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicManager*, ModdingAPI::Exposed::CinematicTrack*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8DF20))(this, track, assetBundleFilemame, prefabPath);
  }
  bool IsPlaying() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CinematicManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8E0B0))(this);
  }
  bool IsReady() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CinematicManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8E240))(this);
  }
  bool IsLoading() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::CinematicManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8E3D0))(this);
  }
  void UpdateAnimDrivenEffects() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8E560))(this);
  }
  void Initialize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8D9C0))(this);
  }
  void LockPlayer() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8E650))(this);
  }
  void UnLockPlayer() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8E800))(this);
  }
  void StartMasterTrack(ModdingAPI::Exposed::CinematicTrack* cinematic) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicManager*, ModdingAPI::Exposed::CinematicTrack*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8E9C0))(this, cinematic);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::CinematicManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B90FC0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<bool> s_IsCutsceneActive = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_IsCutsceneActive; }
  );
  static inline __CppStaticProperty<float> s_AnimationTimeWhenMoviePlayStarted = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_AnimationTimeWhenMoviePlayStarted; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> s_AnimationTimeArrayDict = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_AnimationTimeArrayDict; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> s_StateHashArrayDict = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_StateHashArrayDict; }
  );

  // Static methods:
  static inline void AudioSeek(int32_t audioMs, System_String* audioEventStart, uint32_t audioId, ModdingAPI::Exposed::UnityEngine::GameObject* audioEmitterNode) {
    reinterpret_cast<void(__fastcall*)(int32_t, System_String*, uint32_t, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8EAB0))(audioMs, audioEventStart, audioId, audioEmitterNode);
  }
  static inline void MaybeSetFadedOutOnLoad(ModdingAPI::Exposed::FPAnimationState* fpAnimationState) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FPAnimationState*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8EB80))(fpAnimationState);
  }
  static inline void MaybeSetFadedOutOnLoad(ModdingAPI::Exposed::DialogueAnimationState* dialogueAnimationState) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DialogueAnimationState*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8ED10))(dialogueAnimationState);
  }
  static inline ModdingAPI::Exposed::CinematicTrack* StartMasterFP(ModdingAPI::Exposed::FPAnimationState* fpAnimationState, System_String* audioStart, ModdingAPI::Exposed::UnityEngine::TextAsset* subtitleAsset, System_String* npcID, ModdingAPI::Exposed::UnityEngine::GameObject* audioEmitterNode, ModdingAPI::Exposed::CinematicTrack::OnEnterPlaying* onEnterPlaying, bool shouldLockPlayer) {
    return reinterpret_cast<ModdingAPI::Exposed::CinematicTrack*(__fastcall*)(ModdingAPI::Exposed::FPAnimationState*, System_String*, ModdingAPI::Exposed::UnityEngine::TextAsset*, System_String*, ModdingAPI::Exposed::UnityEngine::GameObject*, ModdingAPI::Exposed::CinematicTrack::OnEnterPlaying*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8EEA0))(fpAnimationState, audioStart, subtitleAsset, npcID, audioEmitterNode, onEnterPlaying, shouldLockPlayer);
  }
  static inline void StartMasterNPC(ModdingAPI::Exposed::DialogueAnimationState* npcAnimationState, System_String* audioStart, ModdingAPI::Exposed::UnityEngine::TextAsset* subtitleAsset, System_String* npcID, ModdingAPI::Exposed::UnityEngine::GameObject* audioEmitterNode, bool shouldLockPlayer) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DialogueAnimationState*, System_String*, ModdingAPI::Exposed::UnityEngine::TextAsset*, System_String*, ModdingAPI::Exposed::UnityEngine::GameObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8F180))(npcAnimationState, audioStart, subtitleAsset, npcID, audioEmitterNode, shouldLockPlayer);
  }
  static inline void SwitchControllerAndResumeState(ModdingAPI::Exposed::UnityEngine::Animator* animatorSource, ModdingAPI::Exposed::UnityEngine::RuntimeAnimatorController* targetController) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::UnityEngine::RuntimeAnimatorController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8F2E0))(animatorSource, targetController);
  }
  static inline void SwapFPController(ModdingAPI::Exposed::UnityEngine::Animator* fpAnimator, ModdingAPI::Exposed::UnityEngine::RuntimeAnimatorController* controller) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::UnityEngine::RuntimeAnimatorController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8F480))(fpAnimator, controller);
  }
  static inline void SwitchController(ModdingAPI::Exposed::UnityEngine::Animator* animatorSource, ModdingAPI::Exposed::UnityEngine::RuntimeAnimatorController* targetController) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Animator*, ModdingAPI::Exposed::UnityEngine::RuntimeAnimatorController*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8F8D0))(animatorSource, targetController);
  }
  static inline void ClearSavedAnimationState() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8F9F0))();
  }
  static inline void SaveAnimationState(ModdingAPI::Exposed::UnityEngine::Animator* animatorSource) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Animator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8FAD0))(animatorSource);
  }
  static inline void RestoreAnimationState(ModdingAPI::Exposed::UnityEngine::Animator* animatorSource) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Animator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B8FE50))(animatorSource);
  }
  static inline void CheckAnimationRestored(ModdingAPI::Exposed::UnityEngine::Animator* animatorSource) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Animator*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B901B0))(animatorSource);
  }
  static inline void UpdateFadeAndBlur(ModdingAPI::Exposed::UnityEngine::GameObject* effectsBone, float maxBlurSize) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B903E0))(effectsBone, maxBlurSize);
  }
  static inline float GetAdjustedSkipTimeAndTryToSeekAudio(float cinematicDuration, float currentAnimationTime, float audioDuration, System_String* audioStart, uint32_t audioId, ModdingAPI::Exposed::UnityEngine::GameObject* audioEmitterNode) {
    return reinterpret_cast<float(__fastcall*)(float, float, float, System_String*, uint32_t, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B90650))(cinematicDuration, currentAnimationTime, audioDuration, audioStart, audioId, audioEmitterNode);
  }
  static inline void MaybeSeekMovie(float cinematicDuration, float currentAnimationTime) {
    reinterpret_cast<void(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B90860))(cinematicDuration, currentAnimationTime);
  }
  static inline float GetMovieTimeFromAnimationTime(float animationTime) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B90B90))(animationTime);
  }
  static inline float GetAnimationTimeWhenMoviePlayStarted() {
    return reinterpret_cast<float(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B90D10))();
  }
  static inline void SetAnimationTimeWhenMoviePlayStarted(float animationTime) {
    reinterpret_cast<void(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B90DB0))(animationTime);
  }
  static inline bool TryGetTimeFromAudio(float cinematicDuration, float audioDuration, float currentAnimationTime, uint32_t audioID, float newAnimationTime) {
    return reinterpret_cast<bool(__fastcall*)(float, float, float, uint32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B90E60))(cinematicDuration, audioDuration, currentAnimationTime, audioID, newAnimationTime);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B91120))();
  }
};
}