// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::UnityEngine {
struct __WWWTranscoder_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Byte_array* ucHexChars;
  ModdingAPI::Exposed::System::Byte_array* lcHexChars;
  uint8_t urlEscapeChar;
  ModdingAPI::Exposed::System::Byte_array* urlSpace;
  ModdingAPI::Exposed::System::Byte_array* dataSpace;
  ModdingAPI::Exposed::System::Byte_array* urlForbidden;
  uint8_t qpEscapeChar;
  ModdingAPI::Exposed::System::Byte_array* qpSpace;
  ModdingAPI::Exposed::System::Byte_array* qpForbidden;
};

struct __WWWTranscoder_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __WWWTranscoder_Il2CppClass {
  Il2CppClass_1 _1;
  __WWWTranscoder_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __WWWTranscoder_Il2CppVtbl vtbl;
};

class WWWTranscoder {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C65728;
  static inline    __WWWTranscoder_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __WWWTranscoder_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__WWWTranscoder_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __WWWTranscoder_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*> ucHexChars = __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->ucHexChars; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*> lcHexChars = __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->lcHexChars; }
  );
  static inline __CppStaticProperty<uint8_t> urlEscapeChar = __CppStaticProperty<uint8_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->urlEscapeChar; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*> urlSpace = __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->urlSpace; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*> dataSpace = __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->dataSpace; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*> urlForbidden = __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->urlForbidden; }
  );
  static inline __CppStaticProperty<uint8_t> qpEscapeChar = __CppStaticProperty<uint8_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->qpEscapeChar; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*> qpSpace = __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->qpSpace; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*> qpForbidden = __CppStaticProperty<ModdingAPI::Exposed::System::Byte_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->qpForbidden; }
  );

  // Static methods:
  static inline uint8_t Hex2Byte(ModdingAPI::Exposed::System::Byte_array* b, int32_t offset) {
    return reinterpret_cast<uint8_t(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155A680))(b, offset);
  }
  static inline ModdingAPI::Exposed::System::Byte_array* Byte2Hex(uint8_t b, ModdingAPI::Exposed::System::Byte_array* hexChars) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(uint8_t, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155A710))(b, hexChars);
  }
  static inline ModdingAPI::Exposed::System::Byte_array* DataEncode(ModdingAPI::Exposed::System::Byte_array* toEncode) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155A830))(toEncode);
  }
  static inline System_String* QPEncode(System_String* toEncode, ModdingAPI::Exposed::System::Text::Encoding* e) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Text::Encoding*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155A900))(toEncode, e);
  }
  static inline ModdingAPI::Exposed::System::Byte_array* Encode(ModdingAPI::Exposed::System::Byte_array* input, uint8_t escapeChar, ModdingAPI::Exposed::System::Byte_array* space, ModdingAPI::Exposed::System::Byte_array* forbidden, bool uppercase) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, uint8_t, ModdingAPI::Exposed::System::Byte_array*, ModdingAPI::Exposed::System::Byte_array*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155AA40))(input, escapeChar, space, forbidden, uppercase);
  }
  static inline bool ByteArrayContains(ModdingAPI::Exposed::System::Byte_array* array, uint8_t b) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, uint8_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155AE80))(array, b);
  }
  static inline ModdingAPI::Exposed::System::Byte_array* URLDecode(ModdingAPI::Exposed::System::Byte_array* toEncode) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155AED0))(toEncode);
  }
  static inline bool ByteSubArrayEquals(ModdingAPI::Exposed::System::Byte_array* array, int32_t index, ModdingAPI::Exposed::System::Byte_array* comperand) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, int32_t, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155AF90))(array, index, comperand);
  }
  static inline ModdingAPI::Exposed::System::Byte_array* Decode(ModdingAPI::Exposed::System::Byte_array* input, uint8_t escapeChar, ModdingAPI::Exposed::System::Byte_array* space) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*, uint8_t, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155B040))(input, escapeChar, space);
  }
  static inline bool SevenBitClean(System_String* s, ModdingAPI::Exposed::System::Text::Encoding* e) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Text::Encoding*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155B3B0))(s, e);
  }
  static inline bool SevenBitClean(ModdingAPI::Exposed::System::Byte_array* input) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155B4D0))(input);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x155B530))();
  }
};
}