// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Xml::Serialization {
struct __XmlTypeMapElementInfo_Il2CppStaticFields {
};

struct __XmlTypeMapElementInfo_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __XmlTypeMapElementInfo_Il2CppClass {
  Il2CppClass_1 _1;
  __XmlTypeMapElementInfo_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __XmlTypeMapElementInfo_Il2CppVtbl vtbl;
};

class XmlTypeMapElementInfo {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C29CF0;
  static inline    __XmlTypeMapElementInfo_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __XmlTypeMapElementInfo_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__XmlTypeMapElementInfo_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __XmlTypeMapElementInfo_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  System_String* _elementName;
  System_String* _namespace;
  int32_t _form;
  ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapMember* _member;
  Il2CppObject* _choiceValue;
  bool _isNullable;
  int32_t _nestingLevel;
  ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping* _mappedType;
  ModdingAPI::Exposed::System::Xml::Serialization::TypeData* _type;
  bool _wrappedElement;
  int32_t _explicitOrder;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapMember* member, ModdingAPI::Exposed::System::Xml::Serialization::TypeData* type) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*, ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapMember*, ModdingAPI::Exposed::System::Xml::Serialization::TypeData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B1680))(this, member, type);
  }
  ModdingAPI::Exposed::System::Xml::Serialization::TypeData* get_TypeData() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Serialization::TypeData*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319980))(this);
  }
  Il2CppObject* get_ChoiceValue() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335370))(this);
  }
  void set_ChoiceValue(Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A410))(this, value);
  }
  System_String* get_ElementName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  void set_ElementName(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, value);
  }
  System_String* get_Namespace() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  void set_Namespace(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A3E0))(this, value);
  }
  System_String* get_DataTypeNamespace() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B1750))(this);
  }
  System_String* get_DataTypeName() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B17E0))(this);
  }
  int32_t get_Form() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x37AAE0))(this);
  }
  void set_Form(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3838E0))(this, value);
  }
  ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping* get_MappedType() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319960))(this);
  }
  void set_MappedType(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*, ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapping*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x31F420))(this, value);
  }
  bool get_IsNullable() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5F6810))(this);
  }
  void set_IsNullable(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6CE3F0))(this, value);
  }
  void set_NestingLevel(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8D0))(this, value);
  }
  bool get_WrappedElement() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x766C20))(this);
  }
  void set_WrappedElement(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x766C30))(this, value);
  }
  bool get_IsTextElement() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B1810))(this);
  }
  void set_IsTextElement(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B18C0))(this, value);
  }
  bool get_IsUnnamedAnyElement() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B19A0))(this);
  }
  void set_IsUnnamedAnyElement(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B1A60))(this, value);
  }
  int32_t get_ExplicitOrder() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3199A0))(this);
  }
  void set_ExplicitOrder(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383950))(this, value);
  }
  bool Equals(Il2CppObject* other) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x9B1B40))(this, other);
  }
  int32_t GetHashCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Serialization::XmlTypeMapElementInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x736090))(this);
  }
};
}