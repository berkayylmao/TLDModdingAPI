// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples {
struct __DialogueUGUI_Il2CppStaticFields {
};

struct __DialogueUGUI_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __DialogueUGUI_Il2CppClass {
  Il2CppClass_1 _1;
  __DialogueUGUI_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __DialogueUGUI_Il2CppVtbl vtbl;
};

class DialogueUGUI {
public:
  // Il2Cpp fields:
  __DialogueUGUI_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool skipOnInput;
  bool waitForInput;
  ModdingAPI::Exposed::UnityEngine::RectTransform* subtitlesGroup;
  ModdingAPI::Exposed::UnityEngine::UI::Text* actorSpeech;
  ModdingAPI::Exposed::UnityEngine::UI::Text* actorName;
  ModdingAPI::Exposed::UnityEngine::UI::Image* actorPortrait;
  ModdingAPI::Exposed::UnityEngine::RectTransform* waitInputIndicator;
  ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples::DialogueUGUI::SubtitleDelays* subtitleDelays;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* typingSounds;
  ModdingAPI::Exposed::UnityEngine::RectTransform* optionsGroup;
  ModdingAPI::Exposed::UnityEngine::UI::Button* optionButton;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* cachedButtons;
  ModdingAPI::Exposed::UnityEngine::Vector2 originalSubsPosition;
  bool isWaitingChoice;
  ModdingAPI::Exposed::UnityEngine::AudioSource* _localSource;

  // Member methods:
  ModdingAPI::Exposed::UnityEngine::AudioSource* get_localSource() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::AudioSource*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples::DialogueUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2293B00))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples::DialogueUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2293C30))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples::DialogueUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2294310))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples::DialogueUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x22949F0))(this);
  }
  void OnDialogueStarted(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::DialogueTree* dlg) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples::DialogueUGUI*, ModdingAPI::Exposed::NodeCanvas::DialogueTrees::DialogueTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, dlg);
  }
  void OnDialoguePaused(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::DialogueTree* dlg) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples::DialogueUGUI*, ModdingAPI::Exposed::NodeCanvas::DialogueTrees::DialogueTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2294E30))(this, dlg);
  }
  void OnDialogueFinished(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::DialogueTree* dlg) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples::DialogueUGUI*, ModdingAPI::Exposed::NodeCanvas::DialogueTrees::DialogueTree*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2294FB0))(this, dlg);
  }
  void OnSubtitlesRequest(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::SubtitlesRequestInfo* info) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples::DialogueUGUI*, ModdingAPI::Exposed::NodeCanvas::DialogueTrees::SubtitlesRequestInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2295310))(this, info);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* Internal_OnSubtitlesRequestInfo(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::SubtitlesRequestInfo* info) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples::DialogueUGUI*, ModdingAPI::Exposed::NodeCanvas::DialogueTrees::SubtitlesRequestInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2295480))(this, info);
  }
  void PlayTypeSound() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples::DialogueUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x22955E0))(this);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* CheckInput(ModdingAPI::Exposed::System::Action* Do) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples::DialogueUGUI*, ModdingAPI::Exposed::System::Action*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2295760))(this, Do);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* DelayPrint(float time) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples::DialogueUGUI*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x22958B0))(this, time);
  }
  void OnMultipleChoiceRequest(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::MultipleChoiceRequestInfo* info) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples::DialogueUGUI*, ModdingAPI::Exposed::NodeCanvas::DialogueTrees::MultipleChoiceRequestInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2295A10))(this, info);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* CountDown(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::MultipleChoiceRequestInfo* info) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples::DialogueUGUI*, ModdingAPI::Exposed::NodeCanvas::DialogueTrees::MultipleChoiceRequestInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x22968F0))(this, info);
  }
  void Finalize(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::MultipleChoiceRequestInfo* info, int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples::DialogueUGUI*, ModdingAPI::Exposed::NodeCanvas::DialogueTrees::MultipleChoiceRequestInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2296A50))(this, info, index);
  }
  void SetMassAlpha(ModdingAPI::Exposed::UnityEngine::RectTransform* root, float alpha) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples::DialogueUGUI*, ModdingAPI::Exposed::UnityEngine::RectTransform*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2296F30))(this, root, alpha);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::DialogueTrees::UI::Examples::DialogueUGUI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2297110))(this);
  }
};
}