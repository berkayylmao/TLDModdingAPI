// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Xml::Schema {
struct __Datatype_anyURI_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Type* atomicValueType;
  ModdingAPI::Exposed::System::Type* listValueType;
};

struct __Datatype_anyURI_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_get_ValueType;
  VirtualInvokeData _5_get_TokenizedType;
  VirtualInvokeData _6_ParseValue;
  VirtualInvokeData _7_get_Variety;
  VirtualInvokeData _8_get_TypeCode;
  VirtualInvokeData _9_IsDerivedFrom;
  VirtualInvokeData _10_get_HasLexicalFacets;
  VirtualInvokeData _11_get_HasValueFacets;
  VirtualInvokeData _12_get_ValueConverter;
  VirtualInvokeData _13_get_Restriction;
  VirtualInvokeData _14_Compare;
  VirtualInvokeData _15_ParseValue;
  VirtualInvokeData _16_TryParseValue;
  VirtualInvokeData _17_TryParseValue;
  VirtualInvokeData _18_get_FacetsChecker;
  VirtualInvokeData _19_get_BuiltInWhitespaceFacet;
  VirtualInvokeData _20_DeriveByRestriction;
  VirtualInvokeData _21_DeriveByList;
  VirtualInvokeData _22_VerifySchemaValid;
  VirtualInvokeData _23_IsEqual;
  VirtualInvokeData _24_IsComparable;
  VirtualInvokeData _25_CreateValueConverter;
  VirtualInvokeData _26_get_ListValueType;
  VirtualInvokeData _27_get_ValidRestrictionFlags;
};

struct __Datatype_anyURI_Il2CppClass {
  Il2CppClass_1 _1;
  __Datatype_anyURI_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Datatype_anyURI_Il2CppVtbl vtbl;
};

class Datatype_anyURI {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C54748;
  static inline    __Datatype_anyURI_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Datatype_anyURI_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Datatype_anyURI_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Datatype_anyURI_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t DatatypeImplementation_variety;
  ModdingAPI::Exposed::System::Xml::Schema::RestrictionFacets* DatatypeImplementation_restriction;
  ModdingAPI::Exposed::System::Xml::Schema::DatatypeImplementation* DatatypeImplementation_baseType;
  ModdingAPI::Exposed::System::Xml::Schema::XmlValueConverter* DatatypeImplementation_valueConverter;
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaType* DatatypeImplementation_parentSchemaType;

  // Member methods:
  ModdingAPI::Exposed::System::Xml::Schema::XmlValueConverter* CreateValueConverter(ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaType* schemaType) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::XmlValueConverter*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Datatype_anyURI*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaType*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD6B160))(this, schemaType);
  }
  ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker* get_FacetsChecker() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Datatype_anyURI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD6CB50))(this);
  }
  int32_t get_TypeCode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Datatype_anyURI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x330B40))(this);
  }
  ModdingAPI::Exposed::System::Type* get_ValueType() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Datatype_anyURI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD6CBF0))(this);
  }
  bool get_HasValueFacets() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Datatype_anyURI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x403F70))(this);
  }
  ModdingAPI::Exposed::System::Type* get_ListValueType() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Type*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Datatype_anyURI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD6CC90))(this);
  }
  int32_t get_BuiltInWhitespaceFacet() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Datatype_anyURI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3201C0))(this);
  }
  int32_t get_ValidRestrictionFlags() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Datatype_anyURI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD6A360))(this);
  }
  int32_t Compare(Il2CppObject* value1, Il2CppObject* value2) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Datatype_anyURI*, Il2CppObject*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD6CD30))(this, value1, value2);
  }
  ModdingAPI::Exposed::System::Exception* TryParseValue(System_String* s, ModdingAPI::Exposed::System::Xml::XmlNameTable* nameTable, ModdingAPI::Exposed::System::Xml::IXmlNamespaceResolver* nsmgr, Il2CppObject* typedValue) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Datatype_anyURI*, System_String*, ModdingAPI::Exposed::System::Xml::XmlNameTable*, ModdingAPI::Exposed::System::Xml::IXmlNamespaceResolver*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD6CEB0))(this, s, nameTable, nsmgr, typedValue);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Datatype_anyURI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD6D0A0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Type*> atomicValueType = __CppStaticProperty<ModdingAPI::Exposed::System::Type*>(
   []() { return &GetStaticClassInstance()->pStaticFields->atomicValueType; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Type*> listValueType = __CppStaticProperty<ModdingAPI::Exposed::System::Type*>(
   []() { return &GetStaticClassInstance()->pStaticFields->listValueType; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD6D140))();
  }
};
}