// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.TextGenerationSettings.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed::UnityEngine::UI {
struct __Text_Il2CppStaticFields {
  ModdingAPI::Exposed::UnityEngine::Material* s_DefaultText;
};

struct __Text_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Awake;
  VirtualInvokeData _5_OnEnable;
  VirtualInvokeData _6_Start;
  VirtualInvokeData _7_OnDisable;
  VirtualInvokeData _8_OnDestroy;
  VirtualInvokeData _9_IsActive;
  VirtualInvokeData _10_OnRectTransformDimensionsChange;
  VirtualInvokeData _11_OnBeforeTransformParentChanged;
  VirtualInvokeData _12_OnTransformParentChanged;
  VirtualInvokeData _13_OnDidApplyAnimationProperties;
  VirtualInvokeData _14_OnCanvasGroupChanged;
  VirtualInvokeData _15_OnCanvasHierarchyChanged;
  VirtualInvokeData _16_IsDestroyed;
  VirtualInvokeData _18_UnityEngine_UI_ICanvasElement_get_transform;
  VirtualInvokeData _22_get_color;
  VirtualInvokeData _23_set_color;
  VirtualInvokeData _24_get_raycastTarget;
  VirtualInvokeData _25_set_raycastTarget;
  VirtualInvokeData _26_SetAllDirty;
  VirtualInvokeData _27_SetLayoutDirty;
  VirtualInvokeData _28_SetVerticesDirty;
  VirtualInvokeData _29_SetMaterialDirty;
  VirtualInvokeData _30_get_rectTransform;
  VirtualInvokeData _31_get_defaultMaterial;
  VirtualInvokeData _32_get_material;
  VirtualInvokeData _33_set_material;
  VirtualInvokeData _34_get_materialForRendering;
  VirtualInvokeData _35_get_mainTexture;
  VirtualInvokeData _36_OnCullingChanged;
  VirtualInvokeData _37_Rebuild;
  VirtualInvokeData _38_LayoutComplete;
  VirtualInvokeData _39_GraphicUpdateComplete;
  VirtualInvokeData _40_UpdateMaterial;
  VirtualInvokeData _41_UpdateGeometry;
  VirtualInvokeData _42_OnFillVBO;
  VirtualInvokeData _43_OnPopulateMesh;
  VirtualInvokeData _44_OnPopulateMesh;
  VirtualInvokeData _45_SetNativeSize;
  VirtualInvokeData _46_Raycast;
  VirtualInvokeData _47_CrossFadeColor;
  VirtualInvokeData _48_CrossFadeColor;
  VirtualInvokeData _49_CrossFadeAlpha;
  VirtualInvokeData _50_UnityEngine_UI_IClippable_get_gameObject;
  VirtualInvokeData _57_GetModifiedMaterial;
  VirtualInvokeData _58_Cull;
  VirtualInvokeData _59_SetClipRect;
  VirtualInvokeData _60_ParentMaskStateChanged;
  VirtualInvokeData _61_RecalculateClipping;
  VirtualInvokeData _62_RecalculateMasking;
  VirtualInvokeData _72_get_text;
  VirtualInvokeData _73_set_text;
  VirtualInvokeData _74_CalculateLayoutInputHorizontal;
  VirtualInvokeData _75_CalculateLayoutInputVertical;
  VirtualInvokeData _76_get_minWidth;
  VirtualInvokeData _77_get_preferredWidth;
  VirtualInvokeData _78_get_flexibleWidth;
  VirtualInvokeData _79_get_minHeight;
  VirtualInvokeData _80_get_preferredHeight;
  VirtualInvokeData _81_get_flexibleHeight;
  VirtualInvokeData _82_get_layoutPriority;
};

struct __Text_Il2CppClass {
  Il2CppClass_1 _1;
  __Text_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Text_Il2CppVtbl vtbl;
};

class Text {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C3AE58;
  static inline    Text* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C867C0;
  static inline    __Text_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline Text* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (Text**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __Text_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Text_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Text_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::Material* m_Material;
  ModdingAPI::Exposed::UnityEngine::Color Graphic_m_Color;
  bool Graphic_m_RaycastTarget;
  ModdingAPI::Exposed::UnityEngine::RectTransform* Graphic_m_RectTransform;
  ModdingAPI::Exposed::UnityEngine::CanvasRenderer* Graphic_m_CanvasRenderer;
  ModdingAPI::Exposed::UnityEngine::Canvas* Graphic_m_Canvas;
  bool Graphic_m_VertsDirty;
  bool Graphic_m_MaterialDirty;
  ModdingAPI::Exposed::UnityEngine::Events::UnityAction* m_OnDirtyLayoutCallback;
  ModdingAPI::Exposed::UnityEngine::Events::UnityAction* m_OnDirtyVertsCallback;
  ModdingAPI::Exposed::UnityEngine::Events::UnityAction* m_OnDirtyMaterialCallback;
  ModdingAPI::Exposed::UnityEngine::UI::CoroutineTween::TweenRunner_T_* Graphic_m_ColorTweenRunner;
  bool Graphic__useLegacyMeshGeneration_k__BackingField;
  bool m_ShouldRecalculateStencil;
  ModdingAPI::Exposed::UnityEngine::Material* m_MaskMaterial;
  ModdingAPI::Exposed::UnityEngine::UI::RectMask2D* MaskableGraphic_m_ParentMask;
  bool MaskableGraphic_m_Maskable;
  bool m_IncludeForMasking;
  ModdingAPI::Exposed::UnityEngine::UI::MaskableGraphic::CullStateChangedEvent* MaskableGraphic_m_OnCullStateChanged;
  bool m_ShouldRecalculate;
  int32_t m_StencilValue;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* MaskableGraphic_m_Corners;
  ModdingAPI::Exposed::UnityEngine::UI::FontData* m_FontData;
  System_String* m_Text;
  ModdingAPI::Exposed::UnityEngine::TextGenerator* m_TextCache;
  ModdingAPI::Exposed::UnityEngine::TextGenerator* m_TextCacheForLayout;
  bool m_DisableFontTextureRebuiltCallback;
  ModdingAPI::Exposed::UnityEngine::UIVertex_array* m_TempVerts;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFF970))(this);
  }
  ModdingAPI::Exposed::UnityEngine::TextGenerator* get_cachedTextGenerator() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::TextGenerator*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFFA40))(this);
  }
  ModdingAPI::Exposed::UnityEngine::TextGenerator* get_cachedTextGeneratorForLayout() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::TextGenerator*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFFCA0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Texture* get_mainTexture() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Texture*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFFFE10))(this);
  }
  void FontTextureChanged() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000180))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Font* get_font() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Font*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10002F0))(this);
  }
  void set_font(ModdingAPI::Exposed::UnityEngine::Font* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*, ModdingAPI::Exposed::UnityEngine::Font*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000310))(this, value);
  }
  System_String* get_text() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000440))(this);
  }
  void set_text(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000450))(this, value);
  }
  bool get_supportRichText() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000570))(this);
  }
  void set_supportRichText(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000590))(this, value);
  }
  bool get_resizeTextForBestFit() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10005F0))(this);
  }
  void set_resizeTextForBestFit(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000610))(this, value);
  }
  int32_t get_resizeTextMinSize() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000670))(this);
  }
  void set_resizeTextMinSize(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000690))(this, value);
  }
  int32_t get_resizeTextMaxSize() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10006F0))(this);
  }
  void set_resizeTextMaxSize(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000710))(this, value);
  }
  int32_t get_alignment() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000770))(this);
  }
  void set_alignment(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000790))(this, value);
  }
  bool get_alignByGeometry() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10007F0))(this);
  }
  void set_alignByGeometry(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000810))(this, value);
  }
  int32_t get_fontSize() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000860))(this);
  }
  void set_fontSize(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000880))(this, value);
  }
  int32_t get_horizontalOverflow() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10008E0))(this);
  }
  void set_horizontalOverflow(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000900))(this, value);
  }
  int32_t get_verticalOverflow() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000960))(this);
  }
  void set_verticalOverflow(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000980))(this, value);
  }
  float get_lineSpacing() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10009E0))(this);
  }
  void set_lineSpacing(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000A00))(this, value);
  }
  int32_t get_fontStyle() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000A70))(this);
  }
  void set_fontStyle(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000A90))(this, value);
  }
  float get_pixelsPerUnit() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000AF0))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000DA0))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000E60))(this);
  }
  void UpdateGeometry() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000F10))(this);
  }
  void AssignDefaultFont() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1000FF0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::TextGenerationSettings GetGenerationSettings(ModdingAPI::Exposed::UnityEngine::Vector2 extents) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::TextGenerationSettings(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10011B0))(this, extents);
  }
  void OnPopulateMesh(ModdingAPI::Exposed::UnityEngine::UI::VertexHelper* toFill) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*, ModdingAPI::Exposed::UnityEngine::UI::VertexHelper*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10016D0))(this, toFill);
  }
  void CalculateLayoutInputHorizontal() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void CalculateLayoutInputVertical() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  float get_minWidth() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE3D1D0))(this);
  }
  float get_preferredWidth() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1001EA0))(this);
  }
  float get_flexibleWidth() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE3D380))(this);
  }
  float get_minHeight() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE3D1D0))(this);
  }
  float get_preferredHeight() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1002020))(this);
  }
  float get_flexibleHeight() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE3D380))(this);
  }
  int32_t get_layoutPriority() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::UI::Text*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x594C70))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Material*> s_DefaultText = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Material*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_DefaultText; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 GetTextAnchorPivot(int32_t anchor) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10014B0))(anchor);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1002130))();
  }
};
}