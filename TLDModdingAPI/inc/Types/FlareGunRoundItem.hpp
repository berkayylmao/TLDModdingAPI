// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.FlareGunRoundItem.SurfaceResponseInfo.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Quaternion.hpp"


namespace ModdingAPI::Exposed {
struct __FlareGunRoundItem_Il2CppStaticFields {
};

struct __FlareGunRoundItem_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __FlareGunRoundItem_Il2CppClass {
  Il2CppClass_1 _1;
  __FlareGunRoundItem_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __FlareGunRoundItem_Il2CppVtbl vtbl;
};

class FlareGunRoundItem {
public:
  // Il2Cpp fields:
  __FlareGunRoundItem_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_ReleaseVelocity;
  float m_ReleaseDrag;
  float m_VictimDamage;
  float m_XZDampeningScalar;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_XZDampeningRange;
  float m_BurnTime;
  float m_MaxBurnTimeOnWildlife;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_AdditionalGravity;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ImpactDirtPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ImpactConcretePrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ImpactFabricPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ImpactFleshPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ImpactGlassPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ImpactIcePrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ImpactMetalPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ImpactSnowPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ImpactWoodPrefab;
  System_String* m_OnFireAudio;
  System_String* m_BurningAudio;
  System_String* m_OnImpactAudio;
  System_String* m_BurnOutAudio;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FXGameObject;
  ModdingAPI::Exposed::UnityEngine::ParticleSystem* m_SmokeParticleSystem;
  ModdingAPI::Exposed::UnityEngine::ParticleSystem* m_SmokeCoreParticleSystem;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FlareEffectInFlight;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FlareEffectAfterLanding;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Light;
  float m_ParticleRestEmission;
  float m_ParticleVelocityEmissionMultiplier;
  ModdingAPI::Exposed::UnityEngine::Color m_SmokeColorWhenExtinguished;
  ModdingAPI::Exposed::UnityEngine::Color m_SmokeCoreColorWhenExtinguished;
  ModdingAPI::Exposed::UnityEngine::Rigidbody* m_Rigidbody;
  int32_t m_ContactCount;
  float m_EmbeddedDepth;
  ModdingAPI::Exposed::BaseAi* m_EmbeddedInAi;
  float m_EmbeddedInAiDeadTime;
  float m_FallOutTimer;
  float m_ReleaseTime;
  float m_LastEffectTime;
  uint32_t m_BurningAudioId;
  float m_BurnTimer;
  float m_SmokeClearTime;
  bool m_StartHasBeenCalled;
  ModdingAPI::Exposed::UnityEngine::MeshRenderer* m_MeshRenderer;
  int32_t m_FlightStatus;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1849850))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1849A90))(this);
  }
  void Reset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1849C10))(this);
  }
  ModdingAPI::Exposed::FlareGunRoundSaveData* Serialize() {
    return reinterpret_cast<ModdingAPI::Exposed::FlareGunRoundSaveData*(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1849D50))(this);
  }
  void Deserialize(ModdingAPI::Exposed::FlareGunRoundSaveData* asd) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*, ModdingAPI::Exposed::FlareGunRoundSaveData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x184A860))(this, asd);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x184B060))(this);
  }
  void FixedUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x184B840))(this);
  }
  void LateUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x184BD10))(this);
  }
  void Fire() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x184C300))(this);
  }
  void BurnOut() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x184CA10))(this);
  }
  bool IsBurning() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x184CDE0))(this);
  }
  bool InFlight(bool onlyConsiderFirstImpact) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x184CE00))(this, onlyConsiderFirstImpact);
  }
  bool BelongsToPlayer() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x184CF60))(this);
  }
  void FlightComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x184D1C0))(this);
  }
  void HandleCollisionWithObject(ModdingAPI::Exposed::UnityEngine::GameObject* colliderGO, ModdingAPI::Exposed::UnityEngine::Vector3 collisionPoint, ModdingAPI::Exposed::UnityEngine::Vector3 collisionNormal, ModdingAPI::Exposed::UnityEngine::Vector3 relativeVelocity) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*, ModdingAPI::Exposed::UnityEngine::GameObject*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x184D460))(this, colliderGO, collisionPoint, collisionNormal, relativeVelocity);
  }
  void OnCollisionEnter(ModdingAPI::Exposed::UnityEngine::Collision* collision) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*, ModdingAPI::Exposed::UnityEngine::Collision*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x184F1A0))(this, collision);
  }
  void OnCollisionStay(ModdingAPI::Exposed::UnityEngine::Collision* collision) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*, ModdingAPI::Exposed::UnityEngine::Collision*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x184F2D0))(this, collision);
  }
  void ParentToObject(ModdingAPI::Exposed::UnityEngine::Transform* t) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x184FB80))(this, t);
  }
  void PlayImpactAudio(System_String* surfaceTag) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x184FF40))(this, surfaceTag);
  }
  ModdingAPI::Exposed::FlareGunRoundItem::SurfaceResponseInfo GetSurfaceResponseInfo(System_String* surfaceTag) {
    return reinterpret_cast<ModdingAPI::Exposed::FlareGunRoundItem::SurfaceResponseInfo(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1850090))(this, surfaceTag);
  }
  void FallFree() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1850630))(this);
  }
  ModdingAPI::Exposed::BaseAi* InflictDamage(ModdingAPI::Exposed::UnityEngine::GameObject* victim, float damageScalar, bool stickIn, System_String* collider) {
    return reinterpret_cast<ModdingAPI::Exposed::BaseAi*(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*, ModdingAPI::Exposed::UnityEngine::GameObject*, float, bool, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1850AD0))(this, victim, damageScalar, stickIn, collider);
  }
  void MaybeScareWildlife(ModdingAPI::Exposed::PackAnimal* ignoreMoraleOnAnimal) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*, ModdingAPI::Exposed::PackAnimal*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1850FB0))(this, ignoreMoraleOnAnimal);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlareGunRoundItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18516A0))(this);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::UnityEngine::GameObject* SpawnAndFire(ModdingAPI::Exposed::UnityEngine::GameObject* prefab, ModdingAPI::Exposed::UnityEngine::Vector3 startPos, ModdingAPI::Exposed::UnityEngine::Quaternion startRot) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Quaternion)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1851500))(prefab, startPos, startRot);
  }
};
}