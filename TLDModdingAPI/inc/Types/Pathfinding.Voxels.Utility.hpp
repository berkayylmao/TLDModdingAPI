// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"


namespace ModdingAPI::Exposed::Pathfinding::Voxels {
struct __Utility_Il2CppStaticFields {
  ModdingAPI::Exposed::UnityEngine::Color_array* colors;
  float lastStartTime;
  float lastAdditiveTimerStart;
  float additiveTimer;
  ModdingAPI::Exposed::System::Single_array* clipPolygonCache;
  ModdingAPI::Exposed::System::Int32_array* clipPolygonIntCache;
};

struct __Utility_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Utility_Il2CppClass {
  Il2CppClass_1 _1;
  __Utility_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Utility_Il2CppVtbl vtbl;
};

class Utility {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C944A0;
  static inline    __Utility_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Utility_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Utility_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Utility_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Utility*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color_array*> colors = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->colors; }
  );
  static inline __CppStaticProperty<float> lastStartTime = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->lastStartTime; }
  );
  static inline __CppStaticProperty<float> lastAdditiveTimerStart = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->lastAdditiveTimerStart; }
  );
  static inline __CppStaticProperty<float> additiveTimer = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->additiveTimer; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Single_array*> clipPolygonCache = __CppStaticProperty<ModdingAPI::Exposed::System::Single_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->clipPolygonCache; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*> clipPolygonIntCache = __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->clipPolygonIntCache; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::UnityEngine::Color GetColor(int32_t i) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2455190))(i);
  }
  static inline int32_t Bit(int32_t a, int32_t b) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2455340))(a, b);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Color IntToColor(int32_t i, float a) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2455360))(i, a);
  }
  static inline float TriangleArea2(ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b, ModdingAPI::Exposed::UnityEngine::Vector3 c) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2455490))(a, b, c);
  }
  static inline float TriangleArea(ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b, ModdingAPI::Exposed::UnityEngine::Vector3 c) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2452700))(a, b, c);
  }
  static inline float Min(float a, float b, float c) {
    return reinterpret_cast<float(__fastcall*)(float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2455610))(a, b, c);
  }
  static inline float Max(float a, float b, float c) {
    return reinterpret_cast<float(__fastcall*)(float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2455620))(a, b, c);
  }
  static inline int32_t Max(int32_t a, int32_t b, int32_t c, int32_t d) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2455630))(a, b, c, d);
  }
  static inline int32_t Min(int32_t a, int32_t b, int32_t c, int32_t d) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2455650))(a, b, c, d);
  }
  static inline float Max(float a, float b, float c, float d) {
    return reinterpret_cast<float(__fastcall*)(float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2455670))(a, b, c, d);
  }
  static inline float Min(float a, float b, float c, float d) {
    return reinterpret_cast<float(__fastcall*)(float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2455690))(a, b, c, d);
  }
  static inline System_String* ToMillis(float v) {
    return reinterpret_cast<System_String*(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24556B0))(v);
  }
  static inline void StartTimer() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2455760))();
  }
  static inline void EndTimer(System_String* label) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2455850))(label);
  }
  static inline void StartTimerAdditive(bool reset) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24559A0))(reset);
  }
  static inline void EndTimerAdditive(System_String* label, bool log) {
    reinterpret_cast<void(__fastcall*)(System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2455AD0))(label, log);
  }
  static inline void CopyVector(ModdingAPI::Exposed::System::Single_array* a, int32_t i, ModdingAPI::Exposed::UnityEngine::Vector3 v) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Single_array*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2455D00))(a, i, v);
  }
  static inline int32_t ClipPoly(ModdingAPI::Exposed::System::Single_array* vIn, int32_t n, ModdingAPI::Exposed::System::Single_array* vOut, float pnx, float pnz, float pd) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Single_array*, int32_t, ModdingAPI::Exposed::System::Single_array*, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2455DB0))(vIn, n, vOut, pnx, pnz, pd);
  }
  static inline int32_t ClipPolygon(ModdingAPI::Exposed::System::Single_array* vIn, int32_t n, ModdingAPI::Exposed::System::Single_array* vOut, float multi, float offset, int32_t axis) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Single_array*, int32_t, ModdingAPI::Exposed::System::Single_array*, float, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24562B0))(vIn, n, vOut, multi, offset, axis);
  }
  static inline int32_t ClipPolygonY(ModdingAPI::Exposed::System::Single_array* vIn, int32_t n, ModdingAPI::Exposed::System::Single_array* vOut, float multi, float offset, int32_t axis) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Single_array*, int32_t, ModdingAPI::Exposed::System::Single_array*, float, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2456780))(vIn, n, vOut, multi, offset, axis);
  }
  static inline int32_t ClipPolygon(ModdingAPI::Exposed::UnityEngine::Vector3_array* vIn, int32_t n, ModdingAPI::Exposed::UnityEngine::Vector3_array* vOut, float multi, float offset, int32_t axis) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3_array*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector3_array*, float, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2456AD0))(vIn, n, vOut, multi, offset, axis);
  }
  static inline int32_t ClipPolygon(ModdingAPI::Exposed::Pathfinding::Int3_array* vIn, int32_t n, ModdingAPI::Exposed::Pathfinding::Int3_array* vOut, int32_t multi, int32_t offset, int32_t axis) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Int3_array*, int32_t, ModdingAPI::Exposed::Pathfinding::Int3_array*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2456EC0))(vIn, n, vOut, multi, offset, axis);
  }
  static inline bool IntersectXAxis(ModdingAPI::Exposed::UnityEngine::Vector3 intersection, ModdingAPI::Exposed::UnityEngine::Vector3 start1, ModdingAPI::Exposed::UnityEngine::Vector3 dir1, float x) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2457300))(intersection, start1, dir1, x);
  }
  static inline bool IntersectZAxis(ModdingAPI::Exposed::UnityEngine::Vector3 intersection, ModdingAPI::Exposed::UnityEngine::Vector3 start1, ModdingAPI::Exposed::UnityEngine::Vector3 dir1, float z) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24574E0))(intersection, start1, dir1, z);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x24576E0))();
  }
};
}