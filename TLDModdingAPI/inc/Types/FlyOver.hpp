// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Quaternion.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __FlyOver_Il2CppStaticFields {
  bool m_AlwaysSelectFrontPosition;
  float m_DebugAngle;
  ModdingAPI::Exposed::FlyoverDataProxy* m_FlyoverDataProxy;
};

struct __FlyOver_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __FlyOver_Il2CppClass {
  Il2CppClass_1 _1;
  __FlyOver_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __FlyOver_Il2CppVtbl vtbl;
};

class FlyOver {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C4F8B0;
  static inline    __FlyOver_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __FlyOver_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__FlyOver_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __FlyOver_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::GameObject_array* m_FormationPrefabs;
  float m_FormationHeightMin;
  float m_FormationHeightMax;
  float m_XZDistanceSpawn;
  float m_XZDistanceRemove;
  float m_SpeedMin;
  float m_SpeedMax;
  float m_SecondsBetweenFlyoversMin;
  float m_SecondsBetweenFlyoversMax;
  float m_ClearFlightRadius;
  float m_ClearFlightLimitRatio;
  float m_HeightTransitionSpeedFactor;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_FormationInstance;
  float m_Speed;
  float m_FormationHeight;
  float m_CurrentFlightRadius;
  uint32_t m_LoopAudioID;
  float m_SecondsBetweenFlyovers;
  float m_SecondsSinceLastFlyover;
  float m_InitialRandomFlockHeight;
  bool m_DirectionLocked;
  bool m_StartHasBeenCalled;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_LastCheckedPoint;
  float m_CurrentHeightTransitionSpeedFactor;
  float m_CurrentHeightTransitionSpeedDamping;
  ModdingAPI::Exposed::UnityEngine::Quaternion m_TowardPlayerHorizontalOrientation;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlyOver*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x185BBA0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlyOver*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x185BBC0))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::FlyOver*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x185BCE0))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlyOver*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x185BDD0))(this, text);
  }
  void SetFlyoverTimeToMax() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlyOver*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x185BEC0))(this);
  }
  bool HasClearFlightPath(ModdingAPI::Exposed::UnityEngine::Vector3 start, ModdingAPI::Exposed::UnityEngine::Vector3 dir) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::FlyOver*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x185BED0))(this, start, dir);
  }
  void MaybeSpawnFlyover() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlyOver*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x185C4C0))(this);
  }
  void MoveFlyover() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlyOver*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x185CF60))(this);
  }
  void MaybeDestroyFlyover() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlyOver*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x185E0A0))(this);
  }
  bool CanSpawnFlyover() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::FlyOver*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x185E600))(this);
  }
  void ResetFlyoverTimer() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlyOver*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x185E820))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::FlyOver*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x185E920))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<bool> m_AlwaysSelectFrontPosition = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_AlwaysSelectFrontPosition; }
  );
  static inline __CppStaticProperty<float> m_DebugAngle = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_DebugAngle; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::FlyoverDataProxy*> m_FlyoverDataProxy = __CppStaticProperty<ModdingAPI::Exposed::FlyoverDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_FlyoverDataProxy; }
  );

  // Static methods:
  static inline bool TryGetClearFlightHeight(ModdingAPI::Exposed::UnityEngine::Vector3 center, float radius, float height, float updatedRadius) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x185C0B0))(center, radius, height, updatedRadius);
  }
  static inline ModdingAPI::Exposed::UnityEngine::GameObject* GetCurrentFormation() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x185C420))();
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x185E940))();
  }
};
}