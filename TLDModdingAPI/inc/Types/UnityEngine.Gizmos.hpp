// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Quaternion.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Color.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Matrix4x4.hpp"


namespace ModdingAPI::Exposed::UnityEngine {
struct __Gizmos_Il2CppStaticFields {
};

struct __Gizmos_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Gizmos_Il2CppClass {
  Il2CppClass_1 _1;
  __Gizmos_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Gizmos_Il2CppVtbl vtbl;
};

class Gizmos {
public:
  // Il2Cpp fields:
  __Gizmos_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline void DrawLine(ModdingAPI::Exposed::UnityEngine::Vector3 from, ModdingAPI::Exposed::UnityEngine::Vector3 to) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0140))(from, to);
  }
  static inline void DrawWireSphere(ModdingAPI::Exposed::UnityEngine::Vector3 center, float radius) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE01A0))(center, radius);
  }
  static inline void DrawSphere(ModdingAPI::Exposed::UnityEngine::Vector3 center, float radius) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0200))(center, radius);
  }
  static inline void DrawWireCube(ModdingAPI::Exposed::UnityEngine::Vector3 center, ModdingAPI::Exposed::UnityEngine::Vector3 size) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0260))(center, size);
  }
  static inline void DrawCube(ModdingAPI::Exposed::UnityEngine::Vector3 center, ModdingAPI::Exposed::UnityEngine::Vector3 size) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE02C0))(center, size);
  }
  static inline void DrawMesh(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, int32_t submeshIndex, ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::UnityEngine::Quaternion rotation, ModdingAPI::Exposed::UnityEngine::Vector3 scale) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Quaternion, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0320))(mesh, submeshIndex, position, rotation, scale);
  }
  static inline void DrawWireMesh(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, int32_t submeshIndex, ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::UnityEngine::Quaternion rotation, ModdingAPI::Exposed::UnityEngine::Vector3 scale) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Quaternion, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE03B0))(mesh, submeshIndex, position, rotation, scale);
  }
  static inline void DrawIcon(ModdingAPI::Exposed::UnityEngine::Vector3 center, System_String* name, bool allowScaling) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0440))(center, name, allowScaling);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Color get_color() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE04C0))();
  }
  static inline void set_color(ModdingAPI::Exposed::UnityEngine::Color value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0530))(value);
  }
  static inline void set_matrix(ModdingAPI::Exposed::UnityEngine::Matrix4x4 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Matrix4x4)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0580))(value);
  }
  static inline void DrawFrustum(ModdingAPI::Exposed::UnityEngine::Vector3 center, float fov, float maxRange, float minRange, float aspect) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE05D0))(center, fov, maxRange, minRange, aspect);
  }
  static inline void DrawRay(ModdingAPI::Exposed::UnityEngine::Vector3 from, ModdingAPI::Exposed::UnityEngine::Vector3 direction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0670))(from, direction);
  }
  static inline void DrawMesh(ModdingAPI::Exposed::UnityEngine::Mesh* mesh) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE07D0))(mesh);
  }
  static inline void DrawMesh(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::UnityEngine::Quaternion rotation, ModdingAPI::Exposed::UnityEngine::Vector3 scale) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Quaternion, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0950))(mesh, position, rotation, scale);
  }
  static inline void DrawWireMesh(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::UnityEngine::Quaternion rotation, ModdingAPI::Exposed::UnityEngine::Vector3 scale) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Quaternion, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE09F0))(mesh, position, rotation, scale);
  }
  static inline void DrawIcon(ModdingAPI::Exposed::UnityEngine::Vector3 center, System_String* name) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0A90))(center, name);
  }
  static inline void DrawLine_Injected(ModdingAPI::Exposed::UnityEngine::Vector3 from, ModdingAPI::Exposed::UnityEngine::Vector3 to) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0B00))(from, to);
  }
  static inline void DrawWireSphere_Injected(ModdingAPI::Exposed::UnityEngine::Vector3 center, float radius) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0B60))(center, radius);
  }
  static inline void DrawSphere_Injected(ModdingAPI::Exposed::UnityEngine::Vector3 center, float radius) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0BC0))(center, radius);
  }
  static inline void DrawWireCube_Injected(ModdingAPI::Exposed::UnityEngine::Vector3 center, ModdingAPI::Exposed::UnityEngine::Vector3 size) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0C20))(center, size);
  }
  static inline void DrawCube_Injected(ModdingAPI::Exposed::UnityEngine::Vector3 center, ModdingAPI::Exposed::UnityEngine::Vector3 size) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0C80))(center, size);
  }
  static inline void DrawMesh_Injected(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, int32_t submeshIndex, ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::UnityEngine::Quaternion rotation, ModdingAPI::Exposed::UnityEngine::Vector3 scale) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Quaternion, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0CE0))(mesh, submeshIndex, position, rotation, scale);
  }
  static inline void DrawWireMesh_Injected(ModdingAPI::Exposed::UnityEngine::Mesh* mesh, int32_t submeshIndex, ModdingAPI::Exposed::UnityEngine::Vector3 position, ModdingAPI::Exposed::UnityEngine::Quaternion rotation, ModdingAPI::Exposed::UnityEngine::Vector3 scale) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Quaternion, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0D60))(mesh, submeshIndex, position, rotation, scale);
  }
  static inline void DrawIcon_Injected(ModdingAPI::Exposed::UnityEngine::Vector3 center, System_String* name, bool allowScaling) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0DE0))(center, name, allowScaling);
  }
  static inline void get_color_Injected(ModdingAPI::Exposed::UnityEngine::Color ret) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0E60))(ret);
  }
  static inline void set_color_Injected(ModdingAPI::Exposed::UnityEngine::Color value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0EB0))(value);
  }
  static inline void set_matrix_Injected(ModdingAPI::Exposed::UnityEngine::Matrix4x4 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Matrix4x4)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0F00))(value);
  }
  static inline void DrawFrustum_Injected(ModdingAPI::Exposed::UnityEngine::Vector3 center, float fov, float maxRange, float minRange, float aspect) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFE0F50))(center, fov, maxRange, minRange, aspect);
  }
};
}