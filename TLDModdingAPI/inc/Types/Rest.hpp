// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __Rest_Il2CppStaticFields {
  ModdingAPI::Exposed::RestSaveDataProxy* m_RestSaveDataProxy;
};

struct __Rest_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Rest_Il2CppClass {
  Il2CppClass_1 _1;
  __Rest_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Rest_Il2CppVtbl vtbl;
};

class Rest {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C5DFE8;
  static inline    __Rest_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Rest_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Rest_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Rest_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_ReduceFatiguePerHourRest;
  int32_t m_MaxHoursSleepPerDay;
  float m_SleepFadeOutSeconds;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_WolfPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BearPrefab;
  float m_ChancePredatorInterruptionInsideSpawnRegion;
  float m_ChancePredatorInterruptionInsideSpawnRegionWhenInSnowShelter;
  float m_DistanceFireProtectsFromPredatorInterruption;
  bool m_WakeUpAtFullRest;
  bool m_Sleeping;
  float m_NumSecondsSleeping;
  float m_SleepDurationSeconds;
  float m_SleepDurationHours;
  float m_DayLengthScaleBeforeSleeping;
  int32_t m_InterruptionAfterSecondsSleeping;
  bool m_PredatorInterruption;
  ModdingAPI::Exposed::Bed* m_Bed;
  ModdingAPI::Exposed::System::Int32_array* m_LastTwentyFourHoursOfSleep;
  int32_t m_HourLastFrame;
  int32_t m_LastDisplayedDayNumberOnAwake;
  bool m_TimeAccelerated;
  bool m_ShouldInterruptWhenFreezing;
  bool m_StartHasBeenCalled;
  bool m_ForceSleepLength;
  bool m_ForceSleepWakeTime;
  float m_ForcedWakeTime;
  int32_t m_ForcedSleepLength;
  int32_t m_PassTimeOptions;
  ModdingAPI::Exposed::System::Action* m_OnSleepEnd;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6E800))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6E8A0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6E980))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6EA70))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6EC00))(this, text);
  }
  void MaybeTriggerAchievement(ModdingAPI::Exposed::Bed* bed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*, ModdingAPI::Exposed::Bed*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6EDF0))(this, bed);
  }
  void BeginSleeping(ModdingAPI::Exposed::Bed* b, int32_t durationHours, int32_t maxHours) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*, ModdingAPI::Exposed::Bed*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6EF00))(this, b, durationHours, maxHours);
  }
  bool IsSleeping() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x155ED90))(this);
  }
  void EndSleeping(bool interrupted) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6EF30))(this, interrupted);
  }
  int32_t GetNumHoursSleptInLastTwentyFour() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6F380))(this);
  }
  int32_t GetNumHoursSleptSinceMidnight() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6F3E0))(this);
  }
  bool AllowedToSleepAmount(int32_t amount) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rest*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6F4F0))(this, amount);
  }
  float GetBedWarmthBonusCelsius() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6F550))(this);
  }
  bool RestNeededForAffliction() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6F620))(this);
  }
  void SetForceSleepLength(int32_t hours) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6F940))(this, hours);
  }
  void SetForceSleepWakeTime(float wakeTime) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6F950))(this, wakeTime);
  }
  void ClearForceSleepLength() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6F970))(this);
  }
  void ClearForceSleepWakeTime() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6F980))(this);
  }
  bool IsForcedSleep() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5EF7E0))(this);
  }
  bool AllowUnlimitedSleep() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6F990))(this);
  }
  void UpdateFatigue(float todSeconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6FA90))(this, todSeconds);
  }
  void UpdateCondition(float todSeconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6FBF0))(this, todSeconds);
  }
  void UpdateRestForCures(float todSeconds) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B6FEE0))(this, todSeconds);
  }
  bool ShouldInterruptSleep() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B706E0))(this);
  }
  void UpdateWhenSleeping() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B707D0))(this);
  }
  void UpdateLogWithPredatorInterruption() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B71100))(this);
  }
  void UpdateLogWithHoursSlept() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B71260))(this);
  }
  void DisplayDayNumber() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B713C0))(this);
  }
  void RollForRestInterruption() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B71520))(this);
  }
  bool CanSpawnPredator() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B71650))(this);
  }
  void SpawnPredator() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B71920))(this);
  }
  bool ShouldInterruptWithPredator() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B72040))(this);
  }
  void RestoreTimeOfDay() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B72A10))(this);
  }
  void AccelerateTimeOfDay(int32_t minutes, float fadeOutSeconds, bool useFade) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*, int32_t, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B72AD0))(this, minutes, fadeOutSeconds, useFade);
  }
  void TrackHoursOfSleep() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B72BF0))(this);
  }
  ModdingAPI::Exposed::Fire* GetNearbyBuringFire() {
    return reinterpret_cast<ModdingAPI::Exposed::Fire*(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B72D90))(this);
  }
  bool ShouldInterruptIfFreezingStartsWhileSleeping() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B730C0))(this);
  }
  bool CanUseFade() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B732F0))(this);
  }
  bool CanDisplayCancelButton() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B73300))(this);
  }
  void BeginSleeping(ModdingAPI::Exposed::Bed* b, int32_t durationHours, int32_t maxHours, float fadeOutDuration, int32_t options, ModdingAPI::Exposed::System::Action* onSleepEnd) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*, ModdingAPI::Exposed::Bed*, int32_t, int32_t, float, int32_t, ModdingAPI::Exposed::System::Action*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B73310))(this, b, durationHours, maxHours, fadeOutDuration, options, onSleepEnd);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rest*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B737C0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::RestSaveDataProxy*> m_RestSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::RestSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_RestSaveDataProxy; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B737D0))();
  }
};
}