// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Steamworks {
struct __CSteamAPIContext_Il2CppStaticFields {
  intptr_t m_pSteamClient;
  intptr_t m_pSteamUser;
  intptr_t m_pSteamFriends;
  intptr_t m_pSteamUtils;
  intptr_t m_pSteamMatchmaking;
  intptr_t m_pSteamUserStats;
  intptr_t m_pSteamApps;
  intptr_t m_pSteamMatchmakingServers;
  intptr_t m_pSteamNetworking;
  intptr_t m_pSteamRemoteStorage;
  intptr_t m_pSteamScreenshots;
  intptr_t m_pSteamGameSearch;
  intptr_t m_pSteamHTTP;
  intptr_t m_pController;
  intptr_t m_pSteamUGC;
  intptr_t m_pSteamAppList;
  intptr_t m_pSteamMusic;
  intptr_t m_pSteamMusicRemote;
  intptr_t m_pSteamHTMLSurface;
  intptr_t m_pSteamInventory;
  intptr_t m_pSteamVideo;
  intptr_t m_pSteamParentalSettings;
  intptr_t m_pSteamInput;
  intptr_t m_pSteamParties;
  intptr_t m_pSteamRemotePlay;
};

struct __CSteamAPIContext_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __CSteamAPIContext_Il2CppClass {
  Il2CppClass_1 _1;
  __CSteamAPIContext_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __CSteamAPIContext_Il2CppVtbl vtbl;
};

class CSteamAPIContext {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C42B48;
  static inline    __CSteamAPIContext_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __CSteamAPIContext_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__CSteamAPIContext_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __CSteamAPIContext_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<intptr_t> m_pSteamClient = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamClient; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamUser = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamUser; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamFriends = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamFriends; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamUtils = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamUtils; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamMatchmaking = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamMatchmaking; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamUserStats = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamUserStats; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamApps = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamApps; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamMatchmakingServers = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamMatchmakingServers; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamNetworking = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamNetworking; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamRemoteStorage = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamRemoteStorage; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamScreenshots = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamScreenshots; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamGameSearch = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamGameSearch; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamHTTP = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamHTTP; }
  );
  static inline __CppStaticProperty<intptr_t> m_pController = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pController; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamUGC = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamUGC; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamAppList = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamAppList; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamMusic = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamMusic; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamMusicRemote = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamMusicRemote; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamHTMLSurface = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamHTMLSurface; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamInventory = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamInventory; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamVideo = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamVideo; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamParentalSettings = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamParentalSettings; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamInput = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamInput; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamParties = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamParties; }
  );
  static inline __CppStaticProperty<intptr_t> m_pSteamRemotePlay = __CppStaticProperty<intptr_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_pSteamRemotePlay; }
  );

  // Static methods:
  static inline void Clear() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C74690))();
  }
  static inline bool Init() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C748F0))();
  }
  static inline intptr_t GetSteamClient() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75210))();
  }
  static inline intptr_t GetSteamUser() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75290))();
  }
  static inline intptr_t GetSteamFriends() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75310))();
  }
  static inline intptr_t GetSteamUtils() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75390))();
  }
  static inline intptr_t GetSteamMatchmaking() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75410))();
  }
  static inline intptr_t GetSteamUserStats() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75490))();
  }
  static inline intptr_t GetSteamApps() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75510))();
  }
  static inline intptr_t GetSteamMatchmakingServers() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75590))();
  }
  static inline intptr_t GetSteamNetworking() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75610))();
  }
  static inline intptr_t GetSteamRemoteStorage() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75690))();
  }
  static inline intptr_t GetSteamScreenshots() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75710))();
  }
  static inline intptr_t GetSteamGameSearch() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75790))();
  }
  static inline intptr_t GetSteamHTTP() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75810))();
  }
  static inline intptr_t GetSteamController() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75890))();
  }
  static inline intptr_t GetSteamUGC() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75910))();
  }
  static inline intptr_t GetSteamAppList() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75990))();
  }
  static inline intptr_t GetSteamMusic() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75A10))();
  }
  static inline intptr_t GetSteamMusicRemote() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75A90))();
  }
  static inline intptr_t GetSteamHTMLSurface() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75B10))();
  }
  static inline intptr_t GetSteamInventory() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75B90))();
  }
  static inline intptr_t GetSteamVideo() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75C10))();
  }
  static inline intptr_t GetSteamParentalSettings() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75C90))();
  }
  static inline intptr_t GetSteamInput() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75D10))();
  }
  static inline intptr_t GetSteamParties() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75D90))();
  }
  static inline intptr_t GetSteamRemotePlay() {
    return reinterpret_cast<intptr_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C75E10))();
  }
};
}