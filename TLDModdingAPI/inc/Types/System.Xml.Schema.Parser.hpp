// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Xml.XmlCharType.hpp"


namespace ModdingAPI::Exposed::System::Xml::Schema {
struct __Parser_Il2CppStaticFields {
};

struct __Parser_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Parser_Il2CppClass {
  Il2CppClass_1 _1;
  __Parser_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Parser_Il2CppVtbl vtbl;
};

class Parser {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C3DD18;
  static inline    __Parser_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Parser_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Parser_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Parser_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t schemaType;
  ModdingAPI::Exposed::System::Xml::XmlNameTable* nameTable;
  ModdingAPI::Exposed::System::Xml::Schema::SchemaNames* schemaNames;
  ModdingAPI::Exposed::System::Xml::Schema::ValidationEventHandler* eventHandler;
  ModdingAPI::Exposed::System::Xml::XmlNamespaceManager* namespaceManager;
  ModdingAPI::Exposed::System::Xml::XmlReader* reader;
  ModdingAPI::Exposed::System::Xml::PositionInfo* positionInfo;
  bool isProcessNamespaces;
  int32_t schemaXmlDepth;
  int32_t markupDepth;
  ModdingAPI::Exposed::System::Xml::Schema::SchemaBuilder* builder;
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchema* schema;
  ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo* xdrSchema;
  ModdingAPI::Exposed::System::Xml::XmlResolver* xmlResolver;
  ModdingAPI::Exposed::System::Xml::XmlDocument* dummyDocument;
  bool processMarkup;
  ModdingAPI::Exposed::System::Xml::XmlNode* parentNode;
  ModdingAPI::Exposed::System::Xml::XmlNamespaceManager* annotationNSManager;
  System_String* xmlns;
  ModdingAPI::Exposed::System::Xml::XmlCharType xmlCharType;

  // Member methods:
  void ::ctor(int32_t schemaType, ModdingAPI::Exposed::System::Xml::XmlNameTable* nameTable, ModdingAPI::Exposed::System::Xml::Schema::SchemaNames* schemaNames, ModdingAPI::Exposed::System::Xml::Schema::ValidationEventHandler* eventHandler) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Parser*, int32_t, ModdingAPI::Exposed::System::Xml::XmlNameTable*, ModdingAPI::Exposed::System::Xml::Schema::SchemaNames*, ModdingAPI::Exposed::System::Xml::Schema::ValidationEventHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x476B20))(this, schemaType, nameTable, schemaNames, eventHandler);
  }
  int32_t Parse(ModdingAPI::Exposed::System::Xml::XmlReader* reader, System_String* targetNamespace) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Parser*, ModdingAPI::Exposed::System::Xml::XmlReader*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x476CC0))(this, reader, targetNamespace);
  }
  void StartParsing(ModdingAPI::Exposed::System::Xml::XmlReader* reader, System_String* targetNamespace) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Parser*, ModdingAPI::Exposed::System::Xml::XmlReader*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x476D20))(this, reader, targetNamespace);
  }
  bool CheckSchemaRoot(int32_t rootType, System_String* code) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Parser*, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x477610))(this, rootType, code);
  }
  int32_t FinishParsing() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Parser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311060))(this);
  }
  ModdingAPI::Exposed::System::Xml::Schema::XmlSchema* get_XmlSchema() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::XmlSchema*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Parser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3199C0))(this);
  }
  void set_XmlResolver(ModdingAPI::Exposed::System::Xml::XmlResolver* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Parser*, ModdingAPI::Exposed::System::Xml::XmlResolver*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x477710))(this, value);
  }
  ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo* get_XdrSchema() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::SchemaInfo*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Parser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319930))(this);
  }
  bool ParseReaderNode() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Parser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x477720))(this);
  }
  void ProcessAppInfoDocMarkup(bool root) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Parser*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x478180))(this, root);
  }
  ModdingAPI::Exposed::System::Xml::XmlElement* LoadElementNode(bool root) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlElement*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Parser*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x478510))(this, root);
  }
  ModdingAPI::Exposed::System::Xml::XmlAttribute* CreateXmlNsAttribute(System_String* prefix, System_String* value) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlAttribute*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Parser*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x478AE0))(this, prefix, value);
  }
  ModdingAPI::Exposed::System::Xml::XmlAttribute* LoadAttributeNode() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlAttribute*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Parser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x478C70))(this);
  }
  ModdingAPI::Exposed::System::Xml::XmlEntityReference* LoadEntityReferenceInAttribute() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::XmlEntityReference*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::Parser*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x478E80))(this);
  }
};
}