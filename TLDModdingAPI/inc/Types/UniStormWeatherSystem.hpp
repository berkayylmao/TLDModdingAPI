// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.WeatherParticleManagerConfiguration.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed {
struct __UniStormWeatherSystem_Il2CppStaticFields {
  float m_MinimumFogDensityScale;
  float m_FogScale;
  int32_t s_TintColorShaderID;
  ModdingAPI::Exposed::System::Single_array* m_MoonIntensityByPhaseScalars;
};

struct __UniStormWeatherSystem_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __UniStormWeatherSystem_Il2CppClass {
  Il2CppClass_1 _1;
  __UniStormWeatherSystem_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __UniStormWeatherSystem_Il2CppVtbl vtbl;
};

class UniStormWeatherSystem {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C44F70;
  static inline    __UniStormWeatherSystem_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __UniStormWeatherSystem_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__UniStormWeatherSystem_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __UniStormWeatherSystem_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::WeatherStateConfig_array* m_WeatherStateConfigs;
  ModdingAPI::Exposed::TODStateConfig_array* m_SpecialTODStates;
  int32_t m_SpecialTODState;
  ModdingAPI::Exposed::System::Single_array* m_SpecialTODStateFixedTimes;
  bool m_StaticWeather;
  bool m_LiveEdit;
  float m_AnimScalar_Ambient;
  float m_AnimScalar_Directional;
  float m_MasterTimeKeyOffset;
  float m_MasterAmbientIntensityScalar;
  float m_MasterSunLightIntensityScalar;
  float m_MasterMoonLightIntensityScalar;
  float m_MasterSunShadowStrengthReduction;
  float m_MasterMoonShadowStrengthReduction;
  float m_MasterMoonShadowStrengthCap;
  float m_FarClipCheat;
  float m_FogColorMargin;
  int32_t m_MinuteCounter;
  int32_t m_HourCounter;
  int32_t m_DayCounter;
  int32_t m_Temperature;
  float m_DayLength;
  float m_NormalizedTime;
  ModdingAPI::Exposed::System::Single_array* m_TODKeyframeTimes;
  int32_t m_MoonCycleStartDay;
  float m_MoonPhaseIntensityControl;
  float m_SunAngle;
  ModdingAPI::Exposed::UnityEngine::Color m_MoonLightColor;
  ModdingAPI::Exposed::UnityEngine::Color m_StarColor;
  float m_CloudSpeed;
  float m_BlizzardFogBlusterRange;
  float m_BlizzardFogBlusterSpeed;
  int32_t m_PreviousWeatherStage;
  int32_t m_CurrentWeatherStage;
  float m_NormalizedAuroraAlpha;
  float m_SkyboxFogSampleDistance;
  float m_SkyboxFogPower;
  ModdingAPI::Exposed::UnityEngine::Material* m_SkyboxMaterial;
  ModdingAPI::Exposed::UnityEngine::Renderer_array* m_SkyGlowRenderers;
  ModdingAPI::Exposed::ColorGradingSettings* m_DefaultColorGradingSettings;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_SnowPlaneManager;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_StarSphere;
  ModdingAPI::Exposed::UnityEngine::Texture2D_array* m_MoonPhases;
  ModdingAPI::Exposed::UnityEngine::Light* m_SunLight;
  ModdingAPI::Exposed::UnityEngine::Light* m_MoonLight;
  ModdingAPI::Exposed::GodrayManager* m_GodrayManager;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_LightClouds1;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_LightClouds2;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_HighClouds1;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_MostlyCloudyClouds;
  ModdingAPI::Exposed::SnowPlaneManager* m_SnowPlaneManagerComponent;
  ModdingAPI::Exposed::UnityEngine::Renderer* m_StarSphereRenderer;
  ModdingAPI::Exposed::UnityEngine::Renderer* m_LightClouds1_Renderer;
  ModdingAPI::Exposed::UnityEngine::Renderer* m_LightClouds2_Renderer;
  ModdingAPI::Exposed::UnityEngine::Renderer* m_HighClouds1_Renderer;
  ModdingAPI::Exposed::UnityEngine::Renderer* m_MostlyCloudyClouds_Renderer;
  ModdingAPI::Exposed::UnityEngine::Material* m_HorizonCloudsBand1Material;
  ModdingAPI::Exposed::UnityEngine::Material* m_HorizonCloudsBand2Material;
  ModdingAPI::Exposed::UnityEngine::Material* m_HorizonCloudsBand3Material;
  ModdingAPI::Exposed::UnityEngine::Material* m_SkyCloudEdge1Material;
  ModdingAPI::Exposed::UnityEngine::Material* m_SkyCloudEdge2Material;
  ModdingAPI::Exposed::UnityEngine::Material* m_HorizonGradMaterial;
  ModdingAPI::Exposed::UnityEngine::Material* m_SkyboxMaterialCopy;
  ModdingAPI::Exposed::UnityEngine::Camera* m_MainCamera;
  ModdingAPI::Exposed::WeatherParticleManagerConfiguration m_WeatherParticleManagerConfig;
  ModdingAPI::Exposed::WeatherParticleManager* m_WeatherParticleManager;
  float m_Hour;
  float m_MinuteCounterCalculator;
  float m_ActiveSunAngle;
  bool m_LockAmbientLight;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_WeatherSystemsGameObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_CloudParentGameObject;
  float m_DayLengthScale;
  float m_CurrentWeatherBlend;
  float m_DeltaTime;
  bool m_WarmingWeatherState;
  float m_SecondsSinceLastWeatherChange;
  bool m_MoonPhaseSet;
  int32_t m_CurrentMoonPhaseIndex;
  float m_MoonPhaseIntensityScalar;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_BlizzardFogNoiseVec;
  float m_AmbientLightTransitionTimeSeconds;
  bool m_Paused;
  bool m_Indoors;
  float m_ElapsedHours;
  float m_ElapsedHoursAccumulator;
  float m_ElapsedHoursIndoorsAccumulator;
  float m_ElapsedHoursOutdoorsAccumulator;
  float m_ElapsedHoursAsleepAccumulator;
  float m_ElapsedHoursAsleepOutdoorsAccumulator;
  float m_ElapsedHoursAwakeAccumulator;
  float m_ElapsedHoursLakeRegionAccumulator;
  float m_ElapsedHoursCoastalRegionAccumulator;
  float m_ElapsedHoursRuralRegionAccumulator;
  float m_ElapsedHoursWhalingStationRegionAccumulator;
  float m_ElapsedHoursCrashMountainRegionAccumulator;
  float m_ElapsedHoursMarshRegionAccumulator;
  float m_ElapsedHoursTracksRegionAccumulator;
  float m_ElapsedHoursMountainTownRegionAccumulator;
  float m_ElapsedHoursRiverValleyRegionAccumulator;
  float m_ElapsedHoursCanneryRegionAccumulator;
  bool m_LastFrameWasOutside;
  bool m_LastFrameWasNight;
  bool m_OutsideSinceBeginningOfNight;
  float m_WeatherTransitionTime;
  ModdingAPI::Exposed::ActiveEnvironment* m_ActiveEnvironment;
  int32_t m_RequestedSpecialTODState;
  int32_t m_LastSpecialTODState;
  int32_t m_CurrentRegion;
  ModdingAPI::Exposed::UnityEngine::Animator* m_Animator;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_CloudTextureOffset_LightClouds1;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_CloudTextureOffset_LightClouds2;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_CloudTextureOffset_HighClouds1;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_CloudTextureOffset_MostlyCloudyClouds;
  ModdingAPI::Exposed::UnityEngine::MaterialPropertyBlock* m_SkyGlowPropertyBlock;

  // Member methods:
  ModdingAPI::Exposed::TODStateConfig* GetActiveTODState() {
    return reinterpret_cast<ModdingAPI::Exposed::TODStateConfig*(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2054F10))(this);
  }
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2054F30))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void Init() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20550C0))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20563A0))(this);
  }
  void InitializeForScene() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20563D0))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2056560))(this);
  }
  float GetMaxAuroraIntensity() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2059800))(this);
  }
  void UpdateTimeStats(float timeDeltaHours) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2059A80))(this, timeDeltaHours);
  }
  void LateUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205A350))(this);
  }
  void DoLateUpdate() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205A420))(this);
  }
  void ClearSpecialTODState() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205A450))(this);
  }
  void RequestSpecialTODState(int32_t state) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205A460))(this, state);
  }
  void SetNormalizedTime(float time) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205A470))(this, time);
  }
  void SetNormalizedTime(float time, bool forceUpdate) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205A480))(this, time, forceUpdate);
  }
  void UpdateSunTransform() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205A4D0))(this);
  }
  void SetAmbientLight(ModdingAPI::Exposed::UnityEngine::Color c) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205AB20))(this, c);
  }
  void LockAmbientLight(bool lockAmbient) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1CCFF50))(this, lockAmbient);
  }
  void EnableWeatherSystems(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205ABD0))(this, enable);
  }
  void EnableCloudParent(bool enable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205AD60))(this, enable);
  }
  int32_t GetWeatherStage() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA85020))(this);
  }
  void SetWeatherStage(int32_t ws, float transitionTime, bool force) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, int32_t, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205AEC0))(this, ws, transitionTime, force);
  }
  void SetWeatherStateAndBlendDirectly(int32_t ws, int32_t prevWS, float elapsedGameTimeInStage, float transitionGameTimeForStage) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, int32_t, int32_t, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B000))(this, ws, prevWS, elapsedGameTimeInStage, transitionGameTimeForStage);
  }
  void WarmWeatherState() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B1D0))(this);
  }
  int32_t GetMoonPhaseIndex() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B280))(this);
  }
  void SetMoonPhaseIndex(int32_t phase) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B290))(this, phase);
  }
  float GetMoonIntensityScalar() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B390))(this);
  }
  void SetMoonPhase() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B3A0))(this);
  }
  void SetPaused(bool paused) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B540))(this, paused);
  }
  int32_t GetDayNumber() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383A00))(this);
  }
  void SetDayNumber(int32_t day) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x383A10))(this, day);
  }
  void SetIsIndoors(bool indoors) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B550))(this, indoors);
  }
  void SetAuroraAlpha(float alpha) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B560))(this, alpha);
  }
  bool IsNightOrNightBlend() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B570))(this);
  }
  bool IsNight() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B5F0))(this);
  }
  bool IsMorning() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B670))(this);
  }
  bool IsAfternoon() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B6D0))(this);
  }
  bool IsNightPreMidnight() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B730))(this);
  }
  bool IsNightPostMidnight() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B780))(this);
  }
  bool IsDusk() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B7D0))(this);
  }
  bool IsDawn() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B850))(this);
  }
  float GetDawnHourTime() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B8D0))(this);
  }
  bool IsEarlyNightWindowForAuroraActivation() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B910))(this);
  }
  bool IsLateNightWindowForAuroraActivation() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205B9D0))(this);
  }
  float GetDawnTime() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205BA90))(this);
  }
  float GetNightStartTime() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205BAD0))(this);
  }
  float GetProgressDusk() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205BB10))(this);
  }
  float GetProgressDawn() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205BCA0))(this);
  }
  float GetNightPercentage() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205BE30))(this);
  }
  int32_t GetTODBlendState() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205BF20))(this);
  }
  float GetTODBlendPercent(int32_t blendState) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205C0F0))(this, blendState);
  }
  float GetBlendBiasWeightByWeather(int32_t stage) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205C530))(this, stage);
  }
  float GetTODBlendBiased(int32_t blendState, float linearResult, float weatherBlend) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, int32_t, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205C550))(this, blendState, linearResult, weatherBlend);
  }
  float GetSunShadowStrength() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205C6E0))(this);
  }
  float GetElapsedHours() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205C7B0))(this);
  }
  void SetElapsedHours(float hours) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205C7D0))(this, hours);
  }
  void UpdateShadowStrength() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205C7F0))(this);
  }
  void SendWeatherStateToWise(int32_t ws) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205CF20))(this, ws);
  }
  void TriggerAnimation(System_String* triggerName) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205D620))(this, triggerName);
  }
  void SetHorizonCloudsBand1Material(ModdingAPI::Exposed::UnityEngine::Material* m) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205D6D0))(this, m);
  }
  void SetHorizonCloudsBand2Material(ModdingAPI::Exposed::UnityEngine::Material* m) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xC7EDB0))(this, m);
  }
  void SetHorizonCloudsBand3Material(ModdingAPI::Exposed::UnityEngine::Material* m) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205D6E0))(this, m);
  }
  void SetHorizonGradMaterial(ModdingAPI::Exposed::UnityEngine::Material* m) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205D6F0))(this, m);
  }
  void SetSkyCloudEdge1Material(ModdingAPI::Exposed::UnityEngine::Material* m) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205D700))(this, m);
  }
  void SetSkyCloudEdge2Material(ModdingAPI::Exposed::UnityEngine::Material* m) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, ModdingAPI::Exposed::UnityEngine::Material*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3F1320))(this, m);
  }
  ModdingAPI::Exposed::ColorGradingSettings* GetDefaultColorGradingSettings() {
    return reinterpret_cast<ModdingAPI::Exposed::ColorGradingSettings*(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30F200))(this);
  }
  ModdingAPI::Exposed::GodrayManager* GetGodrayManager() {
    return reinterpret_cast<ModdingAPI::Exposed::GodrayManager*(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E100))(this);
  }
  bool ApproximateColorMatch(ModdingAPI::Exposed::UnityEngine::Color a, ModdingAPI::Exposed::UnityEngine::Color b, float margin) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*, ModdingAPI::Exposed::UnityEngine::Color, ModdingAPI::Exposed::UnityEngine::Color, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205D710))(this, a, b, margin);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UniStormWeatherSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205D8A0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<float> m_MinimumFogDensityScale = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_MinimumFogDensityScale; }
  );
  static inline __CppStaticProperty<float> m_FogScale = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_FogScale; }
  );
  static inline __CppStaticProperty<int32_t> s_TintColorShaderID = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_TintColorShaderID; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Single_array*> m_MoonIntensityByPhaseScalars = __CppStaticProperty<ModdingAPI::Exposed::System::Single_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_MoonIntensityByPhaseScalars; }
  );

  // Static methods:
  static inline int32_t WeatherNameToEnum(System_String* weatherName) {
    return reinterpret_cast<int32_t(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205D340))(weatherName);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x205D8F0))();
  }
};
}