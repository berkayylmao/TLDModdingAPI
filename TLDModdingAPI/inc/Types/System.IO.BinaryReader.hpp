// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Decimal.hpp"


namespace ModdingAPI::Exposed::System::IO {
struct __BinaryReader_Il2CppStaticFields {
};

struct __BinaryReader_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Dispose;
  VirtualInvokeData _5_get_BaseStream;
  VirtualInvokeData _6_Close;
  VirtualInvokeData _7_Dispose;
  VirtualInvokeData _8_Read;
  VirtualInvokeData _9_ReadBoolean;
  VirtualInvokeData _10_ReadByte;
  VirtualInvokeData _11_ReadSByte;
  VirtualInvokeData _12_ReadChar;
  VirtualInvokeData _13_ReadInt16;
  VirtualInvokeData _14_ReadUInt16;
  VirtualInvokeData _15_ReadInt32;
  VirtualInvokeData _16_ReadUInt32;
  VirtualInvokeData _17_ReadInt64;
  VirtualInvokeData _18_ReadUInt64;
  VirtualInvokeData _19_ReadSingle;
  VirtualInvokeData _20_ReadDouble;
  VirtualInvokeData _21_ReadDecimal;
  VirtualInvokeData _22_ReadString;
  VirtualInvokeData _23_ReadChars;
  VirtualInvokeData _24_Read;
  VirtualInvokeData _25_ReadBytes;
  VirtualInvokeData _26_FillBuffer;
};

struct __BinaryReader_Il2CppClass {
  Il2CppClass_1 _1;
  __BinaryReader_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __BinaryReader_Il2CppVtbl vtbl;
};

class BinaryReader {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C54968;
  static inline    __BinaryReader_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __BinaryReader_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__BinaryReader_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __BinaryReader_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::IO::Stream* m_stream;
  ModdingAPI::Exposed::System::Byte_array* m_buffer;
  ModdingAPI::Exposed::System::Text::Decoder* m_decoder;
  ModdingAPI::Exposed::System::Byte_array* m_charBytes;
  ModdingAPI::Exposed::System::Char_array* m_singleChar;
  ModdingAPI::Exposed::System::Char_array* m_charBuffer;
  int32_t m_maxCharsSize;
  bool m_2BytesPerChar;
  bool m_isMemoryStream;
  bool m_leaveOpen;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::IO::Stream* input) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*, ModdingAPI::Exposed::System::IO::Stream*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA97340))(this, input);
  }
  void ::ctor(ModdingAPI::Exposed::System::IO::Stream* input, ModdingAPI::Exposed::System::Text::Encoding* encoding) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*, ModdingAPI::Exposed::System::IO::Stream*, ModdingAPI::Exposed::System::Text::Encoding*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA974B0))(this, input, encoding);
  }
  void ::ctor(ModdingAPI::Exposed::System::IO::Stream* input, ModdingAPI::Exposed::System::Text::Encoding* encoding, bool leaveOpen) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*, ModdingAPI::Exposed::System::IO::Stream*, ModdingAPI::Exposed::System::Text::Encoding*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA974D0))(this, input, encoding, leaveOpen);
  }
  ModdingAPI::Exposed::System::IO::Stream* get_BaseStream() {
    return reinterpret_cast<ModdingAPI::Exposed::System::IO::Stream*(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  void Close() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA97720))(this);
  }
  void Dispose(bool disposing) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA97740))(this, disposing);
  }
  void Dispose() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA97720))(this);
  }
  int32_t Read() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA977A0))(this);
  }
  bool ReadBoolean() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA977C0))(this);
  }
  uint8_t ReadByte() {
    return reinterpret_cast<uint8_t(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA97820))(this);
  }
  char ReadSByte() {
    return reinterpret_cast<char(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA97860))(this);
  }
  wchar_t ReadChar() {
    return reinterpret_cast<wchar_t(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA978B0))(this);
  }
  int16_t ReadInt16() {
    return reinterpret_cast<int16_t(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA978E0))(this);
  }
  uint16_t ReadUInt16() {
    return reinterpret_cast<uint16_t(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA978E0))(this);
  }
  int32_t ReadInt32() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA97960))(this);
  }
  uint32_t ReadUInt32() {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA97B70))(this);
  }
  int64_t ReadInt64() {
    return reinterpret_cast<int64_t(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA97C60))(this);
  }
  uint64_t ReadUInt64() {
    return reinterpret_cast<uint64_t(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA97C60))(this);
  }
  float ReadSingle() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA97E50))(this);
  }
  double ReadDouble() {
    return reinterpret_cast<double(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA97EA0))(this);
  }
  ModdingAPI::Exposed::System::Decimal ReadDecimal() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Decimal(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA98010))(this);
  }
  System_String* ReadString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA98140))(this);
  }
  int32_t InternalReadChars(ModdingAPI::Exposed::System::Char_array* buffer, int32_t index, int32_t count) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*, ModdingAPI::Exposed::System::Char_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA983F0))(this, buffer, index, count);
  }
  int32_t InternalReadOneChar() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA98750))(this);
  }
  ModdingAPI::Exposed::System::Char_array* ReadChars(int32_t count) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Char_array*(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA98A60))(this, count);
  }
  int32_t Read(ModdingAPI::Exposed::System::Byte_array* buffer, int32_t index, int32_t count) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA98BF0))(this, buffer, index, count);
  }
  ModdingAPI::Exposed::System::Byte_array* ReadBytes(int32_t count) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA98DE0))(this, count);
  }
  void FillBuffer(int32_t numBytes) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA98FB0))(this, numBytes);
  }
  int32_t Read7BitEncodedInt() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::IO::BinaryReader*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA99160))(this);
  }
};
}