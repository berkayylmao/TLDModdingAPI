// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Collections::Hashtable {
struct __KeyCollection_Il2CppStaticFields {
};

struct __KeyCollection_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _9_CopyTo;
  VirtualInvokeData _10_GetEnumerator;
  VirtualInvokeData _11_get_IsSynchronized;
  VirtualInvokeData _12_get_SyncRoot;
  VirtualInvokeData _13_get_Count;
};

struct __KeyCollection_Il2CppClass {
  Il2CppClass_1 _1;
  __KeyCollection_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __KeyCollection_Il2CppVtbl vtbl;
};

class KeyCollection {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C8EB98;
  static inline    __KeyCollection_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __KeyCollection_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__KeyCollection_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __KeyCollection_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Collections::Hashtable* _hashtable;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Collections::Hashtable* hashtable) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::Hashtable::KeyCollection*, ModdingAPI::Exposed::System::Collections::Hashtable*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, hashtable);
  }
  void CopyTo(ModdingAPI::Exposed::System::Array* array, int32_t arrayIndex) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::Hashtable::KeyCollection*, ModdingAPI::Exposed::System::Array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA63940))(this, array, arrayIndex);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* GetEnumerator() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::System::Collections::Hashtable::KeyCollection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA63B20))(this);
  }
  bool get_IsSynchronized() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::Hashtable::KeyCollection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA63CA0))(this);
  }
  Il2CppObject* get_SyncRoot() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Collections::Hashtable::KeyCollection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA63CD0))(this);
  }
  int32_t get_Count() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Collections::Hashtable::KeyCollection*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA63D00))(this);
  }
};
}