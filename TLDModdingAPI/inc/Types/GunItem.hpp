// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __GunItem_Il2CppStaticFields {
  bool m_ForceNoJam;
  bool m_ForceJam;
  ModdingAPI::Exposed::GunItemSaveDataProxy* m_GunItemSaveDataProxy;
  ModdingAPI::Exposed::System::Action_T_* s_OnFlareGunFired;
};

struct __GunItem_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __GunItem_Il2CppClass {
  Il2CppClass_1 _1;
  __GunItem_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __GunItem_Il2CppVtbl vtbl;
};

class GunItem {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C3ABB8;
  static inline    __GunItem_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __GunItem_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__GunItem_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __GunItem_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  int32_t m_GunType;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_AmmoPrefab;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_CasingPrefab;
  bool m_AllowHipFire;
  int32_t m_RoundsInClip;
  int32_t m_ClipSize;
  float m_DamageHP;
  float m_FiringRateSeconds;
  float m_ReloadCoolDownSeconds;
  float m_FireDelayOnAim;
  float m_FireDelayAfterReload;
  float m_AccuracyRange;
  float m_MinDistanceForAimAssist;
  float m_MuzzleFlash_FlashDelay;
  float m_MuzzleFlash_SmokeDelay;
  System_String* m_CasingAudio;
  System_String* m_DryFireAudio;
  System_String* m_ImpactAudio;
  System_String* m_UncockAudio;
  System_String* m_AmmoSpriteName;
  ModdingAPI::Exposed::MisfireTable* m_MisfireTable;
  System_String* m_MisfirePlayerVO;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Clip;
  bool m_HasMisfired;
  int32_t m_SpentCasingsInClip;
  float m_WeightOfSingleRoundKG;
  ModdingAPI::Exposed::GearItem* m_GearItem;
  bool m_IsJammed;
  float m_MultiplierAiming;
  float m_MultiplierFire;
  float m_MultiplierReload;
  float m_SwayValueZeroFatigue;
  float m_SwayValueMaxFatigue;
  float m_SwayIncreasePerSecond;
  float m_SwayDecreasePerSecond;
  float m_SwayEnergyBoostBonus;
  float m_SwayEnergyStimBonus;
  float m_RestartAimingSwayRecoveryTime;
  float m_AimingSwayDropThresholdPercent;
  float m_PitchRecoilMin;
  float m_PitchRecoilMax;
  float m_YawRecoilMin;
  float m_YawRecoilMax;
  float m_SwayValue;
  float m_SwayRecoverTimer;
  System_String* m_AimingStaminaExhaustedSound;
  int32_t m_RestoreControlMode;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A867B0))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A86900))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A86AD0))(this, text);
  }
  void AddRangeToClip(ModdingAPI::Exposed::System::Collections::Generic::List_T_* bullets) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A86C40))(this, bullets);
  }
  void AddRoundsToClip(int32_t count, int32_t condition) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A86DC0))(this, count, condition);
  }
  void ClearSpentCasings() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A86F30))(this);
  }
  void EmptyClip() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A86F40))(this);
  }
  void FillClipAtCondition(int32_t condition) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A87000))(this, condition);
  }
  int32_t GetAmmoCondition(int32_t index) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::GunItem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A87010))(this, index);
  }
  int32_t NumRoundsInClip() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A870E0))(this);
  }
  int32_t NumSpentCasingsInClip() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5F1040))(this);
  }
  void RemoveNextFromClip() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A87170))(this);
  }
  int32_t TotalCasingsInClip() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A87280))(this);
  }
  float GetSwayIncreasePerSecond() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A872A0))(this);
  }
  float GetSwayDecreasePerSecond() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A87530))(this);
  }
  float GetCurrentStaminaPercent() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A87720))(this);
  }
  float GetStaminaDropThresholdPercent() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A87740))(this);
  }
  bool CanStartAiming() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A87770))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A877A0))(this);
  }
  void PlayDryFireAudio(ModdingAPI::Exposed::UnityEngine::GameObject* go) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A87C10))(this, go);
  }
  void ZoomStart() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A87CC0))(this);
  }
  void OnAiming() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void ZoomEnd() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A87F00))(this);
  }
  void OnAimingStoppedComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void ResetControlState() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A881A0))(this);
  }
  void MaybePlayUncockAudio(ModdingAPI::Exposed::UnityEngine::GameObject* go) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A88280))(this, go);
  }
  float GetClipWeightKG() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A88350))(this);
  }
  void SetJammed(bool state) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A88380))(this, state);
  }
  void ResetEffects() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A88390))(this);
  }
  bool IsAiming() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A88700))(this);
  }
  bool IsEquipped() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A88810))(this);
  }
  float GetRecoilPitch() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A889C0))(this);
  }
  float GetRecoilYaw() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A88AF0))(this);
  }
  void StruggleRevolverFire() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A88C20))(this);
  }
  void Fired(ModdingAPI::Exposed::UnityEngine::GameObject* projectile) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A88E00))(this, projectile);
  }
  void HandleShellDischarge() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A88F00))(this);
  }
  void MaybeHandleMisfire() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A89010))(this);
  }
  bool RollForMisfire() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A89100))(this);
  }
  void PlayCasingAudio(int32_t count) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A89210))(this, count);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::GunItem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A89760))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<bool> m_ForceNoJam = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_ForceNoJam; }
  );
  static inline __CppStaticProperty<bool> m_ForceJam = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_ForceJam; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::GunItemSaveDataProxy*> m_GunItemSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::GunItemSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_GunItemSaveDataProxy; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Action_T_*> s_OnFlareGunFired = __CppStaticProperty<ModdingAPI::Exposed::System::Action_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_OnFlareGunFired; }
  );

  // Static methods:
  static inline void RegisterOnFiredAction(ModdingAPI::Exposed::System::Action_T_* action, int32_t gunType) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Action_T_*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A89360))(action, gunType);
  }
  static inline void UnRegisterOnFiredAction(ModdingAPI::Exposed::System::Action_T_* action, int32_t gunType) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Action_T_*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A89490))(action, gunType);
  }
  static inline bool IsFiredActionRegistered(ModdingAPI::Exposed::System::Action_T_* action, int32_t gunType) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Action_T_*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A895C0))(action, gunType);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1A899B0))();
  }
};
}