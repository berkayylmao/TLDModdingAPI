// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI::Exposed::UnityEngine::Matrix4x4.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Matrix4x4.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Color.hpp"


namespace ModdingAPI::Exposed::UnityEngine {
struct __GL_Il2CppStaticFields {
};

struct __GL_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __GL_Il2CppClass {
  Il2CppClass_1 _1;
  __GL_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __GL_Il2CppVtbl vtbl;
};

class GL {
public:
  // Il2Cpp fields:
  __GL_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline void Vertex3(float x, float y, float z) {
    reinterpret_cast<void(__fastcall*)(float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDDAC0))(x, y, z);
  }
  static inline void TexCoord3(float x, float y, float z) {
    reinterpret_cast<void(__fastcall*)(float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDDB40))(x, y, z);
  }
  static inline void TexCoord2(float x, float y) {
    reinterpret_cast<void(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDDBC0))(x, y);
  }
  static inline void MultiTexCoord3(int32_t unit, float x, float y, float z) {
    reinterpret_cast<void(__fastcall*)(int32_t, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDDC30))(unit, x, y, z);
  }
  static inline void MultiTexCoord2(int32_t unit, float x, float y) {
    reinterpret_cast<void(__fastcall*)(int32_t, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDDCC0))(unit, x, y);
  }
  static inline void set_invertCulling(bool value) {
    reinterpret_cast<void(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDDD40))(value);
  }
  static inline void PushMatrix() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDDD90))();
  }
  static inline void PopMatrix() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDDDE0))();
  }
  static inline void LoadIdentity() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDDE30))();
  }
  static inline void LoadOrtho() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDDE80))();
  }
  static inline void LoadProjectionMatrix(ModdingAPI::Exposed::UnityEngine::Matrix4x4 mat) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Matrix4x4)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDDED0))(mat);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Matrix4x4 GetGPUProjectionMatrix(ModdingAPI::Exposed::UnityEngine::Matrix4x4 proj, bool renderIntoTexture) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Matrix4x4(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Matrix4x4, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDDF20))(proj, renderIntoTexture);
  }
  static inline void Begin(int32_t mode) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDDFE0))(mode);
  }
  static inline void End() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDE030))();
  }
  static inline void GLClear(bool clearDepth, bool clearColor, ModdingAPI::Exposed::UnityEngine::Color backgroundColor, float depth) {
    reinterpret_cast<void(__fastcall*)(bool, bool, ModdingAPI::Exposed::UnityEngine::Color, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDE080))(clearDepth, clearColor, backgroundColor, depth);
  }
  static inline void Clear(bool clearDepth, bool clearColor, ModdingAPI::Exposed::UnityEngine::Color backgroundColor) {
    reinterpret_cast<void(__fastcall*)(bool, bool, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDE110))(clearDepth, clearColor, backgroundColor);
  }
  static inline void ClearWithSkybox(bool clearDepth, ModdingAPI::Exposed::UnityEngine::Camera* camera) {
    reinterpret_cast<void(__fastcall*)(bool, ModdingAPI::Exposed::UnityEngine::Camera*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDE190))(clearDepth, camera);
  }
  static inline void LoadProjectionMatrix_Injected(ModdingAPI::Exposed::UnityEngine::Matrix4x4 mat) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Matrix4x4)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDE1F0))(mat);
  }
  static inline void GetGPUProjectionMatrix_Injected(ModdingAPI::Exposed::UnityEngine::Matrix4x4 proj, bool renderIntoTexture, ModdingAPI::Exposed::UnityEngine::Matrix4x4 ret) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Matrix4x4, bool, ModdingAPI::Exposed::UnityEngine::Matrix4x4)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDE240))(proj, renderIntoTexture, ret);
  }
  static inline void GLClear_Injected(bool clearDepth, bool clearColor, ModdingAPI::Exposed::UnityEngine::Color backgroundColor, float depth) {
    reinterpret_cast<void(__fastcall*)(bool, bool, ModdingAPI::Exposed::UnityEngine::Color, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xFDE2B0))(clearDepth, clearColor, backgroundColor, depth);
  }
};
}