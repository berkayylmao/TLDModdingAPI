// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Decimal.hpp"
#include "ModdingAPI.Exposed.System.DateTime.hpp"
#include "ModdingAPI.Exposed.System.TimeSpan.hpp"


namespace ModdingAPI::Exposed::System::Xml::Schema {
struct __FacetsChecker_Il2CppStaticFields {
};

struct __FacetsChecker_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_CheckLexicalFacets;
  VirtualInvokeData _5_CheckValueFacets;
  VirtualInvokeData _6_CheckValueFacets;
  VirtualInvokeData _7_CheckValueFacets;
  VirtualInvokeData _8_CheckValueFacets;
  VirtualInvokeData _9_CheckValueFacets;
  VirtualInvokeData _10_CheckValueFacets;
  VirtualInvokeData _11_CheckValueFacets;
  VirtualInvokeData _12_CheckValueFacets;
  VirtualInvokeData _13_CheckValueFacets;
  VirtualInvokeData _14_CheckValueFacets;
  VirtualInvokeData _15_CheckValueFacets;
  VirtualInvokeData _16_CheckValueFacets;
  VirtualInvokeData _17_MatchEnumeration;
  VirtualInvokeData _18_ConstructRestriction;
};

struct __FacetsChecker_Il2CppClass {
  Il2CppClass_1 _1;
  __FacetsChecker_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __FacetsChecker_Il2CppVtbl vtbl;
};

class FacetsChecker {
public:
  // Il2Cpp fields:
  __FacetsChecker_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member methods:
  ModdingAPI::Exposed::System::Exception* CheckLexicalFacets(System_String* parseString, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* datatype) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*, System_String*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7E060))(this, parseString, datatype);
  }
  ModdingAPI::Exposed::System::Exception* CheckValueFacets(Il2CppObject* value, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* datatype) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*, Il2CppObject*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this, value, datatype);
  }
  ModdingAPI::Exposed::System::Exception* CheckValueFacets(ModdingAPI::Exposed::System::Decimal value, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* datatype) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*, ModdingAPI::Exposed::System::Decimal, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this, value, datatype);
  }
  ModdingAPI::Exposed::System::Exception* CheckValueFacets(int64_t value, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* datatype) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*, int64_t, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this, value, datatype);
  }
  ModdingAPI::Exposed::System::Exception* CheckValueFacets(int32_t value, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* datatype) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*, int32_t, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this, value, datatype);
  }
  ModdingAPI::Exposed::System::Exception* CheckValueFacets(int16_t value, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* datatype) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*, int16_t, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this, value, datatype);
  }
  ModdingAPI::Exposed::System::Exception* CheckValueFacets(ModdingAPI::Exposed::System::DateTime value, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* datatype) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*, ModdingAPI::Exposed::System::DateTime, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this, value, datatype);
  }
  ModdingAPI::Exposed::System::Exception* CheckValueFacets(double value, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* datatype) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*, double, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this, value, datatype);
  }
  ModdingAPI::Exposed::System::Exception* CheckValueFacets(float value, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* datatype) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*, float, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this, value, datatype);
  }
  ModdingAPI::Exposed::System::Exception* CheckValueFacets(System_String* value, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* datatype) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*, System_String*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this, value, datatype);
  }
  ModdingAPI::Exposed::System::Exception* CheckValueFacets(ModdingAPI::Exposed::System::Byte_array* value, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* datatype) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*, ModdingAPI::Exposed::System::Byte_array*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this, value, datatype);
  }
  ModdingAPI::Exposed::System::Exception* CheckValueFacets(ModdingAPI::Exposed::System::TimeSpan value, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* datatype) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*, ModdingAPI::Exposed::System::TimeSpan, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this, value, datatype);
  }
  ModdingAPI::Exposed::System::Exception* CheckValueFacets(ModdingAPI::Exposed::System::Xml::XmlQualifiedName* value, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* datatype) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*, ModdingAPI::Exposed::System::Xml::XmlQualifiedName*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this, value, datatype);
  }
  void CheckWhitespaceFacets(System_String* s, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* datatype) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*, System_String*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7E180))(this, s, datatype);
  }
  ModdingAPI::Exposed::System::Exception* CheckPatternFacets(ModdingAPI::Exposed::System::Xml::Schema::RestrictionFacets* restriction, System_String* value) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*, ModdingAPI::Exposed::System::Xml::Schema::RestrictionFacets*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7E290))(this, restriction, value);
  }
  bool MatchEnumeration(Il2CppObject* value, ModdingAPI::Exposed::System::Collections::ArrayList* enumeration, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype* datatype) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*, Il2CppObject*, ModdingAPI::Exposed::System::Collections::ArrayList*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaDatatype*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this, value, enumeration, datatype);
  }
  ModdingAPI::Exposed::System::Xml::Schema::RestrictionFacets* ConstructRestriction(ModdingAPI::Exposed::System::Xml::Schema::DatatypeImplementation* datatype, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaObjectCollection* facets, ModdingAPI::Exposed::System::Xml::XmlNameTable* nameTable) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Xml::Schema::RestrictionFacets*(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*, ModdingAPI::Exposed::System::Xml::Schema::DatatypeImplementation*, ModdingAPI::Exposed::System::Xml::Schema::XmlSchemaObjectCollection*, ModdingAPI::Exposed::System::Xml::XmlNameTable*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7E4C0))(this, datatype, facets, nameTable);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Xml::Schema::FacetsChecker*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::System::Decimal Power(int32_t x, int32_t y) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Decimal(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD7E9E0))(x, y);
  }
};
}