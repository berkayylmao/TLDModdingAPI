// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"


namespace ModdingAPI::Exposed {
struct __NPCStatusBar_Il2CppStaticFields {
};

struct __NPCStatusBar_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_ShouldBeHidden;
  VirtualInvokeData _5_GetFillValueThirst;
  VirtualInvokeData _6_GetFillValueHunger;
  VirtualInvokeData _7_GetFillValueCold;
  VirtualInvokeData _8_GetFillValueFatigue;
  VirtualInvokeData _9_GetFillValueCondition;
  VirtualInvokeData _10_GetReverseFillValueFatigue;
  VirtualInvokeData _11_GetReverseFillValueCondition;
  VirtualInvokeData _12_GetBuffFillValue;
  VirtualInvokeData _13_GetBuffFillValueCondition;
  VirtualInvokeData _14_GetRateOfChangeThirst;
  VirtualInvokeData _15_GetRateOfChangeHunger;
  VirtualInvokeData _16_GetRateOfChangeCold;
  VirtualInvokeData _17_GetRateOfChangeFatigue;
  VirtualInvokeData _18_IsBuffActive;
  VirtualInvokeData _19_ShouldShowBuffedFillSprite;
  VirtualInvokeData _20_IsDebuffActive;
};

struct __NPCStatusBar_Il2CppClass {
  Il2CppClass_1 _1;
  __NPCStatusBar_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __NPCStatusBar_Il2CppVtbl vtbl;
};

class NPCStatusBar {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C5FEB8;
  static inline    __NPCStatusBar_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __NPCStatusBar_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__NPCStatusBar_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __NPCStatusBar_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  int32_t m_StatusBarType;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_HierarchyRoot;
  ModdingAPI::Exposed::UnityEngine::GameObject_array* m_UpArrows;
  ModdingAPI::Exposed::UnityEngine::GameObject_array* m_DownArrows;
  float m_MediumThreshold;
  float m_HighThreshold;
  ModdingAPI::Exposed::UISprite* m_OuterBoxSprite;
  float m_AlphaWhenHUDFadedOut;
  float m_ThresholdHUDFadeOut;
  float m_ThresholdCritical;
  ModdingAPI::Exposed::UISprite* m_FillSprite;
  ModdingAPI::Exposed::UISprite* m_ReverseFillSprite;
  ModdingAPI::Exposed::UISprite* m_BuffFillSprite;
  ModdingAPI::Exposed::UISprite* m_SpriteWhenEmpty;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BuffObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_DebuffObject;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_FillValueRangeActive;
  float m_FillSpriteOffset;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BacksplashDepleted;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BacksplashCritical;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BacksplashDebuff;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BacksplashBuff;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BacksplashNormal;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_NoBuffFillObject;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_BuffFillObject;
  bool m_IsOnHUD;
  ModdingAPI::Exposed::System::Boolean_array* StatusBar_m_UpArrowsEnabled;
  ModdingAPI::Exposed::System::Boolean_array* StatusBar_m_DownArrowsEnabled;
  bool StatusBar_m_ForceShow;
  float StatusBar_m_ForceShowStartTime;
  float StatusBar_m_ForceShowSecondsToFadeIn;
  float StatusBar_m_ForceShowSecondsToShow;
  float StatusBar_m_ForceShowSecondsToFadeOut;
  ModdingAPI::Exposed::TweenAlpha* StatusBar_m_TweenAlpha;
  ModdingAPI::Exposed::NPC* m_NPCComponent;

  // Member methods:
  void AttachNPC(ModdingAPI::Exposed::NPC* npc) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*, ModdingAPI::Exposed::NPC*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33E0D0))(this, npc);
  }
  bool ShouldBeHidden() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this);
  }
  float GetFillValueThirst() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E85CB0))(this);
  }
  float GetFillValueHunger() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1622810))(this);
  }
  float GetFillValueCold() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E85DF0))(this);
  }
  float GetFillValueFatigue() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1622810))(this);
  }
  float GetFillValueCondition() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E85F30))(this);
  }
  float GetReverseFillValueFatigue() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1622810))(this);
  }
  float GetReverseFillValueCondition() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E86060))(this);
  }
  float GetBuffFillValue() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4112A0))(this);
  }
  float GetBuffFillValueCondition() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1622810))(this);
  }
  float GetRateOfChangeThirst() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E861D0))(this);
  }
  float GetRateOfChangeHunger() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4112A0))(this);
  }
  float GetRateOfChangeCold() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E863A0))(this);
  }
  float GetRateOfChangeFatigue() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4112A0))(this);
  }
  bool IsBuffActive() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E86730))(this);
  }
  bool ShouldShowBuffedFillSprite() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this);
  }
  bool IsDebuffActive() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E86750))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCStatusBar*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1C70CA0))(this);
  }
};
}