// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Runtime::Remoting::Messaging {
struct __AsyncResult_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Threading::ContextCallback* ccb;
};

struct __AsyncResult_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _10_System_Threading_IThreadPoolWorkItem_ExecuteWorkItem;
  VirtualInvokeData _11_System_Threading_IThreadPoolWorkItem_MarkAborted;
  VirtualInvokeData _12_get_AsyncState;
  VirtualInvokeData _13_get_AsyncWaitHandle;
  VirtualInvokeData _14_get_CompletedSynchronously;
  VirtualInvokeData _15_get_IsCompleted;
  VirtualInvokeData _16_get_AsyncDelegate;
  VirtualInvokeData _17_get_NextSink;
  VirtualInvokeData _18_AsyncProcessMessage;
  VirtualInvokeData _19_GetReplyMessage;
  VirtualInvokeData _20_SetMessageCtrl;
  VirtualInvokeData _21_SyncProcessMessage;
};

struct __AsyncResult_Il2CppClass {
  Il2CppClass_1 _1;
  __AsyncResult_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AsyncResult_Il2CppVtbl vtbl;
};

class AsyncResult {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C3EEA8;
  static inline    __AsyncResult_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __AsyncResult_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__AsyncResult_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __AsyncResult_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  Il2CppObject* async_state;
  ModdingAPI::Exposed::System::Threading::WaitHandle* handle;
  Il2CppObject* async_delegate;
  intptr_t data;
  Il2CppObject* object_data;
  bool sync_completed;
  bool completed;
  bool endinvoke_called;
  Il2CppObject* async_callback;
  ModdingAPI::Exposed::System::Threading::ExecutionContext* current;
  ModdingAPI::Exposed::System::Threading::ExecutionContext* original;
  int64_t add_time;
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage* call_message;
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessageCtrl* message_ctrl;
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessage* reply_message;
  ModdingAPI::Exposed::System::Threading::WaitCallback* orig_cb;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void ::ctor(ModdingAPI::Exposed::System::Threading::WaitCallback* cb, Il2CppObject* state, bool capture_context) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*, ModdingAPI::Exposed::System::Threading::WaitCallback*, Il2CppObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF5D580))(this, cb, state, capture_context);
  }
  Il2CppObject* get_AsyncState() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  ModdingAPI::Exposed::System::Threading::WaitHandle* get_AsyncWaitHandle() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::WaitHandle*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF5D820))(this);
  }
  bool get_CompletedSynchronously() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5F6810))(this);
  }
  bool get_IsCompleted() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x921400))(this);
  }
  bool get_EndInvokeCalled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA11E00))(this);
  }
  void set_EndInvokeCalled(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xAB3C70))(this, value);
  }
  Il2CppObject* get_AsyncDelegate() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110A0))(this);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessageSink* get_NextSink() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessageSink*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessageCtrl* AsyncProcessMessage(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessage* msg, ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessageSink* replySink) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessageCtrl*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*, ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessage*, ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessageSink*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF5DA60))(this, msg, replySink);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessage* GetReplyMessage() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessage*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319940))(this);
  }
  void SetMessageCtrl(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessageCtrl* mc) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*, ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessageCtrl*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A4C0))(this, mc);
  }
  void SetCompletedSynchronously(bool completed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6CE3F0))(this, completed);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessage* EndInvoke() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessage*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF5DAB0))(this);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessage* SyncProcessMessage(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessage* msg) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessage*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*, ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::IMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF5DBF0))(this, msg);
  }
  ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage* get_CallMessage() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3199C0))(this);
  }
  void set_CallMessage(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*, ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::MonoMethodMessage*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A4B0))(this, value);
  }
  void System::Threading::IThreadPoolWorkItem::ExecuteWorkItem() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF5DDA0))(this);
  }
  void System::Threading::IThreadPoolWorkItem::MarkAborted(ModdingAPI::Exposed::System::Threading::ThreadAbortException* tae) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*, ModdingAPI::Exposed::System::Threading::ThreadAbortException*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, tae);
  }
  Il2CppObject* Invoke() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF5DDA0))(this);
  }
  void _::ctor_b__17_0(Il2CppObject* _p0_) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Runtime::Remoting::Messaging::AsyncResult*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF5DF10))(this, _p0_);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Threading::ContextCallback*> ccb = __CppStaticProperty<ModdingAPI::Exposed::System::Threading::ContextCallback*>(
   []() { return &GetStaticClassInstance()->pStaticFields->ccb; }
  );

  // Static methods:
  static inline void WaitCallback_Context(Il2CppObject* state) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF5D730))(state);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xF5DDB0))();
  }
};
}