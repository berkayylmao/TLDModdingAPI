// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __AuroraElectrolizer_OneOff_Il2CppStaticFields {
};

struct __AuroraElectrolizer_OneOff_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __AuroraElectrolizer_OneOff_Il2CppClass {
  Il2CppClass_1 _1;
  __AuroraElectrolizer_OneOff_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AuroraElectrolizer_OneOff_Il2CppVtbl vtbl;
};

class AuroraElectrolizer_OneOff {
public:
  // Il2Cpp fields:
  __AuroraElectrolizer_OneOff_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  float m_AuroraThreshold;
  System_String* m_Audio;
  int32_t m_LightFlickerType;
  ModdingAPI::Exposed::UnityEngine::Light* m_LocalLight;
  ModdingAPI::Exposed::AuroraElectrolizer_OneOff::MinMax_OneOff* m_LightPrimaryIntensity;
  ModdingAPI::Exposed::AuroraElectrolizer_OneOff::MinMax_OneOff* m_LightSecondaryIntensity;
  ModdingAPI::Exposed::AuroraElectrolizer_OneOff::MinMax_OneOff* m_LightPrimaryFrequency;
  ModdingAPI::Exposed::AuroraElectrolizer_OneOff::MinMax_OneOff* m_LightSecondaryFrequency;
  ModdingAPI::Exposed::AuroraElectrolizer_OneOff::MinMax_OneOff* m_LightNoiseFrequency;
  ModdingAPI::Exposed::AuroraElectrolizer_OneOff::ScaledCurve_OneOff* m_LightCustomCurve;
  bool m_LightRandomizePerEvent;
  bool m_LightFadeWithAurora;
  bool m_LightExludeSteady;
  bool m_LightExludeSingle;
  bool m_LightExludeDouble;
  bool m_LightExludeCustom;
  bool m_LightExludeRandomLerp;
  bool m_LightExludeRandomSharp;
  ModdingAPI::Exposed::UnityEngine::ParticleSystem* m_LocalFX;
  bool m_ParticlesScaleEmission;
  ModdingAPI::Exposed::UnityEngine::Shader* m_EmissiveShader;
  float m_EmissiveBoost;
  float m_AuroraLightFade;
  float m_AuroraFXFade;
  float m_NormalizedTimer;
  float m_NoiseTimer;
  float m_PhiTimer;
  float m_CurPriFreq;
  float m_CurSecFreq;
  float m_CurNoiFreq;
  float m_PriPeriod;
  float m_SecPeriod;
  float m_PhiPri;
  float m_PhiSec;
  float m_CurIntensity;
  float m_NewIntensity;
  float m_PrvIntensity;
  float m_StaticIntensity;
  float m_FxInitialRate;
  ModdingAPI::Exposed::UnityEngine::Material* m_LocalMaterial;
  uint32_t m_AudioInstanceID;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer_OneOff*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1692790))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer_OneOff*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16937B0))(this);
  }
  void UpdateIntensity() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer_OneOff*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1693B30))(this);
  }
  void UpdateMaterial() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer_OneOff*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x16940D0))(this);
  }
  void UpdateFX() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer_OneOff*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1694180))(this);
  }
  void UpdateLight() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer_OneOff*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1694380))(this);
  }
  void SetRandomType() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer_OneOff*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1694570))(this);
  }
  void StopAll() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer_OneOff*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1694800))(this);
  }
  float GetLightIntensity() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer_OneOff*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1694BB0))(this);
  }
  void UpdateAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer_OneOff*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1694BC0))(this);
  }
  void StopAudio() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer_OneOff*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1694CD0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::AuroraElectrolizer_OneOff*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1694DD0))(this);
  }
};
}