// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.Rewired.AxisCalibrationData.hpp"


namespace ModdingAPI::Exposed::Rewired {
struct __AxisCalibration_Il2CppStaticFields {
};

struct __AxisCalibration_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __AxisCalibration_Il2CppClass {
  Il2CppClass_1 _1;
  __AxisCalibration_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __AxisCalibration_Il2CppVtbl vtbl;
};

class AxisCalibration {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C71DE0;
  static inline    __AxisCalibration_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __AxisCalibration_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__AxisCalibration_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __AxisCalibration_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t _calibrationMode;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* _hardwareCalibrations;
  bool _enabled;
  float _deadZone;
  float _calibratedZero;
  float _calibratedMin;
  float _calibratedMax;
  bool _invert;
  int32_t _sensitivityType;
  float _sensitivity;
  ModdingAPI::Exposed::UnityEngine::AnimationCurve* _sensitivityCurve;
  bool _applyRangeCalibration;

  // Member methods:
  bool get_enabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x46FCC0))(this);
  }
  void set_enabled(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D810))(this, value);
  }
  float get_deadZone() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x591530))(this);
  }
  void set_deadZone(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x807910))(this, value);
  }
  float get_calibratedZero() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56ED60))(this);
  }
  void set_calibratedZero(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7B8D40))(this, value);
  }
  float get_calibratedMin() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x56EDA0))(this);
  }
  void set_calibratedMin(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7B8D50))(this, value);
  }
  float get_calibratedMax() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x581030))(this);
  }
  void set_calibratedMax(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x807930))(this, value);
  }
  bool get_invert() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x306B90))(this);
  }
  void set_invert(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x6A00A0))(this, value);
  }
  int32_t get_sensitivityType() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8A0))(this);
  }
  void set_sensitivityType(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36D8B0))(this, value);
  }
  float get_sensitivity() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x807940))(this);
  }
  void set_sensitivity(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x807950))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::AnimationCurve* get_sensitivityCurve() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::AnimationCurve*(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x319960))(this);
  }
  void set_sensitivityCurve(ModdingAPI::Exposed::UnityEngine::AnimationCurve* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, ModdingAPI::Exposed::UnityEngine::AnimationCurve*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x31F420))(this, value);
  }
  bool get_applyRangeCalibration() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EFF30))(this);
  }
  void set_applyRangeCalibration(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x4EFF40))(this, value);
  }
  int32_t get_calibrationMode() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311060))(this);
  }
  void set_calibrationMode(int32_t value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x807960))(this, value);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8079C0))(this);
  }
  void ::ctor(bool enabled, ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* hardwareCalibrations, float deadZone, float calibratedZero, float calibratedMin, float calibratedMax, bool invert, bool applyRangeCalibration, int32_t sensitivityType, float sensitivity, ModdingAPI::Exposed::UnityEngine::AnimationCurve* sensitivityCurve) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, bool, ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*, float, float, float, float, bool, bool, int32_t, float, ModdingAPI::Exposed::UnityEngine::AnimationCurve*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x807C10))(this, enabled, hardwareCalibrations, deadZone, calibratedZero, calibratedMin, calibratedMax, invert, applyRangeCalibration, sensitivityType, sensitivity, sensitivityCurve);
  }
  void ::ctor(ModdingAPI::Exposed::Rewired::AxisCalibrationData hardwareData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, ModdingAPI::Exposed::Rewired::AxisCalibrationData)>(Helpers::Memory::GetInstance().MakeAbsolute(0x807EF0))(this, hardwareData);
  }
  void CopyFrom(ModdingAPI::Exposed::Rewired::AxisCalibration* data, bool copyHardwareData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, ModdingAPI::Exposed::Rewired::AxisCalibration*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x808130))(this, data, copyHardwareData);
  }
  float GetCalibratedValue(float value) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x808320))(this, value);
  }
  float GetCalibratedValue(float value, float customDeadzone, bool applySensitivity, bool applyInversion) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, float, float, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8083E0))(this, value, customDeadzone, applySensitivity, applyInversion);
  }
  float GetCalibratedValue(float value, int32_t axisRange) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8084C0))(this, value, axisRange);
  }
  float GetCalibratedValue(float value, int32_t axisRange, float customDeadzone, bool applySensitivity, bool applyInversion) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, float, int32_t, float, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8084F0))(this, value, axisRange, customDeadzone, applySensitivity, applyInversion);
  }
  ModdingAPI::Exposed::Rewired::AxisCalibrationData GetData() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::AxisCalibrationData(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8086C0))(this);
  }
  void SetData(ModdingAPI::Exposed::Rewired::AxisCalibrationData data) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, ModdingAPI::Exposed::Rewired::AxisCalibrationData)>(Helpers::Memory::GetInstance().MakeAbsolute(0x808820))(this, data);
  }
  void Reset() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8088F0))(this);
  }
  ModdingAPI::Exposed::Rewired::Utils::Classes::Data::SerializedObject* ExportData() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::Utils::Classes::Data::SerializedObject*(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x808A90))(this);
  }
  void Import(ModdingAPI::Exposed::Rewired::Utils::Classes::Data::SerializedObject* serializedObject) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, ModdingAPI::Exposed::Rewired::Utils::Classes::Data::SerializedObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8091E0))(this, serializedObject);
  }
  void InitHardwareCalibrations(ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* hardwareCalibrations, ModdingAPI::Exposed::Rewired::AxisCalibrationData defaultData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*, ModdingAPI::Exposed::Rewired::AxisCalibrationData)>(Helpers::Memory::GetInstance().MakeAbsolute(0x809440))(this, hardwareCalibrations, defaultData);
  }
  void CreateDefaultHardwareCalibration(ModdingAPI::Exposed::Rewired::AxisCalibrationData defaultData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*, ModdingAPI::Exposed::Rewired::AxisCalibrationData)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8096A0))(this, defaultData);
  }
  ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo* GetHardwareDefault() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::Data::Mapping::AxisCalibrationInfo*(__fastcall*)(ModdingAPI::Exposed::Rewired::AxisCalibration*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x809810))(this);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::Rewired::AxisCalibration* CreateRelative() {
    return reinterpret_cast<ModdingAPI::Exposed::Rewired::AxisCalibration*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x8099F0))();
  }
};
}