// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Collections::SortedList {
struct __SyncSortedList_Il2CppStaticFields {
};

struct __SyncSortedList_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _19_System_Collections_IEnumerable_GetEnumerator;
  VirtualInvokeData _21_Add;
  VirtualInvokeData _22_get_Capacity;
  VirtualInvokeData _23_set_Capacity;
  VirtualInvokeData _24_get_Count;
  VirtualInvokeData _25_get_Keys;
  VirtualInvokeData _26_get_Values;
  VirtualInvokeData _27_get_IsReadOnly;
  VirtualInvokeData _28_get_IsFixedSize;
  VirtualInvokeData _29_get_IsSynchronized;
  VirtualInvokeData _30_get_SyncRoot;
  VirtualInvokeData _31_Clear;
  VirtualInvokeData _32_Clone;
  VirtualInvokeData _33_Contains;
  VirtualInvokeData _34_ContainsKey;
  VirtualInvokeData _35_ContainsValue;
  VirtualInvokeData _36_CopyTo;
  VirtualInvokeData _37_GetByIndex;
  VirtualInvokeData _38_GetEnumerator;
  VirtualInvokeData _39_GetKey;
  VirtualInvokeData _40_GetKeyList;
  VirtualInvokeData _41_GetValueList;
  VirtualInvokeData _42_get_Item;
  VirtualInvokeData _43_set_Item;
  VirtualInvokeData _44_IndexOfKey;
  VirtualInvokeData _45_IndexOfValue;
  VirtualInvokeData _46_RemoveAt;
  VirtualInvokeData _47_Remove;
};

struct __SyncSortedList_Il2CppClass {
  Il2CppClass_1 _1;
  __SyncSortedList_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SyncSortedList_Il2CppVtbl vtbl;
};

class SyncSortedList {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C8F350;
  static inline    __SyncSortedList_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __SyncSortedList_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__SyncSortedList_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __SyncSortedList_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Object_array* SortedList_keys;
  ModdingAPI::Exposed::System::Object_array* SortedList_values;
  int32_t SortedList__size;
  int32_t SortedList_version;
  ModdingAPI::Exposed::System::Collections::IComparer* SortedList_comparer;
  ModdingAPI::Exposed::System::Collections::SortedList::KeyList* SortedList_keyList;
  ModdingAPI::Exposed::System::Collections::SortedList::ValueList* SortedList_valueList;
  Il2CppObject* SortedList__syncRoot;
  ModdingAPI::Exposed::System::Collections::SortedList* _list;
  Il2CppObject* _root;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Collections::SortedList* list) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*, ModdingAPI::Exposed::System::Collections::SortedList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6BD00))(this, list);
  }
  int32_t get_Count() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6BDD0))(this);
  }
  Il2CppObject* get_SyncRoot() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x33A440))(this);
  }
  bool get_IsReadOnly() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6BEE0))(this);
  }
  bool get_IsFixedSize() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6BF10))(this);
  }
  bool get_IsSynchronized() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x403F70))(this);
  }
  Il2CppObject* get_Item(Il2CppObject* key) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6BF40))(this, key);
  }
  void set_Item(Il2CppObject* key, Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*, Il2CppObject*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6C050))(this, key, value);
  }
  void Add(Il2CppObject* key, Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*, Il2CppObject*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6C160))(this, key, value);
  }
  int32_t get_Capacity() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6C270))(this);
  }
  void Clear() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6C380))(this);
  }
  Il2CppObject* Clone() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6C470))(this);
  }
  bool Contains(Il2CppObject* key) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6C580))(this, key);
  }
  bool ContainsKey(Il2CppObject* key) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6C690))(this, key);
  }
  bool ContainsValue(Il2CppObject* key) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6C7A0))(this, key);
  }
  void CopyTo(ModdingAPI::Exposed::System::Array* array, int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*, ModdingAPI::Exposed::System::Array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6C8B0))(this, array, index);
  }
  Il2CppObject* GetByIndex(int32_t index) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6C9C0))(this, index);
  }
  ModdingAPI::Exposed::System::Collections::IDictionaryEnumerator* GetEnumerator() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IDictionaryEnumerator*(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6CAD0))(this);
  }
  Il2CppObject* GetKey(int32_t index) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6CBE0))(this, index);
  }
  ModdingAPI::Exposed::System::Collections::IList* GetKeyList() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IList*(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6CCF0))(this);
  }
  ModdingAPI::Exposed::System::Collections::IList* GetValueList() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IList*(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6CE00))(this);
  }
  int32_t IndexOfKey(Il2CppObject* key) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6CF10))(this, key);
  }
  int32_t IndexOfValue(Il2CppObject* value) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6D0E0))(this, value);
  }
  void RemoveAt(int32_t index) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6D1F0))(this, index);
  }
  void Remove(Il2CppObject* key) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::SortedList::SyncSortedList*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA6D2F0))(this, key);
  }
};
}