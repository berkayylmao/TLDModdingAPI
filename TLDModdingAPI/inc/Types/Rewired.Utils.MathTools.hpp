// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector3.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Rect.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Matrix4x4.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Rect.hpp"


namespace ModdingAPI::Exposed::Rewired::Utils {
struct __MathTools_Il2CppStaticFields {
};

struct __MathTools_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __MathTools_Il2CppClass {
  Il2CppClass_1 _1;
  __MathTools_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MathTools_Il2CppVtbl vtbl;
};

class MathTools {
public:
  // Il2Cpp fields:
  __MathTools_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Rewired::Utils::MathTools*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static methods:
  static inline char Abs(char value) {
    return reinterpret_cast<char(__fastcall*)(char)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCCF780))(value);
  }
  static inline int16_t Abs(int16_t value) {
    return reinterpret_cast<int16_t(__fastcall*)(int16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCCF840))(value);
  }
  static inline int32_t Abs(int32_t value) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCCF900))(value);
  }
  static inline int64_t Abs(int64_t value) {
    return reinterpret_cast<int64_t(__fastcall*)(int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCCF9C0))(value);
  }
  static inline float Abs(float value) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCCFA80))(value);
  }
  static inline double Abs(double value) {
    return reinterpret_cast<double(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCCFB50))(value);
  }
  static inline bool Approximately(float a, float b) {
    return reinterpret_cast<bool(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCCFC20))(a, b);
  }
  static inline bool ApproximatelyZero(float a) {
    return reinterpret_cast<bool(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCCFD00))(a);
  }
  static inline bool IsZero(float value) {
    return reinterpret_cast<bool(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCCFD80))(value);
  }
  static inline bool IsZero(float value, float threshold) {
    return reinterpret_cast<bool(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCCFDC0))(value, threshold);
  }
  static inline bool IsZero(double value) {
    return reinterpret_cast<bool(__fastcall*)(double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCCFE10))(value);
  }
  static inline bool IsZero(double value, double threshold) {
    return reinterpret_cast<bool(__fastcall*)(double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCCFE30))(value, threshold);
  }
  static inline bool IsExactlyEqual(float a, float b) {
    return reinterpret_cast<bool(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCCFE80))(a, b);
  }
  static inline bool IsExactlyEqual(double a, double b) {
    return reinterpret_cast<bool(__fastcall*)(double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCCFED0))(a, b);
  }
  static inline bool IsNear(float value, float targetValue) {
    return reinterpret_cast<bool(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCCFF30))(value, targetValue);
  }
  static inline bool IsNear(float value, float targetValue, float threshold) {
    return reinterpret_cast<bool(__fastcall*)(float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCCFF70))(value, targetValue, threshold);
  }
  static inline bool IsNearZero(float value) {
    return reinterpret_cast<bool(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCCFFD0))(value);
  }
  static inline bool IsNearZero(float value, float threshold) {
    return reinterpret_cast<bool(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0000))(value, threshold);
  }
  static inline bool IsNearOrWholeNumber(float value) {
    return reinterpret_cast<bool(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0030))(value);
  }
  static inline bool IsNearOrWholeNumber(float value, float threshold) {
    return reinterpret_cast<bool(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0080))(value, threshold);
  }
  static inline bool IsNearOrWholeNumber(float value, int32_t number) {
    return reinterpret_cast<bool(__fastcall*)(float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD01D0))(value, number);
  }
  static inline bool IsNearOrWholeNumber(float value, int32_t number, float threshold) {
    return reinterpret_cast<bool(__fastcall*)(float, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0290))(value, number, threshold);
  }
  static inline float RoundOffIfNearWholeNumber(float value) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD03E0))(value);
  }
  static inline float RoundOffIfNearWholeNumber(float value, float threshold) {
    return reinterpret_cast<float(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0440))(value, threshold);
  }
  static inline bool IsEven(int32_t value) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0510))(value);
  }
  static inline float ValueInNewRange(float oldValue, float oldMin, float oldMax, float newMin, float newMax) {
    return reinterpret_cast<float(__fastcall*)(float, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0520))(oldValue, oldMin, oldMax, newMin, newMax);
  }
  static inline int32_t ValueInNewRange(int32_t oldValue, int32_t oldMin, int32_t oldMax, int32_t newMin, int32_t newMax) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0620))(oldValue, oldMin, oldMax, newMin, newMax);
  }
  static inline char Max(char a, char b) {
    return reinterpret_cast<char(__fastcall*)(char, char)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0710))(a, b);
  }
  static inline uint8_t Max(uint8_t a, uint8_t b) {
    return reinterpret_cast<uint8_t(__fastcall*)(uint8_t, uint8_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0720))(a, b);
  }
  static inline int16_t Max(int16_t a, int16_t b) {
    return reinterpret_cast<int16_t(__fastcall*)(int16_t, int16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0730))(a, b);
  }
  static inline uint16_t Max(uint16_t a, uint16_t b) {
    return reinterpret_cast<uint16_t(__fastcall*)(uint16_t, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0740))(a, b);
  }
  static inline int32_t Max(int32_t a, int32_t b) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0750))(a, b);
  }
  static inline uint32_t Max(uint32_t a, uint32_t b) {
    return reinterpret_cast<uint32_t(__fastcall*)(uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0760))(a, b);
  }
  static inline int64_t Max(int64_t a, int64_t b) {
    return reinterpret_cast<int64_t(__fastcall*)(int64_t, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0770))(a, b);
  }
  static inline uint64_t Max(uint64_t a, uint64_t b) {
    return reinterpret_cast<uint64_t(__fastcall*)(uint64_t, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0780))(a, b);
  }
  static inline float Max(float a, float b) {
    return reinterpret_cast<float(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0790))(a, b);
  }
  static inline double Max(double a, double b) {
    return reinterpret_cast<double(__fastcall*)(double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD07A0))(a, b);
  }
  static inline char Min(char a, char b) {
    return reinterpret_cast<char(__fastcall*)(char, char)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD07B0))(a, b);
  }
  static inline uint8_t Min(uint8_t a, uint8_t b) {
    return reinterpret_cast<uint8_t(__fastcall*)(uint8_t, uint8_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD07C0))(a, b);
  }
  static inline int16_t Min(int16_t a, int16_t b) {
    return reinterpret_cast<int16_t(__fastcall*)(int16_t, int16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD07D0))(a, b);
  }
  static inline uint16_t Min(uint16_t a, uint16_t b) {
    return reinterpret_cast<uint16_t(__fastcall*)(uint16_t, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD07E0))(a, b);
  }
  static inline int32_t Min(int32_t a, int32_t b) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD07F0))(a, b);
  }
  static inline uint32_t Min(uint32_t a, uint32_t b) {
    return reinterpret_cast<uint32_t(__fastcall*)(uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0800))(a, b);
  }
  static inline int64_t Min(int64_t a, int64_t b) {
    return reinterpret_cast<int64_t(__fastcall*)(int64_t, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0810))(a, b);
  }
  static inline uint64_t Min(uint64_t a, uint64_t b) {
    return reinterpret_cast<uint64_t(__fastcall*)(uint64_t, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0820))(a, b);
  }
  static inline float Min(float a, float b) {
    return reinterpret_cast<float(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0830))(a, b);
  }
  static inline double Min(double a, double b) {
    return reinterpret_cast<double(__fastcall*)(double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0840))(a, b);
  }
  static inline char MaxMagnitude(char a, char b) {
    return reinterpret_cast<char(__fastcall*)(char, char)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0850))(a, b);
  }
  static inline uint8_t MaxMagnitude(uint8_t a, uint8_t b) {
    return reinterpret_cast<uint8_t(__fastcall*)(uint8_t, uint8_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0720))(a, b);
  }
  static inline int16_t MaxMagnitude(int16_t a, int16_t b) {
    return reinterpret_cast<int16_t(__fastcall*)(int16_t, int16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0880))(a, b);
  }
  static inline uint16_t MaxMagnitude(uint16_t a, uint16_t b) {
    return reinterpret_cast<uint16_t(__fastcall*)(uint16_t, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0740))(a, b);
  }
  static inline int32_t MaxMagnitude(int32_t a, int32_t b) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD08B0))(a, b);
  }
  static inline uint32_t MaxMagnitude(uint32_t a, uint32_t b) {
    return reinterpret_cast<uint32_t(__fastcall*)(uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0760))(a, b);
  }
  static inline int64_t MaxMagnitude(int64_t a, int64_t b) {
    return reinterpret_cast<int64_t(__fastcall*)(int64_t, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD08E0))(a, b);
  }
  static inline uint64_t MaxMagnitude(uint64_t a, uint64_t b) {
    return reinterpret_cast<uint64_t(__fastcall*)(uint64_t, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0780))(a, b);
  }
  static inline float MaxMagnitude(float a, float b) {
    return reinterpret_cast<float(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0950))(a, b);
  }
  static inline double MaxMagnitude(double a, double b) {
    return reinterpret_cast<double(__fastcall*)(double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD09A0))(a, b);
  }
  static inline char MinMagnitude(char a, char b) {
    return reinterpret_cast<char(__fastcall*)(char, char)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD09E0))(a, b);
  }
  static inline uint8_t MinMagnitude(uint8_t a, uint8_t b) {
    return reinterpret_cast<uint8_t(__fastcall*)(uint8_t, uint8_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD07C0))(a, b);
  }
  static inline int16_t MinMagnitude(int16_t a, int16_t b) {
    return reinterpret_cast<int16_t(__fastcall*)(int16_t, int16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0A10))(a, b);
  }
  static inline uint16_t MinMagnitude(uint16_t a, uint16_t b) {
    return reinterpret_cast<uint16_t(__fastcall*)(uint16_t, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD07E0))(a, b);
  }
  static inline int32_t MinMagnitude(int32_t a, int32_t b) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0A40))(a, b);
  }
  static inline uint32_t MinMagnitude(uint32_t a, uint32_t b) {
    return reinterpret_cast<uint32_t(__fastcall*)(uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0800))(a, b);
  }
  static inline int64_t MinMagnitude(int64_t a, int64_t b) {
    return reinterpret_cast<int64_t(__fastcall*)(int64_t, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0AB0))(a, b);
  }
  static inline uint64_t MinMagnitude(uint64_t a, uint64_t b) {
    return reinterpret_cast<uint64_t(__fastcall*)(uint64_t, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0820))(a, b);
  }
  static inline float MinMagnitude(float a, float b) {
    return reinterpret_cast<float(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0B00))(a, b);
  }
  static inline double MinMagnitude(double a, double b) {
    return reinterpret_cast<double(__fastcall*)(double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0B40))(a, b);
  }
  static inline bool IsMoreMagnitudeOrEqual(char a, char b) {
    return reinterpret_cast<bool(__fastcall*)(char, char)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0BB0))(a, b);
  }
  static inline bool IsMoreMagnitudeOrEqual(uint8_t a, uint8_t b) {
    return reinterpret_cast<bool(__fastcall*)(uint8_t, uint8_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0C00))(a, b);
  }
  static inline bool IsMoreMagnitudeOrEqual(int16_t a, int16_t b) {
    return reinterpret_cast<bool(__fastcall*)(int16_t, int16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0C10))(a, b);
  }
  static inline bool IsMoreMagnitudeOrEqual(uint16_t a, uint16_t b) {
    return reinterpret_cast<bool(__fastcall*)(uint16_t, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0C60))(a, b);
  }
  static inline bool IsMoreMagnitudeOrEqual(int32_t a, int32_t b) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0C70))(a, b);
  }
  static inline bool IsMoreMagnitudeOrEqual(uint32_t a, uint32_t b) {
    return reinterpret_cast<bool(__fastcall*)(uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0CB0))(a, b);
  }
  static inline bool IsMoreMagnitudeOrEqual(int64_t a, int64_t b) {
    return reinterpret_cast<bool(__fastcall*)(int64_t, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0CC0))(a, b);
  }
  static inline bool IsMoreMagnitudeOrEqual(uint64_t a, uint64_t b) {
    return reinterpret_cast<bool(__fastcall*)(uint64_t, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0D10))(a, b);
  }
  static inline bool IsMoreMagnitudeOrEqual(float a, float b) {
    return reinterpret_cast<bool(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0D20))(a, b);
  }
  static inline bool IsMoreMagnitudeOrEqual(double a, double b) {
    return reinterpret_cast<bool(__fastcall*)(double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0D70))(a, b);
  }
  static inline bool IsLessMagnitudeOrEqual(char a, char b) {
    return reinterpret_cast<bool(__fastcall*)(char, char)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0DD0))(a, b);
  }
  static inline bool IsLessMagnitudeOrEqual(uint8_t a, uint8_t b) {
    return reinterpret_cast<bool(__fastcall*)(uint8_t, uint8_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0E10))(a, b);
  }
  static inline bool IsLessMagnitudeOrEqual(int16_t a, int16_t b) {
    return reinterpret_cast<bool(__fastcall*)(int16_t, int16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0E20))(a, b);
  }
  static inline bool IsLessMagnitudeOrEqual(uint16_t a, uint16_t b) {
    return reinterpret_cast<bool(__fastcall*)(uint16_t, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0E70))(a, b);
  }
  static inline bool IsLessMagnitudeOrEqual(int32_t a, int32_t b) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0E80))(a, b);
  }
  static inline bool IsLessMagnitudeOrEqual(uint32_t a, uint32_t b) {
    return reinterpret_cast<bool(__fastcall*)(uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0EC0))(a, b);
  }
  static inline bool IsLessMagnitudeOrEqual(int64_t a, int64_t b) {
    return reinterpret_cast<bool(__fastcall*)(int64_t, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0ED0))(a, b);
  }
  static inline bool IsLessMagnitudeOrEqual(uint64_t a, uint64_t b) {
    return reinterpret_cast<bool(__fastcall*)(uint64_t, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0F10))(a, b);
  }
  static inline bool IsLessMagnitudeOrEqual(float a, float b) {
    return reinterpret_cast<bool(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0F20))(a, b);
  }
  static inline bool IsLessMagnitudeOrEqual(double a, double b) {
    return reinterpret_cast<bool(__fastcall*)(double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0F80))(a, b);
  }
  static inline uint8_t Clamp(uint8_t value, uint8_t min, uint8_t max) {
    return reinterpret_cast<uint8_t(__fastcall*)(uint8_t, uint8_t, uint8_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD0FD0))(value, min, max);
  }
  static inline char Clamp(char value, char min, char max) {
    return reinterpret_cast<char(__fastcall*)(char, char, char)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1010))(value, min, max);
  }
  static inline int16_t Clamp(int16_t value, int16_t min, int16_t max) {
    return reinterpret_cast<int16_t(__fastcall*)(int16_t, int16_t, int16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1030))(value, min, max);
  }
  static inline uint16_t Clamp(uint16_t value, uint16_t min, uint16_t max) {
    return reinterpret_cast<uint16_t(__fastcall*)(uint16_t, uint16_t, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1050))(value, min, max);
  }
  static inline int32_t Clamp(int32_t value, int32_t min, int32_t max) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1070))(value, min, max);
  }
  static inline uint32_t Clamp(uint32_t value, uint32_t min, uint32_t max) {
    return reinterpret_cast<uint32_t(__fastcall*)(uint32_t, uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD10B0))(value, min, max);
  }
  static inline int64_t Clamp(int64_t value, int64_t min, int64_t max) {
    return reinterpret_cast<int64_t(__fastcall*)(int64_t, int64_t, int64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD10D0))(value, min, max);
  }
  static inline uint64_t Clamp(uint64_t value, uint64_t min, uint64_t max) {
    return reinterpret_cast<uint64_t(__fastcall*)(uint64_t, uint64_t, uint64_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1120))(value, min, max);
  }
  static inline float Clamp(float value, float min, float max) {
    return reinterpret_cast<float(__fastcall*)(float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1140))(value, min, max);
  }
  static inline double Clamp(double value, double min, double max) {
    return reinterpret_cast<double(__fastcall*)(double, double, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1160))(value, min, max);
  }
  static inline float Clamp01(float value) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1180))(value);
  }
  static inline float ClampAngle360(float angle) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD11A0))(angle);
  }
  static inline float ReverseAngleRotationDirection(float angle) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1320))(angle);
  }
  static inline bool AngleIsNear(float angle, float targetAngle, float threshold) {
    return reinterpret_cast<bool(__fastcall*)(float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1360))(angle, targetAngle, threshold);
  }
  static inline bool AngleIsBetween(float angle, float min, float max) {
    return reinterpret_cast<bool(__fastcall*)(float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD14E0))(angle, min, max);
  }
  static inline bool uSlirMAgFuIYFcHOIuEJFAdtQTDJ(int32_t , int32_t ) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1580))(, );
  }
  static inline int32_t IntPow(int32_t x, uint32_t pow) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD15A0))(x, pow);
  }
  static inline uint32_t RoundUpToPowerOf2(uint32_t value) {
    return reinterpret_cast<uint32_t(__fastcall*)(uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1620))(value);
  }
  static inline float BooleanToSign(bool b) {
    return reinterpret_cast<float(__fastcall*)(bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1680))(b);
  }
  static inline bool SignToBoolean(float sign) {
    return reinterpret_cast<bool(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD16A0))(sign);
  }
  static inline float Sin(float value) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD16B0))(value);
  }
  static inline float Cos(float value) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1760))(value);
  }
  static inline float Tan(float value) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1810))(value);
  }
  static inline float Asin(float value) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD18C0))(value);
  }
  static inline float Acos(float value) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1970))(value);
  }
  static inline float Atan(float value) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1A20))(value);
  }
  static inline float Atan2(float y, float x) {
    return reinterpret_cast<float(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1AD0))(y, x);
  }
  static inline float Sqrt(float value) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1B90))(value);
  }
  static inline float Pow(float value, float p) {
    return reinterpret_cast<float(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1C40))(value, p);
  }
  static inline float Exp(float power) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1D00))(power);
  }
  static inline float Log(float value, float p) {
    return reinterpret_cast<float(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1DB0))(value, p);
  }
  static inline float Log(float value) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1E70))(value);
  }
  static inline float Log10(float value) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1F20))(value);
  }
  static inline float Ceil(float value) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD1FD0))(value);
  }
  static inline float Floor(float value) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD2080))(value);
  }
  static inline float Round(float value) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD2130))(value);
  }
  static inline int32_t CeilToInt(float value) {
    return reinterpret_cast<int32_t(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD21E0))(value);
  }
  static inline int32_t FloorToInt(float value) {
    return reinterpret_cast<int32_t(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD2290))(value);
  }
  static inline int32_t RoundToInt(float value) {
    return reinterpret_cast<int32_t(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD2340))(value);
  }
  static inline float Sign(float value) {
    return reinterpret_cast<float(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD23F0))(value);
  }
  static inline int32_t Sign(int32_t value) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD2410))(value);
  }
  static inline float Repeat(float t, float length) {
    return reinterpret_cast<float(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD2420))(t, length);
  }
  static inline float DeltaAngle(float current, float target) {
    return reinterpret_cast<float(__fastcall*)(float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD2460))(current, target);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 MaxMagnitude(ModdingAPI::Exposed::UnityEngine::Vector2 a, ModdingAPI::Exposed::UnityEngine::Vector2 b) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD24D0))(a, b);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 MaxMagnitude(ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD2550))(a, b);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 MinMagnitude(ModdingAPI::Exposed::UnityEngine::Vector2 a, ModdingAPI::Exposed::UnityEngine::Vector2 b) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD25D0))(a, b);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector3 MinMagnitude(ModdingAPI::Exposed::UnityEngine::Vector3 a, ModdingAPI::Exposed::UnityEngine::Vector3 b) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD2620))(a, b);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 Clamp(ModdingAPI::Exposed::UnityEngine::Vector2 value, ModdingAPI::Exposed::UnityEngine::Vector2 min, ModdingAPI::Exposed::UnityEngine::Vector2 max) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD26A0))(value, min, max);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 Clamp(ModdingAPI::Exposed::UnityEngine::Vector2 value, float min, float max) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD2700))(value, min, max);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 Clamp(ModdingAPI::Exposed::UnityEngine::Vector3 value, ModdingAPI::Exposed::UnityEngine::Vector3 min, ModdingAPI::Exposed::UnityEngine::Vector3 max) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD2760))(value, min, max);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 Clamp(ModdingAPI::Exposed::UnityEngine::Vector3 value, float min, float max) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector3, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD2860))(value, min, max);
  }
  static inline float Cross(ModdingAPI::Exposed::UnityEngine::Vector2 a, ModdingAPI::Exposed::UnityEngine::Vector2 b) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD2950))(a, b);
  }
  static inline float Multiply(ModdingAPI::Exposed::UnityEngine::Vector2 a, ModdingAPI::Exposed::UnityEngine::Vector2 b) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD2980))(a, b);
  }
  static inline bool RectContains(ModdingAPI::Exposed::UnityEngine::Rect rect, ModdingAPI::Exposed::UnityEngine::Vector2 pos, float rotation) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect, ModdingAPI::Exposed::UnityEngine::Vector2, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD29B0))(rect, pos, rotation);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 RotateWorldPoint(ModdingAPI::Exposed::UnityEngine::Vector2 point, ModdingAPI::Exposed::UnityEngine::Vector2 center, float angle) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD2C10))(point, center, angle);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 RotateLocalPoint(ModdingAPI::Exposed::UnityEngine::Vector2 point, float angle) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD2D90))(point, angle);
  }
  static inline bool LineIntersectsRect(ModdingAPI::Exposed::UnityEngine::Vector2 point1, ModdingAPI::Exposed::UnityEngine::Vector2 point2, ModdingAPI::Exposed::UnityEngine::Rect rect, float sqrMagnitude) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Rect, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD2E90))(point1, point2, rect, sqrMagnitude);
  }
  static inline bool LineSegementsIntersect(ModdingAPI::Exposed::UnityEngine::Vector2 line1p1, ModdingAPI::Exposed::UnityEngine::Vector2 line1p2, ModdingAPI::Exposed::UnityEngine::Vector2 line2p1, ModdingAPI::Exposed::UnityEngine::Vector2 line2p2, ModdingAPI::Exposed::UnityEngine::Vector2 intersection, bool collinearIntersects) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD3610))(line1p1, line1p2, line2p1, line2p2, intersection, collinearIntersects);
  }
  static inline bool TSEBwQxtPTYdIGWZCpzbEJdEYzY(ModdingAPI::Exposed::UnityEngine::Vector2 , ModdingAPI::Exposed::UnityEngine::Vector2 , ModdingAPI::Exposed::UnityEngine::Vector2 , ModdingAPI::Exposed::UnityEngine::Vector2 , ModdingAPI::Exposed::UnityEngine::Vector2 ) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD3D30))(, , , , );
  }
  static inline bool RectContains(ModdingAPI::Exposed::UnityEngine::Rect container, ModdingAPI::Exposed::UnityEngine::Rect child) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect, ModdingAPI::Exposed::UnityEngine::Rect)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD3FA0))(container, child);
  }
  static inline bool GetOffsetToContainRect(ModdingAPI::Exposed::UnityEngine::Rect container, ModdingAPI::Exposed::UnityEngine::Rect child, ModdingAPI::Exposed::UnityEngine::Vector2 offset) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect, ModdingAPI::Exposed::UnityEngine::Rect, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD4000))(container, child, offset);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Matrix4x4 TransformTo(ModdingAPI::Exposed::UnityEngine::Transform* from, ModdingAPI::Exposed::UnityEngine::Transform* to) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Matrix4x4(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Transform*, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD4150))(from, to);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Rect TransformRect(ModdingAPI::Exposed::UnityEngine::Rect fromRect, ModdingAPI::Exposed::UnityEngine::Transform* from, ModdingAPI::Exposed::UnityEngine::Transform* to) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rect(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Rect, ModdingAPI::Exposed::UnityEngine::Transform*, ModdingAPI::Exposed::UnityEngine::Transform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD4350))(fromRect, from, to);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 SnapVectorToNearestAngle(ModdingAPI::Exposed::UnityEngine::Vector2 vector, float angle) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Vector2, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0xCD4770))(vector, angle);
  }
};
}