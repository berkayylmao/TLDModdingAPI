// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::Mono::Security::Cryptography {
struct __SymmetricTransform_Il2CppStaticFields {
};

struct __SymmetricTransform_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _9_System_IDisposable_Dispose;
  VirtualInvokeData _10_Dispose;
  VirtualInvokeData _11_get_CanTransformMultipleBlocks;
  VirtualInvokeData _12_get_InputBlockSize;
  VirtualInvokeData _13_get_OutputBlockSize;
  VirtualInvokeData _14_Transform;
  VirtualInvokeData _16_CBC;
  VirtualInvokeData _17_CFB;
  VirtualInvokeData _18_OFB;
  VirtualInvokeData _19_CTS;
  VirtualInvokeData _20_TransformBlock;
  VirtualInvokeData _21_FinalEncrypt;
  VirtualInvokeData _22_FinalDecrypt;
  VirtualInvokeData _23_TransformFinalBlock;
  VirtualInvokeData _65535__ctor;
};

struct __SymmetricTransform_Il2CppClass {
  Il2CppClass_1 _1;
  __SymmetricTransform_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SymmetricTransform_Il2CppVtbl vtbl;
};

class SymmetricTransform {
public:
  // Il2Cpp fields:
  __SymmetricTransform_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Security::Cryptography::SymmetricAlgorithm* algo;
  bool encrypt;
  int32_t BlockSizeByte;
  ModdingAPI::Exposed::System::Byte_array* temp;
  ModdingAPI::Exposed::System::Byte_array* temp2;
  ModdingAPI::Exposed::System::Byte_array* workBuff;
  ModdingAPI::Exposed::System::Byte_array* workout;
  int32_t padmode;
  int32_t FeedBackByte;
  bool m_disposed;
  bool lastBlock;
  ModdingAPI::Exposed::System::Security::Cryptography::RandomNumberGenerator* _rng;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::System::Security::Cryptography::SymmetricAlgorithm* symmAlgo, bool encryption, ModdingAPI::Exposed::System::Byte_array* rgbIV) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*, ModdingAPI::Exposed::System::Security::Cryptography::SymmetricAlgorithm*, bool, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE7E980))(this, symmAlgo, encryption, rgbIV);
  }
  void Finalize() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE7ECF0))(this);
  }
  void System::IDisposable::Dispose() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE7ED70))(this);
  }
  void Dispose(bool disposing) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE7EE20))(this, disposing);
  }
  bool get_CanTransformMultipleBlocks() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x403F70))(this);
  }
  int32_t get_InputBlockSize() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36E9C0))(this);
  }
  int32_t get_OutputBlockSize() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x36E9C0))(this);
  }
  void Transform(ModdingAPI::Exposed::System::Byte_array* input, ModdingAPI::Exposed::System::Byte_array* output) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*, ModdingAPI::Exposed::System::Byte_array*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE7EE80))(this, input, output);
  }
  void CBC(ModdingAPI::Exposed::System::Byte_array* input, ModdingAPI::Exposed::System::Byte_array* output) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*, ModdingAPI::Exposed::System::Byte_array*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE7F0A0))(this, input, output);
  }
  void CFB(ModdingAPI::Exposed::System::Byte_array* input, ModdingAPI::Exposed::System::Byte_array* output) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*, ModdingAPI::Exposed::System::Byte_array*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE7F240))(this, input, output);
  }
  void OFB(ModdingAPI::Exposed::System::Byte_array* input, ModdingAPI::Exposed::System::Byte_array* output) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*, ModdingAPI::Exposed::System::Byte_array*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE7F4B0))(this, input, output);
  }
  void CTS(ModdingAPI::Exposed::System::Byte_array* input, ModdingAPI::Exposed::System::Byte_array* output) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*, ModdingAPI::Exposed::System::Byte_array*, ModdingAPI::Exposed::System::Byte_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE7F510))(this, input, output);
  }
  void CheckInput(ModdingAPI::Exposed::System::Byte_array* inputBuffer, int32_t inputOffset, int32_t inputCount) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE7F570))(this, inputBuffer, inputOffset, inputCount);
  }
  int32_t TransformBlock(ModdingAPI::Exposed::System::Byte_array* inputBuffer, int32_t inputOffset, int32_t inputCount, ModdingAPI::Exposed::System::Byte_array* outputBuffer, int32_t outputOffset) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, ModdingAPI::Exposed::System::Byte_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE7F700))(this, inputBuffer, inputOffset, inputCount, outputBuffer, outputOffset);
  }
  bool get_KeepLastBlock() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE7F9E0))(this);
  }
  int32_t InternalTransformBlock(ModdingAPI::Exposed::System::Byte_array* inputBuffer, int32_t inputOffset, int32_t inputCount, ModdingAPI::Exposed::System::Byte_array* outputBuffer, int32_t outputOffset) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t, ModdingAPI::Exposed::System::Byte_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE7FA00))(this, inputBuffer, inputOffset, inputCount, outputBuffer, outputOffset);
  }
  void Random(ModdingAPI::Exposed::System::Byte_array* buffer, int32_t start, int32_t length) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE7FC20))(this, buffer, start, length);
  }
  void ThrowBadPaddingException(int32_t padding, int32_t length, int32_t position) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE7FD20))(this, padding, length, position);
  }
  ModdingAPI::Exposed::System::Byte_array* FinalEncrypt(ModdingAPI::Exposed::System::Byte_array* inputBuffer, int32_t inputOffset, int32_t inputCount) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE7FEE0))(this, inputBuffer, inputOffset, inputCount);
  }
  ModdingAPI::Exposed::System::Byte_array* FinalDecrypt(ModdingAPI::Exposed::System::Byte_array* inputBuffer, int32_t inputOffset, int32_t inputCount) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE802E0))(this, inputBuffer, inputOffset, inputCount);
  }
  ModdingAPI::Exposed::System::Byte_array* TransformFinalBlock(ModdingAPI::Exposed::System::Byte_array* inputBuffer, int32_t inputOffset, int32_t inputCount) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Byte_array*(__fastcall*)(ModdingAPI::Exposed::Mono::Security::Cryptography::SymmetricTransform*, ModdingAPI::Exposed::System::Byte_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xE80670))(this, inputBuffer, inputOffset, inputCount);
  }
};
}