// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.Pathfinding.Int3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed::Pathfinding {
struct __TriangleMeshNode_Il2CppStaticFields {
  ModdingAPI::Exposed::Pathfinding::INavmeshHolder_array* _navmeshHolders;
};

struct __TriangleMeshNode_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_UpdateRecursiveG;
  VirtualInvokeData _5_FloodFill;
  VirtualInvokeData _6_GetConnections;
  VirtualInvokeData _7_AddConnection;
  VirtualInvokeData _8_RemoveConnection;
  VirtualInvokeData _9_ClearConnections;
  VirtualInvokeData _10_ContainsConnection;
  VirtualInvokeData _11_RecalculateConnectionCosts;
  VirtualInvokeData _12_GetPortal;
  VirtualInvokeData _13_Open;
  VirtualInvokeData _14_SerializeNode;
  VirtualInvokeData _15_DeserializeNode;
  VirtualInvokeData _16_SerializeReferences;
  VirtualInvokeData _17_DeserializeReferences;
  VirtualInvokeData _18_GetVertex;
  VirtualInvokeData _19_GetVertexCount;
  VirtualInvokeData _20_ClosestPointOnNode;
  VirtualInvokeData _21_ClosestPointOnNodeXZ;
  VirtualInvokeData _22_ContainsPoint;
};

struct __TriangleMeshNode_Il2CppClass {
  Il2CppClass_1 _1;
  __TriangleMeshNode_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TriangleMeshNode_Il2CppVtbl vtbl;
};

class TriangleMeshNode {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C59878;
  static inline    __TriangleMeshNode_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __TriangleMeshNode_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__TriangleMeshNode_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __TriangleMeshNode_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t GraphNode_nodeIndex;
  uint32_t flags;
  uint32_t GraphNode_penalty;
  ModdingAPI::Exposed::Pathfinding::Int3 position;
  ModdingAPI::Exposed::Pathfinding::GraphNode_array* connections;
  ModdingAPI::Exposed::System::UInt32_array* connectionCosts;
  int32_t v0;
  int32_t v1;
  int32_t v2;

  // Member methods:
  void ::ctor(ModdingAPI::Exposed::AstarPath* astar) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*, ModdingAPI::Exposed::AstarPath*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24432F0))(this, astar);
  }
  void UpdatePositionFromVertices() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2443650))(this);
  }
  int32_t GetVertexIndex(int32_t i) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2443980))(this, i);
  }
  int32_t GetVertexArrayIndex(int32_t i) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24439A0))(this, i);
  }
  ModdingAPI::Exposed::Pathfinding::Int3 GetVertex(int32_t i) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::Int3(__fastcall*)(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2443A90))(this, i);
  }
  int32_t GetVertexCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x32CAF0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 ClosestPointOnNode(ModdingAPI::Exposed::UnityEngine::Vector3 p) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2443C00))(this, p);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 ClosestPointOnNodeXZ(ModdingAPI::Exposed::UnityEngine::Vector3 _p) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2444000))(this, _p);
  }
  bool ContainsPoint(ModdingAPI::Exposed::Pathfinding::Int3 p) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*, ModdingAPI::Exposed::Pathfinding::Int3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2444650))(this, p);
  }
  void UpdateRecursiveG(ModdingAPI::Exposed::Pathfinding::Path* path, ModdingAPI::Exposed::Pathfinding::PathNode* pathNode, ModdingAPI::Exposed::Pathfinding::PathHandler* handler) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*, ModdingAPI::Exposed::Pathfinding::Path*, ModdingAPI::Exposed::Pathfinding::PathNode*, ModdingAPI::Exposed::Pathfinding::PathHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24449D0))(this, path, pathNode, handler);
  }
  void Open(ModdingAPI::Exposed::Pathfinding::Path* path, ModdingAPI::Exposed::Pathfinding::PathNode* pathNode, ModdingAPI::Exposed::Pathfinding::PathHandler* handler) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*, ModdingAPI::Exposed::Pathfinding::Path*, ModdingAPI::Exposed::Pathfinding::PathNode*, ModdingAPI::Exposed::Pathfinding::PathHandler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2444B60))(this, path, pathNode, handler);
  }
  int32_t SharedEdge(ModdingAPI::Exposed::Pathfinding::GraphNode* other) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*, ModdingAPI::Exposed::Pathfinding::GraphNode*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2444E50))(this, other);
  }
  bool GetPortal(ModdingAPI::Exposed::Pathfinding::GraphNode* _other, ModdingAPI::Exposed::System::Collections::Generic::List_T_* left, ModdingAPI::Exposed::System::Collections::Generic::List_T_* right, bool backwards) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*, ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2444E90))(this, _other, left, right, backwards);
  }
  bool GetPortal(ModdingAPI::Exposed::Pathfinding::GraphNode* _other, ModdingAPI::Exposed::System::Collections::Generic::List_T_* left, ModdingAPI::Exposed::System::Collections::Generic::List_T_* right, bool backwards, int32_t aIndex, int32_t bIndex) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*, ModdingAPI::Exposed::Pathfinding::GraphNode*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, bool, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2444ED0))(this, _other, left, right, backwards, aIndex, bIndex);
  }
  void SerializeNode(ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext* ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*, ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2445D20))(this, ctx);
  }
  void DeserializeNode(ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext* ctx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::TriangleMeshNode*, ModdingAPI::Exposed::Pathfinding::Serialization::GraphSerializationContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2445DC0))(this, ctx);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::Pathfinding::INavmeshHolder_array*> _navmeshHolders = __CppStaticProperty<ModdingAPI::Exposed::Pathfinding::INavmeshHolder_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->_navmeshHolders; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::Pathfinding::INavmeshHolder* GetNavmeshHolder(uint32_t graphIndex) {
    return reinterpret_cast<ModdingAPI::Exposed::Pathfinding::INavmeshHolder*(__fastcall*)(uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2443300))(graphIndex);
  }
  static inline void SetNavmeshHolder(int32_t graphIndex, ModdingAPI::Exposed::Pathfinding::INavmeshHolder* graph) {
    reinterpret_cast<void(__fastcall*)(int32_t, ModdingAPI::Exposed::Pathfinding::INavmeshHolder*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x24433D0))(graphIndex, graph);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2445E60))();
  }
};
}