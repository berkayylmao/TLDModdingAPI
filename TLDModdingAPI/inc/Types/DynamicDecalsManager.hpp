// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector4.hpp"


namespace ModdingAPI::Exposed {
struct __DynamicDecalsManager_Il2CppStaticFields {
};

struct __DynamicDecalsManager_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __DynamicDecalsManager_Il2CppClass {
  Il2CppClass_1 _1;
  __DynamicDecalsManager_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __DynamicDecalsManager_Il2CppVtbl vtbl;
};

class DynamicDecalsManager {
public:
  // Il2Cpp fields:
  __DynamicDecalsManager_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  int32_t m_MaxDynamicDecals;
  int32_t m_PoolSizeIncrement;
  float m_PlayerDecalsLifeTimeHours;
  float m_PlayerDecalsLifeTimeInHighWindsHours;
  float m_PlayerDecalsLifeTimeInHeavySnowHours;
  float m_PlayerDecalsLifeTimeInBlizzardHours;
  float m_NPCDecalsLifeTimeHours;
  float m_NPCDecalsLifeTimeInHighWindsHours;
  float m_NPCDecalsLifeTimeInHeavySnowHours;
  float m_NPCDecalsLifeTimeInBlizzardHours;
  float m_FadeTimeSeconds;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_StaticDecalAtlasUvList;
  ModdingAPI::Exposed::UnityEngine::Mesh* m_CubeMesh;
  ModdingAPI::Exposed::UnityEngine::Material* m_StandardMaterial;
  ModdingAPI::Exposed::ImpactDecals* m_ImpactDecals;
  ModdingAPI::Exposed::DecalVariant_array* m_DecalVariants;
  ModdingAPI::Exposed::DecalQualitySettings* m_LowQualitySettings;
  ModdingAPI::Exposed::DecalQualitySettings* m_MediumQualitySettings;
  ModdingAPI::Exposed::DecalQualitySettings* m_HighQualitySettings;
  ModdingAPI::Exposed::DecalQualitySettings* m_UltraQualitySettings;
  ModdingAPI::Exposed::DecalQualitySettings* m_XboxQualitySettings;
  ModdingAPI::Exposed::DecalQualitySettings* m_PS4QualitySettings;
  ModdingAPI::Exposed::UvList* m_AtlasUvInfo;
  bool m_EnableInstancedRendering;
  ModdingAPI::Exposed::UnityEngine::Camera* m_CommandBufferCamera;
  ModdingAPI::Exposed::UnityEngine::Rendering::CommandBuffer* m_MainCamCommandBuffer;
  int32_t m_NormalsId;
  int32_t m_MainTexUvId;
  int32_t m_FadeId;
  ModdingAPI::Exposed::UnityEngine::Rendering::RenderTargetIdentifier_array* m_RenderTargetIdentifiers;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_DynamicDecalProjectors;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_FadingDecalProjectors;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_CullList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Pool_DecalProjectorInstances;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_StaticDecals;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_StaticDecalPropertyBlocks;
  bool m_IsStaticDecalsListDirty;
  ModdingAPI::Exposed::DecalQualitySettings* m_CurrentQualitySettings;
  int32_t m_RenderedDecalCount;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEA340))(this);
  }
  void PrepareCommandBuffer(ModdingAPI::Exposed::UnityEngine::Camera* camera) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*, ModdingAPI::Exposed::UnityEngine::Camera*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEA580))(this, camera);
  }
  void AddImpactDecal(int32_t projectileType, int32_t impactEffectType, ModdingAPI::Exposed::UnityEngine::Vector3 postion, ModdingAPI::Exposed::UnityEngine::Vector3 forward) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*, int32_t, int32_t, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEAE50))(this, projectileType, impactEffectType, postion, forward);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEAF80))(this);
  }
  void OnDestroy() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEB040))(this);
  }
  bool TryGetStaticDecalUvs(System_String* textureName, ModdingAPI::Exposed::UnityEngine::Vector4 coordinates) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*, System_String*, ModdingAPI::Exposed::UnityEngine::Vector4)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEB6C0))(this, textureName, coordinates);
  }
  void ClearAllDecals() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEBD10))(this);
  }
  ModdingAPI::Exposed::DecalProjectorInstance* CreateCustomDecal(System_String* decalName, ModdingAPI::Exposed::UnityEngine::Vector3 pos, float yaw, ModdingAPI::Exposed::UnityEngine::Vector3 normal, ModdingAPI::Exposed::UnityEngine::Vector3 scale, int32_t projectorType, bool indoors) {
    return reinterpret_cast<ModdingAPI::Exposed::DecalProjectorInstance*(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*, System_String*, ModdingAPI::Exposed::UnityEngine::Vector3, float, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEBDF0))(this, decalName, pos, yaw, normal, scale, projectorType, indoors);
  }
  ModdingAPI::Exposed::DecalProjectorInstance* CreateDecal(ModdingAPI::Exposed::UnityEngine::Vector3 pos, float yaw, ModdingAPI::Exposed::UnityEngine::Vector3 normal, int32_t uvRectangleIndex, ModdingAPI::Exposed::UnityEngine::Vector3 scale, int32_t projectorType, bool indoors) {
    return reinterpret_cast<ModdingAPI::Exposed::DecalProjectorInstance*(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*, ModdingAPI::Exposed::UnityEngine::Vector3, float, ModdingAPI::Exposed::UnityEngine::Vector3, int32_t, ModdingAPI::Exposed::UnityEngine::Vector3, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEBFD0))(this, pos, yaw, normal, uvRectangleIndex, scale, projectorType, indoors);
  }
  void AddStaticDecal(ModdingAPI::Exposed::StaticDecal* decal) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*, ModdingAPI::Exposed::StaticDecal*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEC200))(this, decal);
  }
  void RemoveStaticDecal(ModdingAPI::Exposed::StaticDecal* decal) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*, ModdingAPI::Exposed::StaticDecal*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEC2B0))(this, decal);
  }
  int32_t LookupUVRectangleIndex(System_String* name) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEC360))(this, name);
  }
  bool CanCreateFootPrintsOnMaterial(System_String* materialTag) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEC440))(this, materialTag);
  }
  void UpdateDecalProjectorLifeTimes() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEC4F0))(this);
  }
  float ComputeDecalProjectorLifeTime(int32_t projectorType, bool indoors) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEC600))(this, projectorType, indoors);
  }
  void RemoveOldestDecal() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEC8A0))(this);
  }
  void FadeDecal(int32_t decalIdx) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEC940))(this, decalIdx);
  }
  void InstantiateDecalProjectorInstances(int32_t n) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FECA50))(this, n);
  }
  int32_t GetDecalCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FECBD0))(this);
  }
  ModdingAPI::Exposed::DecalProjectorInstance* GetDecalProjectorInstanceFromPool() {
    return reinterpret_cast<ModdingAPI::Exposed::DecalProjectorInstance*(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FECC80))(this);
  }
  void ReturnDecalProjectorInstanceToPool(ModdingAPI::Exposed::DecalProjectorInstance* dpi) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*, ModdingAPI::Exposed::DecalProjectorInstance*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FECE60))(this, dpi);
  }
  void InitializeScreenSpaceDecals() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FECF50))(this);
  }
  int32_t RenderDynamicScreenSpaceDecals(ModdingAPI::Exposed::UnityEngine::Camera* camera, ModdingAPI::Exposed::System::Collections::Generic::List_T_* instances, int32_t renderedDecalCount) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*, ModdingAPI::Exposed::UnityEngine::Camera*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FED0C0))(this, camera, instances, renderedDecalCount);
  }
  int32_t RenderStaticScreenSpaceDecals(ModdingAPI::Exposed::UnityEngine::Camera* camera, ModdingAPI::Exposed::System::Collections::Generic::List_T_* instances, int32_t renderedDecalCount) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*, ModdingAPI::Exposed::UnityEngine::Camera*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEDD60))(this, camera, instances, renderedDecalCount);
  }
  void OnQualityChange(int32_t quality) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEF500))(this, quality);
  }
  void InitializeCommandBuffer() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEF590))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DynamicDecalsManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEF7F0))(this);
  }

  // Static methods:
  static inline System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEB1D0))();
  }
  static inline void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FEB8E0))(text);
  }
  static inline bool ShouldSaveDynamicDecal(ModdingAPI::Exposed::DecalProjectorInstance* dpi) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DecalProjectorInstance*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1FECF20))(dpi);
  }
};
}