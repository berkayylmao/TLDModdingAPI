// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.SceneManagement.Scene.hpp"
#include "ModdingAPI::Exposed::UnityEngine::SceneManagement::LoadSceneParameters.hpp"
#include "ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene.hpp"


namespace ModdingAPI::Exposed::UnityEngine::SceneManagement {
struct __SceneManager_Il2CppStaticFields {
  ModdingAPI::Exposed::UnityEngine::Events::UnityAction_T0__T1_* sceneLoaded;
  ModdingAPI::Exposed::UnityEngine::Events::UnityAction_T0_* sceneUnloaded;
  ModdingAPI::Exposed::UnityEngine::Events::UnityAction_T0__T1_* activeSceneChanged;
};

struct __SceneManager_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SceneManager_Il2CppClass {
  Il2CppClass_1 _1;
  __SceneManager_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SceneManager_Il2CppVtbl vtbl;
};

class SceneManager {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C4D790;
  static inline    __SceneManager_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __SceneManager_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__SceneManager_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __SceneManager_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Events::UnityAction_T0__T1_*> sceneLoaded = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Events::UnityAction_T0__T1_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->sceneLoaded; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Events::UnityAction_T0_*> sceneUnloaded = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Events::UnityAction_T0_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->sceneUnloaded; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Events::UnityAction_T0__T1_*> activeSceneChanged = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Events::UnityAction_T0__T1_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->activeSceneChanged; }
  );

  // Static methods:
  static inline int32_t get_sceneCount() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A91B0))();
  }
  static inline ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene GetActiveScene() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9200))();
  }
  static inline ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene GetSceneByName(System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9260))(name);
  }
  static inline ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene GetSceneAt(int32_t index) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A92D0))(index);
  }
  static inline ModdingAPI::Exposed::UnityEngine::AsyncOperation* LoadSceneAsyncNameIndexInternal(System_String* sceneName, int32_t sceneBuildIndex, ModdingAPI::Exposed::UnityEngine::SceneManagement::LoadSceneParameters parameters, bool mustCompleteNextFrame) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::AsyncOperation*(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::UnityEngine::SceneManagement::LoadSceneParameters, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9330))(sceneName, sceneBuildIndex, parameters, mustCompleteNextFrame);
  }
  static inline ModdingAPI::Exposed::UnityEngine::AsyncOperation* UnloadSceneNameIndexInternal(System_String* sceneName, int32_t sceneBuildIndex, bool immediately, int32_t options, bool outSuccess) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::AsyncOperation*(__fastcall*)(System_String*, int32_t, bool, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A93B0))(sceneName, sceneBuildIndex, immediately, options, outSuccess);
  }
  static inline void add_sceneLoaded(ModdingAPI::Exposed::UnityEngine::Events::UnityAction_T0__T1_* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Events::UnityAction_T0__T1_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9440))(value);
  }
  static inline void remove_sceneLoaded(ModdingAPI::Exposed::UnityEngine::Events::UnityAction_T0__T1_* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Events::UnityAction_T0__T1_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9540))(value);
  }
  static inline void LoadScene(System_String* sceneName, int32_t mode) {
    reinterpret_cast<void(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9640))(sceneName, mode);
  }
  static inline void LoadScene(System_String* sceneName) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9660))(sceneName);
  }
  static inline ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene LoadScene(System_String* sceneName, ModdingAPI::Exposed::UnityEngine::SceneManagement::LoadSceneParameters parameters) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene(__fastcall*)(System_String*, ModdingAPI::Exposed::UnityEngine::SceneManagement::LoadSceneParameters)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9680))(sceneName, parameters);
  }
  static inline void LoadScene(int32_t sceneBuildIndex, int32_t mode) {
    reinterpret_cast<void(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9780))(sceneBuildIndex, mode);
  }
  static inline ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene LoadScene(int32_t sceneBuildIndex, ModdingAPI::Exposed::UnityEngine::SceneManagement::LoadSceneParameters parameters) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene(__fastcall*)(int32_t, ModdingAPI::Exposed::UnityEngine::SceneManagement::LoadSceneParameters)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9880))(sceneBuildIndex, parameters);
  }
  static inline ModdingAPI::Exposed::UnityEngine::AsyncOperation* LoadSceneAsync(int32_t sceneBuildIndex, int32_t mode) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::AsyncOperation*(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9970))(sceneBuildIndex, mode);
  }
  static inline ModdingAPI::Exposed::UnityEngine::AsyncOperation* LoadSceneAsync(int32_t sceneBuildIndex, ModdingAPI::Exposed::UnityEngine::SceneManagement::LoadSceneParameters parameters) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::AsyncOperation*(__fastcall*)(int32_t, ModdingAPI::Exposed::UnityEngine::SceneManagement::LoadSceneParameters)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A99E0))(sceneBuildIndex, parameters);
  }
  static inline ModdingAPI::Exposed::UnityEngine::AsyncOperation* LoadSceneAsync(System_String* sceneName, int32_t mode) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::AsyncOperation*(__fastcall*)(System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9A40))(sceneName, mode);
  }
  static inline ModdingAPI::Exposed::UnityEngine::AsyncOperation* LoadSceneAsync(System_String* sceneName) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::AsyncOperation*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9AC0))(sceneName);
  }
  static inline ModdingAPI::Exposed::UnityEngine::AsyncOperation* LoadSceneAsync(System_String* sceneName, ModdingAPI::Exposed::UnityEngine::SceneManagement::LoadSceneParameters parameters) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::AsyncOperation*(__fastcall*)(System_String*, ModdingAPI::Exposed::UnityEngine::SceneManagement::LoadSceneParameters)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9B30))(sceneName, parameters);
  }
  static inline ModdingAPI::Exposed::UnityEngine::AsyncOperation* UnloadSceneAsync(System_String* sceneName) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::AsyncOperation*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9BA0))(sceneName);
  }
  static inline void Internal_SceneLoaded(ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene scene, int32_t mode) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9C10))(scene, mode);
  }
  static inline void Internal_SceneUnloaded(ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene scene) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9CC0))(scene);
  }
  static inline void Internal_ActiveSceneChanged(ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene previousActiveScene, ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene newActiveScene) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene, ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9D60))(previousActiveScene, newActiveScene);
  }
  static inline void GetActiveScene_Injected(ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene ret) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9E10))(ret);
  }
  static inline void GetSceneByName_Injected(System_String* name, ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene ret) {
    reinterpret_cast<void(__fastcall*)(System_String*, ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9E60))(name, ret);
  }
  static inline void GetSceneAt_Injected(int32_t index, ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene ret) {
    reinterpret_cast<void(__fastcall*)(int32_t, ModdingAPI::Exposed::UnityEngine::SceneManagement::Scene)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9EC0))(index, ret);
  }
  static inline ModdingAPI::Exposed::UnityEngine::AsyncOperation* LoadSceneAsyncNameIndexInternal_Injected(System_String* sceneName, int32_t sceneBuildIndex, ModdingAPI::Exposed::UnityEngine::SceneManagement::LoadSceneParameters parameters, bool mustCompleteNextFrame) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::AsyncOperation*(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::UnityEngine::SceneManagement::LoadSceneParameters, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10A9F20))(sceneName, sceneBuildIndex, parameters, mustCompleteNextFrame);
  }
};
}