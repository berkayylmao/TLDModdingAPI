// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.DarkLightingManager.GlowObjectDef.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __DarkLightingManager_Il2CppStaticFields {
  int32_t EmissiveStrength;
  int32_t SkyEmissive;
  int32_t StarsEmissive;
  int32_t TodBlend;
  float oneThird;
};

struct __DarkLightingManager_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __DarkLightingManager_Il2CppClass {
  Il2CppClass_1 _1;
  __DarkLightingManager_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __DarkLightingManager_Il2CppVtbl vtbl;
};

class DarkLightingManager {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C67EA8;
  static inline    __DarkLightingManager_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __DarkLightingManager_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__DarkLightingManager_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __DarkLightingManager_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  bool m_ForceClearWeather;
  bool m_ManualLighting;
  float m_TimeOfDay;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ConstantLights;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_ColourizedLights;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_NightLights;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Particles;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_Lightshafts;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_GlowObjects;
  ModdingAPI::Exposed::UnityEngine::MeshRenderer* m_FakeSky;
  float m_GlowColorization;
  float m_LightColorization;
  float m_AuroraColorization;
  float m_AuroraRed;
  float m_AuroraGreen;
  float m_AuroraBlue;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_NonTodLights;
  float m_UltraDistance;
  float m_HighDistance;
  float m_MediumDistance;
  float m_LowDistance;
  float m_FadePercentage;
  ModdingAPI::Exposed::TodAmbientLight* m_AmbientLight;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_ConstantLightList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_ColouredLightList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_NightLightList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_NonTodLightList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_ParticleList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_GlowObjectList;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_LightShaftList;
  ModdingAPI::Exposed::DarkLightingManager::GlowObjectDef m_FakeSkyMat;
  ModdingAPI::Exposed::UnityEngine::Color m_SunColour;
  float m_SunIntensity;
  float m_SunAverage;
  float m_TodIntensity;
  float m_AuroraFade;
  float m_StarAlpha;
  float m_MaxDistSqr;
  float m_FadeDistSqr;
  ModdingAPI::Exposed::ScaledCurve* m_DawnMorning;
  ModdingAPI::Exposed::ScaledCurve* m_MorningMidday;
  ModdingAPI::Exposed::ScaledCurve* m_MiddayAfternoon;
  ModdingAPI::Exposed::ScaledCurve* m_AfternoonDusk;
  int32_t m_CurPhase;
  int32_t m_CachedQuality;
  bool m_Initialized;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F6FCA0))(this);
  }
  void FindAmbientLighting() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F6FEB0))(this);
  }
  void FindConstantLights() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F6FFC0))(this);
  }
  void FindColourizedLights() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F706E0))(this);
  }
  void FindNightLights() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F70DB0))(this);
  }
  void FindOtherLights() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F71480))(this);
  }
  void FindParticles() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F71B90))(this);
  }
  void FindGlowObjects() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F72130))(this);
  }
  void FindGimbleObjects() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F72A30))(this);
  }
  void UpdateQualityValues() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F72D50))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F72DD0))(this);
  }
  void UpdateIntensities() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F732C0))(this);
  }
  void UpdateAmbient() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F736F0))(this);
  }
  void UpdateConstantLights() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F737D0))(this);
  }
  void UpdateLightmaps() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F73CF0))(this);
  }
  void UpdateColouredLights() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F73EC0))(this);
  }
  void UpdateNightLights() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F74720))(this);
  }
  void UpdateNonTodLights() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F74C10))(this);
  }
  void UpdateGlowObjects() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F75100))(this);
  }
  void UpdateGimbles() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F75770))(this);
  }
  void UpdateParticles() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F75960))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Color GetAuroraColours() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F75AE0))(this);
  }
  float GetSunAverage(ModdingAPI::Exposed::UnityEngine::Color col, float lum) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*, ModdingAPI::Exposed::UnityEngine::Color, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F75C30))(this, col, lum);
  }
  float GetTimeOfDayIntensity() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F75D10))(this);
  }
  float NormalizedTod() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F75EE0))(this);
  }
  float DistanceToPlayer(ModdingAPI::Exposed::UnityEngine::Vector3 localPos, ModdingAPI::Exposed::UnityEngine::Vector3 camPos) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x18E73B0))(this, localPos, camPos);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DarkLightingManager*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F75EF0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<int32_t> EmissiveStrength = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->EmissiveStrength; }
  );
  static inline __CppStaticProperty<int32_t> SkyEmissive = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->SkyEmissive; }
  );
  static inline __CppStaticProperty<int32_t> StarsEmissive = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->StarsEmissive; }
  );
  static inline __CppStaticProperty<int32_t> TodBlend = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->TodBlend; }
  );
  static inline __CppStaticProperty<float> oneThird = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->oneThird; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1F763C0))();
  }
};
}