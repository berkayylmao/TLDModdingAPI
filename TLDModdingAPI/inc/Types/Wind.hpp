// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"


namespace ModdingAPI::Exposed {
struct __Wind_Il2CppStaticFields {
  ModdingAPI::Exposed::WindSaveDataProxy* m_WindSaveDataProxy;
};

struct __Wind_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Wind_Il2CppClass {
  Il2CppClass_1 _1;
  __Wind_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Wind_Il2CppVtbl vtbl;
};

class Wind {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C63F60;
  static inline    __Wind_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Wind_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Wind_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Wind_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::WindSettings_array* m_WindSettings;
  float m_MaxWindMPH;
  float m_HoursBetweenWindChangeMin;
  float m_HoursBetweenWindChangeMax;
  float m_HoursForTransitionMin;
  float m_HoursForTransitionMax;
  float m_Gust_NoiseStepSpeed;
  float m_Gust_NoiseOctave2StepScalar;
  float m_Gust_NoiseOctave2ResultScalar;
  float m_LateralBluster_Limit;
  float m_LateralBluster_NoiseStepSpeed;
  float m_LateralBluster_NoiseOctave2StepScalar;
  float m_LateralBluster_NoiseOctave2ResultScalar;
  float m_VerticalBluster_Limit;
  float m_VerticalBluster_NoiseStepSpeed;
  float m_VerticalBluster_NoiseOctave2StepScalar;
  float m_VerticalBluster_NoiseOctave2ResultScalar;
  ModdingAPI::Exposed::ActiveWindSettings* m_ActiveSettings;
  ModdingAPI::Exposed::ActiveWindSettings* m_SourceSettings;
  ModdingAPI::Exposed::ActiveWindSettings* m_TargetSettings;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_Gust_NoisePos1;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_Gust_NoiseStepVector1;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_Gust_NoisePos2;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_Gust_NoiseStepVector2;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_LateralBluster_NoisePos1;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_LateralBluster_NoiseStepVector1;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_LateralBluster_NoisePos2;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_LateralBluster_NoiseStepVector2;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_VerticalBluster_NoisePos1;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_VerticalBluster_NoiseStepVector1;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_VerticalBluster_NoisePos2;
  ModdingAPI::Exposed::UnityEngine::Vector2 m_VerticalBluster_NoiseStepVector2;
  int32_t m_CurrentStrength;
  float m_CurrentMPH_Base;
  float m_CurrentAngleDeg_Base;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_CurrentDirection_Base;
  float m_CurrentMPH;
  float m_CurrentAngleDeg;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_CurrentDirection;
  float m_CurrentPitch;
  float m_LateralBluster;
  float m_VerticalBluster;
  float m_GustScalar;
  float m_GustScalarAdjusted;
  float m_TransitionTimeTODSeconds;
  float m_PhaseElapsedTODSeconds;
  float m_PhaseDurationHours;
  float m_BaseWindChill;
  float m_WindChill;
  ModdingAPI::Exposed::UnityEngine::ParticleSystem* m_LightSnowParticleSystem;
  ModdingAPI::Exposed::UnityEngine::ParticleSystem* m_HeavySnowParticleSystem;
  ModdingAPI::Exposed::UnityEngine::WindZone* m_WindZone;
  ModdingAPI::Exposed::UnityEngine::Transform* m_WindZoneTransform;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_WindKillers;
  float m_LastWindIntensityBlendSentToWise;
  float m_LastWindActualSpeedSentToWise;
  float m_LastWindGustStrengthSentToWise;
  float m_LastPlayerWindAngleSentToWise;
  float m_LockedWindSpeed;
  bool m_NeverCalmWind;
  bool m_StartHasBeenCalled;
  uint32_t m_WindLoopAudioInstance;
  bool m_WindAudioForceStopped;
  float m_ArtificalWindSpeedIncrease;
  float m_OcclusionTestRange;
  float m_OcclusionTestFOV;
  float m_OcclusionReduceWindchillPercent;
  int32_t m_OcclusionAudioLevel;
  bool m_PlayerOccluded;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_LastTestPosition;

  // Member methods:
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D386F0))(this);
  }
  void ResetNoise() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D38940))(this);
  }
  void UpdateNoise() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D38E20))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D393A0))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D39A00))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D39DE0))(this, text);
  }
  void StartRandomPhase(bool forceCalm) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D39FE0))(this, forceCalm);
  }
  void StartPhase(int32_t direction, int32_t strength) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3A170))(this, direction, strength);
  }
  void StartPhase(int32_t strength, float angle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3A230))(this, strength, angle);
  }
  void StartPhaseImmediate(int32_t direction, int32_t strength) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3A820))(this, direction, strength);
  }
  void StartPhaseImmediate(int32_t strength, float angle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3A8E0))(this, strength, angle);
  }
  void ForceStopAudioLoop() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3A9C0))(this);
  }
  void AddArtificialWindSpeedIncrease(float increase) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3AB00))(this, increase);
  }
  int32_t GetStrength() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x5EFC30))(this);
  }
  float GetNormalizedIntensity() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3AB20))(this);
  }
  float GetSpeedMPH_Base() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1AA8550))(this);
  }
  float GetSpeedMPH() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3AB30))(this);
  }
  float GetTargetSpeedMPH() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3AB40))(this);
  }
  float GetWindAngle_Base() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7D9B20))(this);
  }
  float GetWindAngle() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3AB60))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetWindDirection_Base() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3AB70))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 GetWindDirection() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3AB90))(this);
  }
  float GetWindLift() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3ABB0))(this);
  }
  float GetBaseWindChill() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA071F0))(this);
  }
  float GetWindChill() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3AC80))(this);
  }
  void ForceImmediateWindChangeBasedOnWeather(int32_t ws) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3AC90))(this, ws);
  }
  bool TooWindyForPlayerAction(float thresholdSpeedMPH) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Wind*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3AD00))(this, thresholdSpeedMPH);
  }
  void AddWindKiller(ModdingAPI::Exposed::WindKiller* wk) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*, ModdingAPI::Exposed::WindKiller*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3ADE0))(this, wk);
  }
  float GetPlayerWindAngle() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3AEB0))(this);
  }
  void MaybeChangePhase() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3AEC0))(this);
  }
  void RefreshSettings() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3B0D0))(this);
  }
  void UpdateWindZone() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3B890))(this);
  }
  void UpdateUniStormParticleSystems() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3BB00))(this);
  }
  void UpdateWindChill() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3BCB0))(this);
  }
  float CalculateWindChill(float airTempCelsius) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Wind*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3BE90))(this, airTempCelsius);
  }
  int32_t GetStrengthFromSpeed(float normalizedSpeed, ModdingAPI::Exposed::WindSettings* ws) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Wind*, float, ModdingAPI::Exposed::WindSettings*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3C280))(this, normalizedSpeed, ws);
  }
  void SetWindAccelerationForAllInteractiveCloth() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3C330))(this);
  }
  void UpdateProceduralWind() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3C670))(this);
  }
  float GetWindAngleRelativeToPlayer() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3CC70))(this);
  }
  void ApplySceneOverrides(ModdingAPI::Exposed::SceneWeatherOverride* swo) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*, ModdingAPI::Exposed::SceneWeatherOverride*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3CE20))(this, swo);
  }
  void LockWindInstant(float mph) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3CFD0))(this, mph);
  }
  uint32_t PlayProceduralWindAudio() {
    return reinterpret_cast<uint32_t(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3CFE0))(this);
  }
  bool PlayerShelteredFromWind() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3D820))(this);
  }
  bool IsPositionOccludedFromWind(ModdingAPI::Exposed::UnityEngine::Vector3 pos) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Wind*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3D830))(this, pos);
  }
  bool ShouldIgnoreWindOccluder(ModdingAPI::Exposed::UnityEngine::Collider* collider) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Wind*, ModdingAPI::Exposed::UnityEngine::Collider*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3DF30))(this, collider);
  }
  void UpdateWindOcclusion() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3E0C0))(this);
  }
  bool PointInsideWindKiller(ModdingAPI::Exposed::UnityEngine::Vector3 pos) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Wind*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3E410))(this, pos);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Wind*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3E530))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::WindSaveDataProxy*> m_WindSaveDataProxy = __CppStaticProperty<ModdingAPI::Exposed::WindSaveDataProxy*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_WindSaveDataProxy; }
  );

  // Static methods:
  static inline float DirectionToAngle(int32_t direction) {
    return reinterpret_cast<float(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3AA80))(direction);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D3E690))();
  }
};
}