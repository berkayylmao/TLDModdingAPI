// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.Steamworks.SteamAPICall_t.hpp"
#include "ModdingAPI::Exposed::Steamworks::HHTMLBrowser.hpp"


namespace ModdingAPI::Exposed::Steamworks {
struct __SteamHTMLSurface_Il2CppStaticFields {
};

struct __SteamHTMLSurface_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SteamHTMLSurface_Il2CppClass {
  Il2CppClass_1 _1;
  __SteamHTMLSurface_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SteamHTMLSurface_Il2CppVtbl vtbl;
};

class SteamHTMLSurface {
public:
  // Il2Cpp fields:
  __SteamHTMLSurface_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline bool Init() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2803040))();
  }
  static inline bool Shutdown() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x28030F0))();
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t CreateBrowser(System_String* pchUserAgent, System_String* pchUserCSS) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28031A0))(pchUserAgent, pchUserCSS);
  }
  static inline void RemoveBrowser(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2803610))(unBrowserHandle);
  }
  static inline void LoadURL(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, System_String* pchURL, System_String* pchPostData) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28036C0))(unBrowserHandle, pchURL, pchPostData);
  }
  static inline void SetSize(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, uint32_t unWidth, uint32_t unHeight) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, uint32_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2803B10))(unBrowserHandle, unWidth, unHeight);
  }
  static inline void StopLoad(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2803BE0))(unBrowserHandle);
  }
  static inline void Reload(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2803C90))(unBrowserHandle);
  }
  static inline void GoBack(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2803D40))(unBrowserHandle);
  }
  static inline void GoForward(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2803DF0))(unBrowserHandle);
  }
  static inline void AddHeader(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, System_String* pchKey, System_String* pchValue) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2803EA0))(unBrowserHandle, pchKey, pchValue);
  }
  static inline void ExecuteJavascript(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, System_String* pchScript) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28042F0))(unBrowserHandle, pchScript);
  }
  static inline void MouseUp(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, int32_t eMouseButton) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28045C0))(unBrowserHandle, eMouseButton);
  }
  static inline void MouseDown(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, int32_t eMouseButton) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2804680))(unBrowserHandle, eMouseButton);
  }
  static inline void MouseDoubleClick(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, int32_t eMouseButton) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2804740))(unBrowserHandle, eMouseButton);
  }
  static inline void MouseMove(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, int32_t x, int32_t y) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2804800))(unBrowserHandle, x, y);
  }
  static inline void MouseWheel(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, int32_t nDelta) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28048D0))(unBrowserHandle, nDelta);
  }
  static inline void KeyDown(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, uint32_t nNativeKeyCode, int32_t eHTMLKeyModifiers, bool bIsSystemKey) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, uint32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2804990))(unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers, bIsSystemKey);
  }
  static inline void KeyUp(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, uint32_t nNativeKeyCode, int32_t eHTMLKeyModifiers) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, uint32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2804A80))(unBrowserHandle, nNativeKeyCode, eHTMLKeyModifiers);
  }
  static inline void KeyChar(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, uint32_t cUnicodeChar, int32_t eHTMLKeyModifiers) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, uint32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2804B50))(unBrowserHandle, cUnicodeChar, eHTMLKeyModifiers);
  }
  static inline void SetHorizontalScroll(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, uint32_t nAbsolutePixelScroll) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2804C20))(unBrowserHandle, nAbsolutePixelScroll);
  }
  static inline void SetVerticalScroll(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, uint32_t nAbsolutePixelScroll) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2804CE0))(unBrowserHandle, nAbsolutePixelScroll);
  }
  static inline void SetKeyFocus(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, bool bHasKeyFocus) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2804DA0))(unBrowserHandle, bHasKeyFocus);
  }
  static inline void ViewSource(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2804E70))(unBrowserHandle);
  }
  static inline void CopyToClipboard(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2804F20))(unBrowserHandle);
  }
  static inline void PasteFromClipboard(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2804FD0))(unBrowserHandle);
  }
  static inline void Find(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, System_String* pchSearchStr, bool bCurrentlyInFind, bool bReverse) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, System_String*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2805080))(unBrowserHandle, pchSearchStr, bCurrentlyInFind, bReverse);
  }
  static inline void StopFind(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2805360))(unBrowserHandle);
  }
  static inline void GetLinkAtPosition(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, int32_t x, int32_t y) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2805410))(unBrowserHandle, x, y);
  }
  static inline void SetCookie(System_String* pchHostname, System_String* pchKey, System_String* pchValue, System_String* pchPath, uint32_t nExpires, bool bSecure, bool bHTTPOnly) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*, System_String*, System_String*, uint32_t, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x28054E0))(pchHostname, pchKey, pchValue, pchPath, nExpires, bSecure, bHTTPOnly);
  }
  static inline void SetPageScaleFactor(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, float flZoom, int32_t nPointX, int32_t nPointY) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, float, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2805AA0))(unBrowserHandle, flZoom, nPointX, nPointY);
  }
  static inline void SetBackgroundMode(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, bool bBackgroundMode) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2805B90))(unBrowserHandle, bBackgroundMode);
  }
  static inline void SetDPIScalingFactor(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, float flDPIScaling) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2805C60))(unBrowserHandle, flDPIScaling);
  }
  static inline void OpenDeveloperTools(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2805D20))(unBrowserHandle);
  }
  static inline void AllowStartRequest(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, bool bAllowed) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2805DD0))(unBrowserHandle, bAllowed);
  }
  static inline void JSDialogResponse(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, bool bResult) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2805EA0))(unBrowserHandle, bResult);
  }
  static inline void FileLoadDialogResponse(ModdingAPI::Exposed::Steamworks::HHTMLBrowser unBrowserHandle, intptr_t pchSelectedFiles) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::HHTMLBrowser, intptr_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2805F70))(unBrowserHandle, pchSelectedFiles);
  }
};
}