// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Bounds.hpp"
#include "ModdingAPI.Exposed.UnityEngine.ContactFilter2D.hpp"
#include "ModdingAPI.Exposed.UnityEngine.ColliderDistance2D.hpp"


namespace ModdingAPI::Exposed::UnityEngine {
struct __Collider2D_Il2CppStaticFields {
};

struct __Collider2D_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Collider2D_Il2CppClass {
  Il2CppClass_1 _1;
  __Collider2D_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Collider2D_Il2CppVtbl vtbl;
};

class Collider2D {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C7D298;
  static inline    Collider2D* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C2AB00;
  static inline    __Collider2D_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline Collider2D* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (Collider2D**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __Collider2D_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Collider2D_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Collider2D_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }
  float get_density() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540840))(this);
  }
  void set_density(float value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540890))(this, value);
  }
  bool get_isTrigger() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15408F0))(this);
  }
  void set_isTrigger(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540940))(this, value);
  }
  bool get_usedByEffector() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15409A0))(this);
  }
  void set_usedByEffector(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15409F0))(this, value);
  }
  bool get_usedByComposite() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540A50))(this);
  }
  void set_usedByComposite(bool value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540AA0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::CompositeCollider2D* get_composite() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::CompositeCollider2D*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540B00))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector2 get_offset() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540B50))(this);
  }
  void set_offset(ModdingAPI::Exposed::UnityEngine::Vector2 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540BC0))(this, value);
  }
  ModdingAPI::Exposed::UnityEngine::Rigidbody2D* get_attachedRigidbody() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Rigidbody2D*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540C20))(this);
  }
  int32_t get_shapeCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540C70))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Bounds get_bounds() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Bounds(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540CC0))(this);
  }
  int32_t get_errorState() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540D50))(this);
  }
  bool get_compositeCapable() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540DA0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::PhysicsMaterial2D* get_sharedMaterial() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::PhysicsMaterial2D*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540DF0))(this);
  }
  void set_sharedMaterial(ModdingAPI::Exposed::UnityEngine::PhysicsMaterial2D* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::PhysicsMaterial2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540E40))(this, value);
  }
  float get_friction() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540EA0))(this);
  }
  float get_bounciness() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540EF0))(this);
  }
  bool IsTouching(ModdingAPI::Exposed::UnityEngine::Collider2D* collider) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Collider2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540F40))(this, collider);
  }
  bool IsTouching(ModdingAPI::Exposed::UnityEngine::Collider2D* collider, ModdingAPI::Exposed::UnityEngine::ContactFilter2D contactFilter) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::ContactFilter2D)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1540FA0))(this, collider, contactFilter);
  }
  bool IsTouching_OtherColliderWithFilter(ModdingAPI::Exposed::UnityEngine::Collider2D* collider, ModdingAPI::Exposed::UnityEngine::ContactFilter2D contactFilter) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::ContactFilter2D)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1541030))(this, collider, contactFilter);
  }
  bool IsTouching(ModdingAPI::Exposed::UnityEngine::ContactFilter2D contactFilter) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::ContactFilter2D)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15410A0))(this, contactFilter);
  }
  bool IsTouching_AnyColliderWithFilter(ModdingAPI::Exposed::UnityEngine::ContactFilter2D contactFilter) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::ContactFilter2D)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1541110))(this, contactFilter);
  }
  bool IsTouchingLayers() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1541170))(this);
  }
  bool IsTouchingLayers(int32_t layerMask) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15411D0))(this, layerMask);
  }
  bool OverlapPoint(ModdingAPI::Exposed::UnityEngine::Vector2 point) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1541230))(this, point);
  }
  ModdingAPI::Exposed::UnityEngine::ColliderDistance2D Distance(ModdingAPI::Exposed::UnityEngine::Collider2D* collider) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::ColliderDistance2D(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Collider2D*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1541290))(this, collider);
  }
  int32_t OverlapCollider(ModdingAPI::Exposed::UnityEngine::ContactFilter2D contactFilter, ModdingAPI::Exposed::UnityEngine::Collider2D_array* results) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::ContactFilter2D, ModdingAPI::Exposed::UnityEngine::Collider2D_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1541360))(this, contactFilter, results);
  }
  int32_t GetContacts(ModdingAPI::Exposed::UnityEngine::ContactPoint2D_array* contacts) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::ContactPoint2D_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15413E0))(this, contacts);
  }
  int32_t GetContacts(ModdingAPI::Exposed::UnityEngine::ContactFilter2D contactFilter, ModdingAPI::Exposed::UnityEngine::ContactPoint2D_array* contacts) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::ContactFilter2D, ModdingAPI::Exposed::UnityEngine::ContactPoint2D_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1541500))(this, contactFilter, contacts);
  }
  int32_t GetContacts(ModdingAPI::Exposed::UnityEngine::Collider2D_array* colliders) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Collider2D_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15415E0))(this, colliders);
  }
  int32_t GetContacts(ModdingAPI::Exposed::UnityEngine::ContactFilter2D contactFilter, ModdingAPI::Exposed::UnityEngine::Collider2D_array* colliders) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::ContactFilter2D, ModdingAPI::Exposed::UnityEngine::Collider2D_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1541700))(this, contactFilter, colliders);
  }
  int32_t Cast(ModdingAPI::Exposed::UnityEngine::Vector2 direction, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array* results) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15417E0))(this, direction, results);
  }
  int32_t Cast(ModdingAPI::Exposed::UnityEngine::Vector2 direction, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array* results, float distance) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1541A30))(this, direction, results, distance);
  }
  int32_t Cast(ModdingAPI::Exposed::UnityEngine::Vector2 direction, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array* results, float distance, bool ignoreSiblingColliders) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array*, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1541C80))(this, direction, results, distance, ignoreSiblingColliders);
  }
  int32_t Cast(ModdingAPI::Exposed::UnityEngine::Vector2 direction, ModdingAPI::Exposed::UnityEngine::ContactFilter2D contactFilter, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array* results) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::ContactFilter2D, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1541EE0))(this, direction, contactFilter, results);
  }
  int32_t Cast(ModdingAPI::Exposed::UnityEngine::Vector2 direction, ModdingAPI::Exposed::UnityEngine::ContactFilter2D contactFilter, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array* results, float distance) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::ContactFilter2D, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1541F80))(this, direction, contactFilter, results, distance);
  }
  int32_t Cast(ModdingAPI::Exposed::UnityEngine::Vector2 direction, ModdingAPI::Exposed::UnityEngine::ContactFilter2D contactFilter, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array* results, float distance, bool ignoreSiblingColliders) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::ContactFilter2D, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array*, float, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1542020))(this, direction, contactFilter, results, distance, ignoreSiblingColliders);
  }
  int32_t Cast_Internal(ModdingAPI::Exposed::UnityEngine::Vector2 direction, float distance, ModdingAPI::Exposed::UnityEngine::ContactFilter2D contactFilter, bool ignoreSiblingColliders, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array* results) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2, float, ModdingAPI::Exposed::UnityEngine::ContactFilter2D, bool, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15420D0))(this, direction, distance, contactFilter, ignoreSiblingColliders, results);
  }
  int32_t Raycast(ModdingAPI::Exposed::UnityEngine::Vector2 direction, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array* results) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1542170))(this, direction, results);
  }
  int32_t Raycast(ModdingAPI::Exposed::UnityEngine::Vector2 direction, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array* results, float distance) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1542250))(this, direction, results, distance);
  }
  int32_t Raycast(ModdingAPI::Exposed::UnityEngine::Vector2 direction, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array* results, float distance, int32_t layerMask) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array*, float, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1542340))(this, direction, results, distance, layerMask);
  }
  int32_t Raycast(ModdingAPI::Exposed::UnityEngine::Vector2 direction, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array* results, float distance, int32_t layerMask, float minDepth) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array*, float, int32_t, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1542430))(this, direction, results, distance, layerMask, minDepth);
  }
  int32_t Raycast(ModdingAPI::Exposed::UnityEngine::Vector2 direction, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array* results, float distance, int32_t layerMask, float minDepth, float maxDepth) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array*, float, int32_t, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1542520))(this, direction, results, distance, layerMask, minDepth, maxDepth);
  }
  int32_t Raycast(ModdingAPI::Exposed::UnityEngine::Vector2 direction, ModdingAPI::Exposed::UnityEngine::ContactFilter2D contactFilter, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array* results) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::ContactFilter2D, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1542610))(this, direction, contactFilter, results);
  }
  int32_t Raycast(ModdingAPI::Exposed::UnityEngine::Vector2 direction, ModdingAPI::Exposed::UnityEngine::ContactFilter2D contactFilter, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array* results, float distance) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::ContactFilter2D, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15426B0))(this, direction, contactFilter, results, distance);
  }
  int32_t Raycast_Internal(ModdingAPI::Exposed::UnityEngine::Vector2 direction, float distance, ModdingAPI::Exposed::UnityEngine::ContactFilter2D contactFilter, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array* results) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2, float, ModdingAPI::Exposed::UnityEngine::ContactFilter2D, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1542750))(this, direction, distance, contactFilter, results);
  }
  void get_offset_Injected(ModdingAPI::Exposed::UnityEngine::Vector2 ret) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15427E0))(this, ret);
  }
  void set_offset_Injected(ModdingAPI::Exposed::UnityEngine::Vector2 value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1542840))(this, value);
  }
  void get_bounds_Injected(ModdingAPI::Exposed::UnityEngine::Bounds ret) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Bounds)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15428A0))(this, ret);
  }
  bool IsTouching_OtherColliderWithFilter_Injected(ModdingAPI::Exposed::UnityEngine::Collider2D* collider, ModdingAPI::Exposed::UnityEngine::ContactFilter2D contactFilter) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::ContactFilter2D)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1542900))(this, collider, contactFilter);
  }
  bool IsTouching_AnyColliderWithFilter_Injected(ModdingAPI::Exposed::UnityEngine::ContactFilter2D contactFilter) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::ContactFilter2D)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1542970))(this, contactFilter);
  }
  bool OverlapPoint_Injected(ModdingAPI::Exposed::UnityEngine::Vector2 point) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2)>(Helpers::Memory::GetInstance().MakeAbsolute(0x15429D0))(this, point);
  }
  int32_t Cast_Internal_Injected(ModdingAPI::Exposed::UnityEngine::Vector2 direction, float distance, ModdingAPI::Exposed::UnityEngine::ContactFilter2D contactFilter, bool ignoreSiblingColliders, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array* results) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2, float, ModdingAPI::Exposed::UnityEngine::ContactFilter2D, bool, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1542A30))(this, direction, distance, contactFilter, ignoreSiblingColliders, results);
  }
  int32_t Raycast_Internal_Injected(ModdingAPI::Exposed::UnityEngine::Vector2 direction, float distance, ModdingAPI::Exposed::UnityEngine::ContactFilter2D contactFilter, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array* results) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Collider2D*, ModdingAPI::Exposed::UnityEngine::Vector2, float, ModdingAPI::Exposed::UnityEngine::ContactFilter2D, ModdingAPI::Exposed::UnityEngine::RaycastHit2D_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1542AC0))(this, direction, distance, contactFilter, results);
  }
};
}