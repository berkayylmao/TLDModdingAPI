// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.LayerMask.hpp"


namespace ModdingAPI::Exposed::Pathfinding {
struct __RichAI_Il2CppStaticFields {
  float deltaTime;
  ModdingAPI::Exposed::UnityEngine::Color GizmoColorRaycast;
  ModdingAPI::Exposed::UnityEngine::Color GizmoColorPath;
};

struct __RichAI_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_Start;
  VirtualInvokeData _5_OnEnable;
  VirtualInvokeData _6_UpdatePath;
  VirtualInvokeData _7_OnTargetReached;
  VirtualInvokeData _8_UpdateTarget;
  VirtualInvokeData _9_Update;
  VirtualInvokeData _10_OnDrawGizmos;
};

struct __RichAI_Il2CppClass {
  Il2CppClass_1 _1;
  __RichAI_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __RichAI_Il2CppVtbl vtbl;
};

class RichAI {
  static constexpr uint64_t         _rvaObjectInstance     = 0x3C80DA0;
  static inline    RichAI* _pStaticObjectInstance = nullptr;

  static constexpr uint64_t                     _rvaClassInstance     = 0x3C4A960;
  static inline    __RichAI_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Singleton object getter:
  static inline RichAI* GetSingletonInstance() {
    while (!_pStaticObjectInstance) {
      Sleep(100);
      auto* ppObjectInstance = (RichAI**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaObjectInstance);
      if (ppObjectInstance)
        _pStaticObjectInstance = *ppObjectInstance;
    }
    return _pStaticObjectInstance;
  }

// Static class getter:
  static inline __RichAI_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__RichAI_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __RichAI_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::Transform* target;
  ModdingAPI::Exposed::UnityEngine::Vector3 lastPathTarget;
  float repathTimer;
  bool drawGizmos;
  bool repeatedlySearchPaths;
  float repathRate;
  float maxSpeed;
  float acceleration;
  float slowdownTime;
  float rotationSpeed;
  float rotationSpeedScale;
  float endReachedDistance;
  float wallForce;
  float wallDist;
  ModdingAPI::Exposed::UnityEngine::Vector3 gravity;
  bool raycastingForGroundPlacement;
  ModdingAPI::Exposed::UnityEngine::LayerMask groundMask;
  float centerOffset;
  int32_t funnelSimplification;
  ModdingAPI::Exposed::UnityEngine::Animation* anim;
  bool preciseSlowdown;
  bool slowWhenNotFacingTarget;
  ModdingAPI::Exposed::UnityEngine::Vector3 velocity;
  ModdingAPI::Exposed::Pathfinding::RichPath* rp;
  ModdingAPI::Exposed::Seeker* seeker;
  ModdingAPI::Exposed::UnityEngine::Transform* tr;
  ModdingAPI::Exposed::UnityEngine::CharacterController* controller;
  ModdingAPI::Exposed::Pathfinding::RVO::RVOController* rvoController;
  ModdingAPI::Exposed::UnityEngine::Vector3 lastTargetPoint;
  ModdingAPI::Exposed::UnityEngine::Vector3 currentTargetDirection;
  bool waitingForPathCalc;
  bool canSearchPath;
  bool delayUpdatePath;
  bool traversingSpecialPath;
  bool lastCorner;
  float distanceToWaypoint;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* buffer;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* wallBuffer;
  float lastRepath;
  ModdingAPI::Exposed::BaseAi* m_BaseAi;
  ModdingAPI::Exposed::UnityEngine::Vector3 m_PreviousTargetHeading;

  // Member methods:
  ModdingAPI::Exposed::UnityEngine::Vector3 get_Velocity() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A2340))(this);
  }
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A2360))(this);
  }
  void Start() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x170D820))(this);
  }
  void OnEnable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  void OnDisable() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A24B0))(this);
  }
  void UpdatePath() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A26D0))(this);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* SearchPaths() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A2B50))(this);
  }
  void OnPathComplete(ModdingAPI::Exposed::Pathfinding::Path* p) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*, ModdingAPI::Exposed::Pathfinding::Path*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A2CA0))(this, p);
  }
  bool get_TraversingSpecial() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A2FB0))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 get_TargetPoint() {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A2FC0))(this);
  }
  bool get_ApproachingPartEndpoint() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A2FE0))(this);
  }
  bool get_ApproachingPathEndpoint() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A2FF0))(this);
  }
  float get_DistanceToNextWaypoint() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A3030))(this);
  }
  void NextPart() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A3040))(this);
  }
  void OnTargetReached() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 UpdateTarget(ModdingAPI::Exposed::Pathfinding::RichFunnel* fn) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*, ModdingAPI::Exposed::Pathfinding::RichFunnel*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A3140))(this, fn);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A3330))(this);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 RaycastPosition(ModdingAPI::Exposed::UnityEngine::Vector3 position, float lasty) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*, ModdingAPI::Exposed::UnityEngine::Vector3, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A5670))(this, position, lasty);
  }
  bool RotateTowards(ModdingAPI::Exposed::UnityEngine::Vector3 trotdir) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A58E0))(this, trotdir);
  }
  void OnDrawGizmos() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A5BF0))(this);
  }
  ModdingAPI::Exposed::System::Collections::IEnumerator* TraverseSpecial(ModdingAPI::Exposed::Pathfinding::RichSpecial* rs) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*, ModdingAPI::Exposed::Pathfinding::RichSpecial*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A6630))(this, rs);
  }
  void UpdateTurnHeading() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A6790))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::RichAI*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A69B0))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<float> deltaTime = __CppStaticProperty<float>(
   []() { return &GetStaticClassInstance()->pStaticFields->deltaTime; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color> GizmoColorRaycast = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color>(
   []() { return &GetStaticClassInstance()->pStaticFields->GizmoColorRaycast; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color> GizmoColorPath = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Color>(
   []() { return &GetStaticClassInstance()->pStaticFields->GizmoColorPath; }
  );

  // Static methods:
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x21A6E10))();
  }
};
}