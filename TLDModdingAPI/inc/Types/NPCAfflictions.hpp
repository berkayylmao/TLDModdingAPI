// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __NPCAfflictions_Il2CppStaticFields {
};

struct __NPCAfflictions_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __NPCAfflictions_Il2CppClass {
  Il2CppClass_1 _1;
  __NPCAfflictions_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __NPCAfflictions_Il2CppVtbl vtbl;
};

class NPCAfflictions {
public:
  // Il2Cpp fields:
  __NPCAfflictions_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  int32_t m_UIOutline;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* m_Afflictions;
  bool m_MustCureBeforeCarry;
  ModdingAPI::Exposed::AnimatedInteraction* m_DiagnoseIntroLeft;
  ModdingAPI::Exposed::AnimatedInteraction* m_DiagnoseOutroLeft;
  ModdingAPI::Exposed::AnimatedInteraction* m_DiagnoseIntroRight;
  ModdingAPI::Exposed::AnimatedInteraction* m_DiagnoseOutroRight;
  bool m_ReparentAnimatedInteractionsToNPCParent;
  ModdingAPI::Exposed::NPC* m_NPC;
  int32_t m_ApproachSideSelected;
  ModdingAPI::Exposed::SyncNode* m_SyncNodeLeft;
  ModdingAPI::Exposed::SyncNode* m_SyncNodeRight;
  ModdingAPI::Exposed::UnityEngine::Transform* m_DiagnoseIntroLeftOriginalParent;
  ModdingAPI::Exposed::UnityEngine::Transform* m_DiagnoseIntroRightOriginalParent;
  ModdingAPI::Exposed::UnityEngine::Transform* m_DiagnoseOutroLeftOriginalParent;
  ModdingAPI::Exposed::UnityEngine::Transform* m_DiagnoseOutroRightOriginalParent;
  ModdingAPI::Exposed::UnityEngine::Collider_array* m_ResultColliders;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E7EC50))(this);
  }
  void AfflictionDiagnosed(ModdingAPI::Exposed::NPCAffliction* affliction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*, ModdingAPI::Exposed::NPCAffliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E7F130))(this, affliction);
  }
  bool AreAllAfflictionTreated() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E7F250))(this);
  }
  ModdingAPI::Exposed::NPCAffliction* GetNPCAffliction(int32_t afflictionType) {
    return reinterpret_cast<ModdingAPI::Exposed::NPCAffliction*(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E7F3D0))(this, afflictionType);
  }
  void HealedAffliction(int32_t afflictionType) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E7F580))(this, afflictionType);
  }
  void HealedAffliction(ModdingAPI::Exposed::NPCAffliction* affliction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*, ModdingAPI::Exposed::NPCAffliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E7F5B0))(this, affliction);
  }
  void RemoveAffliction(ModdingAPI::Exposed::NPCAffliction* affliction) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*, ModdingAPI::Exposed::NPCAffliction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E7F6B0))(this, affliction);
  }
  float GetTotalHitPointReduction() {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E7F7A0))(this);
  }
  void StartDiagnosing() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E7F940))(this);
  }
  void EndDiagnosing() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E7FC00))(this);
  }
  System_String* Serialize() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E7FE60))(this);
  }
  void Deserialize(System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E800E0))(this, text);
  }
  void AddAffliction(int32_t afflictionType, System_String* causeLocId, int32_t location) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*, int32_t, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E804B0))(this, afflictionType, causeLocId, location);
  }
  void AddAffliction(System_String* afflictionName, System_String* causeLocId, int32_t location) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*, System_String*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E805E0))(this, afflictionName, causeLocId, location);
  }
  void RemoveAffliction(int32_t afflictionType) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E80710))(this, afflictionType);
  }
  void AddAffliction(ModdingAPI::Exposed::AfflictionDefinition* afflictionDefinition, System_String* causeLocId, int32_t location) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*, ModdingAPI::Exposed::AfflictionDefinition*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E80740))(this, afflictionDefinition, causeLocId, location);
  }
  void OnDiagnoseOutroComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E808D0))(this);
  }
  void OnDiagnoseIntroComplete() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E80980))(this);
  }
  ModdingAPI::Exposed::AnimatedInteraction* GetSelectedIntro() {
    return reinterpret_cast<ModdingAPI::Exposed::AnimatedInteraction*(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E80A80))(this);
  }
  ModdingAPI::Exposed::AnimatedInteraction* GetSelectedOutro() {
    return reinterpret_cast<ModdingAPI::Exposed::AnimatedInteraction*(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E80AA0))(this);
  }
  void SelectApproachSide() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E80AC0))(this);
  }
  bool HasAfflictionType(int32_t afflictionType) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E81190))(this, afflictionType);
  }
  bool IsDehydrated() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E811B0))(this);
  }
  bool HasDehydrationRisk() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E811D0))(this);
  }
  bool HasBloodLoss() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E811F0))(this);
  }
  bool HasFrostbite() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E81210))(this);
  }
  int32_t GetBloodLossCount() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E81230))(this);
  }
  bool HasHypothermia() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E813A0))(this);
  }
  void AssignNpc(ModdingAPI::Exposed::NPC* npc) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*, ModdingAPI::Exposed::NPC*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E813C0))(this, npc);
  }
  void MaybeReparentAnimatedInteractions() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E813D0))(this);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NPCAfflictions*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E81CC0))(this);
  }
};
}