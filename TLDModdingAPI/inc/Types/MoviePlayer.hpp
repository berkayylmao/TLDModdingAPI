// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed {
struct __MoviePlayer_Il2CppStaticFields {
  bool m_MovieCancelledWithEscape;
  bool m_HasIntroPlayedForMainMenu;
  System_String* m_Filename;
  ModdingAPI::Exposed::UnityEngine::Camera* m_Camera;
  int32_t m_State;
  int32_t m_PrePauseState;
  int32_t m_Options;
  bool m_PlaybackFailed;
  bool m_RestorePause;
  bool m_RestoreAudio;
  bool m_IsSkippable;
  ModdingAPI::Exposed::MoviePlayer::OnPlaybackComplete* m_OnPlaybackComplete;
  ModdingAPI::Exposed::UnityEngine::Video::VideoPlayer* m_Player;
  System_String* SUBTITLE_EXTENSION;
  ModdingAPI::Exposed::Utils::Subtitle_array* m_Subtitles;
  uint32_t m_NumSubtitles;
  System_String* s_MoviePath;
  System_String* s_SubtitlesPath;
  uint32_t s_AudioPlayingID;
  int64_t m_LastFrameId;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* s_FilePaths;
};

struct __MoviePlayer_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __MoviePlayer_Il2CppClass {
  Il2CppClass_1 _1;
  __MoviePlayer_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MoviePlayer_Il2CppVtbl vtbl;
};

class MoviePlayer {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C72DD8;
  static inline    __MoviePlayer_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __MoviePlayer_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__MoviePlayer_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __MoviePlayer_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::UnityEngine::GameObject* m_CameraPrefab;

  // Member methods:
  void Awake() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoviePlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D86110))(this);
  }
  void Update() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoviePlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D86480))(this);
  }
  bool CheckForInterrupt() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::MoviePlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D86940))(this);
  }
  void CheckForPause() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoviePlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D86CD0))(this);
  }
  void UpdatePause() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoviePlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D87550))(this);
  }
  void UpdatePrepare() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoviePlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D876E0))(this);
  }
  void UpdatePlayback() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoviePlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D87CD0))(this);
  }
  void InstantiateCameraForPlayer() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoviePlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D88110))(this);
  }
  void OnLoopPointReached(ModdingAPI::Exposed::UnityEngine::Video::VideoPlayer* vp) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoviePlayer*, ModdingAPI::Exposed::UnityEngine::Video::VideoPlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D89490))(this, vp);
  }
  void OnAkVoiceEvent(Il2CppObject* in_cookie, int32_t in_type, Il2CppObject* in_info) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoviePlayer*, Il2CppObject*, int32_t, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D895B0))(this, in_cookie, in_type, in_info);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoviePlayer*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<bool> m_MovieCancelledWithEscape = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_MovieCancelledWithEscape; }
  );
  static inline __CppStaticProperty<bool> m_HasIntroPlayedForMainMenu = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_HasIntroPlayedForMainMenu; }
  );
  static inline __CppStaticProperty<System_String*> m_Filename = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_Filename; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Camera*> m_Camera = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Camera*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_Camera; }
  );
  static inline __CppStaticProperty<int32_t> m_State = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_State; }
  );
  static inline __CppStaticProperty<int32_t> m_PrePauseState = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_PrePauseState; }
  );
  static inline __CppStaticProperty<int32_t> m_Options = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_Options; }
  );
  static inline __CppStaticProperty<bool> m_PlaybackFailed = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_PlaybackFailed; }
  );
  static inline __CppStaticProperty<bool> m_RestorePause = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_RestorePause; }
  );
  static inline __CppStaticProperty<bool> m_RestoreAudio = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_RestoreAudio; }
  );
  static inline __CppStaticProperty<bool> m_IsSkippable = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_IsSkippable; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::MoviePlayer::OnPlaybackComplete*> m_OnPlaybackComplete = __CppStaticProperty<ModdingAPI::Exposed::MoviePlayer::OnPlaybackComplete*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_OnPlaybackComplete; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Video::VideoPlayer*> m_Player = __CppStaticProperty<ModdingAPI::Exposed::UnityEngine::Video::VideoPlayer*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_Player; }
  );
  static inline __CppStaticProperty<System_String*> SUBTITLE_EXTENSION = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->SUBTITLE_EXTENSION; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::Utils::Subtitle_array*> m_Subtitles = __CppStaticProperty<ModdingAPI::Exposed::Utils::Subtitle_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_Subtitles; }
  );
  static inline __CppStaticProperty<uint32_t> m_NumSubtitles = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_NumSubtitles; }
  );
  static inline __CppStaticProperty<System_String*> s_MoviePath = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_MoviePath; }
  );
  static inline __CppStaticProperty<System_String*> s_SubtitlesPath = __CppStaticProperty<System_String*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_SubtitlesPath; }
  );
  static inline __CppStaticProperty<uint32_t> s_AudioPlayingID = __CppStaticProperty<uint32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_AudioPlayingID; }
  );
  static inline __CppStaticProperty<int64_t> m_LastFrameId = __CppStaticProperty<int64_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_LastFrameId; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> s_FilePaths = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_FilePaths; }
  );

  // Static methods:
  static inline System_String* GetPlatformName() {
    return reinterpret_cast<System_String*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D83DD0))();
  }
  static inline ModdingAPI::Exposed::System::String_array* GetFilenameList() {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D83E50))();
  }
  static inline void SetupMovie(ModdingAPI::Exposed::MoviePlayer::OnPlaybackComplete* onPlaybackComplete, int32_t opts, System_String* fullpath) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoviePlayer::OnPlaybackComplete*, int32_t, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D840C0))(onPlaybackComplete, opts, fullpath);
  }
  static inline System_String* FindFullMoviePath(System_String* filename) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D842A0))(filename);
  }
  static inline bool TryToUsePreparedMovie(System_String* fullpath, ModdingAPI::Exposed::MoviePlayer::OnPlaybackComplete* onPlaybackComplete, int32_t opts) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, ModdingAPI::Exposed::MoviePlayer::OnPlaybackComplete*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D84470))(fullpath, onPlaybackComplete, opts);
  }
  static inline void Play(System_String* filename, ModdingAPI::Exposed::MoviePlayer::OnPlaybackComplete* onPlaybackComplete, int32_t opts) {
    reinterpret_cast<void(__fastcall*)(System_String*, ModdingAPI::Exposed::MoviePlayer::OnPlaybackComplete*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D84680))(filename, onPlaybackComplete, opts);
  }
  static inline void PlayMovieFromFullPath(ModdingAPI::Exposed::MoviePlayer::OnPlaybackComplete* onPlaybackComplete, int32_t opts, System_String* fullpath, System_String* filename) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::MoviePlayer::OnPlaybackComplete*, int32_t, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D84830))(onPlaybackComplete, opts, fullpath, filename);
  }
  static inline void Stop() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D84F30))();
  }
  static inline float GetCurrentMovieDurationSeconds() {
    return reinterpret_cast<float(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D85070))();
  }
  static inline bool IsPreparingPending() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D85200))();
  }
  static inline bool IsPreparingReady() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D85440))();
  }
  static inline void Seek(float newTime) {
    reinterpret_cast<void(__fastcall*)(float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D855D0))(newTime);
  }
  static inline bool IsInitialized() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D85890))();
  }
  static inline bool IsPlaying() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D859D0))();
  }
  static inline bool IsPaused() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D85AA0))();
  }
  static inline bool IsScreenFilled() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D85B40))();
  }
  static inline bool IsGameplayRendering() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D85BE0))();
  }
  static inline bool IsAudioEnabled() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D85C80))();
  }
  static inline bool IsUsingWwiseAudio() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D85D20))();
  }
  static inline bool SuppressingErrors() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D85DC0))();
  }
  static inline bool ShouldWaitFirstFrame() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D85E60))();
  }
  static inline bool ShouldPrepareMovieOnly() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D85F00))();
  }
  static inline bool HasNoUserInterrupt() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D85FB0))();
  }
  static inline bool ShouldTryToUsePreparedMovie(int32_t opts) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D86050))(opts);
  }
  static inline bool ShouldSyncToAudio() {
    return reinterpret_cast<bool(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D86060))();
  }
  static inline void DoStop() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D86E90))();
  }
  static inline bool ShouldReplacePathEntry(ModdingAPI::Exposed::System::IO::FileInfo* fi) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::IO::FileInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D88B70))(fi);
  }
  static inline void BuildPathDictionary() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D88E10))();
  }
  static inline void OnErrorReceived(ModdingAPI::Exposed::UnityEngine::Video::VideoPlayer* source, System_String* message) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Video::VideoPlayer*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D893C0))(source, message);
  }
  static inline void LogError(System_String* err) {
    reinterpret_cast<void(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(err);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1D89760))();
  }
};
}