// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::EasyRoads3Dv3 {
struct __OQOOOODDDO_Il2CppStaticFields {
};

struct __OQOOOODDDO_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __OQOOOODDDO_Il2CppClass {
  Il2CppClass_1 _1;
  __OQOOOODDDO_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __OQOOOODDDO_Il2CppVtbl vtbl;
};

class OQOOOODDDO {
public:
  // Il2Cpp fields:
  __OQOOOODDDO_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::OQOOOODDDO*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x389390))(this);
  }

  // Static methods:
  static inline ModdingAPI::Exposed::System::Collections::Generic::List_T_* OQQOQCQQQD(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad* scr, int32_t startMarker, int32_t endMarker, ModdingAPI::Exposed::System::Collections::Generic::List_T_* markers, float faceDist, bool ignorePrefabAlignment, ModdingAPI::Exposed::System::Collections::Generic::List_T_* tValues, ModdingAPI::Exposed::System::Collections::Generic::List_T_* markerDistances) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad*, int32_t, int32_t, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, float, bool, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x8FF430))(scr, startMarker, endMarker, markers, faceDist, ignorePrefabAlignment, tValues, markerDistances);
  }
  static inline void OCCCCCCDCC(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad* scr, bool ignorePrefabAlignment, ModdingAPI::Exposed::System::Collections::Generic::List_T_* splinePoints, ModdingAPI::Exposed::System::Collections::Generic::List_T_* tValues, ModdingAPI::Exposed::System::Collections::Generic::List_T_* markerDistances, int32_t startMarker, int32_t endMarker, int32_t startInt) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad*, bool, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x902A10))(scr, ignorePrefabAlignment, splinePoints, tValues, markerDistances, startMarker, endMarker, startInt);
  }
  static inline void OCCCCCCDCC(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad* scr) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x909340))(scr);
  }
  static inline ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad* DuplicateObject(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad* scr) {
    return reinterpret_cast<ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad*(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x909F30))(scr);
  }
  static inline void CreateSplatMeshes(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad* scr, ModdingAPI::Exposed::System::Collections::Generic::List_T_* soSplatmapObjects, float splatSize) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x90A980))(scr, soSplatmapObjects, splatSize);
  }
  static inline ModdingAPI::Exposed::UnityEngine::GameObject* BuildSplatMesh(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad* scr, ModdingAPI::Exposed::System::Collections::Generic::List_T_* vecs, ModdingAPI::Exposed::System::Collections::Generic::List_T_* tris, System_String* name, int32_t pos) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x90B880))(scr, vecs, tris, name, pos);
  }
  static inline void SetMarkerIndentAlignment(ModdingAPI::Exposed::EasyRoads3Dv3::ERMarkerExt* m, ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad* scr) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERMarkerExt*, ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x90BF90))(m, scr);
  }
  static inline float GetleftToCenterPerc(ModdingAPI::Exposed::System::Collections::Generic::List_T_* nodeList, int32_t left, int32_t right) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x90C220))(nodeList, left, right);
  }
  static inline void OQOOCQDOQD(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad* r1, ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad* r2, ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs* prefab) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad*, ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad*, ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x90C2F0))(r1, r2, prefab);
  }
  static inline void OCCODOQQOQ(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad* r1, ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad* r2, int32_t road1StartEnd, int32_t road2StartEnd) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad*, ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(r1, r2, road1StartEnd, road2StartEnd);
  }
  static inline void AverageTangentsRoadPrefab(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad* r1, ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs* prefab, int32_t road1StartEnd, int32_t prefabStartEnd) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::EasyRoads3Dv3::ERModularRoad*, ModdingAPI::Exposed::EasyRoads3Dv3::ERCrossingPrefabs*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(r1, prefab, road1StartEnd, prefabStartEnd);
  }
};
}