// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"


namespace ModdingAPI::Exposed {
struct __RadiusModifier_Il2CppStaticFields {
};

struct __RadiusModifier_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _7_get_Order;
  VirtualInvokeData _8_PreProcess;
  VirtualInvokeData _9_Apply;
};

struct __RadiusModifier_Il2CppClass {
  Il2CppClass_1 _1;
  __RadiusModifier_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __RadiusModifier_Il2CppVtbl vtbl;
};

class RadiusModifier {
public:
  // Il2Cpp fields:
  __RadiusModifier_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  intptr_t Object_m_CachedPtr;
  ModdingAPI::Exposed::Seeker* seeker;
  float radius;
  float detail;
  ModdingAPI::Exposed::System::Single_array* radi;
  ModdingAPI::Exposed::System::Single_array* a1;
  ModdingAPI::Exposed::System::Single_array* a2;
  ModdingAPI::Exposed::System::Boolean_array* dir;

  // Member methods:
  int32_t get_Order() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::RadiusModifier*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD73DB0))(this);
  }
  bool CalculateCircleInner(ModdingAPI::Exposed::UnityEngine::Vector3 p1, ModdingAPI::Exposed::UnityEngine::Vector3 p2, float r1, float r2, float a, float sigma) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::RadiusModifier*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B58D00))(this, p1, p2, r1, r2, a, sigma);
  }
  bool CalculateCircleOuter(ModdingAPI::Exposed::UnityEngine::Vector3 p1, ModdingAPI::Exposed::UnityEngine::Vector3 p2, float r1, float r2, float a, float sigma) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::RadiusModifier*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B58ED0))(this, p1, p2, r1, r2, a, sigma);
  }
  int32_t CalculateTangentType(ModdingAPI::Exposed::UnityEngine::Vector3 p1, ModdingAPI::Exposed::UnityEngine::Vector3 p2, ModdingAPI::Exposed::UnityEngine::Vector3 p3, ModdingAPI::Exposed::UnityEngine::Vector3 p4) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::RadiusModifier*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B590C0))(this, p1, p2, p3, p4);
  }
  int32_t CalculateTangentTypeSimple(ModdingAPI::Exposed::UnityEngine::Vector3 p1, ModdingAPI::Exposed::UnityEngine::Vector3 p2, ModdingAPI::Exposed::UnityEngine::Vector3 p3) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::RadiusModifier*, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B591B0))(this, p1, p2, p3);
  }
  void DrawCircleSegment(ModdingAPI::Exposed::UnityEngine::Vector3 p1, float rad, ModdingAPI::Exposed::UnityEngine::Color col, float start, float end) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadiusModifier*, ModdingAPI::Exposed::UnityEngine::Vector3, float, ModdingAPI::Exposed::UnityEngine::Color, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B59220))(this, p1, rad, col, start, end);
  }
  void Apply(ModdingAPI::Exposed::Pathfinding::Path* p) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadiusModifier*, ModdingAPI::Exposed::Pathfinding::Path*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B59670))(this, p);
  }
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* Apply(ModdingAPI::Exposed::System::Collections::Generic::List_T_* vs) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::List_T_*(__fastcall*)(ModdingAPI::Exposed::RadiusModifier*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B59750))(this, vs);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::RadiusModifier*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1B5AC20))(this);
  }
};
}