// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Vector2.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Vector2.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color32.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Color32.hpp"


namespace ModdingAPI::Exposed::DigitalOpus::MB::Core {
struct __MB3_TextureCombinerPipeline_Il2CppStaticFields {
  bool USE_EXPERIMENTAL_HOIZONTALVERTICAL;
  ModdingAPI::Exposed::DigitalOpus::MB::Core::ShaderTextureProperty_array* shaderTexPropertyNames;
};

struct __MB3_TextureCombinerPipeline_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __MB3_TextureCombinerPipeline_Il2CppClass {
  Il2CppClass_1 _1;
  __MB3_TextureCombinerPipeline_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __MB3_TextureCombinerPipeline_Il2CppVtbl vtbl;
};

class MB3_TextureCombinerPipeline {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C2A4A8;
  static inline    __MB3_TextureCombinerPipeline_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __MB3_TextureCombinerPipeline_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__MB3_TextureCombinerPipeline_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __MB3_TextureCombinerPipeline_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<bool> USE_EXPERIMENTAL_HOIZONTALVERTICAL = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->USE_EXPERIMENTAL_HOIZONTALVERTICAL; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::DigitalOpus::MB::Core::ShaderTextureProperty_array*> shaderTexPropertyNames = __CppStaticProperty<ModdingAPI::Exposed::DigitalOpus::MB::Core::ShaderTextureProperty_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->shaderTexPropertyNames; }
  );

  // Static methods:
  static inline bool _ShouldWeCreateAtlasForThisProperty(int32_t propertyIndex, bool considerNonTextureProperties, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::CreateAtlasForProperty_array* allTexturesAreNullAndSameColor) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, bool, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::CreateAtlasForProperty_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26301A0))(propertyIndex, considerNonTextureProperties, allTexturesAreNullAndSameColor);
  }
  static inline bool _CollectPropertyNames(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData* data, int32_t LOG_LEVEL) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2630210))(data, LOG_LEVEL);
  }
  static inline bool _ShouldWeCreateAtlasForThisProperty(int32_t propertyIndex, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::CreateAtlasForProperty_array* allTexturesAreNullAndSameColor, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData* data) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::CreateAtlasForProperty_array*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2630F40))(propertyIndex, allTexturesAreNullAndSameColor, data);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Texture* GetTextureConsideringStandardShaderKeywords(System_String* shaderName, ModdingAPI::Exposed::UnityEngine::Material* mat, System_String* propertyName) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Texture*(__fastcall*)(System_String*, ModdingAPI::Exposed::UnityEngine::Material*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2630FB0))(shaderName, mat, propertyName);
  }
  static inline ModdingAPI::Exposed::System::Collections::IEnumerator* __Step1_CollectDistinctMatTexturesAndUsedObjects(ModdingAPI::Exposed::DigitalOpus::MB::Core::ProgressUpdateDelegate* progressInfo, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner::CombineTexturesIntoAtlasesCoroutineResult* result, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData* data, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner* combiner, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* textureEditorMethods, ModdingAPI::Exposed::System::Collections::Generic::List_T_* usedObjsToMesh, int32_t LOG_LEVEL) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::ProgressUpdateDelegate*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner::CombineTexturesIntoAtlasesCoroutineResult*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2631100))(progressInfo, result, data, combiner, textureEditorMethods, usedObjsToMesh, LOG_LEVEL);
  }
  static inline ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::CreateAtlasForProperty_array* CalculateAllTexturesAreNullAndSameColor(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData* data, int32_t LOG_LEVEL) {
    return reinterpret_cast<ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::CreateAtlasForProperty_array*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2631290))(data, LOG_LEVEL);
  }
  static inline ModdingAPI::Exposed::System::Collections::IEnumerator* CalculateIdealSizesForTexturesInAtlasAndPadding(ModdingAPI::Exposed::DigitalOpus::MB::Core::ProgressUpdateDelegate* progressInfo, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner::CombineTexturesIntoAtlasesCoroutineResult* result, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData* data, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner* combiner, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* textureEditorMethods, int32_t LOG_LEVEL) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::ProgressUpdateDelegate*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner::CombineTexturesIntoAtlasesCoroutineResult*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2631970))(progressInfo, result, data, combiner, textureEditorMethods, LOG_LEVEL);
  }
  static inline ModdingAPI::Exposed::DigitalOpus::MB::Core::AtlasPackingResult_array* RunTexturePackerOnly(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData* data, bool doSplitIntoMultiAtlasIfTooBig, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_ITextureCombinerPacker* texturePacker, int32_t LOG_LEVEL) {
    return reinterpret_cast<ModdingAPI::Exposed::DigitalOpus::MB::Core::AtlasPackingResult_array*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData*, bool, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_ITextureCombinerPacker*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2631AD0))(data, doSplitIntoMultiAtlasIfTooBig, texturePacker, LOG_LEVEL);
  }
  static inline ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_ITextureCombinerPacker* CreatePacker(bool onlyOneTextureInAtlasReuseTextures, int32_t packingAlgorithm) {
    return reinterpret_cast<ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_ITextureCombinerPacker*(__fastcall*)(bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2631DC0))(onlyOneTextureInAtlasReuseTextures, packingAlgorithm);
  }
  static inline ModdingAPI::Exposed::System::Collections::IEnumerator* __Step3_BuildAndSaveAtlasesAndStoreResults(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner::CombineTexturesIntoAtlasesCoroutineResult* result, ModdingAPI::Exposed::DigitalOpus::MB::Core::ProgressUpdateDelegate* progressInfo, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData* data, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner* combiner, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_ITextureCombinerPacker* packer, ModdingAPI::Exposed::DigitalOpus::MB::Core::AtlasPackingResult* atlasPackingResult, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* textureEditorMethods, ModdingAPI::Exposed::MB_AtlasesAndRects* resultAtlasesAndRects, ModdingAPI::Exposed::System::Text::StringBuilder* report, int32_t LOG_LEVEL) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::IEnumerator*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner::CombineTexturesIntoAtlasesCoroutineResult*, ModdingAPI::Exposed::DigitalOpus::MB::Core::ProgressUpdateDelegate*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombiner*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB_ITextureCombinerPacker*, ModdingAPI::Exposed::DigitalOpus::MB::Core::AtlasPackingResult*, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*, ModdingAPI::Exposed::MB_AtlasesAndRects*, ModdingAPI::Exposed::System::Text::StringBuilder*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2632300))(result, progressInfo, data, combiner, packer, atlasPackingResult, textureEditorMethods, resultAtlasesAndRects, report, LOG_LEVEL);
  }
  static inline ModdingAPI::Exposed::System::Text::StringBuilder* GenerateReport(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData* data) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Text::StringBuilder*(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x26324B0))(data);
  }
  static inline ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_TexturePacker* CreateTexturePacker(int32_t _packingAlgorithm) {
    return reinterpret_cast<ModdingAPI::Exposed::DigitalOpus::MB::Core::MB2_TexturePacker*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2633300))(_packingAlgorithm);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Vector2 GetAdjustedForScaleAndOffset2Dimensions(ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture* source, ModdingAPI::Exposed::UnityEngine::Vector2 obUVoffset, ModdingAPI::Exposed::UnityEngine::Vector2 obUVscale, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData* data, int32_t LOG_LEVEL) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector2(__fastcall*)(ModdingAPI::Exposed::DigitalOpus::MB::Core::MeshBakerMaterialTexture*, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::UnityEngine::Vector2, ModdingAPI::Exposed::DigitalOpus::MB::Core::MB3_TextureCombinerPipeline::TexturePipelineData*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2633680))(source, obUVoffset, obUVscale, data, LOG_LEVEL);
  }
  static inline ModdingAPI::Exposed::UnityEngine::Color32 ConvertNormalFormatFromUnity_ToStandard(ModdingAPI::Exposed::UnityEngine::Color32 c) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Color32(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Color32)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2633B60))(c);
  }
  static inline float GetSubmeshArea(ModdingAPI::Exposed::UnityEngine::Mesh* m, int32_t submeshIdx) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::UnityEngine::Mesh*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2633CF0))(m, submeshIdx);
  }
  static inline bool IsPowerOfTwo(int32_t x) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2634060))(x);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2634070))();
  }
};
}