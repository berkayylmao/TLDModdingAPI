// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::NodeCanvas {
struct __NCUtils_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Char_array* m_FieldDividers;
  int32_t tmpVarIndex;
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* tagListsToRemove;
};

struct __NCUtils_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __NCUtils_Il2CppClass {
  Il2CppClass_1 _1;
  __NCUtils_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __NCUtils_Il2CppVtbl vtbl;
};

class NCUtils {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C5F168;
  static inline    __NCUtils_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __NCUtils_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__NCUtils_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __NCUtils_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::NCUtils*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*> m_FieldDividers = __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_FieldDividers; }
  );
  static inline __CppStaticProperty<int32_t> tmpVarIndex = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->tmpVarIndex; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> tagListsToRemove = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->tagListsToRemove; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::NodeCanvas::Framework::Variable* GetOrAddVar(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* bb, System_String* name, ModdingAPI::Exposed::System::Type* type) {
    return reinterpret_cast<ModdingAPI::Exposed::NodeCanvas::Framework::Variable*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*, System_String*, ModdingAPI::Exposed::System::Type*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E5D870))(bb, name, type);
  }
  static inline bool SetInitialStateByTag(ModdingAPI::Exposed::NodeCanvas::StateMachines::FSM* fsm, System_String* tag) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::StateMachines::FSM*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E5D940))(fsm, tag);
  }
  static inline bool EnterStateByTag(ModdingAPI::Exposed::NodeCanvas::StateMachines::FSM* fsm, System_String* tag) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::StateMachines::FSM*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E5DB50))(fsm, tag);
  }
  static inline ModdingAPI::Exposed::UnityEngine::GameObject* SpawnChildGraph(ModdingAPI::Exposed::UnityEngine::GameObject* prefab, ModdingAPI::Exposed::UnityEngine::GameObject* parent) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::GameObject*(__fastcall*)(ModdingAPI::Exposed::UnityEngine::GameObject*, ModdingAPI::Exposed::UnityEngine::GameObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E5DCB0))(prefab, parent);
  }
  static inline void AddBlackboardMembersIfRequired(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* source, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* dest) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E5E160))(source, dest);
  }
  static inline System_String* GetSerializedBlackboard(ModdingAPI::Exposed::NodeCanvas::Framework::Blackboard* bb) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::Blackboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E5E460))(bb);
  }
  static inline System_String* ProcessCommandBlockLines(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* blackboard, ModdingAPI::Exposed::System::String_array* lines, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* writeBlackboard) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*, ModdingAPI::Exposed::System::String_array*, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E5E4B0))(blackboard, lines, writeBlackboard);
  }
  static inline ModdingAPI::Exposed::System::String_array* SubstituteVarsInStrings(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* blackboard, ModdingAPI::Exposed::System::String_array* lines) {
    return reinterpret_cast<ModdingAPI::Exposed::System::String_array*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*, ModdingAPI::Exposed::System::String_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E5F1B0))(blackboard, lines);
  }
  static inline Il2CppObject* GetValue(System_String* val, bool allowListDecl) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(System_String*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E5FAC0))(val, allowListDecl);
  }
  static inline Il2CppObject* GetValue2(ModdingAPI::Exposed::System::String_array* fields) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::String_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E60790))(fields);
  }
  static inline Il2CppObject* GetValue3(ModdingAPI::Exposed::System::String_array* fields) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::String_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E60B70))(fields);
  }
  static inline Il2CppObject* GetValue4(ModdingAPI::Exposed::System::String_array* fields) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::String_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E61080))(fields);
  }
  static inline Il2CppObject* GetValue5(ModdingAPI::Exposed::System::String_array* fields) {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::String_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E616B0))(fields);
  }
  static inline System_String* ProcessAssignmentString(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* readBlackboard, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* writeBlackboard, System_String* str, int32_t eq) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E61B90))(readBlackboard, writeBlackboard, str, eq);
  }
  static inline float SumMissionSelectionWeights(ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue__array* data) {
    return reinterpret_cast<float(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue__array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E63AF0))(data);
  }
  static inline ModdingAPI::Exposed::MissionManagerBase* GetMissionManagerForFSM(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* blackboard) {
    return reinterpret_cast<ModdingAPI::Exposed::MissionManagerBase*(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E63CA0))(blackboard);
  }
  static inline System_String* BuildFullStageName(System_String* episode, System_String* stage, System_String* subStage, System_String* worker1, System_String* worker2) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, System_String*, System_String*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E63DF0))(episode, stage, subStage, worker1, worker2);
  }
  static inline void LogStateInfo(System_String* state, System_String* info) {
    reinterpret_cast<void(__fastcall*)(System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E63F80))(state, info);
  }
  static inline bool ParseConditional(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* blackboard, System_String* str, ModdingAPI::Exposed::NodeCanvas::Framework::Variable* lhVar, System_String* op, ModdingAPI::Exposed::NodeCanvas::Framework::Variable* rhVar) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*, System_String*, ModdingAPI::Exposed::NodeCanvas::Framework::Variable*, System_String*, ModdingAPI::Exposed::NodeCanvas::Framework::Variable*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E642B0))(blackboard, str, lhVar, op, rhVar);
  }
  static inline bool ParseConditionalForCommandBlock(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* blackboard, System_String* str, ModdingAPI::Exposed::NodeCanvas::Framework::Variable* lhVar, System_String* op, Il2CppObject* rhVal) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*, System_String*, ModdingAPI::Exposed::NodeCanvas::Framework::Variable*, System_String*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E64830))(blackboard, str, lhVar, op, rhVal);
  }
  static inline bool TestConditional(ModdingAPI::Exposed::NodeCanvas::Framework::Variable* lhVar, System_String* op, Il2CppObject* rhVal) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::NodeCanvas::Framework::Variable*, System_String*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E64CD0))(lhVar, op, rhVal);
  }
  static inline bool GetGameState(int32_t gameState) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E65C40))(gameState);
  }
  static inline bool TestItemRequirements(ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* requirementsDict, ModdingAPI::Exposed::System::Func_T__TResult_* countFunc, ModdingAPI::Exposed::System::Func_T__TResult_* measurableCountFunc, bool mustHaveAll, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* blackboard, ModdingAPI::Exposed::NodeCanvas::Framework::ITaskSystem* taskSystemOwner) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*, ModdingAPI::Exposed::System::Func_T__TResult_*, ModdingAPI::Exposed::System::Func_T__TResult_*, bool, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*, ModdingAPI::Exposed::NodeCanvas::Framework::ITaskSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E66FB0))(requirementsDict, countFunc, measurableCountFunc, mustHaveAll, blackboard, taskSystemOwner);
  }
  static inline int32_t GetItemRequirementsMatchCount(ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* requirementsDict, ModdingAPI::Exposed::System::Func_T__TResult_* countFunc, ModdingAPI::Exposed::System::Func_T__TResult_* measurableCountFunc, bool testAll, bool allowEarlyOut, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard* blackboard, ModdingAPI::Exposed::NodeCanvas::Framework::ITaskSystem* taskSystemOwner) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*, ModdingAPI::Exposed::System::Func_T__TResult_*, ModdingAPI::Exposed::System::Func_T__TResult_*, bool, bool, ModdingAPI::Exposed::NodeCanvas::Framework::IBlackboard*, ModdingAPI::Exposed::NodeCanvas::Framework::ITaskSystem*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E67100))(requirementsDict, countFunc, measurableCountFunc, testAll, allowEarlyOut, blackboard, taskSystemOwner);
  }
  static inline ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* BuildRequirementsDictionary(ModdingAPI::Exposed::System::Collections::Generic::List_T_* reqItemList) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E67780))(reqItemList);
  }
  static inline bool IsValidRequirementIndex(ModdingAPI::Exposed::System::Collections::Generic::List_T_* items, int32_t index) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::List_T_*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E67AC0))(items, index);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1E67BB0))();
  }
};
}