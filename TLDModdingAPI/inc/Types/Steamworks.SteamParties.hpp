// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.Steamworks.PartyBeaconID_t.hpp"
#include "ModdingAPI::Exposed::Steamworks::PartyBeaconID_t.hpp"
#include "ModdingAPI::Exposed::Steamworks::CSteamID.hpp"
#include "ModdingAPI::Exposed::Steamworks::SteamPartyBeaconLocation_t.hpp"
#include "ModdingAPI.Exposed.Steamworks.SteamAPICall_t.hpp"


namespace ModdingAPI::Exposed::Steamworks {
struct __SteamParties_Il2CppStaticFields {
};

struct __SteamParties_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SteamParties_Il2CppClass {
  Il2CppClass_1 _1;
  __SteamParties_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SteamParties_Il2CppVtbl vtbl;
};

class SteamParties {
public:
  // Il2Cpp fields:
  __SteamParties_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static methods:
  static inline uint32_t GetNumActiveBeacons() {
    return reinterpret_cast<uint32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x2814980))();
  }
  static inline ModdingAPI::Exposed::Steamworks::PartyBeaconID_t GetBeaconByIndex(uint32_t unIndex) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::PartyBeaconID_t(__fastcall*)(uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2814A30))(unIndex);
  }
  static inline bool GetBeaconDetails(ModdingAPI::Exposed::Steamworks::PartyBeaconID_t ulBeaconID, ModdingAPI::Exposed::Steamworks::CSteamID pSteamIDBeaconOwner, ModdingAPI::Exposed::Steamworks::SteamPartyBeaconLocation_t pLocation, System_String* pchMetadata, int32_t cchMetadata) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::PartyBeaconID_t, ModdingAPI::Exposed::Steamworks::CSteamID, ModdingAPI::Exposed::Steamworks::SteamPartyBeaconLocation_t, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2814B70))(ulBeaconID, pSteamIDBeaconOwner, pLocation, pchMetadata, cchMetadata);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t JoinParty(ModdingAPI::Exposed::Steamworks::PartyBeaconID_t ulBeaconID) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::PartyBeaconID_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2814D30))(ulBeaconID);
  }
  static inline bool GetNumAvailableBeaconLocations(uint32_t puNumLocations) {
    return reinterpret_cast<bool(__fastcall*)(uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2814E70))(puNumLocations);
  }
  static inline bool GetAvailableBeaconLocations(ModdingAPI::Exposed::Steamworks::SteamPartyBeaconLocation_t_array* pLocationList, uint32_t uMaxNumLocations) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamPartyBeaconLocation_t_array*, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2814F30))(pLocationList, uMaxNumLocations);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t CreateBeacon(uint32_t unOpenSlots, ModdingAPI::Exposed::Steamworks::SteamPartyBeaconLocation_t pBeaconLocation, System_String* pchConnectString, System_String* pchMetadata) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(uint32_t, ModdingAPI::Exposed::Steamworks::SteamPartyBeaconLocation_t, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2815000))(unOpenSlots, pBeaconLocation, pchConnectString, pchMetadata);
  }
  static inline void OnReservationCompleted(ModdingAPI::Exposed::Steamworks::PartyBeaconID_t ulBeacon, ModdingAPI::Exposed::Steamworks::CSteamID steamIDUser) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::PartyBeaconID_t, ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2815490))(ulBeacon, steamIDUser);
  }
  static inline void CancelReservation(ModdingAPI::Exposed::Steamworks::PartyBeaconID_t ulBeacon, ModdingAPI::Exposed::Steamworks::CSteamID steamIDUser) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Steamworks::PartyBeaconID_t, ModdingAPI::Exposed::Steamworks::CSteamID)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2815560))(ulBeacon, steamIDUser);
  }
  static inline ModdingAPI::Exposed::Steamworks::SteamAPICall_t ChangeNumOpenSlots(ModdingAPI::Exposed::Steamworks::PartyBeaconID_t ulBeacon, uint32_t unOpenSlots) {
    return reinterpret_cast<ModdingAPI::Exposed::Steamworks::SteamAPICall_t(__fastcall*)(ModdingAPI::Exposed::Steamworks::PartyBeaconID_t, uint32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2815630))(ulBeacon, unOpenSlots);
  }
  static inline bool DestroyBeacon(ModdingAPI::Exposed::Steamworks::PartyBeaconID_t ulBeacon) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::PartyBeaconID_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2815780))(ulBeacon);
  }
  static inline bool GetBeaconLocationData(ModdingAPI::Exposed::Steamworks::SteamPartyBeaconLocation_t BeaconLocation, int32_t eData, System_String* pchDataStringOut, int32_t cchDataStringOut) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Steamworks::SteamPartyBeaconLocation_t, int32_t, System_String*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2815840))(BeaconLocation, eData, pchDataStringOut, cchDataStringOut);
  }
};
}