// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.Threading.CancellationToken.hpp"
#include "ModdingAPI.Exposed.System.Runtime.CompilerServices.TaskAwaiter.hpp"
#include "ModdingAPI.Exposed.System.Runtime.CompilerServices.ConfiguredTaskAwaitable.hpp"
#include "ModdingAPI::Exposed::System::Threading::CancellationToken.hpp"


namespace ModdingAPI::Exposed::System::Threading::Tasks {
struct __Task_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Threading::Tasks::Task* t_currentTask;
  ModdingAPI::Exposed::System::Threading::Tasks::StackGuard* t_stackGuard;
  int32_t s_taskIdCounter;
  ModdingAPI::Exposed::System::Threading::Tasks::TaskFactory* s_factory;
  Il2CppObject* s_taskCompletionSentinel;
  bool s_asyncDebuggingEnabled;
  ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_* s_currentActiveTasks;
  Il2CppObject* s_activeTasksLock;
  ModdingAPI::Exposed::System::Action_T_* s_taskCancelCallback;
  ModdingAPI::Exposed::System::Func_TResult_* s_createContingentProperties;
  ModdingAPI::Exposed::System::Threading::Tasks::Task* s_completedTask;
  ModdingAPI::Exposed::System::Predicate_T_* s_IsExceptionObservedByParentPredicate;
  ModdingAPI::Exposed::System::Threading::ContextCallback* s_ecCallback;
  ModdingAPI::Exposed::System::Predicate_T_* s_IsTaskContinuationNullPredicate;
};

struct __Task_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _4_System_Threading_IThreadPoolWorkItem_ExecuteWorkItem;
  VirtualInvokeData _5_System_Threading_IThreadPoolWorkItem_MarkAborted;
  VirtualInvokeData _6_get_IsCompleted;
  VirtualInvokeData _7_System_IAsyncResult_get_AsyncWaitHandle;
  VirtualInvokeData _8_get_AsyncState;
  VirtualInvokeData _9_System_IAsyncResult_get_CompletedSynchronously;
  VirtualInvokeData _10_Dispose;
  VirtualInvokeData _11_get_ShouldNotifyDebuggerOfWaitCompletion;
  VirtualInvokeData _12_Dispose;
  VirtualInvokeData _13_ShouldReplicate;
  VirtualInvokeData _14_CreateReplicaTask;
  VirtualInvokeData _15_get_SavedStateForNextReplica;
  VirtualInvokeData _16_set_SavedStateFromPreviousReplica;
  VirtualInvokeData _17_get_HandedOverChildReplica;
  VirtualInvokeData _18_set_HandedOverChildReplica;
  VirtualInvokeData _19_InnerInvoke;
};

struct __Task_Il2CppClass {
  Il2CppClass_1 _1;
  __Task_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Task_Il2CppVtbl vtbl;
};

class Task {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C55A80;
  static inline    __Task_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Task_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Task_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Task_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  int32_t m_taskId;
  Il2CppObject* m_action;
  Il2CppObject* m_stateObject;
  ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler* m_taskScheduler;
  ModdingAPI::Exposed::System::Threading::Tasks::Task* m_parent;
  int32_t m_stateFlags;
  Il2CppObject* m_continuationObject;
  ModdingAPI::Exposed::System::Threading::Tasks::Task::ContingentProperties* m_contingentProperties;

  // Member methods:
  void ::ctor(bool canceled, int32_t creationOptions, ModdingAPI::Exposed::System::Threading::CancellationToken ct) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, bool, int32_t, ModdingAPI::Exposed::System::Threading::CancellationToken)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8A2F0))(this, canceled, creationOptions, ct);
  }
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8A490))(this);
  }
  void ::ctor(Il2CppObject* state, int32_t creationOptions, bool promiseStyle) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, Il2CppObject*, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8A4A0))(this, state, creationOptions, promiseStyle);
  }
  void ::ctor(ModdingAPI::Exposed::System::Delegate* action, Il2CppObject* state, ModdingAPI::Exposed::System::Threading::Tasks::Task* parent, ModdingAPI::Exposed::System::Threading::CancellationToken cancellationToken, int32_t creationOptions, int32_t internalOptions, ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler* scheduler) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Delegate*, Il2CppObject*, ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Threading::CancellationToken, int32_t, int32_t, ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8A5C0))(this, action, state, parent, cancellationToken, creationOptions, internalOptions, scheduler);
  }
  void TaskConstructorCore(Il2CppObject* action, Il2CppObject* state, ModdingAPI::Exposed::System::Threading::CancellationToken cancellationToken, int32_t creationOptions, int32_t internalOptions, ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler* scheduler) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, Il2CppObject*, Il2CppObject*, ModdingAPI::Exposed::System::Threading::CancellationToken, int32_t, int32_t, ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8A6F0))(this, action, state, cancellationToken, creationOptions, internalOptions, scheduler);
  }
  void AssignCancellationToken(ModdingAPI::Exposed::System::Threading::CancellationToken cancellationToken, ModdingAPI::Exposed::System::Threading::Tasks::Task* antecedent, ModdingAPI::Exposed::System::Threading::Tasks::TaskContinuation* continuation) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Threading::CancellationToken, ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Threading::Tasks::TaskContinuation*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8A920))(this, cancellationToken, antecedent, continuation);
  }
  void PossiblyCaptureContext(int32_t stackMark) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8AEB0))(this, stackMark);
  }
  int32_t get_Options() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8AFC0))(this);
  }
  bool AtomicStateUpdate(int32_t newBits, int32_t illegalBits) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8B060))(this, newBits, illegalBits);
  }
  bool AtomicStateUpdate(int32_t newBits, int32_t illegalBits, int32_t oldFlags) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8B160))(this, newBits, illegalBits, oldFlags);
  }
  void SetNotificationForWaitCompletion(bool enabled) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8B280))(this, enabled);
  }
  bool NotifyDebuggerOfWaitCompletionIfNecessary() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8B390))(this);
  }
  bool get_IsWaitNotificationEnabledOrNotRanToCompletion() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8B3E0))(this);
  }
  bool get_ShouldNotifyDebuggerOfWaitCompletion() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8B400))(this);
  }
  bool get_IsWaitNotificationEnabled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8B400))(this);
  }
  void NotifyDebuggerOfWaitCompletion() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8B420))(this);
  }
  bool MarkStarted() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8B450))(this);
  }
  bool FireTaskScheduledIfNeeded(ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler* ts) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this, ts);
  }
  void AddNewChild() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8B470))(this);
  }
  void DisregardChild() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8B500))(this);
  }
  int32_t get_Id() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8B810))(this);
  }
  ModdingAPI::Exposed::System::AggregateException* get_Exception() {
    return reinterpret_cast<ModdingAPI::Exposed::System::AggregateException*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8BD00))(this);
  }
  int32_t get_Status() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8BD30))(this);
  }
  bool get_IsCanceled() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8BD90))(this);
  }
  bool get_IsCancellationRequested() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8BDB0))(this);
  }
  ModdingAPI::Exposed::System::Threading::Tasks::Task::ContingentProperties* EnsureContingentPropertiesInitialized(bool needsProtection) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task::ContingentProperties*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8BDF0))(this, needsProtection);
  }
  ModdingAPI::Exposed::System::Threading::Tasks::Task::ContingentProperties* EnsureContingentPropertiesInitializedCore(bool needsProtection) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task::ContingentProperties*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8BE20))(this, needsProtection);
  }
  ModdingAPI::Exposed::System::Threading::CancellationToken get_CancellationToken() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::CancellationToken(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8C010))(this);
  }
  bool get_IsCancellationAcknowledged() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8C030))(this);
  }
  bool get_IsCompleted() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8C050))(this);
  }
  bool get_IsRanToCompletion() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8C100))(this);
  }
  int32_t get_CreationOptions() {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8C120))(this);
  }
  ModdingAPI::Exposed::System::Threading::WaitHandle* System::IAsyncResult::get_AsyncWaitHandle() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::WaitHandle*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8C140))(this);
  }
  Il2CppObject* get_AsyncState() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110A0))(this);
  }
  bool System::IAsyncResult::get_CompletedSynchronously() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077A0))(this);
  }
  ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler* get_ExecutingTaskScheduler() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110B0))(this);
  }
  ModdingAPI::Exposed::System::Threading::ManualResetEventSlim* get_CompletedEvent() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::ManualResetEventSlim*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8C460))(this);
  }
  bool get_IsSelfReplicatingRoot() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8C680))(this);
  }
  bool get_IsChildReplica() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8C6A0))(this);
  }
  bool get_ExceptionRecorded() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8C6C0))(this);
  }
  bool get_IsFaulted() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8C710))(this);
  }
  ModdingAPI::Exposed::System::Threading::ExecutionContext* get_CapturedContext() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::ExecutionContext*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8C730))(this);
  }
  void set_CapturedContext(ModdingAPI::Exposed::System::Threading::ExecutionContext* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Threading::ExecutionContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8C800))(this, value);
  }
  void Dispose() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8C920))(this);
  }
  void Dispose(bool disposing) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8C9D0))(this, disposing);
  }
  void ScheduleAndStart(bool needsProtection) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8CB20))(this, needsProtection);
  }
  void AddException(Il2CppObject* exceptionObject) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8CE30))(this, exceptionObject);
  }
  void AddException(Il2CppObject* exceptionObject, bool representsCancellation) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, Il2CppObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8CE40))(this, exceptionObject, representsCancellation);
  }
  ModdingAPI::Exposed::System::AggregateException* GetExceptions(bool includeTaskCanceledExceptions) {
    return reinterpret_cast<ModdingAPI::Exposed::System::AggregateException*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8D200))(this, includeTaskCanceledExceptions);
  }
  ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_* GetExceptionDispatchInfos() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::ObjectModel::ReadOnlyCollection_T_*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8D550))(this);
  }
  ModdingAPI::Exposed::System::Runtime::ExceptionServices::ExceptionDispatchInfo* GetCancellationExceptionDispatchInfo() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::ExceptionServices::ExceptionDispatchInfo*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8D760))(this);
  }
  void ThrowIfExceptional(bool includeTaskCanceledExceptions) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8D790))(this, includeTaskCanceledExceptions);
  }
  void UpdateExceptionObservedStatus() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8D840))(this);
  }
  bool get_IsExceptionObservedByParent() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8D920))(this);
  }
  bool get_IsDelegateInvoked() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8D940))(this);
  }
  void Finish(bool bUserDelegateExecuted) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8D960))(this, bUserDelegateExecuted);
  }
  void FinishStageTwo() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8DB50))(this);
  }
  void FinishStageThree() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8DD20))(this);
  }
  void ProcessChildCompletion(ModdingAPI::Exposed::System::Threading::Tasks::Task* childTask) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8DD80))(this, childTask);
  }
  void AddExceptionsFromChildren() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8E050))(this);
  }
  void FinishThreadAbortedTask(bool bTAEAddedToExceptionHolder, bool delegateRan) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8E300))(this, bTAEAddedToExceptionHolder, delegateRan);
  }
  void Execute() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8E380))(this);
  }
  bool ShouldReplicate() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x403F70))(this);
  }
  ModdingAPI::Exposed::System::Threading::Tasks::Task* CreateReplicaTask(ModdingAPI::Exposed::System::Action_T_* taskReplicaDelegate, Il2CppObject* stateObject, ModdingAPI::Exposed::System::Threading::Tasks::Task* parentTask, ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler* taskScheduler, int32_t creationOptionsForReplica, int32_t internalOptionsForReplica) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Action_T_*, Il2CppObject*, ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8E510))(this, taskReplicaDelegate, stateObject, parentTask, taskScheduler, creationOptionsForReplica, internalOptionsForReplica);
  }
  Il2CppObject* get_SavedStateForNextReplica() {
    return reinterpret_cast<Il2CppObject*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this);
  }
  void set_SavedStateFromPreviousReplica(Il2CppObject* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, value);
  }
  ModdingAPI::Exposed::System::Threading::Tasks::Task* get_HandedOverChildReplica() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3077B0))(this);
  }
  void set_HandedOverChildReplica(ModdingAPI::Exposed::System::Threading::Tasks::Task* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2FEC40))(this, value);
  }
  void System::Threading::IThreadPoolWorkItem::ExecuteWorkItem() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8E920))(this);
  }
  void System::Threading::IThreadPoolWorkItem::MarkAborted(ModdingAPI::Exposed::System::Threading::ThreadAbortException* tae) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Threading::ThreadAbortException*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8E930))(this, tae);
  }
  bool ExecuteEntry(bool bPreventDoubleExecution) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8E9C0))(this, bPreventDoubleExecution);
  }
  void ExecuteWithThreadLocal(ModdingAPI::Exposed::System::Threading::Tasks::Task* currentTaskSlot) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8EBC0))(this, currentTaskSlot);
  }
  void InnerInvoke() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8EFE0))(this);
  }
  void InnerInvokeWithArg(ModdingAPI::Exposed::System::Threading::Tasks::Task* childTask) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8F0C0))(this, childTask);
  }
  void HandleException(ModdingAPI::Exposed::System::Exception* unhandledException) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Exception*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8F0F0))(this, unhandledException);
  }
  ModdingAPI::Exposed::System::Runtime::CompilerServices::TaskAwaiter GetAwaiter() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::CompilerServices::TaskAwaiter(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3201B0))(this);
  }
  ModdingAPI::Exposed::System::Runtime::CompilerServices::ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Runtime::CompilerServices::ConfiguredTaskAwaitable(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8F280))(this, continueOnCapturedContext);
  }
  void SetContinuationForAwait(ModdingAPI::Exposed::System::Action* continuationAction, bool continueOnCapturedContext, bool flowExecutionContext, int32_t stackMark) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Action*, bool, bool, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8F2B0))(this, continuationAction, continueOnCapturedContext, flowExecutionContext, stackMark);
  }
  void Wait() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8F710))(this);
  }
  bool Wait(int32_t millisecondsTimeout, ModdingAPI::Exposed::System::Threading::CancellationToken cancellationToken) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, int32_t, ModdingAPI::Exposed::System::Threading::CancellationToken)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8F7E0))(this, millisecondsTimeout, cancellationToken);
  }
  bool WrappedTryRunInline() {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8F940))(this);
  }
  bool InternalWait(int32_t millisecondsTimeout, ModdingAPI::Exposed::System::Threading::CancellationToken cancellationToken) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, int32_t, ModdingAPI::Exposed::System::Threading::CancellationToken)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8FA60))(this, millisecondsTimeout, cancellationToken);
  }
  bool SpinThenBlockingWait(int32_t millisecondsTimeout, ModdingAPI::Exposed::System::Threading::CancellationToken cancellationToken) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, int32_t, ModdingAPI::Exposed::System::Threading::CancellationToken)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8FBD0))(this, millisecondsTimeout, cancellationToken);
  }
  bool SpinWait(int32_t millisecondsTimeout) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD90020))(this, millisecondsTimeout);
  }
  bool InternalCancel(bool bCancelNonExecutingOnly) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD900C0))(this, bCancelNonExecutingOnly);
  }
  void RecordInternalCancellationRequest() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD903F0))(this);
  }
  void RecordInternalCancellationRequest(ModdingAPI::Exposed::System::Threading::CancellationToken tokenToRecord) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Threading::CancellationToken)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD90430))(this, tokenToRecord);
  }
  void RecordInternalCancellationRequest(ModdingAPI::Exposed::System::Threading::CancellationToken tokenToRecord, Il2CppObject* cancellationException) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Threading::CancellationToken, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD90540))(this, tokenToRecord, cancellationException);
  }
  void CancellationCleanupLogic() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD90670))(this);
  }
  void SetCancellationAcknowledged() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD907F0))(this);
  }
  void FinishContinuations() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD90810))(this);
  }
  void LogFinishCompletionNotification() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x40B4A0))(this);
  }
  ModdingAPI::Exposed::System::Threading::Tasks::Task* ContinueWith(ModdingAPI::Exposed::System::Action_T_* continuationAction) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Action_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD90EA0))(this, continuationAction);
  }
  ModdingAPI::Exposed::System::Threading::Tasks::Task* ContinueWith(ModdingAPI::Exposed::System::Action_T_* continuationAction, ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler* scheduler, ModdingAPI::Exposed::System::Threading::CancellationToken cancellationToken, int32_t continuationOptions, int32_t stackMark) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Action_T_*, ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler*, ModdingAPI::Exposed::System::Threading::CancellationToken, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD91020))(this, continuationAction, scheduler, cancellationToken, continuationOptions, stackMark);
  }
  ModdingAPI::Exposed::System::Threading::Tasks::Task* ContinueWith(ModdingAPI::Exposed::System::Action_T1__T2_* continuationAction, Il2CppObject* state, ModdingAPI::Exposed::System::Threading::CancellationToken cancellationToken, int32_t continuationOptions, ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler* scheduler) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Action_T1__T2_*, Il2CppObject*, ModdingAPI::Exposed::System::Threading::CancellationToken, int32_t, ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD912A0))(this, continuationAction, state, cancellationToken, continuationOptions, scheduler);
  }
  ModdingAPI::Exposed::System::Threading::Tasks::Task* ContinueWith(ModdingAPI::Exposed::System::Action_T1__T2_* continuationAction, Il2CppObject* state, ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler* scheduler, ModdingAPI::Exposed::System::Threading::CancellationToken cancellationToken, int32_t continuationOptions, int32_t stackMark) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Action_T1__T2_*, Il2CppObject*, ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler*, ModdingAPI::Exposed::System::Threading::CancellationToken, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD912E0))(this, continuationAction, state, scheduler, cancellationToken, continuationOptions, stackMark);
  }
  void ContinueWithCore(ModdingAPI::Exposed::System::Threading::Tasks::Task* continuationTask, ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler* scheduler, ModdingAPI::Exposed::System::Threading::CancellationToken cancellationToken, int32_t options) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler*, ModdingAPI::Exposed::System::Threading::CancellationToken, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD916F0))(this, continuationTask, scheduler, cancellationToken, options);
  }
  void AddCompletionAction(ModdingAPI::Exposed::System::Threading::Tasks::ITaskCompletionAction* action) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Threading::Tasks::ITaskCompletionAction*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD919C0))(this, action);
  }
  void AddCompletionAction(ModdingAPI::Exposed::System::Threading::Tasks::ITaskCompletionAction* action, bool addBeforeOthers) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Threading::Tasks::ITaskCompletionAction*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD919D0))(this, action, addBeforeOthers);
  }
  bool AddTaskContinuationComplex(Il2CppObject* tc, bool addBeforeOthers) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, Il2CppObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD91A90))(this, tc, addBeforeOthers);
  }
  bool AddTaskContinuation(Il2CppObject* tc, bool addBeforeOthers) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, Il2CppObject*, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD91E90))(this, tc, addBeforeOthers);
  }
  void RemoveContinuation(Il2CppObject* continuationObject) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD91F20))(this, continuationObject);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Threading::Tasks::Task*> t_currentTask = __CppStaticProperty<ModdingAPI::Exposed::System::Threading::Tasks::Task*>(
   []() { return &GetStaticClassInstance()->pStaticFields->t_currentTask; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Threading::Tasks::StackGuard*> t_stackGuard = __CppStaticProperty<ModdingAPI::Exposed::System::Threading::Tasks::StackGuard*>(
   []() { return &GetStaticClassInstance()->pStaticFields->t_stackGuard; }
  );
  static inline __CppStaticProperty<int32_t> s_taskIdCounter = __CppStaticProperty<int32_t>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_taskIdCounter; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Threading::Tasks::TaskFactory*> s_factory = __CppStaticProperty<ModdingAPI::Exposed::System::Threading::Tasks::TaskFactory*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_factory; }
  );
  static inline __CppStaticProperty<Il2CppObject*> s_taskCompletionSentinel = __CppStaticProperty<Il2CppObject*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_taskCompletionSentinel; }
  );
  static inline __CppStaticProperty<bool> s_asyncDebuggingEnabled = __CppStaticProperty<bool>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_asyncDebuggingEnabled; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*> s_currentActiveTasks = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::Dictionary_TKey__TValue_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_currentActiveTasks; }
  );
  static inline __CppStaticProperty<Il2CppObject*> s_activeTasksLock = __CppStaticProperty<Il2CppObject*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_activeTasksLock; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Action_T_*> s_taskCancelCallback = __CppStaticProperty<ModdingAPI::Exposed::System::Action_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_taskCancelCallback; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Func_TResult_*> s_createContingentProperties = __CppStaticProperty<ModdingAPI::Exposed::System::Func_TResult_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_createContingentProperties; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Threading::Tasks::Task*> s_completedTask = __CppStaticProperty<ModdingAPI::Exposed::System::Threading::Tasks::Task*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_completedTask; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Predicate_T_*> s_IsExceptionObservedByParentPredicate = __CppStaticProperty<ModdingAPI::Exposed::System::Predicate_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_IsExceptionObservedByParentPredicate; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Threading::ContextCallback*> s_ecCallback = __CppStaticProperty<ModdingAPI::Exposed::System::Threading::ContextCallback*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_ecCallback; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Predicate_T_*> s_IsTaskContinuationNullPredicate = __CppStaticProperty<ModdingAPI::Exposed::System::Predicate_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->s_IsTaskContinuationNullPredicate; }
  );

  // Static methods:
  static inline bool AddToActiveTasks(ModdingAPI::Exposed::System::Threading::Tasks::Task* task) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD89F60))(task);
  }
  static inline void RemoveFromActiveTasks(int32_t taskId) {
    reinterpret_cast<void(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8A150))(taskId);
  }
  static inline void TaskCancelCallback(Il2CppObject* o) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8AD70))(o);
  }
  static inline int32_t OptionsMethod(int32_t flags) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x7F83B0))(flags);
  }
  static inline ModdingAPI::Exposed::System::Threading::Tasks::Task* InternalStartNew(ModdingAPI::Exposed::System::Threading::Tasks::Task* creatingTask, ModdingAPI::Exposed::System::Delegate* action, Il2CppObject* state, ModdingAPI::Exposed::System::Threading::CancellationToken cancellationToken, ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler* scheduler, int32_t options, int32_t internalOptions, int32_t stackMark) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*, ModdingAPI::Exposed::System::Delegate*, Il2CppObject*, ModdingAPI::Exposed::System::Threading::CancellationToken, ModdingAPI::Exposed::System::Threading::Tasks::TaskScheduler*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8B540))(creatingTask, action, state, cancellationToken, scheduler, options, internalOptions, stackMark);
  }
  static inline int32_t NewId() {
    return reinterpret_cast<int32_t(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8B750))();
  }
  static inline ModdingAPI::Exposed::System::Threading::Tasks::Task* get_InternalCurrent() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8B970))();
  }
  static inline ModdingAPI::Exposed::System::Threading::Tasks::Task* InternalCurrentIfAttached(int32_t creationOptions) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task*(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8BA50))(creationOptions);
  }
  static inline ModdingAPI::Exposed::System::Threading::Tasks::StackGuard* get_CurrentStackGuard() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::StackGuard*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8BB00))();
  }
  static inline bool IsCompletedMethod(int32_t flags) {
    return reinterpret_cast<bool(__fastcall*)(int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8C0F0))(flags);
  }
  static inline ModdingAPI::Exposed::System::Threading::Tasks::Task* get_CompletedTask() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task*(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8C250))();
  }
  static inline ModdingAPI::Exposed::System::Threading::ExecutionContext* CopyExecutionContext(ModdingAPI::Exposed::System::Threading::ExecutionContext* capturedContext) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::ExecutionContext*(__fastcall*)(ModdingAPI::Exposed::System::Threading::ExecutionContext*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8C860))(capturedContext);
  }
  static inline void ExecuteSelfReplicating(ModdingAPI::Exposed::System::Threading::Tasks::Task* root) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8E6B0))(root);
  }
  static inline void ExecutionContextCallback(Il2CppObject* obj) {
    reinterpret_cast<void(__fastcall*)(Il2CppObject*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD8EEE0))(obj);
  }
  static inline void CreationOptionsFromContinuationOptions(int32_t continuationOptions, int32_t creationOptions, int32_t internalOptions) {
    reinterpret_cast<void(__fastcall*)(int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD91560))(continuationOptions, creationOptions, internalOptions);
  }
  static inline ModdingAPI::Exposed::System::Threading::Tasks::Task* FromException(ModdingAPI::Exposed::System::Exception* exception) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task*(__fastcall*)(ModdingAPI::Exposed::System::Exception*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD922A0))(exception);
  }
  static inline ModdingAPI::Exposed::System::Threading::Tasks::Task* FromCancellation(ModdingAPI::Exposed::System::Threading::CancellationToken cancellationToken) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task*(__fastcall*)(ModdingAPI::Exposed::System::Threading::CancellationToken)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD92340))(cancellationToken);
  }
  static inline ModdingAPI::Exposed::System::Threading::Tasks::Task* Run(ModdingAPI::Exposed::System::Action* action) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task*(__fastcall*)(ModdingAPI::Exposed::System::Action*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD924E0))(action);
  }
  static inline ModdingAPI::Exposed::System::Threading::Tasks::Task* Delay(int32_t millisecondsDelay, ModdingAPI::Exposed::System::Threading::CancellationToken cancellationToken) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task*(__fastcall*)(int32_t, ModdingAPI::Exposed::System::Threading::CancellationToken)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD925F0))(millisecondsDelay, cancellationToken);
  }
  static inline ModdingAPI::Exposed::System::Threading::Tasks::Task_TResult_* WhenAny(ModdingAPI::Exposed::System::Threading::Tasks::Task_array* tasks) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Threading::Tasks::Task_TResult_*(__fastcall*)(ModdingAPI::Exposed::System::Threading::Tasks::Task_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xD92D20))(tasks);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0xD92F10))();
  }
};
}