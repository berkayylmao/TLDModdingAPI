// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.RuntimeTypeHandle.hpp"


namespace ModdingAPI::Exposed::System::Reflection {
struct __TypeInfo_Il2CppStaticFields {
};

struct __TypeInfo_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
  VirtualInvokeData _7_get_MemberType;
  VirtualInvokeData _9_get_DeclaringType;
  VirtualInvokeData _10_get_ReflectedType;
  VirtualInvokeData _11_GetCustomAttributes;
  VirtualInvokeData _12_GetCustomAttributes;
  VirtualInvokeData _13_IsDefined;
  VirtualInvokeData _14_GetCustomAttributesData;
  VirtualInvokeData _15_get_MetadataToken;
  VirtualInvokeData _17_get_DeclaringMethod;
  VirtualInvokeData _18_MakePointerType;
  VirtualInvokeData _19_MakeByRefType;
  VirtualInvokeData _20_MakeArrayType;
  VirtualInvokeData _21_MakeArrayType;
  VirtualInvokeData _22_GetTypeCodeImpl;
  VirtualInvokeData _25_InvokeMember;
  VirtualInvokeData _27_get_TypeHandle;
  VirtualInvokeData _31_GetArrayRank;
  VirtualInvokeData _33_GetConstructor;
  VirtualInvokeData _34_GetConstructor;
  VirtualInvokeData _35_GetConstructor;
  VirtualInvokeData _37_GetConstructors;
  VirtualInvokeData _39_GetMethod;
  VirtualInvokeData _40_GetMethod;
  VirtualInvokeData _41_GetMethod;
  VirtualInvokeData _42_GetMethod;
  VirtualInvokeData _44_GetMethods;
  VirtualInvokeData _47_GetField;
  VirtualInvokeData _48_GetFields;
  VirtualInvokeData _51_FindInterfaces;
  VirtualInvokeData _52_GetEvent;
  VirtualInvokeData _55_GetProperty;
  VirtualInvokeData _56_GetProperty;
  VirtualInvokeData _57_GetProperty;
  VirtualInvokeData _58_GetProperty;
  VirtualInvokeData _59_GetProperty;
  VirtualInvokeData _62_GetProperties;
  VirtualInvokeData _63_GetNestedType;
  VirtualInvokeData _65_GetMember;
  VirtualInvokeData _66_GetMember;
  VirtualInvokeData _67_GetMember;
  VirtualInvokeData _68_get_Attributes;
  VirtualInvokeData _69_get_GenericParameterAttributes;
  VirtualInvokeData _70_get_IsNotPublic;
  VirtualInvokeData _71_get_IsPublic;
  VirtualInvokeData _72_get_IsNestedPublic;
  VirtualInvokeData _73_get_IsNestedAssembly;
  VirtualInvokeData _74_get_IsExplicitLayout;
  VirtualInvokeData _75_get_IsClass;
  VirtualInvokeData _76_get_IsInterface;
  VirtualInvokeData _77_get_IsValueType;
  VirtualInvokeData _78_get_IsAbstract;
  VirtualInvokeData _79_get_IsSealed;
  VirtualInvokeData _80_get_IsEnum;
  VirtualInvokeData _81_get_IsSerializable;
  VirtualInvokeData _82_get_IsArray;
  VirtualInvokeData _83_get_IsSzArray;
  VirtualInvokeData _84_get_IsGenericType;
  VirtualInvokeData _85_get_IsGenericTypeDefinition;
  VirtualInvokeData _86_get_IsConstructedGenericType;
  VirtualInvokeData _87_get_IsGenericParameter;
  VirtualInvokeData _88_get_GenericParameterPosition;
  VirtualInvokeData _89_get_ContainsGenericParameters;
  VirtualInvokeData _90_GetGenericParameterConstraints;
  VirtualInvokeData _91_get_IsByRef;
  VirtualInvokeData _92_get_IsPointer;
  VirtualInvokeData _93_get_IsPrimitive;
  VirtualInvokeData _94_get_IsCOMObject;
  VirtualInvokeData _95_get_HasElementType;
  VirtualInvokeData _96_get_IsContextful;
  VirtualInvokeData _97_get_IsMarshalByRef;
  VirtualInvokeData _98_IsValueTypeImpl;
  VirtualInvokeData _105_MakeGenericType;
  VirtualInvokeData _106_IsContextfulImpl;
  VirtualInvokeData _107_IsMarshalByRefImpl;
  VirtualInvokeData _109_GetGenericArguments;
  VirtualInvokeData _110_GetGenericTypeDefinition;
  VirtualInvokeData _112_GetEnumNames;
  VirtualInvokeData _113_GetEnumValues;
  VirtualInvokeData _114_GetEnumUnderlyingType;
  VirtualInvokeData _115_IsEnumDefined;
  VirtualInvokeData _116_GetEnumName;
  VirtualInvokeData _118_IsSubclassOf;
  VirtualInvokeData _119_IsInstanceOfType;
  VirtualInvokeData _120_IsAssignableFrom;
  VirtualInvokeData _121_IsEquivalentTo;
  VirtualInvokeData _122_FormatTypeName;
  VirtualInvokeData _123_Equals;
  VirtualInvokeData _124_GetType;
  VirtualInvokeData _125_get_IsSZArray;
  VirtualInvokeData _126_System_Reflection_IReflectableType_GetTypeInfo;
  VirtualInvokeData _127_get_ImplementedInterfaces;
  VirtualInvokeData _65535__ctor;
};

struct __TypeInfo_Il2CppClass {
  Il2CppClass_1 _1;
  __TypeInfo_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __TypeInfo_Il2CppVtbl vtbl;
};

class TypeInfo {
public:
  // Il2Cpp fields:
  __TypeInfo_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::RuntimeTypeHandle _impl;

  // Member methods:
  void ::ctor() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Reflection::TypeInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF2B660))(this);
  }
  ModdingAPI::Exposed::System::Reflection::TypeInfo* System::Reflection::IReflectableType::GetTypeInfo() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Reflection::TypeInfo*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::TypeInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3201B0))(this);
  }
  ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_* get_ImplementedInterfaces() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Generic::IEnumerable_T_*(__fastcall*)(ModdingAPI::Exposed::System::Reflection::TypeInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xF2B6F0))(this);
  }
};
}