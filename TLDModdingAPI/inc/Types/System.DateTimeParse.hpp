// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.System.DateTime.hpp"
#include "ModdingAPI::Exposed::System::TimeSpan.hpp"
#include "ModdingAPI::Exposed::System::DateTime.hpp"
#include "ModdingAPI::Exposed::System::DateTimeResult.hpp"
#include "ModdingAPI::Exposed::System::__DTString.hpp"
#include "ModdingAPI::Exposed::System::DateTimeToken.hpp"
#include "ModdingAPI::Exposed::System::DateTimeRawInfo.hpp"
#include "ModdingAPI::Exposed::System::ParsingInfo.hpp"


namespace ModdingAPI::Exposed::System {
struct __DateTimeParse_Il2CppStaticFields {
  ModdingAPI::Exposed::System::DateTimeParse::MatchNumberDelegate* m_hebrewNumberParser;
  ModdingAPI::Exposed::System::DateTimeParse::DS_array_array* dateParsingStates;
};

struct __DateTimeParse_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __DateTimeParse_Il2CppClass {
  Il2CppClass_1 _1;
  __DateTimeParse_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __DateTimeParse_Il2CppVtbl vtbl;
};

class DateTimeParse {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C8DE58;
  static inline    __DateTimeParse_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __DateTimeParse_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__DateTimeParse_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __DateTimeParse_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::DateTimeParse::MatchNumberDelegate*> m_hebrewNumberParser = __CppStaticProperty<ModdingAPI::Exposed::System::DateTimeParse::MatchNumberDelegate*>(
   []() { return &GetStaticClassInstance()->pStaticFields->m_hebrewNumberParser; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::DateTimeParse::DS_array_array*> dateParsingStates = __CppStaticProperty<ModdingAPI::Exposed::System::DateTimeParse::DS_array_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->dateParsingStates; }
  );

  // Static methods:
  static inline ModdingAPI::Exposed::System::DateTime ParseExact(System_String* s, System_String* format, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t style) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(System_String*, System_String*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1027960))(s, format, dtfi, style);
  }
  static inline ModdingAPI::Exposed::System::DateTime ParseExact(System_String* s, System_String* format, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t style, ModdingAPI::Exposed::System::TimeSpan offset) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(System_String*, System_String*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t, ModdingAPI::Exposed::System::TimeSpan)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1027AD0))(s, format, dtfi, style, offset);
  }
  static inline bool TryParseExact(System_String* s, System_String* format, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t style, ModdingAPI::Exposed::System::DateTime result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, System_String*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1027C80))(s, format, dtfi, style, result);
  }
  static inline bool TryParseExact(System_String* s, System_String* format, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t style, ModdingAPI::Exposed::System::DateTime result, ModdingAPI::Exposed::System::TimeSpan offset) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, System_String*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t, ModdingAPI::Exposed::System::DateTime, ModdingAPI::Exposed::System::TimeSpan)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1027DF0))(s, format, dtfi, style, result, offset);
  }
  static inline bool TryParseExact(System_String* s, System_String* format, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t style, ModdingAPI::Exposed::System::DateTimeResult result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, System_String*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t, ModdingAPI::Exposed::System::DateTimeResult)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1027FC0))(s, format, dtfi, style, result);
  }
  static inline bool MatchWord(ModdingAPI::Exposed::System::__DTString str, System_String* target) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1028120))(str, target);
  }
  static inline bool GetTimeZoneName(ModdingAPI::Exposed::System::__DTString str) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10282C0))(str);
  }
  static inline bool IsDigit(wchar_t ch) {
    return reinterpret_cast<bool(__fastcall*)(wchar_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10283B0))(ch);
  }
  static inline bool ParseFraction(ModdingAPI::Exposed::System::__DTString str, double result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10283D0))(str, result);
  }
  static inline bool ParseTimeZone(ModdingAPI::Exposed::System::__DTString str, ModdingAPI::Exposed::System::TimeSpan result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, ModdingAPI::Exposed::System::TimeSpan)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1028510))(str, result);
  }
  static inline bool HandleTimeZone(ModdingAPI::Exposed::System::__DTString str, ModdingAPI::Exposed::System::DateTimeResult result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, ModdingAPI::Exposed::System::DateTimeResult)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10288A0))(str, result);
  }
  static inline bool Lex(int32_t dps, ModdingAPI::Exposed::System::__DTString str, ModdingAPI::Exposed::System::DateTimeToken dtok, ModdingAPI::Exposed::System::DateTimeRawInfo raw, ModdingAPI::Exposed::System::DateTimeResult result, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t styles) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, ModdingAPI::Exposed::System::__DTString, ModdingAPI::Exposed::System::DateTimeToken, ModdingAPI::Exposed::System::DateTimeRawInfo, ModdingAPI::Exposed::System::DateTimeResult, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1028A40))(dps, str, dtok, raw, result, dtfi, styles);
  }
  static inline bool VerifyValidPunctuation(ModdingAPI::Exposed::System::__DTString str) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1029A20))(str);
  }
  static inline bool GetYearMonthDayOrder(System_String* datePattern, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t order) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1029C00))(datePattern, dtfi, order);
  }
  static inline bool GetYearMonthOrder(System_String* pattern, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t order) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1029E30))(pattern, dtfi, order);
  }
  static inline bool GetMonthDayOrder(System_String* pattern, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t order) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1029F80))(pattern, dtfi, order);
  }
  static inline bool TryAdjustYear(ModdingAPI::Exposed::System::DateTimeResult result, int32_t year, int32_t adjustedYear) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102A110))(result, year, adjustedYear);
  }
  static inline bool SetDateYMD(ModdingAPI::Exposed::System::DateTimeResult result, int32_t year, int32_t month, int32_t day) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102A200))(result, year, month, day);
  }
  static inline bool SetDateMDY(ModdingAPI::Exposed::System::DateTimeResult result, int32_t month, int32_t day, int32_t year) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102A280))(result, month, day, year);
  }
  static inline bool SetDateDMY(ModdingAPI::Exposed::System::DateTimeResult result, int32_t day, int32_t month, int32_t year) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102A360))(result, day, month, year);
  }
  static inline bool SetDateYDM(ModdingAPI::Exposed::System::DateTimeResult result, int32_t year, int32_t day, int32_t month) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102A440))(result, year, day, month);
  }
  static inline void GetDefaultYear(ModdingAPI::Exposed::System::DateTimeResult result, int32_t styles) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102A520))(result, styles);
  }
  static inline bool GetDayOfNN(ModdingAPI::Exposed::System::DateTimeResult result, int32_t styles, ModdingAPI::Exposed::System::DateTimeRawInfo raw, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, int32_t, ModdingAPI::Exposed::System::DateTimeRawInfo, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102A600))(result, styles, raw, dtfi);
  }
  static inline bool GetDayOfNNN(ModdingAPI::Exposed::System::DateTimeResult result, ModdingAPI::Exposed::System::DateTimeRawInfo raw, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, ModdingAPI::Exposed::System::DateTimeRawInfo, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102A7C0))(result, raw, dtfi);
  }
  static inline bool GetDayOfMN(ModdingAPI::Exposed::System::DateTimeResult result, int32_t styles, ModdingAPI::Exposed::System::DateTimeRawInfo raw, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, int32_t, ModdingAPI::Exposed::System::DateTimeRawInfo, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102ACB0))(result, styles, raw, dtfi);
  }
  static inline bool GetHebrewDayOfNM(ModdingAPI::Exposed::System::DateTimeResult result, ModdingAPI::Exposed::System::DateTimeRawInfo raw, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, ModdingAPI::Exposed::System::DateTimeRawInfo, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102AF30))(result, raw, dtfi);
  }
  static inline bool GetDayOfNM(ModdingAPI::Exposed::System::DateTimeResult result, int32_t styles, ModdingAPI::Exposed::System::DateTimeRawInfo raw, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, int32_t, ModdingAPI::Exposed::System::DateTimeRawInfo, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102B0C0))(result, styles, raw, dtfi);
  }
  static inline bool GetDayOfMNN(ModdingAPI::Exposed::System::DateTimeResult result, ModdingAPI::Exposed::System::DateTimeRawInfo raw, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, ModdingAPI::Exposed::System::DateTimeRawInfo, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102B340))(result, raw, dtfi);
  }
  static inline bool GetDayOfYNN(ModdingAPI::Exposed::System::DateTimeResult result, ModdingAPI::Exposed::System::DateTimeRawInfo raw, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, ModdingAPI::Exposed::System::DateTimeRawInfo, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102B810))(result, raw, dtfi);
  }
  static inline bool GetDayOfNNY(ModdingAPI::Exposed::System::DateTimeResult result, ModdingAPI::Exposed::System::DateTimeRawInfo raw, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, ModdingAPI::Exposed::System::DateTimeRawInfo, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102B9F0))(result, raw, dtfi);
  }
  static inline bool GetDayOfYMN(ModdingAPI::Exposed::System::DateTimeResult result, ModdingAPI::Exposed::System::DateTimeRawInfo raw, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, ModdingAPI::Exposed::System::DateTimeRawInfo, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102BC20))(result, raw, dtfi);
  }
  static inline bool GetDayOfYN(ModdingAPI::Exposed::System::DateTimeResult result, ModdingAPI::Exposed::System::DateTimeRawInfo raw, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, ModdingAPI::Exposed::System::DateTimeRawInfo, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102BD30))(result, raw, dtfi);
  }
  static inline bool GetDayOfYM(ModdingAPI::Exposed::System::DateTimeResult result, ModdingAPI::Exposed::System::DateTimeRawInfo raw, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, ModdingAPI::Exposed::System::DateTimeRawInfo, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102BE30))(result, raw, dtfi);
  }
  static inline void AdjustTimeMark(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, ModdingAPI::Exposed::System::DateTimeRawInfo raw) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, ModdingAPI::Exposed::System::DateTimeRawInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102BF30))(dtfi, raw);
  }
  static inline bool AdjustHour(int32_t hour, int32_t timeMark) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102BFB0))(hour, timeMark);
  }
  static inline bool GetTimeOfN(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, ModdingAPI::Exposed::System::DateTimeResult result, ModdingAPI::Exposed::System::DateTimeRawInfo raw) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, ModdingAPI::Exposed::System::DateTimeResult, ModdingAPI::Exposed::System::DateTimeRawInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102BFF0))(dtfi, result, raw);
  }
  static inline bool GetTimeOfNN(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, ModdingAPI::Exposed::System::DateTimeResult result, ModdingAPI::Exposed::System::DateTimeRawInfo raw) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, ModdingAPI::Exposed::System::DateTimeResult, ModdingAPI::Exposed::System::DateTimeRawInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102C0C0))(dtfi, result, raw);
  }
  static inline bool GetTimeOfNNN(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, ModdingAPI::Exposed::System::DateTimeResult result, ModdingAPI::Exposed::System::DateTimeRawInfo raw) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, ModdingAPI::Exposed::System::DateTimeResult, ModdingAPI::Exposed::System::DateTimeRawInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102C190))(dtfi, result, raw);
  }
  static inline bool GetDateOfDSN(ModdingAPI::Exposed::System::DateTimeResult result, ModdingAPI::Exposed::System::DateTimeRawInfo raw) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, ModdingAPI::Exposed::System::DateTimeRawInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102C270))(result, raw);
  }
  static inline bool GetDateOfNDS(ModdingAPI::Exposed::System::DateTimeResult result, ModdingAPI::Exposed::System::DateTimeRawInfo raw) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, ModdingAPI::Exposed::System::DateTimeRawInfo)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102C340))(result, raw);
  }
  static inline bool GetDateOfNNDS(ModdingAPI::Exposed::System::DateTimeResult result, ModdingAPI::Exposed::System::DateTimeRawInfo raw, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, ModdingAPI::Exposed::System::DateTimeRawInfo, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102C440))(result, raw, dtfi);
  }
  static inline bool ProcessDateTimeSuffix(ModdingAPI::Exposed::System::DateTimeResult result, ModdingAPI::Exposed::System::DateTimeRawInfo raw, ModdingAPI::Exposed::System::DateTimeToken dtok) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, ModdingAPI::Exposed::System::DateTimeRawInfo, ModdingAPI::Exposed::System::DateTimeToken)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102C6E0))(result, raw, dtok);
  }
  static inline bool ProcessHebrewTerminalState(int32_t dps, ModdingAPI::Exposed::System::DateTimeResult result, int32_t styles, ModdingAPI::Exposed::System::DateTimeRawInfo raw, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, ModdingAPI::Exposed::System::DateTimeResult, int32_t, ModdingAPI::Exposed::System::DateTimeRawInfo, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102C7C0))(dps, result, styles, raw, dtfi);
  }
  static inline bool ProcessTerminaltState(int32_t dps, ModdingAPI::Exposed::System::DateTimeResult result, int32_t styles, ModdingAPI::Exposed::System::DateTimeRawInfo raw, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, ModdingAPI::Exposed::System::DateTimeResult, int32_t, ModdingAPI::Exposed::System::DateTimeRawInfo, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102CCB0))(dps, result, styles, raw, dtfi);
  }
  static inline ModdingAPI::Exposed::System::DateTime Parse(System_String* s, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t styles) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102D310))(s, dtfi, styles);
  }
  static inline ModdingAPI::Exposed::System::DateTime Parse(System_String* s, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t styles, ModdingAPI::Exposed::System::TimeSpan offset) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t, ModdingAPI::Exposed::System::TimeSpan)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102D460))(s, dtfi, styles, offset);
  }
  static inline bool TryParse(System_String* s, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t styles, ModdingAPI::Exposed::System::DateTime result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t, ModdingAPI::Exposed::System::DateTime)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102D5D0))(s, dtfi, styles, result);
  }
  static inline bool TryParse(System_String* s, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t styles, ModdingAPI::Exposed::System::DateTime result, ModdingAPI::Exposed::System::TimeSpan offset) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t, ModdingAPI::Exposed::System::DateTime, ModdingAPI::Exposed::System::TimeSpan)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102D730))(s, dtfi, styles, result, offset);
  }
  static inline bool TryParse(System_String* s, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t styles, ModdingAPI::Exposed::System::DateTimeResult result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t, ModdingAPI::Exposed::System::DateTimeResult)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102D8E0))(s, dtfi, styles, result);
  }
  static inline bool DetermineTimeZoneAdjustments(ModdingAPI::Exposed::System::DateTimeResult result, int32_t styles, bool bTimeOnly) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102E260))(result, styles, bTimeOnly);
  }
  static inline bool DateTimeOffsetTimeZonePostProcessing(ModdingAPI::Exposed::System::DateTimeResult result, int32_t styles) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102E4C0))(result, styles);
  }
  static inline bool AdjustTimeZoneToUniversal(ModdingAPI::Exposed::System::DateTimeResult result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102E710))(result);
  }
  static inline bool AdjustTimeZoneToLocal(ModdingAPI::Exposed::System::DateTimeResult result, bool bTimeOnly) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102E810))(result, bTimeOnly);
  }
  static inline bool ParseISO8601(ModdingAPI::Exposed::System::DateTimeRawInfo raw, ModdingAPI::Exposed::System::__DTString str, int32_t styles, ModdingAPI::Exposed::System::DateTimeResult result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeRawInfo, ModdingAPI::Exposed::System::__DTString, int32_t, ModdingAPI::Exposed::System::DateTimeResult)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102EAA0))(raw, str, styles, result);
  }
  static inline bool MatchHebrewDigits(ModdingAPI::Exposed::System::__DTString str, int32_t digitLen, int32_t number) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102F130))(str, digitLen, number);
  }
  static inline bool ParseDigits(ModdingAPI::Exposed::System::__DTString str, int32_t digitLen, int32_t result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102F260))(str, digitLen, result);
  }
  static inline bool ParseDigits(ModdingAPI::Exposed::System::__DTString str, int32_t minDigitLen, int32_t maxDigitLen, int32_t result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102F350))(str, minDigitLen, maxDigitLen, result);
  }
  static inline bool ParseFractionExact(ModdingAPI::Exposed::System::__DTString str, int32_t maxDigitLen, double result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, int32_t, double)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102F400))(str, maxDigitLen, result);
  }
  static inline bool ParseSign(ModdingAPI::Exposed::System::__DTString str, bool result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102F5A0))(str, result);
  }
  static inline bool ParseTimeZoneOffset(ModdingAPI::Exposed::System::__DTString str, int32_t len, ModdingAPI::Exposed::System::TimeSpan result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, int32_t, ModdingAPI::Exposed::System::TimeSpan)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102F630))(str, len, result);
  }
  static inline bool MatchAbbreviatedMonthName(ModdingAPI::Exposed::System::__DTString str, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102FAA0))(str, dtfi, result);
  }
  static inline bool MatchMonthName(ModdingAPI::Exposed::System::__DTString str, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x102FD10))(str, dtfi, result);
  }
  static inline bool MatchAbbreviatedDayName(ModdingAPI::Exposed::System::__DTString str, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1030020))(str, dtfi, result);
  }
  static inline bool MatchDayName(ModdingAPI::Exposed::System::__DTString str, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1030120))(str, dtfi, result);
  }
  static inline bool MatchEraName(ModdingAPI::Exposed::System::__DTString str, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1030220))(str, dtfi, result);
  }
  static inline bool MatchTimeMark(ModdingAPI::Exposed::System::__DTString str, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10303C0))(str, dtfi, result);
  }
  static inline bool MatchAbbreviatedTimeMark(ModdingAPI::Exposed::System::__DTString str, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, int32_t result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10305A0))(str, dtfi, result);
  }
  static inline bool CheckNewValue(int32_t currentValue, int32_t newValue, wchar_t patternChar, ModdingAPI::Exposed::System::DateTimeResult result) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, wchar_t, ModdingAPI::Exposed::System::DateTimeResult)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10306A0))(currentValue, newValue, patternChar, result);
  }
  static inline ModdingAPI::Exposed::System::DateTime GetDateTimeNow(ModdingAPI::Exposed::System::DateTimeResult result, int32_t styles) {
    return reinterpret_cast<ModdingAPI::Exposed::System::DateTime(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1030780))(result, styles);
  }
  static inline bool CheckDefaultDateTime(ModdingAPI::Exposed::System::DateTimeResult result, ModdingAPI::Exposed::System::Globalization::Calendar* cal, int32_t styles) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult, ModdingAPI::Exposed::System::Globalization::Calendar*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10308E0))(result, cal, styles);
  }
  static inline System_String* ExpandPredefinedFormat(System_String* format, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, ModdingAPI::Exposed::System::ParsingInfo parseInfo, ModdingAPI::Exposed::System::DateTimeResult result) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, ModdingAPI::Exposed::System::ParsingInfo, ModdingAPI::Exposed::System::DateTimeResult)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1030B40))(format, dtfi, parseInfo, result);
  }
  static inline bool ParseByFormat(ModdingAPI::Exposed::System::__DTString str, ModdingAPI::Exposed::System::__DTString format, ModdingAPI::Exposed::System::ParsingInfo parseInfo, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, ModdingAPI::Exposed::System::DateTimeResult result) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::System::__DTString, ModdingAPI::Exposed::System::__DTString, ModdingAPI::Exposed::System::ParsingInfo, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, ModdingAPI::Exposed::System::DateTimeResult)>(Helpers::Memory::GetInstance().MakeAbsolute(0x1030F50))(str, format, parseInfo, dtfi, result);
  }
  static inline bool TryParseQuoteString(System_String* format, int32_t pos, ModdingAPI::Exposed::System::Text::StringBuilder* result, int32_t returnValue) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, int32_t, ModdingAPI::Exposed::System::Text::StringBuilder*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10320D0))(format, pos, result, returnValue);
  }
  static inline bool DoStrictParse(System_String* s, System_String* formatParam, int32_t styles, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo* dtfi, ModdingAPI::Exposed::System::DateTimeResult result) {
    return reinterpret_cast<bool(__fastcall*)(System_String*, System_String*, int32_t, ModdingAPI::Exposed::System::Globalization::DateTimeFormatInfo*, ModdingAPI::Exposed::System::DateTimeResult)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10321B0))(s, formatParam, styles, dtfi, result);
  }
  static inline ModdingAPI::Exposed::System::Exception* GetDateTimeParseException(ModdingAPI::Exposed::System::DateTimeResult result) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Exception*(__fastcall*)(ModdingAPI::Exposed::System::DateTimeResult)>(Helpers::Memory::GetInstance().MakeAbsolute(0x10327D0))(result);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x1032C10))();
  }
};
}