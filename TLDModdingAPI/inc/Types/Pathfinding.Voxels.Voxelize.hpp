// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"
#include "ModdingAPI.Exposed.UnityEngine.Bounds.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Vector3.hpp"
#include "ModdingAPI.Exposed.Pathfinding.Voxels.VoxelMesh.hpp"
#include "ModdingAPI.Exposed.UnityEngine.Color.hpp"
#include "ModdingAPI::Exposed::Pathfinding::Voxels::VoxelContour.hpp"
#include "ModdingAPI::Exposed::UnityEngine::Bounds.hpp"


namespace ModdingAPI::Exposed::Pathfinding::Voxels {
struct __Voxelize_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* intArrCache;
  ModdingAPI::Exposed::System::Int32_array* emptyArr;
};

struct __Voxelize_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __Voxelize_Il2CppClass {
  Il2CppClass_1 _1;
  __Voxelize_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __Voxelize_Il2CppVtbl vtbl;
};

class Voxelize {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C573F0;
  static inline    __Voxelize_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __Voxelize_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__Voxelize_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __Voxelize_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  ModdingAPI::Exposed::System::Collections::Generic::List_T_* inputExtraMeshes;
  ModdingAPI::Exposed::UnityEngine::Vector3_array* inputVertices;
  ModdingAPI::Exposed::System::Int32_array* inputTriangles;
  int32_t voxelWalkableClimb;
  uint32_t voxelWalkableHeight;
  float cellSize;
  float cellHeight;
  int32_t minRegionSize;
  int32_t borderSize;
  float maxEdgeLength;
  float maxSlope;
  int32_t relevantGraphSurfaceMode;
  ModdingAPI::Exposed::UnityEngine::Bounds forcedBounds;
  ModdingAPI::Exposed::Pathfinding::Voxels::VoxelArea* voxelArea;
  ModdingAPI::Exposed::Pathfinding::Voxels::VoxelContourSet* countourSet;
  int32_t width;
  int32_t depth;
  ModdingAPI::Exposed::UnityEngine::Vector3 voxelOffset;
  System_String* debugString;
  ModdingAPI::Exposed::UnityEngine::Vector3 cellScale;
  ModdingAPI::Exposed::UnityEngine::Vector3 cellScaleDivision;

  // Member methods:
  void BuildContours(float maxError, int32_t maxEdgeLength, ModdingAPI::Exposed::Pathfinding::Voxels::VoxelContourSet* cset, int32_t buildFlags) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, float, int32_t, ModdingAPI::Exposed::Pathfinding::Voxels::VoxelContourSet*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205ED70))(this, maxError, maxEdgeLength, cset, buildFlags);
  }
  void GetClosestIndices(ModdingAPI::Exposed::System::Int32_array* vertsa, int32_t nvertsa, ModdingAPI::Exposed::System::Int32_array* vertsb, int32_t nvertsb, int32_t ia, int32_t ib) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, ModdingAPI::Exposed::System::Int32_array*, int32_t, ModdingAPI::Exposed::System::Int32_array*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x205FDA0))(this, vertsa, nvertsa, vertsb, nvertsb, ia, ib);
  }
  void SimplifyContour(ModdingAPI::Exposed::System::Collections::Generic::List_T_* verts, ModdingAPI::Exposed::System::Collections::Generic::List_T_* simplified, float maxError, int32_t maxEdgeLenght, int32_t buildFlags) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, float, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2060920))(this, verts, simplified, maxError, maxEdgeLenght, buildFlags);
  }
  void WalkContour(int32_t x, int32_t z, int32_t i, ModdingAPI::Exposed::System::UInt16_array* flags, ModdingAPI::Exposed::System::Collections::Generic::List_T_* verts) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::UInt16_array*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20616F0))(this, x, z, i, flags, verts);
  }
  int32_t GetCornerHeight(int32_t x, int32_t z, int32_t i, int32_t dir, bool isBorderVertex) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, int32_t, int32_t, int32_t, int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2061F70))(this, x, z, i, dir, isBorderVertex);
  }
  void RemoveDegenerateSegments(ModdingAPI::Exposed::System::Collections::Generic::List_T_* simplified) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2062A60))(this, simplified);
  }
  int32_t CalcAreaOfPolygon2D(ModdingAPI::Exposed::System::Int32_array* verts, int32_t nverts) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, ModdingAPI::Exposed::System::Int32_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2062C40))(this, verts, nverts);
  }
  void BuildPolyMesh(ModdingAPI::Exposed::Pathfinding::Voxels::VoxelContourSet* cset, int32_t nvp, ModdingAPI::Exposed::Pathfinding::Voxels::VoxelMesh mesh) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, ModdingAPI::Exposed::Pathfinding::Voxels::VoxelContourSet*, int32_t, ModdingAPI::Exposed::Pathfinding::Voxels::VoxelMesh)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20640D0))(this, cset, nvp, mesh);
  }
  int32_t Triangulate(int32_t n, ModdingAPI::Exposed::System::Int32_array* verts, ModdingAPI::Exposed::System::Int32_array* indices, ModdingAPI::Exposed::System::Int32_array* tris) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, int32_t, ModdingAPI::Exposed::System::Int32_array*, ModdingAPI::Exposed::System::Int32_array*, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2064680))(this, n, verts, indices, tris);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 CompactSpanToVector(int32_t x, int32_t z, int32_t i) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2064F10))(this, x, z, i);
  }
  void VectorToIndex(ModdingAPI::Exposed::UnityEngine::Vector3 p, int32_t x, int32_t z) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, ModdingAPI::Exposed::UnityEngine::Vector3, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20650C0))(this, p, x, z);
  }
  void OnGUI() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2065240))(this);
  }
  void ::ctor(float ch, float cs, float wc, float wh, float ms) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, float, float, float, float, float)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2065370))(this, ch, cs, wc, wh, ms);
  }
  void CollectMeshes() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20654F0))(this);
  }
  void Init() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2065590))(this);
  }
  void VoxelizeInput() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20657C0))(this);
  }
  void DebugDrawSpans() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2067010))(this);
  }
  void DebugDrawCompactSpans() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2067450))(this);
  }
  void BuildCompactField() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2067910))(this);
  }
  void BuildVoxelConnections() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2067E40))(this);
  }
  void DrawLine(int32_t a, int32_t b, ModdingAPI::Exposed::System::Int32_array* indices, ModdingAPI::Exposed::System::Int32_array* verts, ModdingAPI::Exposed::UnityEngine::Color col) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, int32_t, int32_t, ModdingAPI::Exposed::System::Int32_array*, ModdingAPI::Exposed::System::Int32_array*, ModdingAPI::Exposed::UnityEngine::Color)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2068320))(this, a, b, indices, verts, col);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 ConvertPos(int32_t x, int32_t y, int32_t z) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20685B0))(this, x, y, z);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 ConvertPosCorrZ(int32_t x, int32_t y, int32_t z) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2068740))(this, x, y, z);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 ConvertPosWithoutOffset(int32_t x, int32_t y, int32_t z) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20688B0))(this, x, y, z);
  }
  ModdingAPI::Exposed::UnityEngine::Vector3 ConvertPosition(int32_t x, int32_t z, int32_t i) {
    return reinterpret_cast<ModdingAPI::Exposed::UnityEngine::Vector3(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, int32_t, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2068A30))(this, x, z, i);
  }
  void ErodeWalkableArea(int32_t radius) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2068BF0))(this, radius);
  }
  void BuildDistanceField() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2068D90))(this);
  }
  void ErodeVoxels(int32_t radius) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2068F20))(this, radius);
  }
  void FilterLowHeightSpans(uint32_t voxelWalkableHeight, float cs, float ch, ModdingAPI::Exposed::UnityEngine::Vector3 min) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, uint32_t, float, float, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2069250))(this, voxelWalkableHeight, cs, ch, min);
  }
  void FilterLedges(uint32_t voxelWalkableHeight, int32_t voxelWalkableClimb, float cs, float ch, ModdingAPI::Exposed::UnityEngine::Vector3 min) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, uint32_t, int32_t, float, float, ModdingAPI::Exposed::UnityEngine::Vector3)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20693B0))(this, voxelWalkableHeight, voxelWalkableClimb, cs, ch, min);
  }
  ModdingAPI::Exposed::System::UInt16_array* ExpandRegions(int32_t maxIterations, uint32_t level, ModdingAPI::Exposed::System::UInt16_array* srcReg, ModdingAPI::Exposed::System::UInt16_array* srcDist, ModdingAPI::Exposed::System::UInt16_array* dstReg, ModdingAPI::Exposed::System::UInt16_array* dstDist, ModdingAPI::Exposed::System::Collections::Generic::List_T_* stack) {
    return reinterpret_cast<ModdingAPI::Exposed::System::UInt16_array*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, int32_t, uint32_t, ModdingAPI::Exposed::System::UInt16_array*, ModdingAPI::Exposed::System::UInt16_array*, ModdingAPI::Exposed::System::UInt16_array*, ModdingAPI::Exposed::System::UInt16_array*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20699A0))(this, maxIterations, level, srcReg, srcDist, dstReg, dstDist, stack);
  }
  bool FloodRegion(int32_t x, int32_t z, int32_t i, uint32_t level, uint16_t r, ModdingAPI::Exposed::System::UInt16_array* srcReg, ModdingAPI::Exposed::System::UInt16_array* srcDist, ModdingAPI::Exposed::System::Collections::Generic::List_T_* stack) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, int32_t, int32_t, int32_t, uint32_t, uint16_t, ModdingAPI::Exposed::System::UInt16_array*, ModdingAPI::Exposed::System::UInt16_array*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x206A2D0))(this, x, z, i, level, r, srcReg, srcDist, stack);
  }
  void MarkRectWithRegion(int32_t minx, int32_t maxx, int32_t minz, int32_t maxz, uint16_t region, ModdingAPI::Exposed::System::UInt16_array* srcReg) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, int32_t, int32_t, int32_t, int32_t, uint16_t, ModdingAPI::Exposed::System::UInt16_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x206AF20))(this, minx, maxx, minz, maxz, region, srcReg);
  }
  uint16_t CalculateDistanceField(ModdingAPI::Exposed::System::UInt16_array* src) {
    return reinterpret_cast<uint16_t(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, ModdingAPI::Exposed::System::UInt16_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x206B0C0))(this, src);
  }
  ModdingAPI::Exposed::System::UInt16_array* BoxBlur(ModdingAPI::Exposed::System::UInt16_array* src, ModdingAPI::Exposed::System::UInt16_array* dst) {
    return reinterpret_cast<ModdingAPI::Exposed::System::UInt16_array*(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, ModdingAPI::Exposed::System::UInt16_array*, ModdingAPI::Exposed::System::UInt16_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x206C1C0))(this, src, dst);
  }
  void FloodOnes(ModdingAPI::Exposed::System::Collections::Generic::List_T_* st1, ModdingAPI::Exposed::System::UInt16_array* regs, uint32_t level, uint16_t reg) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::System::UInt16_array*, uint32_t, uint16_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x206C710))(this, st1, regs, level, reg);
  }
  void BuildRegions() {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x206CAD0))(this);
  }
  void FilterSmallRegions(ModdingAPI::Exposed::System::UInt16_array* reg, int32_t minRegionSize, int32_t maxRegions) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::Voxelize*, ModdingAPI::Exposed::System::UInt16_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x206D360))(this, reg, minRegionSize, maxRegions);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*> intArrCache = __CppStaticProperty<ModdingAPI::Exposed::System::Collections::Generic::List_T_*>(
   []() { return &GetStaticClassInstance()->pStaticFields->intArrCache; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*> emptyArr = __CppStaticProperty<ModdingAPI::Exposed::System::Int32_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->emptyArr; }
  );

  // Static methods:
  static inline void ReleaseIntArr(ModdingAPI::Exposed::System::Int32_array* arr) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2060090))(arr);
  }
  static inline ModdingAPI::Exposed::System::Int32_array* ClaimIntArr(int32_t minCapacity, bool zero) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Int32_array*(__fastcall*)(int32_t, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2060160))(minCapacity, zero);
  }
  static inline void ReleaseContours(ModdingAPI::Exposed::Pathfinding::Voxels::VoxelContourSet* cset) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::VoxelContourSet*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2060350))(cset);
  }
  static inline bool MergeContours(ModdingAPI::Exposed::Pathfinding::Voxels::VoxelContour ca, ModdingAPI::Exposed::Pathfinding::Voxels::VoxelContour cb, int32_t ia, int32_t ib) {
    return reinterpret_cast<bool(__fastcall*)(ModdingAPI::Exposed::Pathfinding::Voxels::VoxelContour, ModdingAPI::Exposed::Pathfinding::Voxels::VoxelContour, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2060480))(ca, cb, ia, ib);
  }
  static inline bool Ileft(int32_t a, int32_t b, int32_t c, ModdingAPI::Exposed::System::Int32_array* va, ModdingAPI::Exposed::System::Int32_array* vb, ModdingAPI::Exposed::System::Int32_array* vc) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::Int32_array*, ModdingAPI::Exposed::System::Int32_array*, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2062D80))(a, b, c, va, vb, vc);
  }
  static inline bool Diagonal(int32_t i, int32_t j, int32_t n, ModdingAPI::Exposed::System::Int32_array* verts, ModdingAPI::Exposed::System::Int32_array* indices) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::Int32_array*, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2062F10))(i, j, n, verts, indices);
  }
  static inline bool InCone(int32_t i, int32_t j, int32_t n, ModdingAPI::Exposed::System::Int32_array* verts, ModdingAPI::Exposed::System::Int32_array* indices) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::Int32_array*, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2063030))(i, j, n, verts, indices);
  }
  static inline bool Left(int32_t a, int32_t b, int32_t c, ModdingAPI::Exposed::System::Int32_array* verts) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20632C0))(a, b, c, verts);
  }
  static inline bool LeftOn(int32_t a, int32_t b, int32_t c, ModdingAPI::Exposed::System::Int32_array* verts) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20633A0))(a, b, c, verts);
  }
  static inline bool Collinear(int32_t a, int32_t b, int32_t c, ModdingAPI::Exposed::System::Int32_array* verts) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2063480))(a, b, c, verts);
  }
  static inline int32_t Area2(int32_t a, int32_t b, int32_t c, ModdingAPI::Exposed::System::Int32_array* verts) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2063560))(a, b, c, verts);
  }
  static inline bool Diagonalie(int32_t i, int32_t j, int32_t n, ModdingAPI::Exposed::System::Int32_array* verts, ModdingAPI::Exposed::System::Int32_array* indices) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::Int32_array*, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20636B0))(i, j, n, verts, indices);
  }
  static inline bool Xorb(bool x, bool y) {
    return reinterpret_cast<bool(__fastcall*)(bool, bool)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20639C0))(x, y);
  }
  static inline bool IntersectProp(int32_t a, int32_t b, int32_t c, int32_t d, ModdingAPI::Exposed::System::Int32_array* verts) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20639D0))(a, b, c, d, verts);
  }
  static inline bool Between(int32_t a, int32_t b, int32_t c, ModdingAPI::Exposed::System::Int32_array* verts) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2063C30))(a, b, c, verts);
  }
  static inline bool Intersect(int32_t a, int32_t b, int32_t c, int32_t d, ModdingAPI::Exposed::System::Int32_array* verts) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, int32_t, int32_t, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2063E40))(a, b, c, d, verts);
  }
  static inline bool Vequal(int32_t a, int32_t b, ModdingAPI::Exposed::System::Int32_array* verts) {
    return reinterpret_cast<bool(__fastcall*)(int32_t, int32_t, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x2064010))(a, b, verts);
  }
  static inline int32_t Prev(int32_t i, int32_t n) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20640B0))(i, n);
  }
  static inline int32_t Next(int32_t i, int32_t n) {
    return reinterpret_cast<int32_t(__fastcall*)(int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x20640C0))(i, n);
  }
  static inline void CollectMeshes(ModdingAPI::Exposed::System::Collections::Generic::List_T_* extraMeshes, ModdingAPI::Exposed::UnityEngine::Bounds bounds, ModdingAPI::Exposed::UnityEngine::Vector3_array* verts, ModdingAPI::Exposed::System::Int32_array* tris) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Collections::Generic::List_T_*, ModdingAPI::Exposed::UnityEngine::Bounds, ModdingAPI::Exposed::UnityEngine::Vector3_array*, ModdingAPI::Exposed::System::Int32_array*)>(Helpers::Memory::GetInstance().MakeAbsolute(0xA498D0))(extraMeshes, bounds, verts, tris);
  }
  static inline int32_t union_find_find(ModdingAPI::Exposed::System::Int32_array* arr, int32_t x) {
    return reinterpret_cast<int32_t(__fastcall*)(ModdingAPI::Exposed::System::Int32_array*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x206D0E0))(arr, x);
  }
  static inline void union_find_union(ModdingAPI::Exposed::System::Int32_array* arr, int32_t a, int32_t b) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Int32_array*, int32_t, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x206D1E0))(arr, a, b);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x206DFB0))();
  }
};
}