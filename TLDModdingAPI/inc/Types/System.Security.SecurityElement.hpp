// clang-format off
//
//   BSD 4-Clause License
//
//   Copyright (c) 2020 Berkay Yigit <berkaytgy@gmail.com>
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//   3. All advertising materials mentioning features or use of this software
//      must display the following acknowledgement:
//      This product includes software developed by Berkay Yigit.
//      To support the developer, please donate to:
//      "https://www.paypal.me/berkayylmao".
//   4. Neither the name of "berkayylmao's The Long Dark Mods" nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//
//   THIS SOFTWARE IS PROVIDED BY Berkay Yigit ''AS IS'' AND  ANY EXPRESS OR
//   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//   IN NO EVENT SHALL Berkay Yigit BE LIABLE FOR ANY DIRECT, INDIRECT,
//   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
//   BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// clang-format on

/*
 * Generated by Il2CppTypeDumper (by berkayylmao) on 10:43 02/05/2020 UTC.
 * MIT License
 * Copyright(c) 2020 Berkay Yigit <berkaytgy@gmail.com>
 *
 * A fork of Il2CppDumper (by Perfare)
 * Il2CppDumper license:
 *   MIT License
 *   Copyright(c) 2016 Perfare
 */

#pragma once
#include "Il2CppBase.h"


namespace ModdingAPI::Exposed::System::Security {
struct __SecurityElement_Il2CppStaticFields {
  ModdingAPI::Exposed::System::Char_array* invalid_tag_chars;
  ModdingAPI::Exposed::System::Char_array* invalid_text_chars;
  ModdingAPI::Exposed::System::Char_array* invalid_attr_name_chars;
  ModdingAPI::Exposed::System::Char_array* invalid_attr_value_chars;
  ModdingAPI::Exposed::System::Char_array* invalid_chars;
};

struct __SecurityElement_Il2CppVtbl {
  VirtualInvokeData _0_Equals;
  VirtualInvokeData _1_Finalize;
  VirtualInvokeData _2_GetHashCode;
  VirtualInvokeData _3_ToString;
};

struct __SecurityElement_Il2CppClass {
  Il2CppClass_1 _1;
  __SecurityElement_Il2CppStaticFields* pStaticFields;
  Il2CppClass_2 _2;
  __SecurityElement_Il2CppVtbl vtbl;
};

class SecurityElement {
  static constexpr uint64_t                     _rvaClassInstance     = 0x3C48B38;
  static inline    __SecurityElement_Il2CppClass* _pStaticClassInstance = nullptr;

public:
// Static class getter:
  static inline __SecurityElement_Il2CppClass* GetStaticClassInstance() {
    while (!_pStaticClassInstance) {
      Sleep(100);
      auto* ppClassInstance = (__SecurityElement_Il2CppClass**)Helpers::Memory::GetInstance().MakeAbsolute(_rvaClassInstance);
      if (ppClassInstance)
        _pStaticClassInstance = *ppClassInstance;
    }
    return _pStaticClassInstance;
  }

  // Il2Cpp fields:
  __SecurityElement_Il2CppClass* __pClassInstance;
  void* __monitor;

  // Member fields:
  System_String* text;
  System_String* tag;
  ModdingAPI::Exposed::System::Collections::ArrayList* attributes;
  ModdingAPI::Exposed::System::Collections::ArrayList* children;

  // Member methods:
  void ::ctor(System_String* tag) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::SecurityElement*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x94A950))(this, tag);
  }
  void ::ctor(System_String* tag, System_String* text) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::SecurityElement*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x94A960))(this, tag, text);
  }
  ModdingAPI::Exposed::System::Collections::Hashtable* get_Attributes() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::Hashtable*(__fastcall*)(ModdingAPI::Exposed::System::Security::SecurityElement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x94AB60))(this);
  }
  ModdingAPI::Exposed::System::Collections::ArrayList* get_Children() {
    return reinterpret_cast<ModdingAPI::Exposed::System::Collections::ArrayList*(__fastcall*)(ModdingAPI::Exposed::System::Security::SecurityElement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x3110B0))(this);
  }
  System_String* get_Tag() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Security::SecurityElement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x335360))(this);
  }
  System_String* get_Text() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Security::SecurityElement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x311320))(this);
  }
  void set_Text(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::SecurityElement*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x94AEE0))(this, value);
  }
  void AddAttribute(System_String* name, System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::SecurityElement*, System_String*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x94B0C0))(this, name, value);
  }
  void AddChild(ModdingAPI::Exposed::System::Security::SecurityElement* child) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::SecurityElement*, ModdingAPI::Exposed::System::Security::SecurityElement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x94B3F0))(this, child);
  }
  ModdingAPI::Exposed::System::Security::SecurityElement* SearchForChildByTag(System_String* tag) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::SecurityElement*(__fastcall*)(ModdingAPI::Exposed::System::Security::SecurityElement*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x94C0C0))(this, tag);
  }
  System_String* ToString() {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Security::SecurityElement*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x94C260))(this);
  }
  void ToXml(ModdingAPI::Exposed::System::Text::StringBuilder* s, int32_t level) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::SecurityElement*, ModdingAPI::Exposed::System::Text::StringBuilder*, int32_t)>(Helpers::Memory::GetInstance().MakeAbsolute(0x94C400))(this, s, level);
  }
  ModdingAPI::Exposed::System::Security::SecurityElement::SecurityAttribute* GetAttribute(System_String* name) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::SecurityElement::SecurityAttribute*(__fastcall*)(ModdingAPI::Exposed::System::Security::SecurityElement*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x94C9A0))(this, name);
  }
  void set_m_strText(System_String* value) {
    reinterpret_cast<void(__fastcall*)(ModdingAPI::Exposed::System::Security::SecurityElement*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x30D060))(this, value);
  }
  System_String* SearchForTextOfLocalName(System_String* strLocalName) {
    return reinterpret_cast<System_String*(__fastcall*)(ModdingAPI::Exposed::System::Security::SecurityElement*, System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x94CBA0))(this, strLocalName);
  }

  // Static fields:
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*> invalid_tag_chars = __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->invalid_tag_chars; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*> invalid_text_chars = __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->invalid_text_chars; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*> invalid_attr_name_chars = __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->invalid_attr_name_chars; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*> invalid_attr_value_chars = __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->invalid_attr_value_chars; }
  );
  static inline __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*> invalid_chars = __CppStaticProperty<ModdingAPI::Exposed::System::Char_array*>(
   []() { return &GetStaticClassInstance()->pStaticFields->invalid_chars; }
  );

  // Static methods:
  static inline System_String* Escape(System_String* str) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x94B5B0))(str);
  }
  static inline System_String* Unescape(System_String* str) {
    return reinterpret_cast<System_String*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x94B8B0))(str);
  }
  static inline ModdingAPI::Exposed::System::Security::SecurityElement* FromString(System_String* xml) {
    return reinterpret_cast<ModdingAPI::Exposed::System::Security::SecurityElement*(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x94BB10))(xml);
  }
  static inline bool IsValidAttributeName(System_String* name) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x94BD40))(name);
  }
  static inline bool IsValidAttributeValue(System_String* value) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x94BE20))(value);
  }
  static inline bool IsValidTag(System_String* tag) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x94BF00))(tag);
  }
  static inline bool IsValidText(System_String* text) {
    return reinterpret_cast<bool(__fastcall*)(System_String*)>(Helpers::Memory::GetInstance().MakeAbsolute(0x94BFE0))(text);
  }
  static inline void ::cctor() {
    reinterpret_cast<void(__fastcall*)()>(Helpers::Memory::GetInstance().MakeAbsolute(0x94CE70))();
  }
};
}